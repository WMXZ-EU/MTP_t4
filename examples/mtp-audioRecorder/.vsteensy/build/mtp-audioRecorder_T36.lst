
.vsteensy/build/mtp-audioRecorder_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00015834 l    d  .fini	00000000 .fini
00015838 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff1618 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000e13c l     F .text	0000000c startup_default_early_hook
0000e148 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1618 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff161c l       .bss	00000000 object.8610
000157e4 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-audioRecorder.ino
000005d4 l     F .text	00000002 __tcf_0
00000884 l     F .text	00000074 logg(unsigned long, char const*) [clone .part.54]
00001b84 l     F .text	0000013c _GLOBAL__sub_I_audioShield
1fff3848 l     O .bss	00000400 acq_rx_buffer
1fff3d4c l     O .bss	00000002 front_
1fff3d50 l     O .bss	00000800 tdm_rx_buffer
00014cbc l     O .text	00000008 SGTL_ADDR
1fff097c l     O .data	00000014 mfile
20006a1e l     O .bss	00000002 rear_
20006a34 l     O .bss	00000004 check_filing(short)::to
20006a38 l     O .bss	00000004 logg(unsigned long, char const*)::to
00000000 l    df *ABS*	00000000 Storage.cpp
000020cc l     F .text	000000a0 File::invalidate() [clone .isra.1]
00002660 l     F .text	00000084 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]
00003ae8 l     F .text	00000036 MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]
00003b20 l     F .text	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]
0000434c l     F .text	000000b2 MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]
00004efc l     F .text	00000a4c mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]
00000000 l    df *ABS*	00000000 MTP.cpp
00005b9c l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00005ca8 l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00006eac l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
00014efc l     O .text	00000028 supported_op
00014f24 l     O .text	00000010 propertyList
00014f80 l     O .text	00000008 supported_events
00000000 l    df *ABS*	00000000 SPI.cpp
0000779c l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
00008024 l     F .text	00000018 refreshCache(long) [clone .part.0]
20006a44 l     O .bss	00000004 cacheTime
20006a48 l     O .bss	00000007 tm
20006a50 l     O .bss	00000004 sysTime
20006a54 l     O .bss	00000001 Status
20006a5c l     O .bss	00000004 prevMillis
1fff0a14 l     O .data	00000004 syncInterval
0001513c l     O .text	0000000c monthDays
20006a60 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 output_pwm.cpp
000081bc l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
000081d4 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
000081ec l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_adat.cpp
00008204 l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_adc.cpp
0000821c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 control_sgtl5000.cpp
00000000 l    df *ABS*	00000000 output_dac.cpp
00008674 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 input_adcs.cpp
0000868c l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
000086bc l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_dacs.cpp
000086d4 l     F .text	00000018 _GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
000086ec l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00008704 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
0000871c l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00008734 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
0000874c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 input_pdm.cpp
00008764 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
0000877c l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
00008794 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
00008a94 l       .text	00000000 L_1373_delayMicroseconds
00008aa2 l       .text	00000000 L_1387_delayMicroseconds
00008ae8 l       .text	00000000 L_1438_delayMicroseconds
00008e1e l       .text	00000000 L_2952_delayMicroseconds
20006af4 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 FsCache.cpp
00008e64 l     F .text	00000046 FsCache::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
000098d0 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
00009904 l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
0000a780 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.38]
0000a8a0 l     F .text	00000094 FatFile::sync() [clone .part.42]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
0000b888 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
0000c4c8 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]
0000c4e0 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000cdd0 l     F .text	00000018 isBusyCommandComplete()
0000cde8 l     F .text	00000010 isBusyCommandInhibit()
0000cdf8 l     F .text	00000014 isBusyDat()
0000ce0c l     F .text	0000000c isBusyDMA()
0000ce18 l     F .text	00000014 isBusyFifoRead()
0000ce2c l     F .text	00000014 isBusyFifoWrite()
0000ce40 l     F .text	00000018 isBusyTransferComplete()
0000cebc l     F .text	00000028 waitTimeout(bool (*)())
0000cee4 l     F .text	0000004c yieldTimeout(bool (*)())
0000cf60 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
0000cfbc l     F .text	0000002c isBusyCMD13()
0000d008 l     F .text	00000020 waitDmaStatus() [clone .part.4]
0000d028 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
0000d234 l     F .text	00000058 waitTransferComplete() [clone .part.8]
20006b08 l     O .bss	00000001 m_version2
20006b0c l     O .bss	00000010 m_cid
20006b1c l     O .bss	00000004 m_busyFcn
20006b20 l     O .bss	00000001 m_highCapacity
20006b24 l     O .bss	00000004 m_ocr
20006b28 l     O .bss	00000004 m_rca
20006b2c l     O .bss	00000001 m_transferActive
20006b30 l     O .bss	00000004 m_irqstat
1fff0b5c l     O .data	00000001 m_errorCode
20006b34 l     O .bss	00000001 m_initDone
20006b38 l     O .bss	00000010 m_csd
20006b48 l     O .bss	00000001 m_dmaBusy
20006b4c l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 SD.cpp
0000db2c l     F .text	00000064 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
20007009 l     O .bss	00000001 tx_noautoflush
2000700c l     O .bss	00000004 tx_packet
20007010 l     O .bss	00000001 transmit_previous_timeout
20007014 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
20007019 l     O .bss	00000001 calibrating
1fff0b5d l     O .data	00000001 analog_config_bits
2000701a l     O .bss	00000001 analog_reference_internal
1fff0b5e l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0b64 l     O .data	00000012 device_descriptor
1fff0b90 l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pins_teensy.c
0000e608 l     F .text	0000004c digitalWrite.part.1
0000e654 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c50 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
20007020 l     O .bss	00000004 ep0_tx_ptr
20007024 l     O .bss	00000018 rx_last
2000703c l     O .bss	00000002 ep0_tx_len
20007040 l     O .bss	00000040 ep0_rx0_buf
20007080 l     O .bss	00000018 rx_first
20007098 l     O .bss	00000001 ep0_tx_data_toggle
2000709c l     O .bss	00000040 ep0_rx1_buf
200070dc l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
200070f4 l     O .bss	00000018 tx_last
2000710c l     O .bss	00000008 setup
20007114 l     O .bss	00000001 ep0_tx_bdt_bank
20007118 l     O .bss	00000008 reply_buffer
20007124 l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
2000712a l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 wf_fmod.c
00000000 l    df *ABS*	00000000 ef_fmod.c
00015544 l     O .text	00000008 Zero
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00015560 l     O .text	00000010 zeroes.7258
000155b0 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000130b4 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000130d4 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
000157c8 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff0c70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.15/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.15/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1618 l       .bss	00000000 __bss_start__
200071b8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000e134  w    F .text	00000006 adc0_isr
00002504 g     F .text	0000015c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
000011dc g     F .text	00000060 pushData(unsigned long*)
000103f0 g     F .text	0000002c .hidden __aeabi_dcmpun
0000ddb0 g     F .text	0000001c usb_serial_available
000103b4 g     F .text	00000012 .hidden __aeabi_dcmple
00011590 g     F .text	000000ba strcpy
000102f0 g     F .text	0000007a .hidden __cmpdf2
0000f960 g     F .text	000000c0 fmodf
0000d580 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000f49c  w    F .text	000000ec yield
20006a30 g     O .bss	00000004 acq_miss
0000b30c g     F .text	00000218 FatFile::write(void const*, unsigned int)
000102f0 g     F .text	0000007a .hidden __eqdf2
0000c4b4  w    F .text	00000002 SdSpiCard::~SdSpiCard()
0000f804 g     F .text	000000ba Print::printNumber64(unsigned long long, unsigned char, unsigned char)
000093a4 g     F .text	000003dc ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff3c48 g     O .bss	00000104 storage
1fff0b78 g     O .data	00000018 usb_string_manufacturer_name_default
20006a40 g     O .bss	00000004 tx_event_packet
0000b294 g     F .text	00000076 FatFile::truncate()
1fff0af0 g     O .data	0000006c Wire1
0000123c g     F .text	00000074 acq_isr()
00008318 g     F .text	0000006c AudioControlSGTL5000::micGain(unsigned int)
00002954 g     F .text	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
0000fe60 g     F .text	0000005a .hidden __floatdidf
1fff1638 g     O .bss	00000008 dma
0000e0ec  w    F .text	00000048 hard_fault_isr
0000e134  w    F .text	00000006 dma_ch6_isr
0000171c g     F .text	000000b4 do_logger(unsigned short, short)
20006af8 g     O .bss	00000004 FsDateTime::callback
0000f7b8 g     F .text	00000020 Print::println()
000088ec g     F .text	00000130 TwoWire::isr()
0000e134  w    F .text	00000006 uart0_lon_isr
000092a4 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00014034 g     F .text	00000100 fcvtbuf
0000ea5c g     F .text	00000084 usb_rx_memory
0000c498  w    F .text	00000004 SdSpiCard::errorCode() const
000004b0  w    F .text	0000000c File::flush()
0000823c g     F .text	00000084 AudioControlSGTL5000::read(unsigned int)
000076fc g     F .text	00000018 usb_init_events
0000e134  w    F .text	00000006 dma_ch8_isr
0001113c g     F .text	00000002 __malloc_unlock
00000630  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
20006b04 g     O .bss	00000004 FsVolume::m_cwv
0000ab68 g     F .text	000000be FatFile::open(FatFile*, char const*, int)
0000e00c g     F .text	000000e0 analog_init
0000eae0 g     F .text	00000084 usb_tx
0000e134  w    F .text	00000006 portcd_isr
00012f64 g     F .text	0000004a _vdprintf_r
00007dbc g     F .text	000000b0 SPIClass::setSCK(unsigned char)
00014c34  w    O .text	00000060 vtable for SDFile
00010fd4 g     F .text	000000c6 memmove
00003b50 g     F .text	00000046 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
20006aac g     O .bss	00000008 AudioOutputAnalogStereo::dma
0000d838 g     F .text	00000068 SdioCard::stopTransmission(bool)
000143e4 g     F .text	0000004c _Balloc
0000e134  w    F .text	00000006 can1_rx_warn_isr
0000774c g     F .text	0000002c MTPD::send_Event(unsigned short)
00001e8c  w    F .text	00000004 MTPStorage_SD::get_FSCount()
00015840 g       .ARM.exidx	00000000 __exidx_end
0000e134  w    F .text	00000006 dma_error_isr
0000b680 g     F .text	0000003c FatPartition::freeChain(unsigned long)
20007140 g     O .bss	00000001 EventResponder::runningFromYield
0000da74 g     F .text	0000001a SdSpiArduinoDriver::receive()
0000c68c g     F .text	00000096 SdSpiCard::cardCommand(unsigned char, unsigned long)
20006a1c g     O .bss	00000002 maxCount
00008e40 g     F .text	0000000c i2c0_isr
0000f78c g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
000102e0 g     F .text	0000008a .hidden __gtdf2
0000b8b0 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
000108b4 g     F .text	0000000c __errno
00000c94  w    F .text	00000026 SDFile::isDirectory()
0000e134  w    F .text	00000006 portd_isr
0000e134  w    F .text	00000006 enet_error_isr
000151a4 g     O .text	00000020 TwoWire::i2c2_hardware
00001498 g     F .text	00000088 makeFilename(char*)
00000ea4  w    F .text	00000028 File::~File()
20007130 g     O .bss	00000004 EventResponder::firstInterrupt
00006048 g     F .text	0000006e MTPD::GetObjectHandles(unsigned long, unsigned long)
0000c4b8  w    F .text	0000000e SdSpiCard::~SdSpiCard()
0000c224 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000e134  w    F .text	00000006 tpm1_isr
00009d60 g     F .text	00000018 ExFatPartition::rootLength()
0000c49c  w    F .text	00000004 SdSpiCard::errorData() const
0000f77c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00015310 g     O .text	00000200 digital_pin_to_info_PGM
200071b4 g     O .bss	00000004 errno
0000c938 g     F .text	0000004c SdSpiCard::readOCR(unsigned long*)
0000da90 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000be1c g     F .text	00000390 FatFile::open(FatFile*, fname_t*, int)
00009b54 g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
00015840 g       .ARM.exidx	00000000 _etext
00007ac8 g     F .text	00000134 _spi_dma_rxISR0()
1fff1618 g       .bss	00000000 _sbss
0000db1c g     F .text	00000006 sdCsInit(unsigned char)
0001037c g     F .text	00000010 .hidden __aeabi_cdcmple
0000ce64 g     F .text	0000000c SdioCard::errorData() const
00001ea0 g     F .text	0000000c MTPStorage_SD::totalSize(unsigned long)
00004cbc g     F .text	000000fe MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
0000d4b0 g     F .text	000000d0 SdioCard::writeSector(unsigned long, unsigned char const*)
0000e134  w    F .text	00000006 porte_isr
00001adc g     F .text	000000a8 loop
0000e134  w    F .text	00000006 portb_isr
0000e134  w    F .text	00000006 spi1_isr
00006534 g     F .text	00000144 MTPD::GetStorageInfo(unsigned long)
0000e134  w    F .text	00000006 uart3_status_isr
00009008 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000e134  w    F .text	00000006 mcm_isr
0000d608 g     F .text	000000cc SdioCard::readData(unsigned char*)
00008234  w    F .text	00000004 AudioControlSGTL5000::disable()
0000c5d0 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
00008b08 g     F .text	00000114 TwoWire::endTransmission(unsigned char)
20007134 g     O .bss	00000004 EventResponder::lastInterrupt
0000e134  w    F .text	00000006 uart1_status_isr
0000c29c g     F .text	00000028 FsBaseFile::close()
0000db90 g     F .text	000001a6 memcpy
0000e134  w    F .text	00000006 randnum_isr
0001036c g     F .text	00000020 .hidden __aeabi_cdrcmple
00000494  w    F .text	0000000c File::available()
00003b98 g     F .text	000007b4 MTPStorage_SD::removeFile(unsigned long, char*)
000032d0 g     F .text	00000816 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00001458 g     F .text	00000040 file_writeHeader()
00009b8c g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
00002c58 g     F .text	0000046c MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
0000ade4 g     F .text	0000002a FatFile::peek()
00011880 g     F .text	000016e4 _svfprintf_r
0000fdf0 g     F .text	00000022 .hidden __floatsidf
00000600  w    F .text	00000014 SDFile::whoami()
1fff1634  w    O .bss	00000001 SDFile::name()::zeroterm
2000701c g     O .bss	00000004 systick_millis_count
000102e8 g     F .text	00000082 .hidden __ltdf2
0000a38c g     F .text	000000aa ExFatFile::rename(ExFatFile*, char const*)
0000e0ec  w    F .text	00000048 bus_fault_isr
000009a8  w    F .text	00000044 SDFile::truncate(unsigned long long)
00008a1c g     F .text	000000ec TwoWire::wait_idle()
00007084 g     F .text	00000678 MTPD::loop()
0000e134  w    F .text	00000006 watchdog_isr
0001050c g     F .text	00000000 .hidden __aeabi_uldivmod
00008e4c g     F .text	0000000c i2c1_isr
20007120 g     O .bss	00000001 usb_configuration
0000e134  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
0000d920 g     F .text	0000002c SdioCard::syncDevice()
0000d318 g     F .text	0000009c SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00001424 g     F .text	00000034 makeHeader(char*)
20007141 g     O .bss	00000001 SPCRemulation::pinout
00000794  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
0000ae10 g     F .text	00000040 FatFile::readDirCache(bool)
00008e58 g     F .text	0000000c i2c2_isr
20006a8c g     O .bss	00000008 AudioOutputAnalog::dma
20006a20 g     O .bss	00000004 loop_count
1fff0b78  w    O .data	00000018 usb_string_manufacturer_name
200071a8 g     O .bss	0000000c usb_rx_byte_count_data
0000e134  w    F .text	00000006 pit1_isr
1fff0bfc g     O .data	00000008 usb_string_mtp
00010910 g     F .text	00000010 malloc
0000e134  w    F .text	00000006 dma_ch4_isr
00015184 g     O .text	00000020 TwoWire::i2c1_hardware
0000f8d0 g     F .text	00000084 software_isr
00001308 g     F .text	00000078 do_menu(short)
00014bb0  w    O .text	00000024 vtable for FsFile
0000e134  w    F .text	00000006 dma_ch7_isr
000087b8  w    F .text	0000001e TwoWire::read()
00007780  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
000156d8 g     O .text	000000c8 __mprec_tens
0000f3d8 g     F .text	000000c4 usb_init
20006a3c g     O .bss	00000004 sessionID_
0000c4b0  w    F .text	00000004 SdSpiCard::type() const
0000e134  w    F .text	00000006 lptmr_isr
00000e20  w    F .text	00000084 SDFile::seek(unsigned long long, int)
20007170 g     O .bss	00000004 __malloc_top_pad
0000e6d8 g     F .text	00000024 rtc_set
1fff09d4 g     O .data	00000040 SPI1
0000c504 g     F .text	0000007a SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000a438 g     F .text	000000e2 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
0000fdd0 g     F .text	0000001e .hidden __aeabi_ui2d
000143c8 g     F .text	0000001c _localeconv_r
1fff0978 g     O .data	00000004 sd_str
0000da2c g     F .text	00000048 SdSpiArduinoDriver::deactivate()
00014560 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
00015164 g     O .text	00000020 TwoWire::i2c0_hardware
1fff0974 g     O .data	00000004 t_on
0000e1b0 g     F .text	00000034 kinetis_hsrun_enable
0000050c  w    F .text	0000000c File::operator bool()
0001053c g     F .text	000002e2 .hidden __udivmoddi4
00006378 g     F .text	000001bc MTPD::getObjectPropValue(unsigned long, unsigned long)
0000fb4c g     F .text	00000000 .hidden __aeabi_drsub
0000a7b4 g     F .text	00000034 FatFile::addCluster()
00011520 g     F .text	00000024 _sbrk_r
0000c984 g     F .text	0000003e SdSpiCard::readRegister(unsigned char, void*)
0000cf40 g     F .text	00000020 SdioCard::type() const
00000488  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	00000200 ResetHandler
0000dd38 g     F .text	00000048 usb_serial_getchar
0000e134  w    F .text	00000006 can1_bus_off_isr
0000e134  w    F .text	00000006 ftm2_isr
0000095c  w    F .text	0000004c SDFile::name()
2000719c g     O .bss	00000008 usb_cdc_line_coding
0000e6fc g     F .text	0000000a digitalWrite
20007138 g     O .bss	00000004 EventResponder::lastYield
0000e134  w    F .text	00000006 uart5_status_isr
0000e134  w    F .text	00000006 lpuart0_status_isr
00008fe0 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
000152a0 g     O .text	00000006 usb_endpoint_config_table
0000e134  w    F .text	00000006 dma_ch9_isr
00000804  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000e134  w    F .text	00000006 pit2_isr
000103a0 g     F .text	00000012 .hidden __aeabi_dcmplt
000150e0 g     O .text	0000005c SPISettings::ctar_clock_table
2000716c g     O .bss	00000004 __malloc_max_sbrked_mem
00000bf8  w    F .text	0000001a SDFile::position()
0000e708 g     F .text	0000000a pinMode
0000cc84 g     F .text	00000042 SdSpiCard::writeStop()
000030c4 g     F .text	00000160 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
0000e9a8 g     F .text	0000004c usb_free
0000e134  w    F .text	00000006 i2c3_isr
0000fe14 g     F .text	0000003a .hidden __extendsfdf2
00010110 g     F .text	000001d0 .hidden __aeabi_ddiv
0000fb58 g     F .text	00000276 .hidden __adddf3
1fff0a18 g     O .data	0000006c Wire2
0000630c g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00005c00 g     F .text	000000a8 MTPD::writestring(char const*)
0000cd1c g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000004a0  w    F .text	00000010 File::peek()
0000b6bc g     F .text	000000b0 FatPartition::freeClusterCount()
00000cbc  w    F .text	000000d0 SDClass::open(char const*, unsigned char)
00015838 g       .ARM.exidx	00000000 __exidx_start
0000febc g     F .text	00000254 .hidden __aeabi_dmul
00000788  w    F .text	0000000c DMAChannel::~DMAChannel()
0000cb7c g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
0000e134  w    F .text	00000006 pit0_isr
1fff0c69 g     O .data	00000001 __fdlib_version
2000713c g     O .bss	00000004 EventResponder::firstYield
0001554c g     O .text	00000004 _global_impure_ptr
00001eb8 g     F .text	00000080 MTPStorage_SD::write(char const*, unsigned long)
0000e134  w    F .text	00000006 can1_error_isr
00000850  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
00011140 g     F .text	000003de _realloc_r
00000c30  w    F .text	00000018 SDFile::read(void*, unsigned int)
000108c0 g     F .text	00000050 __libc_init_array
200071b8 g       .bss	00000000 __bss_end
0000e2b4 g     F .text	00000354 dtostrf
00000a88  w    F .text	00000044 SDFile::rewindDirectory()
000087ac  w    F .text	0000000c TwoWire::available()
0000e134  w    F .text	00000006 can0_wakeup_isr
00009880 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000ce70 g     F .text	0000001c SdioCard::readCID(CID*)
0000a170 g     F .text	000000e6 ExFatFile::addDirCluster()
0000e134  w    F .text	00000006 flash_cmd_isr
00004ec8 g     F .text	00000034 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
0000ccc8 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
000157a0 g     O .text	00000028 __mprec_bigtens
00008c1c g     F .text	00000224 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000f764  w    F .text	00000004 usb_serial_class::clear()
0000fdd0 g     F .text	0000001e .hidden __floatunsidf
0000e134  w    F .text	00000006 uart2_status_isr
0000e14c g     F .text	0000002c _sbrk
000147f4 g     F .text	00000042 __mcmp
00004414 g     F .text	000008a8 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
00014c94  w    O .text	00000028 vtable for SDClass
20006ac4 g     O .bss	00000008 AudioOutputTDM::dma
000005c0  w    F .text	00000012 SDFile::operator bool()
1fff0b60 g     O .data	00000004 __brkval
20007018 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001888 g     F .text	00000218 acq_init(long)
0000dfc4 g     F .text	00000048 usb_serial_flush_callback
000157d4 g     F .text	00000000 _init
0000a880 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
1fff3d4e g     O .bss	00000002 state
0000e134  w    F .text	00000006 svcall_isr
000008f8  w    F .text	00000062 SDClass::remove(char const*)
00000614  w    F .text	0000001c SDFile::close()
0000e134  w    F .text	00000006 dma_ch15_isr
00000fd8  w    F .text	0000005c SDFile::~SDFile()
0001046c g     F .text	0000009e .hidden __aeabi_d2f
0000813c g     F .text	00000020 day()
000151c4 g     O .text	00000024 vtable for TwoWire
0000e134  w    F .text	00000006 uart1_error_isr
00014134 g     F .text	00000028 __libc_fini_array
0000e134  w    F .text	00000006 usbhs_phy_isr
0000d9dc g     F .text	00000050 SdSpiArduinoDriver::begin(SdSpiConfig)
20006a94 g     O .bss	00000008 AudioInputAnalogStereo::dma0
200071b8 g       .bss	00000000 _ebss
0000d428 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005d64 g     F .text	0000027c MTPD::WriteDescriptor()
1fff0990 g     O .data	00000004 propertyListNum
20006a7c g     O .bss	00000008 AudioOutputADAT::dma
00000d8c  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000144c4 g     F .text	00000040 __hi0bits
0001041c g     F .text	0000004e .hidden __fixdfsi
00001cc0 g     F .text	0000005c chipWrite(int, unsigned int, unsigned int)
0000a258 g     F .text	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
0000e134 g     F .text	00000006 unused_isr
00005fe0 g     F .text	00000068 MTPD::WriteStorageIDs()
0000e134  w    F .text	00000006 spi0_isr
0000e134  w    F .text	00000006 dma_ch3_isr
0000db28  w    F .text	00000002 SDClass::~SDClass()
00005948 g     F .text	00000214 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00000788  w    F .text	0000000c DMAChannel::~DMAChannel()
1fff1844 g     O .bss	00002000 diskBuffer
1fff4550 g     O .bss	000004b8 sdx
00000ea4  w    F .text	00000028 File::~File()
00001034 g     F .text	000001a8 storage_configure()
0000817c g     F .text	00000024 year()
0000f95c g     F .text	00000004 operator delete(void*, unsigned int)
0000e134  w    F .text	00000006 flash_error_isr
0000fb58 g     F .text	00000276 .hidden __aeabi_dadd
000102e8 g     F .text	00000082 .hidden __ledf2
0000e134  w    F .text	00000006 uart5_error_isr
0000e134  w    F .text	00000006 rtc_seconds_isr
0001504c g     O .text	00000094 SPIClass::spi0_hardware
0000e134  w    F .text	00000006 pdb_isr
000146a4 g     F .text	000000a0 __pow5mult
0000b024 g     F .text	0000005c FatFile::rmdir()
0000fe50 g     F .text	0000006a .hidden __aeabi_ul2d
0000e0ec  w    F .text	00000048 usage_fault_isr
0000e134  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
0000b5fc g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
0000e134  w    F .text	00000006 dma_ch14_isr
00000a3c  w    F .text	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
200071a4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000f754 g     F .text	00000010 systick_isr
0000e134  w    F .text	00000006 rtc_alarm_isr
0000052c  w    F .text	0000000c File::isDirectory()
0000c1ac g     F .text	00000076 FatFile::getSFN(char*)
0000cabc g     F .text	0000006c SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20007144 g     O .bss	00000004 AudioStream::first_update
0000e134  w    F .text	00000006 dma_ch2_isr
1fff0c58 g     O .data	00000010 Serial
0000e134  w    F .text	00000006 ftm1_isr
000004c8  w    F .text	00000016 File::seek(unsigned long long, int)
00015148 g     O .text	0000001c vtable for AudioControlSGTL5000
0000f784  w    F .text	00000006 usb_serial_class::write(unsigned char)
0000c344 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000e13c  w    F .text	0000000c startup_early_hook
0000cd50 g     F .text	00000064 SdSpiCard::writeSingle(unsigned long, unsigned char const*)
0000e134  w    F .text	00000006 dma_ch13_isr
00009e0c g     F .text	0000008c ExFatFile::addCluster()
00008238  w    F .text	00000004 AudioControlSGTL5000::inputLevel(float)
00014bd4  w    O .text	00000060 vtable for File
0000e134  w    F .text	00000006 uart2_error_isr
00000ba4  w    F .text	00000052 SDClass::usedSize()
0000dd80 g     F .text	00000030 usb_serial_peekchar
000103dc g     F .text	00000012 .hidden __aeabi_dcmpgt
0000216c g     F .text	00000002 mtp_yield()
00010ed0 g     F .text	00000000 memchr
0000b594 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
1fff0c38 g     O .data	00000016 usb_string_serial_number_default
0000e0ec g     F .text	00000048 fault_isr
000141f8 g     F .text	000001d0 _free_r
0000d28c g     F .text	0000008c SdioCard::readStop()
00008eac g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
000103c8 g     F .text	00000012 .hidden __aeabi_dcmpge
0000e134  w    F .text	00000006 usb_charge_isr
00004dbc g     F .text	0000010a MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000f774  w    F .text	00000004 usb_serial_class::flush()
0000e134  w    F .text	00000006 cmt_isr
0000fb54 g     F .text	0000027a .hidden __aeabi_dsub
0000b76c g     F .text	0000011a FatPartition::init(BlockDeviceInterface*, unsigned char)
0000e134  w    F .text	00000006 usbhs_isr
0000a954 g     F .text	0000014e FatFile::mkdir(FatFile*, fname_t*)
1fff1614 g     O .data	00000004 __malloc_sbrk_base
0000f76c  w    F .text	00000004 usb_serial_class::read()
0000e134  w    F .text	00000006 ftm3_isr
00000570  w    F .text	0000000c File::rewindDirectory()
0000e134  w    F .text	00000006 tsi0_isr
0000bc3c g     F .text	00000128 FatFile::remove()
0000fe50 g     F .text	0000006a .hidden __floatundidf
0000e178  w    F .text	00000002 __cxa_pure_virtual
00014744 g     F .text	000000ae __lshift
0000aaa4 g     F .text	000000c2 FatFile::mkdir(FatFile*, char const*, bool)
0000e134  w    F .text	00000006 spi2_isr
00009d78 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
20006a9c g     O .bss	00000008 AudioInputAnalogStereo::dma1
00014a08 g     F .text	00000100 __ssprint_r
00014b08 g     F .text	0000005e _vasnprintf_r
0000f954  w    F .text	00000002 serialEvent()
00008590  w    F .text	0000005c AudioControlSGTL5000::inputSelect(int)
20007099 g     O .bss	00000001 usb_reboot_timer
20006a64 g     O .bss	00000008 AudioOutputPWM::dma
00013010 g     F .text	000000a4 __register_exitproc
00009780 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
000116a0 g     F .text	0000002c strlcpy
000081a0 g     F .text	0000001c setSyncProvider(long (*)())
000117dc g     F .text	000000a0 strncmp
00001520 g     F .text	00000104 checkPath(unsigned short, char*)
0000a2b4 g     F .text	000000d6 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000ddcc g     F .text	00000038 usb_serial_flush_input
00009c0c g     F .text	00000072 ExFatPartition::freeClusterCount()
00002b44 g     F .text	00000064 MTPStorage_SD::ConstructFilename(int, char*, int)
00014574 g     F .text	00000130 __multiply
1fff3844 g     O .bss	00000004 acq_count
0000df0c g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
20007174 g     O .bss	00000028 __malloc_current_mallinfo
00008654  w    F .text	00000020 AudioControlSGTL5000::volume(float)
0001494c g     F .text	000000ba __d2b
2000714c g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
0000e134  w    F .text	00000006 can0_bus_off_isr
0000cf30  w    F .text	0000000e SdioCard::~SdioCard()
00001e90  w    F .text	00000008 MTPStorage_SD::get_FSName(unsigned long)
00008f30 g     F .text	000000ae ExFatFile::getName(char*, unsigned int)
000013e0 g     F .text	00000044 printTimestamp(unsigned long)
20007115 g     O .bss	00000001 usb_rx_memory_needed
0000d3b4 g     F .text	00000074 SdioCard::writeStart(unsigned long)
0000eb64 g     F .text	00000874 usb_isr
00010884 g     F .text	0000000c __cxa_atexit
000090cc g     F .text	000001a8 ExFatFile::read(void*, unsigned int)
0000fdf0 g     F .text	00000022 .hidden __aeabi_i2d
00000c48  w    F .text	00000018 SDFile::peek()
00008f0c g     F .text	0000000e FsCache::sync()
1fff0994 g     O .data	00000040 SPI
00010f70 g     F .text	00000062 memcmp
00015510  w    O .text	00000028 vtable for usb_serial_class
0000dab0 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
0000e134  w    F .text	00000006 uart3_error_isr
00006d7c g     F .text	0000007c MTPD::GetObject(unsigned long)
0000db24 g     F .text	00000004 sdCsWrite(unsigned char, bool)
00010820  w    F .text	00000002 .hidden __aeabi_ldiv0
00009f70 g     F .text	0000005a ExFatFile::rmdir()
20006ad4 g     O .bss	00000008 AudioInputI2SHex::dma
0000e134  w    F .text	00000006 porta_isr
00006678 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00010110 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
0000c9d4 g     F .text	00000098 SdSpiCard::sectorCount()
0000e134  w    F .text	00000006 low_voltage_isr
00001e9c g     F .text	00000004 MTPStorage_SD::has_directories(unsigned long)
1fff1208 g     O .data	00000408 __malloc_av_
0000e134  w    F .text	00000006 can0_error_isr
0000e7fc g     F .text	0000016c _init_Teensyduino_internal_
0000083c  w    F .text	00000014 SDFile::flush()
0000febc g     F .text	00000254 .hidden __muldf3
0000df6c g     F .text	00000058 usb_serial_flush_output
0000e134  w    F .text	00000006 dma_ch12_isr
20006a6c g     O .bss	00000008 AudioInputI2S::dma
00011138 g     F .text	00000002 __malloc_lock
0000fa20 g     F .text	0000011c __ieee754_fmodf
00000000  w      *UND*	00000000 __fini_array_start
0000b9f0 g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
0000e134  w    F .text	00000006 can1_wakeup_isr
00007714 g     F .text	00000038 usb_mtp_sendEvent
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000dac8 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00010824 g     F .text	0000005e _calloc_r
0000e134  w    F .text	00000006 pit3_isr
00007bfc g     F .text	0000007c SPIClass::begin()
00006df8 g     F .text	0000006e MTPD::read(char*, unsigned long)
20006a58 g     O .bss	00000004 getTimePtr
00001380 g     F .text	00000038 file_writeData(void*, unsigned long)
1fff0c54 g     O .data	00000001 yield_active_check_flags
0000e134  w    F .text	00000006 enet_rx_isr
0000a110 g     F .text	0000005e ExFatFile::sync()
0000ae50 g     F .text	000001d4 FatFile::rename(FatFile*, char const*)
0000d8a0 g     F .text	00000080 SdioCard::isBusy()
0000e134  w    F .text	00000006 portc_isr
0000cb28 g     F .text	00000038 SdSpiCard::readStop()
20006aa4 g     O .bss	00000008 AudioInputI2SQuad::dma
0001109c g     F .text	0000009a memset
000085ec g     F .text	00000066 AudioControlSGTL5000::volumeInteger(unsigned int)
0000f8c0 g     F .text	00000010 main
20006ae4 g     O .bss	00000008 AudioOutputI2S::dma
20007168 g     O .bss	00000004 __malloc_max_total_mem
00009930 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000803c g     F .text	000000a0 now()
0000a51c g     F .text	00000264 ExFatFile::write(void const*, unsigned int)
00014e3c g     O .text	00000060 vtable for MTPStorage_SD
00006ed8 g     F .text	00000132 MTPD::SendObjectInfo(unsigned long, unsigned long)
0001164c g     F .text	00000052 strlcat
0000e0ec  w    F .text	00000048 memmanage_fault_isr
00000dc8  w    F .text	00000058 SDFile::available()
00000500  w    F .text	0000000c File::close()
000082c0 g     F .text	00000058 AudioControlSGTL5000::write(unsigned int, unsigned int)
0000fb3c g     F .text	00000004 matherr
0000e1e4 g     F .text	00000084 usb_init_serialnumber
00001aa0 g     F .text	0000003c acq_check(short)
0001046c g     F .text	0000009e .hidden __truncdfsf2
00015834 g       .text	00000000 __init_array_end
00013200 g     F .text	00000e34 _dtoa_r
00010930 g     F .text	00000570 _malloc_r
20007164 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000e134  w    F .text	00000006 debugmonitor_isr
00012fc8 g     F .text	0000001a __ascii_wctomb
0000c224 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000fe60 g     F .text	0000005a .hidden __aeabi_l2d
20006b00 g     O .bss	00000004 FatVolume::m_cwv
20006abc g     O .bss	00000008 AudioInputI2SOct::dma
0000f68c g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00007e6c g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
60f29bfe g       *ABS*	00000000 __rtc_localtime
00008584 g     F .text	0000000c AudioControlSGTL5000::enable()
0000e714 g     F .text	00000048 micros
00000000  w      *UND*	00000000 __libc_fini
00000538  w    F .text	00000038 File::openNextFile(unsigned char)
0000e134  w    F .text	00000006 cmp1_isr
0000e134  w    F .text	00000006 ftm0_isr
00009fcc g     F .text	00000144 ExFatFile::syncDir()
0001415c g     F .text	0000009c _malloc_trim_r
1fff0c34 g     O .data	00000004 string0
0000de04 g     F .text	00000108 usb_serial_write
00001e70  w    F .text	0000001a MTPStorage_SD::addFilesystem(FS&, char const*)
0000e148  w    F .text	00000002 startup_late_hook
0000f770  w    F .text	00000004 usb_serial_class::available()
1fff0c68 g     O .data	00000001 _serialEvent_default
00006e68 g     F .text	00000044 MTPD::readstring(char*)
0000b288 g     F .text	0000000c FatFile::sync()
000009ec  w    F .text	00000050 SDClass::mkdir(char const*)
1fff0c04  w    O .data	0000002e usb_string_product_name
00005b5c g     F .text	00000028 MTPD::GetNumObjects(unsigned long, unsigned long)
0000e75c g     F .text	000000a0 delay
000102f0 g     F .text	0000007a .hidden __nedf2
0000e134  w    F .text	00000006 tpm0_isr
2000712c g     O .bss	00000002 dma_channel_allocated_mask
00001fb4 g     F .text	00000118 MTPStorage_SD::CloseIndex()
00015834 g     F .fini	00000000 _fini
00005b84 g     F .text	00000018 MTPD::get_buffer()
00000518  w    F .text	00000014 File::name()
00008830 g     F .text	00000026 TwoWire::write(unsigned char)
20006a74 g     O .bss	00000008 AudioOutputPT8211::dma
0000815c g     F .text	00000020 month()
0001501c g     O .text	0000002e SPISettings::ctar_div_table
0000ca6c g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00009890 g     F .text	00000040 ExFatFile::openNext(ExFatFile*, int)
00011544 g     F .text	0000004c sprintf
0000f7e8 g     F .text	0000001c Print::printf(char const*, ...)
0000e134  w    F .text	00000006 i2s0_rx_isr
0000e134  w    F .text	00000006 uart4_error_isr
0000a934 g     F .text	0000001e FatFile::close()
000004e0  w    F .text	00000010 File::position()
00000ecc  w    F .text	00000064 SDFile::~SDFile()
000130c8 g     F .text	0000000c atexit
0000ceb8  w    F .text	00000002 SdioCard::~SdioCard()
000007ec  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000005a8  w    F .text	00000018 File::write(unsigned char)
00012fe4 g     F .text	0000002c _write_r
000017d0 g     F .text	000000b8 Adjust_MCLK(long, long*, long*)
20006b50 g     O .bss	000004b8 SD
0000d148 g     F .text	000000ec SdioCard::erase(unsigned long, unsigned long)
0000e134  w    F .text	00000006 can0_message_isr
00007c78 g     F .text	000000a4 SPIClass::setMOSI(unsigned char)
1fff1098 g     O .data	00000004 _impure_ptr
00014b68  w    O .text	00000024 vtable for Stream
0000e134  w    F .text	00000006 can1_message_isr
00009274 g     F .text	0000002e ExFatFile::peek()
00014b8c  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20006aec g     O .bss	00000008 AudioOutputSPDIF::dma
0000e134  w    F .text	00000006 nmi_isr
1fff0a84 g     O .data	0000006c Wire
0000bd64 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00000db4  w    F .text	00000014 SDFile::write(void const*, unsigned int)
0000c46c g     F .text	00000028 FsVolume::open(char const*, int)
0000ce58 g     F .text	0000000c SdioCard::errorCode() const
20006a24 g     O .bss	0000000c audioShield
0000ac28 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000da0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
000157e0 g       .text	00000000 __preinit_array_end
000006f0 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
0000c4b4  w    F .text	00000002 SdSpiCard::~SdSpiCard()
20006acc g     O .bss	00000008 AudioInputTDM::dma
0000e134  w    F .text	00000006 sdhc_isr
000080fc g     F .text	00000020 minute()
00009c80 g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00009ac8 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000cbcc g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
00004400 g     F .text	00000012 MTPStorage_SD::DeleteObject(unsigned long)
00010ea0 g     F .text	0000002a __ascii_mbtowc
0000c580 g     F .text	0000004e SdSpiCard::isBusy()
000151f0 g     O .text	00000058 vtable for SdSpiCard
1fff1644 g     O .bss	00000200 header
0000c9cc  w    F .text	00000008 SdSpiCard::readCID(CID*)
000087d8  w    F .text	00000016 TwoWire::peek()
000087f0  w    F .text	00000002 TwoWire::flush()
00001d1c g     F .text	00000154 setup
000152a8 g     O .text	00000060 usb_descriptor_list
0000e9f4 g     F .text	0000003c usb_rx
0000cfe8 g     F .text	00000020 SdioCard::status()
00001f38 g     F .text	0000007c MTPStorage_SD::ResetIndex()
0000e134  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000e134  w    F .text	00000006 uart0_error_isr
000004f0  w    F .text	00000010 File::size()
00000acc  w    F .text	00000062 SDClass::rmdir(char const*)
00001624 g     F .text	000000f8 file_open(unsigned short)
0000e968 g     F .text	00000040 usb_malloc
0000ac44 g     F .text	0000019e FatFile::read(void*, unsigned int)
0000e134  w    F .text	00000006 i2s0_isr
0000ac38 g     F .text	0000000c FatFile::openRoot(FatVolume*)
20006afc g     O .bss	00000004 ExFatVolume::m_cwv
20030000 g       .bss	00000000 _estack
0000c494 g     F .text	00000004 operator new(unsigned int, unsigned long*)
0000c9c4  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
0000f654 g     F .text	00000038 DMAChannel::release()
0000057c  w    F .text	0000002c File::read()
0000df24 g     F .text	00000048 usb_serial_write_buffer_free
0000c650 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
0000e134  w    F .text	00000006 enet_timer_isr
0001038c g     F .text	00000012 .hidden __aeabi_dcmpeq
20006adc g     O .bss	00000008 AudioInputPDM::dma
000087f4 g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
00000f30  w    F .text	00000030 File::~File()
0000f7d8  w    F .text	0000000e _write
1fff1640 g     O .bss	00000004 maxDel
1fff1618 g       .data	00000000 _edata
00009b68 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
000060b8 g     F .text	00000254 MTPD::GetObjectInfo(unsigned long)
0000ceb8  w    F .text	00000002 SdioCard::~SdioCard()
0000e134  w    F .text	00000006 i2s0_tx_isr
0000e134  w    F .text	00000006 adc1_isr
0000cb60 g     F .text	0000001c SdSpiCard::syncDevice()
0000a7e8 g     F .text	00000098 FatFile::addDirCluster()
0000047c  w    F .text	0000000c File::read(void*, unsigned int)
0000f778  w    F .text	00000004 usb_serial_class::availableForWrite()
0000e134  w    F .text	00000006 cmp0_isr
000004bc  w    F .text	0000000c File::truncate(unsigned long long)
0000e268 g     F .text	0000004c ultoa
0000db28  w    F .text	00000002 SDClass::~SDClass()
0000c724 g     F .text	00000214 SdSpiCard::begin(SdSpiConfig)
0000811c g     F .text	00000020 second()
00008858 g     F .text	00000094 TwoWire::begin()
0000c2c4 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
000026e4 g     F .text	00000210 MTPStorage_SD::ReadIndexRecord(unsigned long)
0000f958 g     F .text	00000004 operator new(unsigned int)
0000f70c g     F .text	00000044 EventResponder::runFromInterrupt()
1fff1610 g     O .data	00000004 __malloc_trim_threshold
0000f768  w    F .text	00000004 usb_serial_class::peek()
00010890 g     F .text	00000024 fcvtf
000028f4 g     F .text	0000005e MTPStorage_SD::GetNextObjectHandle(unsigned long)
00008384 g     F .text	00000200 AudioControlSGTL5000::enable(unsigned int, unsigned long)
00000f60  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
20006a08 g     O .bss	00000014 mtpd
00014838 g     F .text	00000114 __mdiff
0000cea8 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0001041c g     F .text	0000004e .hidden __aeabi_d2iz
00003224 g     F .text	000000aa MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00009afc g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
20007008 g     O .bss	00000001 usb_cdc_transmit_flush_timer
00007994 g     F .text	00000134 _spi_dma_rxISR1()
2000714a g     O .bss	00000002 AudioStream::cpu_cycles_total
0000e134  w    F .text	00000006 pit_isr
000080dc g     F .text	00000020 hour()
0000d28c g     F .text	0000008c SdioCard::writeStop()
0000cdb4  w    F .text	0000001c SdSpiCard::writeSector(unsigned long, unsigned char const*)
00008f1c g     F .text	00000014 ExFatFile::close()
000155c0 g     O .text	00000101 _ctype_
0000e134  w    F .text	00000006 dac0_isr
0000c4a0  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
000157e0 g       .text	00000000 __init_array_start
00010820  w    F .text	00000002 .hidden __aeabi_idiv0
0000e134  w    F .text	00000006 can1_tx_warn_isr
00002170 g     F .text	00000394 MTPStorage_SD::OpenIndex()
000103f0 g     F .text	0000002c .hidden __unorddf2
00000b30  w    F .text	00000074 SDClass::rename(char const*, char const*)
0000e134  w    F .text	00000006 uart0_status_isr
0000e134  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
0000f588 g     F .text	000000cc DMAChannel::begin(bool)
00011700 g     F .text	000000dc strlen
0000b8d4 g     F .text	0000002e FatFile::openCluster(FatFile*)
00014f88 g     O .text	00000094 SPIClass::spi1_hardware
0001037c g     F .text	00000010 .hidden __aeabi_cdcmpeq
000102e0 g     F .text	0000008a .hidden __gedf2
0000b080 g     F .text	000000b0 FatFile::seekSet(unsigned long)
1fff0c04 g     O .data	0000002e usb_string_product_name_default
20006ab4 g     O .bss	00000008 AudioOutputI2SQuad::dma
00012fb0 g     F .text	00000018 vdprintf
0000e134  w    F .text	00000006 dma_ch1_isr
0000d0dc g     F .text	0000006c SdioCard::sectorCount()
0000c3a4 g     F .text	000000c8 FsVolume::begin(BlockDeviceInterface*)
00007778 g     F .text	00000008 MTPD::send_DeviceResetEvent()
0000ea30 g     F .text	0000002c usb_tx_packet_count
0000b208 g     F .text	00000080 FatFile::openNext(FatFile*, int)
00015248 g     O .text	00000058 vtable for SdioCard
0000fe14 g     F .text	0000003a .hidden __aeabi_f2d
0000e134  w    F .text	00000006 dma_ch5_isr
000029a8 g     F .text	0000019c MTPStorage_SD::close()
0000b904 g     F .text	000000ec FatFile::getName(char*, unsigned int)
0000e134  w    F .text	00000006 can0_rx_warn_isr
00000f60  w    F .text	00000078 MTPStorage_SD::~MTPStorage_SD()
00002ba8 g     F .text	000000b0 MTPStorage_SD::rename(unsigned long, char const*)
0000e134  w    F .text	00000006 can0_tx_warn_isr
0000e134  w    F .text	00000006 uart4_status_isr
0000d6d4 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
20006a84 g     O .bss	00000008 AudioInputAnalog::dma
20007148 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
0000d94c g     F .text	00000090 SdSpiArduinoDriver::activate()
00001e98 g     F .text	00000004 MTPStorage_SD::readonly(unsigned long)
0000fb54 g     F .text	0000027a .hidden __subdf3
0000e17c g     F .text	00000034 kinetis_hsrun_disable
000012b0 g     F .text	00000058 pullData(unsigned long*, unsigned long)
000157e0 g       .text	00000000 __preinit_array_start
000099e4 g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00002990 g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
000005d8  w    F .text	00000028 File::whoami()
1fff4a08 g     O .bss	00012000 data_buffer
00014504 g     F .text	0000005a __lo0bits
00009a8c g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
0000b130 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000fb40 g     F .text	0000000a __aeabi_atexit
00006d60 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
0000e6cc g     F .text	0000000c rtc_get
00009e98 g     F .text	000000d6 ExFatFile::remove()
0000e134  w    F .text	00000006 cmp2_isr
0000f750 g     F .text	00000004 pendablesrvreq_isr
00000c60  w    F .text	00000034 SDClass::totalSize()
0000700c g     F .text	00000076 MTPD::SendObject()
00001eac g     F .text	0000000c MTPStorage_SD::usedSize(unsigned long)
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff109c g     O .data	0000016c __global_locale
0000e134  w    F .text	00000006 wakeup_isr
00007d1c g     F .text	000000a0 SPIClass::setMISO(unsigned char)
000013b8 g     F .text	00000028 file_close()
0000e134  w    F .text	00000006 cmp3_isr
00007e74 g     F .text	000001b0 breakTime(long, tmElements_t&)
0000b524 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
00010920 g     F .text	00000010 free
0000e134  w    F .text	00000006 tpm2_isr
00014444 g     F .text	00000080 __multadd
00014430 g     F .text	00000012 _Bfree
00000c14  w    F .text	0000001a SDFile::size()
0000e134  w    F .text	00000006 dma_ch0_isr
00000fd8  w    F .text	0000005c SDFile::~SDFile()
1fff0c38  w    O .data	00000016 usb_string_serial_number
0000e134  w    F .text	00000006 enet_tx_isr
00009dd0 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
0000d748 g     F .text	000000f0 SdioCard::readSector(unsigned long, unsigned char*)
0000ce8c g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + (sec100 < 100 ? 0 : 1), 0);
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ....5.......
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	............5...
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	5.......Q...U...
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	5...5...5...5...
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	5...5...5...5...
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	5...5...5...5...
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	5...5...5...5...
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	5...5...5...5...
      90:	5...5...5...5...
      a0:	A...M...5...5...
      b0:	5...5...5...5...
      c0:	5...5...5...5...
      d0:	5...5...5...5...
      e0:	5...5...5...5...
      f0:	5...5...5...5...
     100:	5...5...5...5...
     110:	5...e...5...5...
     120:	5...5...5...5...
     130:	5...5...5...5...
     140:	....5...5...5...
     150:	5...5...5...5...
     160:	5...5...Y...5...
     170:	5...5...5...5...
     180:	5...5...5...5...
     190:	5...5...5...5...
     1a0:	5...5...5...5...
     1b0:	5...5...5...5...
     1c0:	5...5...5...5...

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	e13c <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #332]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #332]	; (368 <ResetHandler+0x198>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #332]	; (36c <ResetHandler+0x19c>)
     220:	ldr	r3, [pc, #332]	; (370 <ResetHandler+0x1a0>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #320]	; (374 <ResetHandler+0x1a4>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #324]	; (378 <ResetHandler+0x1a8>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #312]	; (37c <ResetHandler+0x1ac>)
     242:	ldr	r2, [pc, #316]	; (380 <ResetHandler+0x1b0>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #300]	; (384 <ResetHandler+0x1b4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #296]	; (38c <ResetHandler+0x1bc>)
     264:	ldr	r2, [pc, #276]	; (37c <ResetHandler+0x1ac>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #268]	; (394 <ResetHandler+0x1c4>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	bne.n	288 <ResetHandler+0xb8>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     292:	ldr	r3, [pc, #260]	; (398 <ResetHandler+0x1c8>)
     294:	movs	r2, #96	; 0x60
     296:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     298:	adds	r3, #2
     29a:	ldrb	r2, [r3, #0]
     29c:	cmp	r2, #128	; 0x80
     29e:	bne.n	29a <ResetHandler+0xca>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
    #elif F_CPU == 168000000
	MCG_C5 = MCG_C5_PRDIV0(0);
     2a0:	ldr	r3, [pc, #240]	; (394 <ResetHandler+0x1c4>)
     2a2:	movs	r2, #0
     2a4:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(5);
     2a6:	movs	r2, #69	; 0x45
     2a8:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2aa:	ldrb	r2, [r3, #6]
     2ac:	lsls	r0, r2, #26
     2ae:	bpl.n	2aa <ResetHandler+0xda>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2b0:	ldrb	r1, [r3, #6]
     2b2:	ldr	r2, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b4:	lsls	r1, r1, #25
     2b6:	bpl.n	2b0 <ResetHandler+0xe0>
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
#elif F_CPU == 168000000
	// config divisors: 168 MHz core, 56 MHz bus, 28 MHz flash, USB = 168 * 2 / 7
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(5);
     2b8:	ldr	r3, [pc, #224]	; (39c <ResetHandler+0x1cc>)
     2ba:	ldr	r1, [pc, #228]	; (3a0 <ResetHandler+0x1d0>)
     2bc:	str	r1, [r3, #0]
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(6) | SIM_CLKDIV2_USBFRAC;
     2be:	movs	r1, #13
     2c0:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2c2:	movs	r3, #32
     2c4:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2c6:	ldrb	r3, [r2, #6]
     2c8:	and.w	r3, r3, #12
     2cc:	cmp	r3, #12
     2ce:	bne.n	2c6 <ResetHandler+0xf6>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2d0:	ldr	r3, [pc, #208]	; (3a4 <ResetHandler+0x1d4>)
     2d2:	ldr	r2, [pc, #212]	; (3a8 <ResetHandler+0x1d8>)
     2d4:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2d6:	ldr	r2, [pc, #212]	; (3ac <ResetHandler+0x1dc>)
     2d8:	ldr	r4, [pc, #212]	; (3b0 <ResetHandler+0x1e0>)
     2da:	ldr	r3, [r2, #0]
     2dc:	ands.w	r3, r3, #256	; 0x100
     2e0:	bne.n	2ea <ResetHandler+0x11a>
		RTC_SR = 0;
     2e2:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2e4:	mov.w	r3, #5376	; 0x1500
     2e8:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	e7fc <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [r4, #0]
     308:	lsls	r2, r3, #31
     30a:	bpl.n	318 <ResetHandler+0x148>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30c:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     30e:	bl	e6d8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     312:	ldr	r3, [pc, #176]	; (3c4 <ResetHandler+0x1f4>)
     314:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     316:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     318:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31a:	ldrb	r3, [r3, #0]
     31c:	lsls	r3, r3, #25
     31e:	bpl.n	334 <ResetHandler+0x164>
     320:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     322:	ldr	r3, [pc, #164]	; (3c8 <ResetHandler+0x1f8>)
     324:	ldr	r2, [r4, #0]
     326:	cmp	r2, r3
     328:	bne.n	334 <ResetHandler+0x164>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32a:	ldr	r0, [pc, #148]	; (3c0 <ResetHandler+0x1f0>)
     32c:	bl	e6d8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     330:	movs	r3, #0
     332:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     334:	bl	108c0 <__libc_init_array>

	startup_late_hook();
     338:	bl	e148 <startup_late_hook>
	main();
     33c:	bl	f8c0 <main>
     340:	b.n	340 <ResetHandler+0x170>
     342:	nop
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4007d002
     364:	.word	0x4007e000
     368:	.word	0x1fff1618
     36c:	.word	0x0001583c
     370:	.word	0x1fff0970
     374:	.word	0x1fff1618
     378:	.word	0x200071b8
     37c:	.word	0x1fff0200
     380:	.word	0x00000000
     384:	.word	0xe000e400
     388:	.word	0xe000e464
     38c:	.word	0xe000ed08
     390:	.word	0x40065000
     394:	.word	0x40064000
     398:	.word	0x4007e001
     39c:	.word	0x40048044
     3a0:	.word	0x02050000
     3a4:	.word	0x40048004
     3a8:	.word	0x000510c0
     3ac:	.word	0x4003d010
     3b0:	.word	0x4003d014
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002903f
     3bc:	.word	0x20200000
     3c0:	.word	0x60f29bfe
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1618
     42c:	.word	0x00000000
     430:	.word	0x00015838

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff161c
     460:	.word	0x00015838
     464:	.word	0x1fff1618
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     47c:	ldr	r0, [r0, #16]
     47e:	cbz	r0, 486 <File::read(void*, unsigned int)+0xa>
     480:	ldr	r3, [r0, #0]
     482:	ldr	r3, [r3, #40]	; 0x28
     484:	bx	r3
	}
     486:	bx	lr

00000488 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     488:	ldr	r0, [r0, #16]
     48a:	cbz	r0, 492 <File::write(void const*, unsigned int)+0xa>
     48c:	ldr	r3, [r0, #0]
     48e:	ldr	r3, [r3, #44]	; 0x2c
     490:	bx	r3
	}
     492:	bx	lr

00000494 <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     494:	ldr	r0, [r0, #16]
     496:	cbz	r0, 49e <File::available()+0xa>
     498:	ldr	r3, [r0, #0]
     49a:	ldr	r3, [r3, #16]
     49c:	bx	r3
	}
     49e:	bx	lr

000004a0 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     4a0:	ldr	r0, [r0, #16]
     4a2:	cbz	r0, 4aa <File::peek()+0xa>
     4a4:	ldr	r3, [r0, #0]
     4a6:	ldr	r3, [r3, #24]
     4a8:	bx	r3
	}
     4aa:	mov.w	r0, #4294967295
     4ae:	bx	lr

000004b0 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4b0:	ldr	r0, [r0, #16]
     4b2:	cbz	r0, 4ba <File::flush()+0xa>
     4b4:	ldr	r3, [r0, #0]
     4b6:	ldr	r3, [r3, #12]
     4b8:	bx	r3
     4ba:	bx	lr

000004bc <File::truncate(unsigned long long)>:
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
     4bc:	ldr	r0, [r0, #16]
     4be:	cbz	r0, 4c6 <File::truncate(unsigned long long)+0xa>
     4c0:	ldr	r1, [r0, #0]
     4c2:	ldr	r1, [r1, #48]	; 0x30
     4c4:	bx	r1
	}
     4c6:	bx	lr

000004c8 <File::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode) {
     4c8:	push	{r4}
		return (f) ? f->seek(pos, mode) : false;
     4ca:	ldr	r0, [r0, #16]
     4cc:	cbz	r0, 4d8 <File::seek(unsigned long long, int)+0x10>
     4ce:	ldr	r4, [r0, #0]
     4d0:	ldr	r1, [r4, #52]	; 0x34
	}
     4d2:	ldr.w	r4, [sp], #4
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4d6:	bx	r1
	}
     4d8:	ldr.w	r4, [sp], #4
     4dc:	bx	lr
     4de:	nop

000004e0 <File::position()>:
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
     4e0:	ldr	r0, [r0, #16]
     4e2:	cbz	r0, 4ea <File::position()+0xa>
     4e4:	ldr	r3, [r0, #0]
     4e6:	ldr	r3, [r3, #56]	; 0x38
     4e8:	bx	r3
	}
     4ea:	movs	r0, #0
     4ec:	movs	r1, #0
     4ee:	bx	lr

000004f0 <File::size()>:
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::size()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #60]	; 0x3c
     4f8:	bx	r3
	}
     4fa:	movs	r0, #0
     4fc:	movs	r1, #0
     4fe:	bx	lr

00000500 <File::close()>:
	virtual void close() {
		if (f) f->close();
     500:	ldr	r0, [r0, #16]
     502:	cbz	r0, 50a <File::close()+0xa>
     504:	ldr	r3, [r0, #0]
     506:	ldr	r3, [r3, #64]	; 0x40
     508:	bx	r3
     50a:	bx	lr

0000050c <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     50c:	ldr	r0, [r0, #16]
     50e:	cbz	r0, 516 <File::operator bool()+0xa>
     510:	ldr	r3, [r0, #0]
     512:	ldr	r3, [r3, #68]	; 0x44
     514:	bx	r3
	}
     516:	bx	lr

00000518 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     518:	ldr	r0, [r0, #16]
     51a:	cbz	r0, 522 <File::name()+0xa>
     51c:	ldr	r3, [r0, #0]
     51e:	ldr	r3, [r3, #72]	; 0x48
     520:	bx	r3
	}
     522:	ldr	r0, [pc, #4]	; (528 <File::name()+0x10>)
     524:	bx	lr
     526:	nop
     528:	.word	0x00014d98

0000052c <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     52c:	ldr	r0, [r0, #16]
     52e:	cbz	r0, 536 <File::isDirectory()+0xa>
     530:	ldr	r3, [r0, #0]
     532:	ldr	r3, [r3, #76]	; 0x4c
     534:	bx	r3
	}
     536:	bx	lr

00000538 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     538:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     53a:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     53c:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     53e:	cbz	r3, 54c <File::openNextFile(unsigned char)+0x14>
     540:	ldr	r5, [r3, #0]
     542:	mov	r1, r3
     544:	ldr	r3, [r5, #80]	; 0x50
     546:	blx	r3
	}
     548:	mov	r0, r4
     54a:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     54c:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     550:	ldr	r2, [pc, #24]	; (56c <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     552:	strb	r3, [r4, #4]
     554:	strb	r3, [r4, #12]
     556:	str	r0, [r4, #8]
     558:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     55a:	ldr	r3, [r1, #16]
     55c:	str	r3, [r4, #16]
		if (f) f->refcount++;
     55e:	cmp	r3, #0
     560:	beq.n	548 <File::openNextFile(unsigned char)+0x10>
     562:	ldr	r2, [r3, #16]
     564:	adds	r2, #1
     566:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     568:	mov	r0, r4
     56a:	pop	{r3, r4, r5, pc}
     56c:	.word	0x00014bdc

00000570 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     570:	ldr	r0, [r0, #16]
     572:	cbz	r0, 57a <File::rewindDirectory()+0xa>
     574:	ldr	r3, [r0, #0]
     576:	ldr	r3, [r3, #84]	; 0x54
     578:	bx	r3
     57a:	bx	lr

0000057c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     57c:	ldr	r0, [r0, #16]
     57e:	cbz	r0, 5a2 <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     580:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     582:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     584:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     586:	ldr	r3, [r3, #40]	; 0x28
     588:	movs	r2, #1
     58a:	add.w	r1, sp, #7
     58e:	blx	r3
     590:	cbz	r0, 59c <File::read()+0x20>
		return b;
     592:	ldrb.w	r0, [sp, #7]
	}
     596:	add	sp, #12
     598:	ldr.w	pc, [sp], #4
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     59c:	mov.w	r0, #4294967295
     5a0:	b.n	596 <File::read()+0x1a>
     5a2:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     5a6:	bx	lr

000005a8 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     5a8:	push	{r4, lr}
     5aa:	sub	sp, #8
     5ac:	add	r3, sp, #8
		return write(&b, 1);
     5ae:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     5b0:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     5b4:	ldr	r4, [r2, #44]	; 0x2c
     5b6:	mov	r1, r3
     5b8:	movs	r2, #1
     5ba:	blx	r4
	}
     5bc:	add	sp, #8
     5be:	pop	{r4, pc}

000005c0 <SDFile::operator bool()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     5c0:	ldr	r3, [r0, #92]	; 0x5c
     5c2:	cbz	r3, 5c8 <SDFile::operator bool()+0x8>
     5c4:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     5c6:	bx	lr
     5c8:	ldr	r0, [r0, #96]	; 0x60
     5ca:	adds	r0, #0
     5cc:	it	ne
     5ce:	movne	r0, #1
     5d0:	bx	lr
     5d2:	nop

000005d4 <__tcf_0>:
  return state;
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
     5d4:	bx	lr
     5d6:	nop

000005d8 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     5d8:	push	{r4, lr}
     5da:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     5dc:	mov	r2, r0
     5de:	ldr	r3, [r0, #16]
     5e0:	ldr	r1, [pc, #20]	; (5f8 <File::whoami()+0x20>)
     5e2:	ldr	r0, [pc, #24]	; (5fc <File::whoami()+0x24>)
     5e4:	bl	f7e8 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5e8:	ldr	r0, [r4, #16]
     5ea:	cbz	r0, 5f6 <File::whoami()+0x1e>
     5ec:	ldr	r3, [r0, #0]
	}
     5ee:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5f2:	ldr	r3, [r3, #36]	; 0x24
     5f4:	bx	r3
     5f6:	pop	{r4, pc}
     5f8:	.word	0x00014cc4
     5fc:	.word	0x1fff0c58

00000600 <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     600:	mov	r2, r0
     602:	ldr	r3, [r0, #16]
     604:	ldr	r1, [pc, #4]	; (60c <SDFile::whoami()+0xc>)
     606:	ldr	r0, [pc, #8]	; (610 <SDFile::whoami()+0x10>)
     608:	b.w	f7e8 <Print::printf(char const*, ...)>
     60c:	.word	0x00014ce0
     610:	.word	0x1fff0c58

00000614 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint64_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     614:	push	{r4, lr}
     616:	mov	r4, r0
		if (filename) {
     618:	ldr	r0, [r0, #100]	; 0x64
     61a:	cbz	r0, 624 <SDFile::close()+0x10>
			free(filename);
     61c:	bl	10920 <free>
			filename = nullptr;
     620:	movs	r3, #0
     622:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     624:	add.w	r0, r4, #36	; 0x24
	}
     628:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     62c:	b.w	c29c <FsBaseFile::close()>

00000630 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     630:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     634:	movs	r3, #0
     636:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     638:	mov	r2, r3
     63a:	mov	r5, r0
     63c:	adds	r1, #36	; 0x24
     63e:	add	r0, sp, #16
     640:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     644:	ldr	r7, [pc, #148]	; (6dc <SDFile::openNextFile(unsigned char)+0xac>)
     646:	strb.w	r3, [sp, #4]
     64a:	strb.w	r3, [sp, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
     64e:	str	r3, [sp, #72]	; 0x48
     650:	str	r3, [sp, #76]	; 0x4c
     652:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     654:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     656:	bl	c344 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     65a:	ldr	r3, [sp, #72]	; 0x48
     65c:	cmp	r3, #0
     65e:	beq.n	6c6 <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     660:	movs	r0, #104	; 0x68
     662:	bl	f958 <operator new(unsigned int)>
     666:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     668:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     66c:	ldr	r2, [sp, #8]
     66e:	ldrb.w	r3, [sp, #12]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     672:	ldr	r0, [pc, #108]	; (6e0 <SDFile::openNextFile(unsigned char)+0xb0>)
     674:	ldr	r1, [pc, #108]	; (6e4 <SDFile::openNextFile(unsigned char)+0xb4>)
     676:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     678:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     67c:	movs	r6, #0
     67e:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     680:	str	r1, [r4, #20]
     682:	str	r2, [r4, #28]
     684:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     688:	add.w	r0, r4, #36	; 0x24
     68c:	add	r1, sp, #16
     68e:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     690:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     692:	str	r6, [r4, #16]
     694:	str.w	r8, [r4, #8]
     698:	bl	c224 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     69c:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     69e:	ldr	r2, [pc, #72]	; (6e8 <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6a0:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     6a2:	adds	r3, #1
     6a4:	str	r6, [r4, #100]	; 0x64
     6a6:	strb	r6, [r5, #4]
     6a8:	str.w	r8, [r5, #8]
     6ac:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     6ae:	str	r4, [r5, #16]
		if (f) f->refcount++;
     6b0:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     6b2:	str	r2, [r5, #0]
     6b4:	ldr	r3, [pc, #52]	; (6ec <SDFile::openNextFile(unsigned char)+0xbc>)
     6b6:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     6b8:	add	r0, sp, #16
     6ba:	bl	c29c <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     6be:	mov	r0, r5
     6c0:	add	sp, #80	; 0x50
     6c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     6c6:	ldr	r3, [sp, #76]	; 0x4c
     6c8:	cmp	r3, #0
     6ca:	bne.n	660 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     6cc:	ldr	r2, [pc, #24]	; (6e8 <SDFile::openNextFile(unsigned char)+0xb8>)
     6ce:	strb	r3, [r5, #4]
     6d0:	str	r4, [r5, #8]
     6d2:	strb	r3, [r5, #12]
     6d4:	str	r3, [r5, #16]
     6d6:	str	r2, [r5, #0]
     6d8:	b.n	6b4 <SDFile::openNextFile(unsigned char)+0x84>
     6da:	nop
     6dc:	.word	0x00014bb8
     6e0:	.word	0x00014c3c
     6e4:	.word	0x00014b70
     6e8:	.word	0x00014bdc
     6ec:	.word	0x00014b94

000006f0 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

/****************** File Utilities *****************************/
  #if USE_SD==1
    // Call back for file timestamps.  Only called for file create and sync()
    void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
    { *date = FS_DATE(year(), month(), day());
     6f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6f4:	mov	r7, r1
     6f6:	mov	r6, r2
     6f8:	mov	r8, r0
     6fa:	bl	817c <year()>
     6fe:	mov	r4, r0
     700:	bl	815c <month()>
     704:	mov	r5, r0
     706:	bl	813c <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     70a:	subw	r3, r4, #1980	; 0x7bc
     70e:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     710:	cmp	r3, #127	; 0x7f
     712:	bhi.n	71a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     714:	uxtb	r2, r5
     716:	cmp	r2, #12
     718:	bls.n	772 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     71a:	movs	r3, #0
     71c:	strh.w	r3, [r8]
      *time = FS_TIME(hour(), minute(), second());
     720:	bl	80dc <hour()>
     724:	mov	r4, r0
     726:	bl	80fc <minute()>
     72a:	mov	r5, r0
     72c:	bl	811c <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     730:	uxtb	r3, r4
     732:	cmp	r3, #23
     734:	bhi.n	73c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     736:	uxtb	r3, r5
     738:	cmp	r3, #59	; 0x3b
     73a:	bls.n	754 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     73c:	movs	r3, #0
     73e:	strh	r3, [r7, #0]
      *ms10 = second() & 1 ? 100 : 0;
     740:	bl	811c <second()>
     744:	tst.w	r0, #1
     748:	ite	ne
     74a:	movne	r3, #100	; 0x64
     74c:	moveq	r3, #0
     74e:	strb	r3, [r6, #0]
     750:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     754:	uxtb	r3, r0
     756:	cmp	r3, #59	; 0x3b
     758:	bhi.n	73c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     75a:	lsls	r4, r4, #11
     75c:	lsls	r3, r5, #5
     75e:	and.w	r4, r4, #522240	; 0x7f800
     762:	and.w	r3, r3, #8160	; 0x1fe0
     766:	orrs	r3, r4
     768:	ubfx	r0, r0, #1, #7
     76c:	orrs	r3, r0
     76e:	uxth	r3, r3
     770:	b.n	73e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

/****************** File Utilities *****************************/
  #if USE_SD==1
    // Call back for file timestamps.  Only called for file create and sync()
    void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
    { *date = FS_DATE(year(), month(), day());
     772:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     774:	cmp	r0, #31
     776:	bhi.n	71a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     778:	lsls	r5, r5, #5
     77a:	and.w	r5, r5, #8160	; 0x1fe0
     77e:	orrs	r0, r5
     780:	orr.w	r3, r0, r3, lsl #9
     784:	uxth	r3, r3
     786:	b.n	71c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

00000788 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     788:	push	{r4, lr}
     78a:	mov	r4, r0
		release();
     78c:	bl	f654 <DMAChannel::release()>
	}
     790:	mov	r0, r4
     792:	pop	{r4, pc}

00000794 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     794:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     796:	cbz	r2, 7b2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     798:	ldrb	r3, [r2, #0]
     79a:	and.w	r3, r3, #8
     79e:	and.w	r0, r3, #255	; 0xff
     7a2:	cbz	r3, 7e6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     7a4:	ldr	r3, [r2, #28]
     7a6:	ldr	r0, [r2, #20]
     7a8:	subs	r0, r3, r0
     7aa:	it	mi
     7ac:	mvnmi.w	r0, #2147483648	; 0x80000000
     7b0:	bx	lr
     7b2:	ldr	r1, [r0, #76]	; 0x4c
     7b4:	cbz	r1, 7e8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     7b6:	ldrb.w	r3, [r1, #49]	; 0x31
     7ba:	and.w	r3, r3, #8
     7be:	and.w	r0, r3, #255	; 0xff
     7c2:	cbz	r3, 7e6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     7c4:	ldrd	r2, r3, [r1, #16]
     7c8:	ldrd	r0, r1, [r1]
     7cc:	subs	r0, r2, r0
     7ce:	push	{r4, r5}
     7d0:	sbc.w	r1, r3, r1
     7d4:	movs	r5, #0
     7d6:	mvn.w	r4, #2147483648	; 0x80000000
     7da:	cmp	r5, r1
     7dc:	it	eq
     7de:	cmpeq	r4, r0
     7e0:	bcs.n	7e4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     7e2:	mov	r0, r4
    return BaseFile::available();
  }
     7e4:	pop	{r4, r5}
     7e6:	bx	lr
     7e8:	mov	r0, r1
     7ea:	bx	lr

000007ec <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  const char* name() const {return "use getName()";}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     7ec:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     7ee:	cbz	r3, 7f6 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     7f0:	mov	r0, r3
     7f2:	b.w	ade4 <FatFile::peek()>
     7f6:	ldr	r0, [r0, #76]	; 0x4c
     7f8:	cbz	r0, 7fe <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     7fa:	b.w	9274 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     7fe:	mov.w	r0, #4294967295
     802:	bx	lr

00000804 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     804:	push	{lr}
     806:	ldr	r3, [r0, #72]	; 0x48
     808:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     80a:	cbz	r3, 826 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     80c:	mov	r0, r3
     80e:	movs	r2, #1
     810:	add.w	r1, sp, #7
     814:	bl	ac44 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     818:	cmp	r0, #1
     81a:	bne.n	836 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     81c:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     820:	add	sp, #12
     822:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     826:	ldr	r0, [r0, #76]	; 0x4c
     828:	cbz	r0, 836 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     82a:	movs	r2, #1
     82c:	add.w	r1, sp, #7
     830:	bl	90cc <ExFatFile::read(void*, unsigned int)>
     834:	b.n	818 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     836:	mov.w	r0, #4294967295
     83a:	b.n	820 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

0000083c <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     83c:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     83e:	cbz	r3, 846 <SDFile::flush()+0xa>
     840:	mov	r0, r3
     842:	b.w	b288 <FatFile::sync()>
     846:	ldr	r0, [r0, #96]	; 0x60
     848:	cbz	r0, 84e <SDFile::flush()+0x12>
     84a:	b.w	a110 <ExFatFile::sync()>
     84e:	bx	lr

00000850 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     850:	push	{lr}
     852:	ldr	r3, [r0, #72]	; 0x48
     854:	sub	sp, #12
     856:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     85a:	cbz	r3, 86e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     85c:	mov	r0, r3
     85e:	movs	r2, #1
     860:	add.w	r1, sp, #7
     864:	bl	b30c <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     868:	add	sp, #12
     86a:	ldr.w	pc, [sp], #4
     86e:	ldr	r0, [r0, #76]	; 0x4c
     870:	cmp	r0, #0
     872:	beq.n	868 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     874:	movs	r2, #1
     876:	add.w	r1, sp, #7
     87a:	bl	a51c <ExFatFile::write(void const*, unsigned int)>
     87e:	add	sp, #12
     880:	ldr.w	pc, [sp], #4

00000884 <logg(unsigned long, char const*) [clone .part.54]>:
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     884:	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     888:	ldr	r4, [pc, #72]	; (8d4 <logg(unsigned long, char const*) [clone .part.54]+0x50>)
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
     88a:	ldr	r5, [pc, #76]	; (8d8 <logg(unsigned long, char const*) [clone .part.54]+0x54>)
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     88c:	ldr	r1, [r4, #0]
     88e:	ldr	r6, [pc, #76]	; (8dc <logg(unsigned long, char const*) [clone .part.54]+0x58>)
     890:	ldr	r7, [pc, #76]	; (8e0 <logg(unsigned long, char const*) [clone .part.54]+0x5c>)
     892:	ldrh	r2, [r5, #0]
     894:	ldr.w	r9, [pc, #92]	; 8f4 <logg(unsigned long, char const*) [clone .part.54]+0x70>
}

/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
     898:	sub	sp, #24
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
     89a:	ldr.w	r3, [r9]
     89e:	str	r1, [sp, #12]
     8a0:	ldr	r1, [r7, #0]
     8a2:	str	r2, [sp, #8]
     8a4:	mov	r2, r0
     8a6:	ldr	r0, [r6, #0]
     8a8:	str	r0, [sp, #4]
     8aa:	str	r1, [sp, #0]
     8ac:	ldr	r0, [pc, #52]	; (8e4 <logg(unsigned long, char const*) [clone .part.54]+0x60>)
     8ae:	ldr	r1, [pc, #56]	; (8e8 <logg(unsigned long, char const*) [clone .part.54]+0x64>)
     8b0:	bl	f7e8 <Print::printf(char const*, ...)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8b4:	ldr	r3, [pc, #52]	; (8ec <logg(unsigned long, char const*) [clone .part.54]+0x68>)
    loop_count=0;
    acq_count=0;
    acq_miss=0;
    maxCount=0;
    maxDel=0;
    to=millis();
     8b6:	ldr	r2, [pc, #56]	; (8f0 <logg(unsigned long, char const*) [clone .part.54]+0x6c>)
     8b8:	ldr	r3, [r3, #0]
     8ba:	str	r3, [sp, #20]
	return ret;
     8bc:	ldr	r1, [sp, #20]
     8be:	str	r1, [r2, #0]
{ static uint32_t to;
  if(millis()-to > del)
  {
    Serial.printf("%s: %6d %4d; %4d %4d; %4d\n",
            txt,loop_count, acq_count, acq_miss,maxCount, maxDel); 
    loop_count=0;
     8c0:	movs	r3, #0
     8c2:	str.w	r3, [r9]
    acq_count=0;
     8c6:	str	r3, [r7, #0]
    acq_miss=0;
     8c8:	str	r3, [r6, #0]
    maxCount=0;
     8ca:	strh	r3, [r5, #0]
    maxDel=0;
     8cc:	str	r3, [r4, #0]
    to=millis();
  }
}
     8ce:	add	sp, #24
     8d0:	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
     8d4:	.word	0x1fff1640
     8d8:	.word	0x20006a1c
     8dc:	.word	0x20006a30
     8e0:	.word	0x1fff3844
     8e4:	.word	0x1fff0c58
     8e8:	.word	0x00014d00
     8ec:	.word	0x2000701c
     8f0:	.word	0x20006a38
     8f4:	.word	0x20006a20

000008f8 <SDClass::remove(char const*)>:
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
     8f8:	push	{r4, lr}
     8fa:	ldr.w	r4, [r0, #1156]	; 0x484
     8fe:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     900:	cbz	r4, 92c <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     902:	mov	r2, r1
     904:	mov	r0, sp
     906:	mov	r1, r4
     908:	movs	r3, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     90a:	movs	r4, #0
     90c:	strb.w	r4, [sp]
     910:	strb.w	r4, [sp, #1]
     914:	strb.w	r4, [sp, #2]
     918:	bl	ac28 <FatFile::open(FatVolume*, char const*, int)>
     91c:	cbnz	r0, 922 <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
     91e:	add	sp, #56	; 0x38
     920:	pop	{r4, pc}
     922:	mov	r0, sp
     924:	bl	bc3c <FatFile::remove()>
     928:	add	sp, #56	; 0x38
     92a:	pop	{r4, pc}
     92c:	ldr.w	r0, [r0, #1160]	; 0x488
     930:	cmp	r0, #0
     932:	beq.n	91e <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     934:	mov	r2, r1
     936:	movs	r3, #1
     938:	mov	r1, r0
     93a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     93c:	strb.w	r4, [sp, #49]	; 0x31
     940:	strb.w	r4, [sp, #50]	; 0x32
     944:	strb.w	r4, [sp, #51]	; 0x33
     948:	bl	9880 <ExFatFile::open(ExFatVolume*, char const*, int)>
     94c:	cmp	r0, #0
     94e:	beq.n	91e <SDClass::remove(char const*)+0x26>
     950:	mov	r0, sp
     952:	bl	9e98 <ExFatFile::remove()>
     956:	add	sp, #56	; 0x38
     958:	pop	{r4, pc}
     95a:	nop

0000095c <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     95c:	push	{r3, r4, r5, lr}
		if (!filename) {
     95e:	ldr	r4, [r0, #100]	; 0x64
     960:	cbz	r4, 966 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     962:	mov	r0, r4
     964:	pop	{r3, r4, r5, pc}
     966:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     968:	mov.w	r0, #256	; 0x100
     96c:	bl	10910 <malloc>
     970:	mov	r1, r0
     972:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     974:	cbz	r0, 998 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     976:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     978:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     97a:	cbz	r0, 988 <SDFile::name()+0x2c>
     97c:	mov.w	r2, #256	; 0x100
     980:	bl	b904 <FatFile::getName(char*, unsigned int)>
     984:	ldr	r4, [r5, #100]	; 0x64
     986:	b.n	962 <SDFile::name()+0x6>
     988:	ldr	r0, [r5, #96]	; 0x60
     98a:	cbz	r0, 99e <SDFile::name()+0x42>
     98c:	mov.w	r2, #256	; 0x100
     990:	bl	8f30 <ExFatFile::getName(char*, unsigned int)>
     994:	ldr	r4, [r5, #100]	; 0x64
     996:	b.n	962 <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     998:	ldr	r4, [pc, #8]	; (9a4 <SDFile::name()+0x48>)
     99a:	str	r4, [r5, #100]	; 0x64
     99c:	b.n	962 <SDFile::name()+0x6>
     99e:	mov	r4, r1
     9a0:	b.n	962 <SDFile::name()+0x6>
     9a2:	nop
     9a4:	.word	0x1fff1634

000009a8 <SDFile::truncate(unsigned long long)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
     9a8:	push	{r4, r6, r7, lr}
     9aa:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
           m_xFile ? m_xFile->truncate(length) : false;
     9ac:	cbz	r4, 9d2 <SDFile::truncate(unsigned long long)+0x2a>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     9ae:	cmp	r3, #1
     9b0:	it	eq
     9b2:	cmpeq	r2, #0
     9b4:	bcc.n	9ba <SDFile::truncate(unsigned long long)+0x12>
     9b6:	movs	r0, #0
		return sdfatfile.truncate(size);
	}
     9b8:	pop	{r4, r6, r7, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     9ba:	mov	r1, r2
     9bc:	mov	r0, r4
     9be:	bl	b080 <FatFile::seekSet(unsigned long)>
     9c2:	cmp	r0, #0
     9c4:	beq.n	9b6 <SDFile::truncate(unsigned long long)+0xe>
     9c6:	mov	r0, r4
     9c8:	bl	b294 <FatFile::truncate()>
     9cc:	cmp	r0, #0
     9ce:	beq.n	9b6 <SDFile::truncate(unsigned long long)+0xe>
     9d0:	pop	{r4, r6, r7, pc}
           m_xFile ? m_xFile->truncate(length) : false;
     9d2:	ldr	r4, [r0, #96]	; 0x60
     9d4:	cmp	r4, #0
     9d6:	beq.n	9b6 <SDFile::truncate(unsigned long long)+0xe>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     9d8:	mov	r0, r4
     9da:	bl	92a4 <ExFatFile::seekSet(unsigned long long)>
     9de:	cmp	r0, #0
     9e0:	beq.n	9b6 <SDFile::truncate(unsigned long long)+0xe>
     9e2:	mov	r0, r4
     9e4:	ldmia.w	sp!, {r4, r6, r7, lr}
     9e8:	b.w	a438 <ExFatFile::truncate()>

000009ec <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
     9ec:	push	{r4, lr}
     9ee:	ldr.w	r4, [r0, #1156]	; 0x484
     9f2:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     9f4:	cbz	r4, a16 <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     9f6:	mov	r2, r1
     9f8:	movs	r3, #1
     9fa:	addw	r1, r4, #1092	; 0x444
     9fe:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     a00:	movs	r4, #0
     a02:	strb.w	r4, [sp]
     a06:	strb.w	r4, [sp, #1]
     a0a:	strb.w	r4, [sp, #2]
     a0e:	bl	aaa4 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
     a12:	add	sp, #56	; 0x38
     a14:	pop	{r4, pc}
     a16:	ldr.w	r0, [r0, #1160]	; 0x488
     a1a:	cmp	r0, #0
     a1c:	beq.n	a12 <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
     a1e:	mov	r2, r1
     a20:	movs	r3, #1
     a22:	add.w	r1, r0, #1096	; 0x448
     a26:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     a28:	strb.w	r4, [sp, #49]	; 0x31
     a2c:	strb.w	r4, [sp, #50]	; 0x32
     a30:	strb.w	r4, [sp, #51]	; 0x33
     a34:	bl	a2b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     a38:	add	sp, #56	; 0x38
     a3a:	pop	{r4, pc}

00000a3c <SDClass::exists(char const*)>:
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
     a3c:	push	{r4, r5, lr}
     a3e:	ldr.w	r4, [r0, #1156]	; 0x484
     a42:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
     a44:	cbz	r4, a64 <SDClass::exists(char const*)+0x28>
     a46:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     a48:	mov	r2, r1
     a4a:	mov	r3, r5
     a4c:	mov	r1, r4
     a4e:	mov	r0, sp
     a50:	strb.w	r5, [sp]
     a54:	strb.w	r5, [sp, #1]
     a58:	strb.w	r5, [sp, #2]
     a5c:	bl	ac28 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
     a60:	add	sp, #60	; 0x3c
     a62:	pop	{r4, r5, pc}
     a64:	ldr.w	r0, [r0, #1160]	; 0x488
     a68:	cmp	r0, #0
     a6a:	beq.n	a60 <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
     a6c:	mov	r2, r1
     a6e:	mov	r3, r4
     a70:	mov	r1, r0
     a72:	mov	r0, sp
     a74:	strb.w	r4, [sp, #49]	; 0x31
     a78:	strb.w	r4, [sp, #50]	; 0x32
     a7c:	strb.w	r4, [sp, #51]	; 0x33
     a80:	bl	9880 <ExFatFile::open(ExFatVolume*, char const*, int)>
     a84:	add	sp, #60	; 0x3c
     a86:	pop	{r4, r5, pc}

00000a88 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     a88:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     a8a:	cbz	r3, ab4 <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     a8c:	ldrb	r2, [r3, #0]
     a8e:	tst.w	r2, #112	; 0x70
     a92:	bne.n	a96 <SDFile::rewindDirectory()+0xe>
     a94:	bx	lr
     a96:	push	{r4, lr}
     a98:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     a9a:	movs	r1, #0
     a9c:	mov	r0, r3
     a9e:	bl	b080 <FatFile::seekSet(unsigned long)>
     aa2:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     aa4:	cbz	r0, ab2 <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     aa6:	movs	r2, #0
     aa8:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     aaa:	ldmia.w	sp!, {r4, lr}
     aae:	b.w	92a4 <ExFatFile::seekSet(unsigned long long)>
     ab2:	pop	{r4, pc}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     ab4:	ldr	r0, [r0, #96]	; 0x60
     ab6:	cmp	r0, #0
     ab8:	beq.n	a94 <SDFile::rewindDirectory()+0xc>
     aba:	ldrb.w	r3, [r0, #49]	; 0x31
     abe:	tst.w	r3, #80	; 0x50
     ac2:	beq.n	a94 <SDFile::rewindDirectory()+0xc>
     ac4:	movs	r2, #0
     ac6:	movs	r3, #0
     ac8:	b.w	92a4 <ExFatFile::seekSet(unsigned long long)>

00000acc <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
     acc:	push	{r4, r5, lr}
     ace:	ldr.w	r4, [r0, #1156]	; 0x484
     ad2:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
     ad4:	cbz	r4, b00 <SDClass::rmdir(char const*)+0x34>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
     ad6:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     ad8:	mov	r2, r1
     ada:	mov	r3, r5
     adc:	mov	r1, r4
     ade:	mov	r0, sp
     ae0:	strb.w	r5, [sp]
     ae4:	strb.w	r5, [sp, #1]
     ae8:	strb.w	r5, [sp, #2]
     aec:	bl	ac28 <FatFile::open(FatVolume*, char const*, int)>
     af0:	cbnz	r0, af6 <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
     af2:	add	sp, #60	; 0x3c
     af4:	pop	{r4, r5, pc}
     af6:	mov	r0, sp
     af8:	bl	b024 <FatFile::rmdir()>
     afc:	add	sp, #60	; 0x3c
     afe:	pop	{r4, r5, pc}
     b00:	ldr.w	r0, [r0, #1160]	; 0x488
     b04:	cmp	r0, #0
     b06:	beq.n	af2 <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     b08:	mov	r2, r1
     b0a:	mov	r3, r4
     b0c:	mov	r1, r0
     b0e:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
     b10:	strb.w	r4, [sp, #49]	; 0x31
     b14:	strb.w	r4, [sp, #50]	; 0x32
     b18:	strb.w	r4, [sp, #51]	; 0x33
     b1c:	bl	9880 <ExFatFile::open(ExFatVolume*, char const*, int)>
     b20:	cmp	r0, #0
     b22:	beq.n	af2 <SDClass::rmdir(char const*)+0x26>
     b24:	mov	r0, sp
     b26:	bl	9f70 <ExFatFile::rmdir()>
     b2a:	add	sp, #60	; 0x3c
     b2c:	pop	{r4, r5, pc}
     b2e:	nop

00000b30 <SDClass::rename(char const*, char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool rename(const char *oldfilepath, const char *newfilepath) {
     b30:	push	{r4, r5, r6, lr}
     b32:	ldr.w	r4, [r0, #1156]	; 0x484
     b36:	sub	sp, #56	; 0x38
     b38:	mov	r6, r2
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     b3a:	cbz	r4, b6e <SDClass::rename(char const*, char const*)+0x3e>
     b3c:	movs	r5, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     b3e:	addw	r4, r4, #1092	; 0x444
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     b42:	mov	r2, r1
     b44:	mov	r3, r5
     b46:	mov	r1, r4
     b48:	mov	r0, sp
     b4a:	strb.w	r5, [sp]
     b4e:	strb.w	r5, [sp, #1]
     b52:	strb.w	r5, [sp, #2]
     b56:	bl	ab68 <FatFile::open(FatFile*, char const*, int)>
     b5a:	cbnz	r0, b60 <SDClass::rename(char const*, char const*)+0x30>
		return sdfs.rename(oldfilepath, newfilepath);
	}
     b5c:	add	sp, #56	; 0x38
     b5e:	pop	{r4, r5, r6, pc}
     b60:	mov	r2, r6
     b62:	mov	r1, r4
     b64:	mov	r0, sp
     b66:	bl	ae50 <FatFile::rename(FatFile*, char const*)>
     b6a:	add	sp, #56	; 0x38
     b6c:	pop	{r4, r5, r6, pc}
     b6e:	ldr.w	r0, [r0, #1160]	; 0x488
     b72:	cmp	r0, #0
     b74:	beq.n	b5c <SDClass::rename(char const*, char const*)+0x2c>
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     b76:	add.w	r5, r0, #1096	; 0x448
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     b7a:	mov	r2, r1
     b7c:	mov	r3, r4
     b7e:	mov	r1, r5
     b80:	mov	r0, sp
     b82:	strb.w	r4, [sp, #49]	; 0x31
     b86:	strb.w	r4, [sp, #50]	; 0x32
     b8a:	strb.w	r4, [sp, #51]	; 0x33
     b8e:	bl	9780 <ExFatFile::open(ExFatFile*, char const*, int)>
     b92:	cmp	r0, #0
     b94:	beq.n	b5c <SDClass::rename(char const*, char const*)+0x2c>
     b96:	mov	r2, r6
     b98:	mov	r1, r5
     b9a:	mov	r0, sp
     b9c:	bl	a38c <ExFatFile::rename(ExFatFile*, char const*)>
     ba0:	add	sp, #56	; 0x38
     ba2:	pop	{r4, r5, r6, pc}

00000ba4 <SDClass::usedSize()>:
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
     ba4:	push	{r3, r4, r5, lr}
     ba6:	mov	r5, r0
     ba8:	ldr.w	r0, [r0, #1156]	; 0x484
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     bac:	cbz	r0, be0 <SDClass::usedSize()+0x3c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     bae:	ldr	r4, [r0, #28]
     bb0:	subs	r4, #1
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     bb2:	bl	b6bc <FatPartition::freeClusterCount()>
     bb6:	ldr.w	r3, [r5, #1156]	; 0x484
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
     bba:	subs	r4, r4, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     bbc:	cbz	r3, bd0 <SDClass::usedSize()+0x2c>
     bbe:	ldrb	r0, [r3, #6]
     bc0:	mov.w	r3, #512	; 0x200
     bc4:	lsl.w	r0, r3, r0
     bc8:	uxth	r0, r0
     bca:	umull	r0, r1, r0, r4
     bce:	pop	{r3, r4, r5, pc}
     bd0:	ldr.w	r3, [r5, #1160]	; 0x488
     bd4:	cbz	r3, bf0 <SDClass::usedSize()+0x4c>
     bd6:	ldr.w	r0, [r3, #1084]	; 0x43c
     bda:	umull	r0, r1, r0, r4
     bde:	pop	{r3, r4, r5, pc}
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     be0:	ldr.w	r0, [r5, #1160]	; 0x488
     be4:	cbz	r0, bf0 <SDClass::usedSize()+0x4c>
     be6:	ldr.w	r4, [r0, #1072]	; 0x430
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     bea:	bl	9c0c <ExFatPartition::freeClusterCount()>
     bee:	b.n	bb6 <SDClass::usedSize()+0x12>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     bf0:	movs	r0, #0
     bf2:	movs	r1, #0
		  * (uint64_t)sdfs.bytesPerCluster();
	}
     bf4:	pop	{r3, r4, r5, pc}
     bf6:	nop

00000bf8 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
     bf8:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     bfa:	cbz	r3, c02 <SDFile::position()+0xa>
     bfc:	ldr	r0, [r3, #20]
     bfe:	movs	r1, #0
     c00:	bx	lr
     c02:	ldr	r3, [r0, #96]	; 0x60
     c04:	cbz	r3, c0c <SDFile::position()+0x14>
     c06:	ldmia.w	r3, {r0, r1}
     c0a:	bx	lr
     c0c:	mov	r0, r3
     c0e:	mov	r1, r3
		return sdfatfile.curPosition();
	}
     c10:	bx	lr
     c12:	nop

00000c14 <SDFile::size()>:
	virtual uint64_t size() {
     c14:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     c16:	cbz	r3, c1e <SDFile::size()+0xa>
     c18:	ldr	r0, [r3, #28]
     c1a:	movs	r1, #0
     c1c:	bx	lr
     c1e:	ldr	r3, [r0, #96]	; 0x60
     c20:	cbz	r3, c28 <SDFile::size()+0x14>
     c22:	ldr	r0, [r3, #16]
     c24:	ldr	r1, [r3, #20]
     c26:	bx	lr
     c28:	mov	r0, r3
     c2a:	mov	r1, r3
		return sdfatfile.size();
	}
     c2c:	bx	lr
     c2e:	nop

00000c30 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     c30:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     c32:	cbz	r3, c3a <SDFile::read(void*, unsigned int)+0xa>
     c34:	mov	r0, r3
     c36:	b.w	ac44 <FatFile::read(void*, unsigned int)>
     c3a:	ldr	r0, [r0, #96]	; 0x60
     c3c:	cbz	r0, c42 <SDFile::read(void*, unsigned int)+0x12>
     c3e:	b.w	90cc <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     c42:	mov.w	r0, #4294967295
     c46:	bx	lr

00000c48 <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     c48:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     c4a:	cbz	r3, c52 <SDFile::peek()+0xa>
     c4c:	mov	r0, r3
     c4e:	b.w	ade4 <FatFile::peek()>
     c52:	ldr	r0, [r0, #96]	; 0x60
     c54:	cbz	r0, c5a <SDFile::peek()+0x12>
     c56:	b.w	9274 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     c5a:	mov.w	r0, #4294967295
     c5e:	bx	lr

00000c60 <SDClass::totalSize()>:
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
     c60:	ldr.w	r2, [r0, #1156]	; 0x484
     c64:	cbz	r2, c7a <SDClass::totalSize()+0x1a>
     c66:	ldrb	r1, [r2, #6]
     c68:	ldr	r0, [r2, #28]
     c6a:	mov.w	r3, #512	; 0x200
     c6e:	lsls	r3, r1
     c70:	uxth	r3, r3
     c72:	subs	r0, #1
     c74:	umull	r0, r1, r3, r0
     c78:	bx	lr
     c7a:	ldr.w	r2, [r0, #1160]	; 0x488
     c7e:	cbz	r2, c8e <SDClass::totalSize()+0x2e>
     c80:	ldr.w	r3, [r2, #1072]	; 0x430
     c84:	ldr.w	r0, [r2, #1084]	; 0x43c
     c88:	umull	r0, r1, r3, r0
     c8c:	bx	lr
     c8e:	movs	r0, #0
     c90:	movs	r1, #0
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
	}
     c92:	bx	lr

00000c94 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     c94:	ldr	r3, [r0, #92]	; 0x5c
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  }
  /** \return True if this is a directory else false. */
  bool isDir() const {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     c96:	cbz	r3, ca6 <SDFile::isDirectory()+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     c98:	ldrb	r3, [r3, #0]
     c9a:	tst.w	r3, #112	; 0x70
     c9e:	ite	ne
     ca0:	movne	r0, #1
     ca2:	moveq	r0, #0
     ca4:	bx	lr
     ca6:	ldr	r0, [r0, #96]	; 0x60
     ca8:	cbz	r0, cb8 <SDFile::isDirectory()+0x24>
   */
  bool isBusy();
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     caa:	ldrb.w	r3, [r0, #49]	; 0x31
     cae:	tst.w	r3, #80	; 0x50
     cb2:	ite	ne
     cb4:	movne	r0, #1
     cb6:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     cb8:	bx	lr
     cba:	nop

00000cbc <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     cbc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     cc0:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
     cc2:	sub	sp, #80	; 0x50
     cc4:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     cc6:	beq.n	d4c <SDClass::open(char const*, unsigned char)+0x90>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     cc8:	cmp	r3, #2
		SDFAT_FILE file = sdfs.open(filepath, flags);
     cca:	add.w	r1, r1, #4
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     cce:	movw	r3, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
     cd2:	mov	r0, sp
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
     cd4:	it	ne
     cd6:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
     cd8:	bl	c46c <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     cdc:	ldr	r3, [sp, #72]	; 0x48
     cde:	cmp	r3, #0
     ce0:	beq.n	d5e <SDClass::open(char const*, unsigned char)+0xa2>
		if (file) return File(new SDFile(file));
     ce2:	movs	r0, #104	; 0x68
     ce4:	bl	f958 <operator new(unsigned int)>
     ce8:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     cea:	ldrb.w	r6, [sp, #4]
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     cee:	ldr	r0, [pc, #136]	; (d78 <SDClass::open(char const*, unsigned char)+0xbc>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     cf0:	ldr	r1, [pc, #136]	; (d7c <SDClass::open(char const*, unsigned char)+0xc0>)
     cf2:	ldr	r2, [sp, #8]
     cf4:	ldrb.w	r3, [sp, #12]
     cf8:	str	r0, [r4, #0]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     cfa:	add	r7, sp, #16
     cfc:	strb	r6, [r4, #24]
     cfe:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
     d00:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     d02:	mov.w	r8, #1000	; 0x3e8
     d06:	mov	r1, r7
     d08:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     d0c:	str	r2, [r4, #28]
     d0e:	strb.w	r3, [r4, #32]
     d12:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     d14:	strb	r6, [r4, #12]
     d16:	str	r6, [r4, #16]
     d18:	str.w	r8, [r4, #8]
     d1c:	bl	c224 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     d20:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     d22:	ldr	r1, [pc, #92]	; (d80 <SDClass::open(char const*, unsigned char)+0xc4>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     d24:	ldr	r2, [pc, #92]	; (d84 <SDClass::open(char const*, unsigned char)+0xc8>)
     d26:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     d28:	adds	r3, #1
     d2a:	strb	r6, [r5, #4]
     d2c:	str.w	r8, [r5, #8]
     d30:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     d32:	str	r4, [r5, #16]
     d34:	str	r1, [r4, #20]
		if (f) f->refcount++;
     d36:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     d38:	str	r2, [r5, #0]
     d3a:	ldr	r3, [pc, #76]	; (d88 <SDClass::open(char const*, unsigned char)+0xcc>)
     d3c:	str	r3, [sp, #0]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     d3e:	mov	r0, r7
     d40:	bl	c29c <FsBaseFile::close()>
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
     d44:	mov	r0, r5
     d46:	add	sp, #80	; 0x50
     d48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(16)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
     d4c:	movw	r3, #16898	; 0x4202
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     d50:	adds	r1, #4
     d52:	mov	r0, sp
     d54:	bl	c46c <FsVolume::open(char const*, int)>
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     d58:	ldr	r3, [sp, #72]	; 0x48
     d5a:	cmp	r3, #0
     d5c:	bne.n	ce2 <SDClass::open(char const*, unsigned char)+0x26>
     d5e:	ldr	r3, [sp, #76]	; 0x4c
     d60:	cmp	r3, #0
     d62:	bne.n	ce2 <SDClass::open(char const*, unsigned char)+0x26>
     d64:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     d68:	ldr	r2, [pc, #24]	; (d84 <SDClass::open(char const*, unsigned char)+0xc8>)
     d6a:	strb	r3, [r5, #4]
     d6c:	strb	r3, [r5, #12]
     d6e:	str	r3, [r5, #16]
     d70:	str	r1, [r5, #8]
     d72:	str	r2, [r5, #0]
     d74:	add	r7, sp, #16
     d76:	b.n	d3a <SDClass::open(char const*, unsigned char)+0x7e>
     d78:	.word	0x00014c3c
     d7c:	.word	0x00014b70
     d80:	.word	0x00014bb8
     d84:	.word	0x00014bdc
     d88:	.word	0x00014b94

00000d8c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     d8c:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     d8e:	cbz	r3, d96 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     d90:	mov	r0, r3
     d92:	b.w	b288 <FatFile::sync()>
     d96:	ldr	r0, [r0, #76]	; 0x4c
     d98:	cbz	r0, d9e <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     d9a:	b.w	a110 <ExFatFile::sync()>
     d9e:	bx	lr

00000da0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     da0:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     da2:	cbz	r3, daa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     da4:	mov	r0, r3
     da6:	b.w	b30c <FatFile::write(void const*, unsigned int)>
     daa:	ldr	r0, [r0, #76]	; 0x4c
     dac:	cbz	r0, db2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     dae:	b.w	a51c <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     db2:	bx	lr

00000db4 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     db4:	ldr	r3, [r0, #92]	; 0x5c
     db6:	cbz	r3, dbe <SDFile::write(void const*, unsigned int)+0xa>
     db8:	mov	r0, r3
     dba:	b.w	b30c <FatFile::write(void const*, unsigned int)>
     dbe:	ldr	r0, [r0, #96]	; 0x60
     dc0:	cbz	r0, dc6 <SDFile::write(void const*, unsigned int)+0x12>
     dc2:	b.w	a51c <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     dc6:	bx	lr

00000dc8 <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     dc8:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     dca:	cbz	r2, de6 <SDFile::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     dcc:	ldrb	r3, [r2, #0]
     dce:	and.w	r3, r3, #8
     dd2:	and.w	r0, r3, #255	; 0xff
     dd6:	cbz	r3, e1a <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     dd8:	ldr	r3, [r2, #28]
     dda:	ldr	r0, [r2, #20]
     ddc:	subs	r0, r3, r0
     dde:	it	mi
     de0:	mvnmi.w	r0, #2147483648	; 0x80000000
     de4:	bx	lr
     de6:	ldr	r1, [r0, #96]	; 0x60
     de8:	cbz	r1, e1c <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     dea:	ldrb.w	r3, [r1, #49]	; 0x31
     dee:	and.w	r3, r3, #8
     df2:	and.w	r0, r3, #255	; 0xff
     df6:	cbz	r3, e1a <SDFile::available()+0x52>
     df8:	ldrd	r2, r3, [r1, #16]
     dfc:	ldrd	r0, r1, [r1]
     e00:	subs	r0, r2, r0
     e02:	push	{r4, r5}
     e04:	sbc.w	r1, r3, r1
     e08:	movs	r5, #0
     e0a:	mvn.w	r4, #2147483648	; 0x80000000
     e0e:	cmp	r5, r1
     e10:	it	eq
     e12:	cmpeq	r4, r0
     e14:	bcs.n	e18 <SDFile::available()+0x50>
     e16:	mov	r0, r4
		return sdfatfile.available();
	}
     e18:	pop	{r4, r5}
     e1a:	bx	lr
     e1c:	mov	r0, r1
     e1e:	bx	lr

00000e20 <SDFile::seek(unsigned long long, int)>:
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool truncate(uint64_t size=0) {
		return sdfatfile.truncate(size);
	}
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     e20:	push	{r4, r6, r7}
     e22:	ldr	r4, [sp, #12]
     e24:	mov	r6, r2
     e26:	mov	r7, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     e28:	cbz	r4, e38 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     e2a:	cmp	r4, #1
     e2c:	beq.n	e6c <SDFile::seek(unsigned long long, int)+0x4c>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     e2e:	cmp	r4, #2
     e30:	beq.n	e4e <SDFile::seek(unsigned long long, int)+0x2e>
		return false;
	}
     e32:	movs	r0, #0
     e34:	pop	{r4, r6, r7}
     e36:	bx	lr
     e38:	ldr	r4, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e3a:	cbz	r4, e74 <SDFile::seek(unsigned long long, int)+0x54>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e3c:	cmp	r3, #1
     e3e:	it	eq
     e40:	cmpeq	r2, #0
     e42:	bcs.n	e32 <SDFile::seek(unsigned long long, int)+0x12>
     e44:	mov	r0, r4
     e46:	mov	r1, r2
     e48:	pop	{r4, r6, r7}
     e4a:	b.w	b080 <FatFile::seekSet(unsigned long)>
     e4e:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e50:	cbz	r3, e80 <SDFile::seek(unsigned long long, int)+0x60>
   * Can't be used for directory files since file size is not defined.
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int64_t offset = 0) {
    return seekSet(fileSize() + offset);
     e52:	ldr	r2, [r3, #28]
     e54:	adds	r6, r6, r2
     e56:	adc.w	r7, r7, #0
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e5a:	cmp	r7, #1
     e5c:	it	eq
     e5e:	cmpeq	r6, #0
     e60:	bcs.n	e32 <SDFile::seek(unsigned long long, int)+0x12>
     e62:	mov	r1, r6
     e64:	mov	r0, r3
     e66:	pop	{r4, r6, r7}
     e68:	b.w	b080 <FatFile::seekSet(unsigned long)>
     e6c:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     e6e:	cbz	r3, e94 <SDFile::seek(unsigned long long, int)+0x74>
  /** Set the files position to current position + \a pos. See seekSet().
   * \param[in] offset The new position in bytes from the current position.
   * \return true for success or false for failure.
   */
  bool seekCur(int64_t offset) {
    return seekSet(curPosition() + offset);
     e70:	ldr	r2, [r3, #20]
     e72:	b.n	e54 <SDFile::seek(unsigned long long, int)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e74:	ldr	r0, [r0, #96]	; 0x60
     e76:	cmp	r0, #0
     e78:	beq.n	e32 <SDFile::seek(unsigned long long, int)+0x12>
     e7a:	pop	{r4, r6, r7}
     e7c:	b.w	92a4 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     e80:	ldr	r0, [r0, #96]	; 0x60
     e82:	cmp	r0, #0
     e84:	beq.n	e32 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e86:	ldrd	r2, r3, [r0, #16]
     e8a:	adds	r2, r2, r6
     e8c:	adcs	r3, r7
     e8e:	pop	{r4, r6, r7}
     e90:	b.w	92a4 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     e94:	ldr	r0, [r0, #96]	; 0x60
     e96:	cmp	r0, #0
     e98:	beq.n	e32 <SDFile::seek(unsigned long long, int)+0x12>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     e9a:	ldrd	r2, r3, [r0]
     e9e:	adds	r2, r2, r6
     ea0:	adcs	r3, r7
     ea2:	b.n	e7a <SDFile::seek(unsigned long long, int)+0x5a>

00000ea4 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ea4:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ea6:	ldr	r3, [pc, #32]	; (ec8 <File::~File()+0x24>)
     ea8:	push	{r4, lr}
     eaa:	mov	r4, r0
     eac:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     eae:	cbz	r2, ec2 <File::~File()+0x1e>
     eb0:	ldr	r3, [r2, #16]
     eb2:	subs	r3, #1
     eb4:	str	r3, [r2, #16]
     eb6:	cbnz	r3, ec2 <File::~File()+0x1e>
     eb8:	ldr	r0, [r0, #16]
     eba:	cbz	r0, ec2 <File::~File()+0x1e>
     ebc:	ldr	r3, [r0, #0]
     ebe:	ldr	r3, [r3, #32]
     ec0:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     ec2:	mov	r0, r4
     ec4:	pop	{r4, pc}
     ec6:	nop
     ec8:	.word	0x00014bdc

00000ecc <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     ecc:	push	{r3, r4, r5, lr}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     ece:	ldr	r3, [r0, #92]	; 0x5c
     ed0:	ldr	r2, [pc, #80]	; (f24 <SDFile::~SDFile()+0x58>)
     ed2:	str	r2, [r0, #0]
     ed4:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     ed6:	add.w	r5, r0, #36	; 0x24
     eda:	cbz	r3, f1a <SDFile::~SDFile()+0x4e>
     edc:	mov	r0, r5
     ede:	bl	c29c <FsBaseFile::close()>
		if (filename) free(filename);
     ee2:	ldr	r0, [r4, #100]	; 0x64
     ee4:	cbz	r0, eea <SDFile::~SDFile()+0x1e>
     ee6:	bl	10920 <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     eea:	ldr	r3, [pc, #60]	; (f28 <SDFile::~SDFile()+0x5c>)
     eec:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     eee:	mov	r0, r5
     ef0:	bl	c29c <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ef4:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     ef6:	ldr	r3, [pc, #52]	; (f2c <SDFile::~SDFile()+0x60>)
     ef8:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     efa:	cbz	r2, f0e <SDFile::~SDFile()+0x42>
     efc:	ldr	r3, [r2, #16]
     efe:	subs	r3, #1
     f00:	str	r3, [r2, #16]
     f02:	cbnz	r3, f0e <SDFile::~SDFile()+0x42>
     f04:	ldr	r0, [r4, #16]
     f06:	cbz	r0, f0e <SDFile::~SDFile()+0x42>
     f08:	ldr	r3, [r0, #0]
     f0a:	ldr	r3, [r3, #32]
     f0c:	blx	r3
	}
     f0e:	mov	r0, r4
     f10:	movs	r1, #104	; 0x68
     f12:	bl	f95c <operator delete(void*, unsigned int)>
     f16:	mov	r0, r4
     f18:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     f1a:	ldr	r3, [r0, #96]	; 0x60
     f1c:	cmp	r3, #0
     f1e:	bne.n	edc <SDFile::~SDFile()+0x10>
     f20:	b.n	ee2 <SDFile::~SDFile()+0x16>
     f22:	nop
     f24:	.word	0x00014c3c
     f28:	.word	0x00014b94
     f2c:	.word	0x00014bdc

00000f30 <File::~File()>:
     f30:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f32:	ldr	r3, [pc, #40]	; (f5c <File::~File()+0x2c>)
     f34:	push	{r4, lr}
     f36:	mov	r4, r0
     f38:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f3a:	cbz	r2, f4e <File::~File()+0x1e>
     f3c:	ldr	r3, [r2, #16]
     f3e:	subs	r3, #1
     f40:	str	r3, [r2, #16]
     f42:	cbnz	r3, f4e <File::~File()+0x1e>
     f44:	ldr	r0, [r0, #16]
     f46:	cbz	r0, f4e <File::~File()+0x1e>
     f48:	ldr	r3, [r0, #0]
     f4a:	ldr	r3, [r3, #32]
     f4c:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     f4e:	mov	r0, r4
     f50:	movs	r1, #20
     f52:	bl	f95c <operator delete(void*, unsigned int)>
     f56:	mov	r0, r4
     f58:	pop	{r4, pc}
     f5a:	nop
     f5c:	.word	0x00014bdc

00000f60 <MTPStorage_SD::~MTPStorage_SD()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f60:	ldr.w	r2, [r0, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     f64:	push	{r3, r4, r5, lr}
     f66:	ldr	r3, [pc, #104]	; (fd0 <MTPStorage_SD::~MTPStorage_SD()+0x70>)
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f68:	ldr	r5, [pc, #104]	; (fd4 <MTPStorage_SD::~MTPStorage_SD()+0x74>)
     f6a:	str	r3, [r0, #0]
     f6c:	mov	r4, r0
     f6e:	str.w	r5, [r0, #208]	; 0xd0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f72:	cbz	r2, f7c <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     f74:	ldr	r3, [r2, #16]
     f76:	subs	r3, #1
     f78:	str	r3, [r2, #16]
     f7a:	cbz	r3, fb0 <MTPStorage_SD::~MTPStorage_SD()+0x50>
     f7c:	ldr.w	r2, [r4, #204]	; 0xcc
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f80:	str.w	r5, [r4, #188]	; 0xbc
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f84:	cbz	r2, f8e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     f86:	ldr	r3, [r2, #16]
     f88:	subs	r3, #1
     f8a:	str	r3, [r2, #16]
     f8c:	cbz	r3, fc0 <MTPStorage_SD::~MTPStorage_SD()+0x60>
     f8e:	ldr.w	r2, [r4, #184]	; 0xb8
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     f92:	str.w	r5, [r4, #168]	; 0xa8
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     f96:	cbz	r2, fac <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     f98:	ldr	r3, [r2, #16]
     f9a:	subs	r3, #1
     f9c:	str	r3, [r2, #16]
     f9e:	cbnz	r3, fac <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     fa0:	ldr.w	r0, [r4, #184]	; 0xb8
     fa4:	cbz	r0, fac <MTPStorage_SD::~MTPStorage_SD()+0x4c>
     fa6:	ldr	r3, [r0, #0]
     fa8:	ldr	r3, [r3, #32]
     faa:	blx	r3
     fac:	mov	r0, r4
     fae:	pop	{r3, r4, r5, pc}
     fb0:	ldr.w	r0, [r0, #224]	; 0xe0
     fb4:	cmp	r0, #0
     fb6:	beq.n	f7c <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     fb8:	ldr	r3, [r0, #0]
     fba:	ldr	r3, [r3, #32]
     fbc:	blx	r3
     fbe:	b.n	f7c <MTPStorage_SD::~MTPStorage_SD()+0x1c>
     fc0:	ldr.w	r0, [r4, #204]	; 0xcc
     fc4:	cmp	r0, #0
     fc6:	beq.n	f8e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     fc8:	ldr	r3, [r0, #0]
     fca:	ldr	r3, [r3, #32]
     fcc:	blx	r3
     fce:	b.n	f8e <MTPStorage_SD::~MTPStorage_SD()+0x2e>
     fd0:	.word	0x00014e44
     fd4:	.word	0x00014bdc

00000fd8 <SDFile::~SDFile()>:
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	friend class SDClass;
public:
	virtual ~SDFile(void) {
     fd8:	push	{r3, r4, r5, lr}
     fda:	ldr	r3, [r0, #92]	; 0x5c
     fdc:	ldr	r2, [pc, #72]	; (1028 <SDFile::~SDFile()+0x50>)
     fde:	str	r2, [r0, #0]
     fe0:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     fe2:	add.w	r5, r0, #36	; 0x24
     fe6:	cbz	r3, 101e <SDFile::~SDFile()+0x46>
     fe8:	mov	r0, r5
     fea:	bl	c29c <FsBaseFile::close()>
		if (filename) free(filename);
     fee:	ldr	r0, [r4, #100]	; 0x64
     ff0:	cbz	r0, ff6 <SDFile::~SDFile()+0x1e>
     ff2:	bl	10920 <free>
     ff6:	ldr	r3, [pc, #52]	; (102c <SDFile::~SDFile()+0x54>)
     ff8:	str	r3, [r4, #20]
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     ffa:	mov	r0, r5
     ffc:	bl	c29c <FsBaseFile::close()>
    1000:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    1002:	ldr	r3, [pc, #44]	; (1030 <SDFile::~SDFile()+0x58>)
    1004:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1006:	cbz	r2, 101a <SDFile::~SDFile()+0x42>
    1008:	ldr	r3, [r2, #16]
    100a:	subs	r3, #1
    100c:	str	r3, [r2, #16]
    100e:	cbnz	r3, 101a <SDFile::~SDFile()+0x42>
    1010:	ldr	r0, [r4, #16]
    1012:	cbz	r0, 101a <SDFile::~SDFile()+0x42>
    1014:	ldr	r3, [r0, #0]
    1016:	ldr	r3, [r3, #32]
    1018:	blx	r3
	}
    101a:	mov	r0, r4
    101c:	pop	{r3, r4, r5, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    101e:	ldr	r3, [r0, #96]	; 0x60
    1020:	cmp	r3, #0
    1022:	bne.n	fe8 <SDFile::~SDFile()+0x10>
    1024:	b.n	fee <SDFile::~SDFile()+0x16>
    1026:	nop
    1028:	.word	0x00014c3c
    102c:	.word	0x00014b94
    1030:	.word	0x00014bdc

00001034 <storage_configure()>:
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
    1034:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
    1038:	movs	r1, #7
MTPStorage_SD storage;
MTPD       mtpd(&storage);


void storage_configure()
{
    103a:	sub	sp, #52	; 0x34
  #if USE_SD==1
    #if defined SD_SCK
      SPI.setMOSI(SD_MOSI);
    103c:	ldr	r0, [pc, #372]	; (11b4 <storage_configure()+0x180>)
    103e:	ldr	r6, [pc, #376]	; (11b8 <storage_configure()+0x184>)
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    1040:	ldr	r5, [pc, #376]	; (11bc <storage_configure()+0x188>)
    1042:	bl	7c78 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
    1046:	movs	r1, #12
    1048:	ldr	r0, [pc, #360]	; (11b4 <storage_configure()+0x180>)
    104a:	bl	7d1c <SPIClass::setMISO(unsigned char)>
      SPI.setSCK(SD_SCK);
    104e:	movs	r1, #14
    1050:	ldr	r0, [pc, #352]	; (11b4 <storage_configure()+0x180>)
    1052:	bl	7dbc <SPIClass::setSCK(unsigned char)>
          }
        }
        else if(cs[ii]<BUILTIN_SDCARD)
      #endif
      {
        pinMode(cs[ii],OUTPUT); digitalWriteFast(cs[ii],HIGH);
    1056:	movs	r1, #1
    1058:	movs	r0, #10
    105a:	bl	e708 <pinMode>
			} else if (pin == 8) {
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
			} else if (pin == 9) {
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
			} else if (pin == 10) {
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    105e:	ldr	r3, [pc, #352]	; (11c0 <storage_configure()+0x18c>)
    1060:	movs	r4, #0
    1062:	movs	r2, #16
    1064:	movs	r7, #10
    1066:	str	r2, [r3, #0]
    1068:	strb.w	r4, [sp, #13]
    106c:	str	r4, [sp, #20]
    106e:	add	r3, sp, #12
    1070:	strb.w	r7, [sp, #12]
    1074:	str	r6, [sp, #16]
    1076:	ldmia.w	r3, {r0, r1, r2}
    107a:	add	r3, sp, #24
    107c:	stmia.w	r3, {r0, r1, r2}
    1080:	strb.w	r4, [sp, #25]
    1084:	str	r4, [sp, #32]
    1086:	strb.w	r7, [sp, #24]
    108a:	str	r6, [sp, #28]
    108c:	ldmia.w	r3, {r0, r1, r2}
    1090:	add	r3, sp, #36	; 0x24
    1092:	stmia.w	r3, {r0, r1, r2}
    1096:	add.w	r4, r5, #1184	; 0x4a0
    109a:	ldmia	r3, {r1, r2, r3}
    109c:	mov	r0, r4
    109e:	bl	c724 <SdSpiCard::begin(SdSpiConfig)>
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
    10a2:	ldrb.w	r3, [r5, #1203]	; 0x4b3
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    10a6:	str.w	r4, [r5, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    10aa:	cbz	r3, 10ca <storage_configure()+0x96>
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
    10ac:	ldr	r3, [pc, #276]	; (11c4 <storage_configure()+0x190>)
    10ae:	ldr	r1, [pc, #280]	; (11c8 <storage_configure()+0x194>)
    10b0:	ldr	r3, [r3, #0]
    10b2:	str	r3, [sp, #0]
    10b4:	movs	r2, #0
    10b6:	movs	r3, #10
    10b8:	ldr	r0, [pc, #272]	; (11cc <storage_configure()+0x198>)
    10ba:	bl	f7e8 <Print::printf(char const*, ...)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    10be:	ldr	r0, [pc, #268]	; (11cc <storage_configure()+0x198>)
      uint64_t totalSize = ramfs[ii].totalSize();
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    }
    #endif
}
    10c0:	add	sp, #52	; 0x34
    10c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    10c6:	b.w	f7b8 <Print::println()>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
    10ca:	mov	r1, r4
    10cc:	adds	r0, r5, #4
    10ce:	bl	c3a4 <FsVolume::begin(BlockDeviceInterface*)>
    10d2:	cmp	r0, #0
    10d4:	beq.n	10ac <storage_configure()+0x78>
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    10d6:	ldr	r1, [pc, #248]	; (11d0 <storage_configure()+0x19c>)
        if(!sdx[ii].sdfs.begin(SdSpiConfig(cs[ii], SHARED_SPI, SPI_SPEED))) 
        { Serial.printf("SD Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
    10d8:	ldr.w	r8, [pc, #232]	; 11c4 <storage_configure()+0x190>
    10dc:	ldr	r3, [r1, #4]
    10de:	ldr.w	r2, [r8]
    10e2:	cmp	r3, #19
    10e4:	bgt.n	10f2 <storage_configure()+0xbe>
        sd_name[fsCount] = name;
    10e6:	add.w	r4, r1, r3, lsl #2
        sdx[fsCount++] = &fs;
    10ea:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
    10ec:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    10ee:	str	r5, [r4, #88]	; 0x58
    10f0:	str	r3, [r1, #4]
    10f2:	ldr.w	r0, [r5, #1156]	; 0x484
    10f6:	ldr	r3, [pc, #196]	; (11bc <storage_configure()+0x188>)
    10f8:	cmp	r0, #0
    10fa:	beq.n	118a <storage_configure()+0x156>
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    10fc:	ldrb	r6, [r0, #6]
    10fe:	ldr	r4, [r0, #28]
    1100:	mov.w	r3, #512	; 0x200
    1104:	lsl.w	r6, r3, r6
    1108:	uxth	r6, r6
    110a:	subs	r4, #1
    110c:	umull	r6, r7, r6, r4
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
    1110:	bl	b6bc <FatPartition::freeClusterCount()>
    1114:	ldr.w	r3, [r5, #1156]	; 0x484
    1118:	ldr	r2, [pc, #160]	; (11bc <storage_configure()+0x188>)
	}
	bool rmdir(const char *filepath) {
		return sdfs.rmdir(filepath);
	}
	uint64_t usedSize() {
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    111a:	subs	r4, r4, r0
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    111c:	cbz	r3, 1176 <storage_configure()+0x142>
    111e:	ldrb	r0, [r3, #6]
    1120:	ldr.w	r2, [r8]
    1124:	mov.w	r3, #512	; 0x200
    1128:	lsl.w	r0, r3, r0
    112c:	uxth	r0, r0
    112e:	umull	r4, r5, r0, r4
          uint64_t totalSize = sdx[ii].totalSize();
          uint64_t usedSize  = sdx[ii].usedSize();
          Serial.printf("SD Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
    1132:	str	r2, [sp, #0]
    1134:	movs	r2, #0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    1136:	mov	r9, r2
    1138:	ldr	r1, [pc, #152]	; (11d4 <storage_configure()+0x1a0>)
    113a:	ldr	r0, [pc, #144]	; (11cc <storage_configure()+0x198>)
    113c:	mov.w	r8, #10
    1140:	movs	r3, #10
    1142:	bl	f7e8 <Print::printf(char const*, ...)>
    1146:	mov	r2, r6
    1148:	mov	r3, r7
    114a:	stmia.w	sp, {r8, r9}
    114e:	ldr	r0, [pc, #124]	; (11cc <storage_configure()+0x198>)
    1150:	bl	f804 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1154:	movs	r1, #1
    1156:	ldr	r0, [pc, #128]	; (11d8 <storage_configure()+0x1a4>)
    1158:	bl	de04 <usb_serial_write>
    115c:	stmia.w	sp, {r8, r9}
    1160:	mov	r2, r4
    1162:	mov	r3, r5
    1164:	ldr	r0, [pc, #100]	; (11cc <storage_configure()+0x198>)
    1166:	bl	f804 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }
    116a:	ldr	r0, [pc, #96]	; (11cc <storage_configure()+0x198>)
      uint64_t totalSize = ramfs[ii].totalSize();
      uint64_t usedSize  = ramfs[ii].usedSize();
      Serial.printf("Storage %d %s ",ii,lfs_str[ii]); Serial.print(totalSize); Serial.print(" "); Serial.println(usedSize);
    }
    #endif
}
    116c:	add	sp, #52	; 0x34
    116e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1172:	b.w	f7b8 <Print::println()>
    1176:	ldr.w	r3, [r2, #1160]	; 0x488
    117a:	ldr.w	r2, [r8]
    117e:	cbz	r3, 11ac <storage_configure()+0x178>
    1180:	ldr.w	r0, [r3, #1084]	; 0x43c
    1184:	umull	r4, r5, r0, r4
    1188:	b.n	1132 <storage_configure()+0xfe>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    118a:	ldr.w	r0, [r3, #1160]	; 0x488
    118e:	cbz	r0, 11a2 <storage_configure()+0x16e>
    1190:	ldr.w	r4, [r0, #1072]	; 0x430
    1194:	ldr.w	r6, [r0, #1084]	; 0x43c
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    1198:	umull	r6, r7, r4, r6
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    119c:	bl	9c0c <ExFatPartition::freeClusterCount()>
    11a0:	b.n	1114 <storage_configure()+0xe0>
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    11a2:	movs	r4, #0
    11a4:	movs	r5, #0
    11a6:	mov	r6, r4
    11a8:	mov	r7, r5
    11aa:	b.n	1132 <storage_configure()+0xfe>
  uint32_t blocksPerCluster() __attribute__ ((deprecated)) {return sectorsPerCluster();} //NOLINT
#endif  // DOXYGEN_SHOULD_SKIP_THIS
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {
    return m_fVol ? m_fVol->bytesPerCluster() :
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    11ac:	movs	r4, #0
    11ae:	movs	r5, #0
    11b0:	b.n	1132 <storage_configure()+0xfe>
    11b2:	nop
    11b4:	.word	0x1fff0994
    11b8:	.word	0x01f78a40
    11bc:	.word	0x1fff4550
    11c0:	.word	0x400ff084
    11c4:	.word	0x1fff0978
    11c8:	.word	0x00014d1c
    11cc:	.word	0x1fff0c58
    11d0:	.word	0x1fff3c48
    11d4:	.word	0x00014d44
    11d8:	.word	0x00014f70

000011dc <pushData(unsigned long*)>:
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    11dc:	push	{r4, r5, r6, lr}
    11de:	ldr	r6, [pc, #76]	; (122c <pushData(unsigned long*)+0x50>)
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    11e0:	ldr	r3, [pc, #76]	; (1230 <pushData(unsigned long*)+0x54>)
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    11e2:	ldrh	r4, [r6, #0]
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    11e4:	ldrh	r5, [r3, #0]
uint16_t maxCount=0;

void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
    11e6:	adds	r4, #1
    11e8:	uxth	r4, r4
  if(f >= MAXBUF) f=0;
    11ea:	cmp	r4, #72	; 0x48
    11ec:	it	cs
    11ee:	movcs	r4, #0
  if(f == rear_) return 0;
    11f0:	cmp	r4, r5
    11f2:	beq.n	1226 <pushData(unsigned long*)+0x4a>
    11f4:	mov	r1, r0

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
    11f6:	ldr	r0, [pc, #60]	; (1234 <pushData(unsigned long*)+0x58>)
    11f8:	mov.w	r2, #1024	; 0x400
    11fc:	add.w	r0, r0, r4, lsl #10
    1200:	bl	db90 <memcpy>
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    1204:	cmp	r4, r5
  if(count>maxCount) maxCount=count;
    1206:	ldr	r3, [pc, #48]	; (1238 <pushData(unsigned long*)+0x5c>)
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;

  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
    1208:	strh	r4, [r6, #0]
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    120a:	itet	cc
    120c:	rsbcc	r5, r5, #72	; 0x48
    1210:	subcs	r4, r4, r5
    1212:	addcc	r4, r4, r5
  if(count>maxCount) maxCount=count;
    1214:	ldrh	r2, [r3, #0]
  uint32_t *ptr= data_buffer+f*NBUF_ACQ;
  memcpy(ptr,src,NBUF_ACQ*4);
  front_ = f;
  //
  uint16_t count;
  count = (front_ >= rear_) ? (front_ - rear_) : front_+ (MAXBUF -rear_) ;
    1216:	uxth	r4, r4
  if(count>maxCount) maxCount=count;
    1218:	cmp	r2, r4
    121a:	bcs.n	1222 <pushData(unsigned long*)+0x46>
    121c:	strh	r4, [r3, #0]
  //
  return 1;
    121e:	movs	r0, #1
    1220:	pop	{r4, r5, r6, pc}
    1222:	movs	r0, #1
}
    1224:	pop	{r4, r5, r6, pc}
void resetData(void) {  front_ = 0;  rear_ = 0; }

uint16_t pushData(uint32_t * src)
{ uint16_t f =front_ + 1;
  if(f >= MAXBUF) f=0;
  if(f == rear_) return 0;
    1226:	movs	r0, #0
    1228:	pop	{r4, r5, r6, pc}
    122a:	nop
    122c:	.word	0x1fff3d4c
    1230:	.word	0x20006a1e
    1234:	.word	0x1fff4a08
    1238:	.word	0x20006a1c

0000123c <acq_isr()>:

  uint32_t acq_count=0;
  uint32_t acq_miss=0;

    void acq_isr(void)
    {
    123c:	push	{r3, r4, r5, r6, r7, lr}
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
    123e:	ldr	r0, [pc, #88]	; (1298 <acq_isr()+0x5c>)

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    1240:	ldr	r4, [pc, #88]	; (129c <acq_isr()+0x60>)

        daddr = (uint32_t)(dma.TCD->DADDR);
    1242:	ldr	r2, [r0, #0]

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    1244:	ldr	r1, [r4, #0]

        daddr = (uint32_t)(dma.TCD->DADDR);
        dma.clearInterrupt();

        if (daddr < (uint32_t)tdm_rx_buffer + sizeof(tdm_rx_buffer) / 2) {
    1246:	ldr	r3, [pc, #88]	; (12a0 <acq_isr()+0x64>)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;

        daddr = (uint32_t)(dma.TCD->DADDR);
    1248:	ldr	r7, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    124a:	ldr	r5, [pc, #88]	; (12a4 <acq_isr()+0x68>)
    124c:	ldrb	r6, [r0, #4]
    124e:	ldr	r0, [pc, #88]	; (12a8 <acq_isr()+0x6c>)
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
    1250:	sub.w	r2, r3, #1024	; 0x400

    void acq_isr(void)
    {
        uint32_t daddr;
        uint32_t *src;
        acq_count++;
    1254:	adds	r1, #1
    1256:	str	r1, [r4, #0]
            // need to remove data from the second half
            src = &tdm_rx_buffer[NBUF_I2S];
        } else {
            // DMA is receiving to the second half of the buffer
            // need to remove data from the first half
            src = &tdm_rx_buffer[0];
    1258:	cmp	r7, r3
    125a:	it	cc
    125c:	movcc	r2, r3
    125e:	strb	r6, [r5, #0]
    1260:	movs	r3, #0

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
    1262:	ldr.w	r1, [r2, r3, lsl #3]
    1266:	str.w	r1, [r0, r3, lsl #3]
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
    126a:	adds	r3, #1
    126c:	cmp	r3, #128	; 0x80
    126e:	bne.n	1262 <acq_isr()+0x26>
    1270:	ldr	r1, [pc, #52]	; (12a8 <acq_isr()+0x6c>)
    1272:	mov	r3, r2
    1274:	add.w	r0, r1, #1024	; 0x400
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
    1278:	ldr	r2, [r3, #4]
    127a:	str	r2, [r1, #4]
    127c:	adds	r1, #8
            arm_dcache_delete((void*)src, sizeof(tdm_rx_buffer) / 2);
        #endif

        for(int jj=0;jj<NCH_ACQ;jj++)
        {
          for(int ii=0; ii<NDAT;ii++)
    127e:	cmp	r0, r1
    1280:	add.w	r3, r3, #8
    1284:	bne.n	1278 <acq_isr()+0x3c>
          {
            acq_rx_buffer[ichan[jj]+ii*NCH_ACQ]=src[ichan[jj]+ii*NCH_I2S];
          }
        }

        if(!pushData(acq_rx_buffer)) acq_miss++;
    1286:	ldr	r0, [pc, #32]	; (12a8 <acq_isr()+0x6c>)
    1288:	bl	11dc <pushData(unsigned long*)>
    128c:	cbnz	r0, 1296 <acq_isr()+0x5a>
    128e:	ldr	r2, [pc, #28]	; (12ac <acq_isr()+0x70>)
    1290:	ldr	r3, [r2, #0]
    1292:	adds	r3, #1
    1294:	str	r3, [r2, #0]
    1296:	pop	{r3, r4, r5, r6, r7, pc}
    1298:	.word	0x1fff1638
    129c:	.word	0x1fff3844
    12a0:	.word	0x1fff4150
    12a4:	.word	0x4000801f
    12a8:	.word	0x1fff3848
    12ac:	.word	0x20006a30

000012b0 <pullData(unsigned long*, unsigned long)>:
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    12b0:	push	{r3, r4, r5, lr}
    12b2:	ldr	r4, [pc, #72]	; (12fc <pullData(unsigned long*, unsigned long)+0x4c>)
  if(r == (front_/ndbl)) return 0;
    12b4:	ldr	r3, [pc, #72]	; (1300 <pullData(unsigned long*, unsigned long)+0x50>)
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    12b6:	ldrh	r2, [r4, #0]
  if(r == (front_/ndbl)) return 0;
    12b8:	ldrh	r3, [r3, #0]
  //
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
    12ba:	udiv	r2, r2, r1
  if(r == (front_/ndbl)) return 0;
    12be:	udiv	r5, r3, r1
    12c2:	cmp	r2, r5
    12c4:	beq.n	12f8 <pullData(unsigned long*, unsigned long)+0x48>
    12c6:	uxth	r3, r2
  if(++r >= (MAXBUF/ndbl)) r=0;
    12c8:	adds	r3, #1
    12ca:	uxth	r3, r3
    12cc:	movs	r2, #72	; 0x48
    12ce:	udiv	r2, r2, r1
    12d2:	cmp	r3, r2
    12d4:	bcs.n	12f0 <pullData(unsigned long*, unsigned long)+0x40>
    12d6:	ldr	r5, [pc, #44]	; (1304 <pullData(unsigned long*, unsigned long)+0x54>)
    12d8:	lsls	r2, r1, #10
    12da:	smulbb	r1, r1, r3
    12de:	mla	r3, r2, r3, r5
    12e2:	uxth	r5, r1
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
    12e4:	mov	r1, r3
    12e6:	bl	db90 <memcpy>
  rear_ = r*ndbl;
    12ea:	strh	r5, [r4, #0]
  return 1;
    12ec:	movs	r0, #1
    12ee:	pop	{r3, r4, r5, pc}
    12f0:	ldr	r3, [pc, #16]	; (1304 <pullData(unsigned long*, unsigned long)+0x54>)
    12f2:	lsls	r2, r1, #10
    12f4:	movs	r5, #0
    12f6:	b.n	12e4 <pullData(unsigned long*, unsigned long)+0x34>
  return 1;
}

uint16_t pullData(uint32_t * dst, uint32_t ndbl)
{ uint16_t r = (rear_/ndbl) ;
  if(r == (front_/ndbl)) return 0;
    12f8:	movs	r0, #0
  if(++r >= (MAXBUF/ndbl)) r=0;
  uint32_t *ptr= data_buffer + r*ndbl*NBUF_ACQ;
  memcpy(dst,ptr,ndbl*NBUF_ACQ*4);
  rear_ = r*ndbl;
  return 1;
}
    12fa:	pop	{r3, r4, r5, pc}
    12fc:	.word	0x20006a1e
    1300:	.word	0x1fff3d4c
    1304:	.word	0x1fff4a08

00001308 <do_menu(short)>:
void do_menu1(void);
void do_menu2(void);
void do_menu3(void);

int16_t do_menu(int16_t state)
{ // check Serial input
    1308:	push	{r4, lr}
    130a:	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    130c:	bl	ddb0 <usb_serial_available>
  if(!Serial.available()) return state;
    1310:	cbnz	r0, 1316 <do_menu(short)+0xe>
      break;
    default:
      break;
  }
  return state;
}
    1312:	mov	r0, r4
    1314:	pop	{r4, pc}
        virtual int read() { return usb_serial_getchar(); }
    1316:	bl	dd38 <usb_serial_getchar>

int16_t do_menu(int16_t state)
{ // check Serial input
  if(!Serial.available()) return state;
  char cc = Serial.read();
  switch(cc)
    131a:	uxtb	r0, r0
    131c:	cmp	r0, #114	; 0x72
    131e:	beq.n	1354 <do_menu(short)+0x4c>
    1320:	cmp	r0, #115	; 0x73
    1322:	beq.n	133e <do_menu(short)+0x36>
    1324:	cmp	r0, #113	; 0x71
    1326:	bne.n	1312 <do_menu(short)+0xa>
      if(state>=0) return state;
      state=0;
      Serial.println("\nStart");
      break;
    case 'q': // stop acquisition
      if(state<0) return state;
    1328:	cmp	r4, #0
    132a:	blt.n	1312 <do_menu(short)+0xa>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    132c:	movs	r1, #5
    132e:	ldr	r0, [pc, #60]	; (136c <do_menu(short)+0x64>)
    1330:	bl	de04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1334:	ldr	r0, [pc, #56]	; (1370 <do_menu(short)+0x68>)
    1336:	bl	f7b8 <Print::println()>
      state=4;
    133a:	movs	r4, #4
    133c:	b.n	1312 <do_menu(short)+0xa>
  if(!Serial.available()) return state;
  char cc = Serial.read();
  switch(cc)
  {
    case 's': // start acquisition
      if(state>=0) return state;
    133e:	cmp	r4, #0
    1340:	bge.n	1312 <do_menu(short)+0xa>
    1342:	movs	r1, #6
    1344:	ldr	r0, [pc, #44]	; (1374 <do_menu(short)+0x6c>)
    1346:	bl	de04 <usb_serial_write>
    134a:	ldr	r0, [pc, #36]	; (1370 <do_menu(short)+0x68>)
    134c:	bl	f7b8 <Print::println()>
    1350:	movs	r4, #0
    1352:	b.n	1312 <do_menu(short)+0xa>
    1354:	movs	r1, #5
    1356:	ldr	r0, [pc, #32]	; (1378 <do_menu(short)+0x70>)
    1358:	bl	de04 <usb_serial_write>
    135c:	ldr	r0, [pc, #16]	; (1370 <do_menu(short)+0x68>)
    135e:	bl	f7b8 <Print::println()>
      Serial.println("\nStop");
      break;
#if USE_EVENTS==1
    case 'r': 
      Serial.println("Reset");
      mtpd.send_DeviceResetEvent();
    1362:	ldr	r0, [pc, #24]	; (137c <do_menu(short)+0x74>)
    1364:	bl	7778 <MTPD::send_DeviceResetEvent()>
      break;
    1368:	b.n	1312 <do_menu(short)+0xa>
    136a:	nop
    136c:	.word	0x00014d64
    1370:	.word	0x1fff0c58
    1374:	.word	0x00014d5c
    1378:	.word	0x00014d6c
    137c:	.word	0x20006a08

00001380 <file_writeData(void*, unsigned long)>:
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
    1380:	push	{r4, r5, r6, lr}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1382:	ldr	r6, [pc, #48]	; (13b4 <file_writeData(void*, unsigned long)+0x34>)
    1384:	ldr	r3, [r6, #16]
    1386:	cbz	r3, 13b0 <file_writeData(void*, unsigned long)+0x30>
    1388:	ldr	r2, [r3, #0]
    138a:	mov	r5, r0
    138c:	mov	r0, r3
    138e:	ldr	r3, [r2, #68]	; 0x44
    1390:	mov	r4, r1
    1392:	blx	r3
    1394:	cbz	r0, 13b0 <file_writeData(void*, unsigned long)+0x30>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1396:	ldr	r0, [r6, #16]
    1398:	cbz	r0, 13a4 <file_writeData(void*, unsigned long)+0x24>
    139a:	ldr	r3, [r0, #0]
    139c:	mov	r1, r5
    139e:	ldr	r3, [r3, #44]	; 0x2c
    13a0:	mov	r2, r4
    13a2:	blx	r3
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
    13a4:	subs	r0, r4, r0
    13a6:	clz	r0, r0
    13aa:	lsrs	r0, r0, #5
    13ac:	sxth	r0, r0
}
    13ae:	pop	{r4, r5, r6, pc}
  size_t nb = mfile.write(header,512);
  return (nb==512);
}

int16_t file_writeData(void *diskBuffer, uint32_t nd)
{ if(!mfile) return 0;
    13b0:	movs	r0, #0
    13b2:	pop	{r4, r5, r6, pc}
    13b4:	.word	0x1fff097c

000013b8 <file_close()>:
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
    13b8:	push	{r4, lr}
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    13ba:	ldr	r4, [pc, #32]	; (13dc <file_close()+0x24>)
    13bc:	ldr	r0, [r4, #16]
    13be:	cbz	r0, 13d8 <file_close()+0x20>
    13c0:	ldr	r3, [r0, #0]
    13c2:	ldr	r3, [r3, #64]	; 0x40
    13c4:	blx	r3
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    13c6:	ldr	r0, [r4, #16]
    13c8:	cbz	r0, 13d8 <file_close()+0x20>
    13ca:	ldr	r3, [r0, #0]
    13cc:	ldr	r3, [r3, #68]	; 0x44
    13ce:	blx	r3
    13d0:	eor.w	r0, r0, #1
    13d4:	uxtb	r0, r0
  return (!mfile);
}
    13d6:	pop	{r4, pc}
  uint32_t nb = mfile.write(diskBuffer,nd);
  return (nb==nd);
}

int16_t file_close(void)
{ mfile.close();
    13d8:	movs	r0, #1
    13da:	pop	{r4, pc}
    13dc:	.word	0x1fff097c

000013e0 <printTimestamp(unsigned long)>:
 */

/****************** Time Utilities *****************************/
#include "TimeLib.h"
void printTimestamp(uint32_t tt)
{
    13e0:	push	{r4, r5, lr}
    13e2:	sub	sp, #28
  tmElements_t tm;
  breakTime(tt, tm);
    13e4:	add	r1, sp, #16
    13e6:	bl	7e74 <breakTime(long, tmElements_t&)>
  Serial.printf("Now: %04d-%02d-%02d_%02d:%02d:%02d\r\n", 
                      tmYearToCalendar(tm.Year), tm.Month, tm.Day, tm.Hour, tm.Minute, tm.Second);
    13ea:	ldrb.w	r2, [sp, #22]
    13ee:	ldrb.w	r0, [sp, #18]
    13f2:	ldrb.w	r1, [sp, #20]
    13f6:	ldrb.w	r5, [sp, #16]
    13fa:	ldrb.w	r4, [sp, #17]
    13fe:	str	r0, [sp, #4]
    1400:	str	r1, [sp, #0]
    1402:	ldrb.w	r3, [sp, #21]
    1406:	str	r5, [sp, #12]
    1408:	addw	r2, r2, #1970	; 0x7b2
    140c:	str	r4, [sp, #8]
    140e:	ldr	r1, [pc, #12]	; (141c <printTimestamp(unsigned long)+0x3c>)
    1410:	ldr	r0, [pc, #12]	; (1420 <printTimestamp(unsigned long)+0x40>)
    1412:	bl	f7e8 <Print::printf(char const*, ...)>
}
    1416:	add	sp, #28
    1418:	pop	{r4, r5, pc}
    141a:	nop
    141c:	.word	0x00014d74
    1420:	.word	0x1fff0c58

00001424 <makeHeader(char*)>:
    }
  #endif


void makeHeader(char *header)
{
    1424:	push	{r4, lr}
  memset(header,0,512);
    1426:	movs	r1, #0
    1428:	mov.w	r2, #512	; 0x200
    }
  #endif


void makeHeader(char *header)
{
    142c:	mov	r4, r0
  memset(header,0,512);
    142e:	bl	1109c <memset>
  sprintf(header,"WMXZ");
    1432:	ldr	r3, [pc, #32]	; (1454 <makeHeader(char*)+0x30>)
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
    1434:	movs	r2, #1


void makeHeader(char *header)
{
  memset(header,0,512);
  sprintf(header,"WMXZ");
    1436:	ldr	r0, [r3, #0]
    1438:	ldrb	r3, [r3, #4]
    143a:	strb	r3, [r4, #4]
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
    143c:	str.w	r2, [r4, #5]


void makeHeader(char *header)
{
  memset(header,0,512);
  sprintf(header,"WMXZ");
    1440:	str	r0, [r4, #0]
  int32_t *ihdr=(int32_t *)&header[strlen(header)+1];
  uint32_t *uhdr=(uint32_t *)&header[strlen(header)+1];
  ihdr[0]=1; // version number
  uhdr[1]=rtc_get();
    1442:	bl	e6cc <rtc_get>
    1446:	str.w	r0, [r4, #9]
  uhdr[2]=micros();
    144a:	bl	e714 <micros>
    144e:	str.w	r0, [r4, #13]
    1452:	pop	{r4, pc}
    1454:	.word	0x00014d9c

00001458 <file_writeHeader()>:
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
    1458:	push	{r4, lr}
    145a:	ldr	r4, [pc, #52]	; (1490 <file_writeHeader()+0x38>)
    145c:	ldr	r0, [r4, #16]
    145e:	cbz	r0, 148c <file_writeHeader()+0x34>
    1460:	ldr	r3, [r0, #0]
    1462:	ldr	r3, [r3, #68]	; 0x44
    1464:	blx	r3
    1466:	cbz	r0, 148c <file_writeHeader()+0x34>
  makeHeader(header);
    1468:	ldr	r0, [pc, #40]	; (1494 <file_writeHeader()+0x3c>)
    146a:	bl	1424 <makeHeader(char*)>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    146e:	ldr	r0, [r4, #16]
    1470:	cbz	r0, 148a <file_writeHeader()+0x32>
    1472:	ldr	r3, [r0, #0]
    1474:	ldr	r1, [pc, #28]	; (1494 <file_writeHeader()+0x3c>)
    1476:	ldr	r3, [r3, #44]	; 0x2c
    1478:	mov.w	r2, #512	; 0x200
    147c:	blx	r3
    147e:	sub.w	r0, r0, #512	; 0x200
    1482:	clz	r0, r0
    1486:	lsrs	r0, r0, #5
    1488:	sxth	r0, r0
  size_t nb = mfile.write(header,512);
  return (nb==512);
}
    148a:	pop	{r4, pc}
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}

int16_t file_writeHeader(void)
{ if(!mfile) return 0;
    148c:	movs	r0, #0
    148e:	pop	{r4, pc}
    1490:	.word	0x1fff097c
    1494:	.word	0x1fff1644

00001498 <makeFilename(char*)>:
  uhdr[1]=rtc_get();
  uhdr[2]=micros();
}

int16_t makeFilename(char *filename)
{
    1498:	push	{r4, r5, r6, r7, lr}
    149a:	sub	sp, #12
    149c:	mov	r7, r0
  uint32_t tt = rtc_get();
    149e:	bl	e6cc <rtc_get>
  int dd;
  ss= tt % 60; tt /= 60;
  mm= tt % 60; tt /= 60;
  hh= tt % 24; tt /= 24;
  dd= tt;
  sprintf(filename,"/%d/%02d_%02d_%02d.raw",dd,hh,mm,ss);
    14a2:	ldr	r4, [pc, #100]	; (1508 <makeFilename(char*)+0x70>)
    14a4:	ldr	r3, [pc, #100]	; (150c <makeFilename(char*)+0x74>)
    14a6:	ldr	r6, [pc, #104]	; (1510 <makeFilename(char*)+0x78>)
    14a8:	ldr	r2, [pc, #104]	; (1514 <makeFilename(char*)+0x7c>)
    14aa:	ldr	r1, [pc, #108]	; (1518 <makeFilename(char*)+0x80>)
    14ac:	umull	lr, r5, r4, r0
    14b0:	lsrs	r5, r5, #5
    14b2:	umull	lr, r3, r3, r0
    14b6:	umull	lr, r4, r4, r5
    14ba:	lsrs	r3, r3, #11
    14bc:	lsrs	r4, r4, #5
    14be:	umull	lr, r6, r6, r3
    14c2:	rsb	r4, r4, r4, lsl #4
    14c6:	sub.w	r4, r5, r4, lsl #2
    14ca:	lsrs	r6, r6, #4
    14cc:	rsb	r5, r5, r5, lsl #4
    14d0:	sub.w	r5, r0, r5, lsl #2
    14d4:	add.w	r6, r6, r6, lsl #1
    14d8:	umull	r0, r2, r2, r0
    14dc:	lsrs	r2, r2, #16
    14de:	sub.w	r3, r3, r6, lsl #3
    14e2:	stmia.w	sp, {r4, r5}
    14e6:	mov	r0, r7
    14e8:	bl	11544 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    14ec:	mov	r0, r7
    14ee:	bl	11700 <strlen>
    14f2:	mov	r1, r0
    14f4:	mov	r0, r7
    14f6:	bl	de04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    14fa:	ldr	r0, [pc, #32]	; (151c <makeFilename(char*)+0x84>)
    14fc:	bl	f7b8 <Print::println()>
  Serial.println(filename);
  return 1;
}
    1500:	movs	r0, #1
    1502:	add	sp, #12
    1504:	pop	{r4, r5, r6, r7, pc}
    1506:	nop
    1508:	.word	0x88888889
    150c:	.word	0x91a2b3c5
    1510:	.word	0xaaaaaaab
    1514:	.word	0xc22e4507
    1518:	.word	0x00014da4
    151c:	.word	0x1fff0c58

00001520 <checkPath(unsigned short, char*)>:

int16_t checkPath(uint16_t store, char *filename)
{
    1520:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1524:	mov	r8, r0
    1526:	sub	sp, #56	; 0x38
  int ln=strlen(filename);
    1528:	mov	r0, r1
  Serial.println(filename);
  return 1;
}

int16_t checkPath(uint16_t store, char *filename)
{
    152a:	mov	r5, r1
  int ln=strlen(filename);
    152c:	bl	11700 <strlen>
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
    1530:	cmp	r0, #0
    1532:	ble.n	15ee <checkPath(unsigned short, char*)+0xce>
    1534:	subs	r1, r5, #1
    1536:	movs	r3, #0
    1538:	mov.w	r2, #4294967295
    153c:	ldrb.w	r4, [r1, #1]!
    1540:	cmp	r4, #47	; 0x2f
    1542:	it	eq
    1544:	moveq	r2, r3
    1546:	adds	r3, #1
    1548:	cmp	r0, r3
    154a:	bne.n	153c <checkPath(unsigned short, char*)+0x1c>
  if(i1<0) return 1; // no path
    154c:	cmp	r2, #0
    154e:	blt.n	15ee <checkPath(unsigned short, char*)+0xce>
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    1550:	ldr	r3, [pc, #200]	; (161c <checkPath(unsigned short, char*)+0xfc>)
    1552:	mov.w	r6, #1208	; 0x4b8
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    1556:	movs	r7, #0
  if(!sdx[store].exists(filename))
    1558:	mla	r6, r6, r8, r3
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
    155c:	strb	r7, [r5, r2]
    155e:	ldr.w	lr, [r6, #1156]	; 0x484
    1562:	adds	r4, r5, r2
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    1564:	cmp.w	lr, #0
    1568:	beq.n	1590 <checkPath(unsigned short, char*)+0x70>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    156a:	mov	r1, lr
    156c:	mov	r3, r7
    156e:	mov	r2, r5
    1570:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    1572:	strb.w	r7, [sp]
    1576:	strb.w	r7, [sp, #1]
    157a:	strb.w	r7, [sp, #2]
    157e:	bl	ac28 <FatFile::open(FatVolume*, char const*, int)>
  if(!sdx[store].exists(filename))
    1582:	cbz	r0, 15b0 <checkPath(unsigned short, char*)+0x90>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
    1584:	movs	r3, #47	; 0x2f
    1586:	strb	r3, [r4, #0]
  return 1;
    1588:	movs	r0, #1
}
    158a:	add	sp, #56	; 0x38
    158c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1590:	ldr.w	r1, [r6, #1160]	; 0x488
    1594:	cbz	r1, 15b0 <checkPath(unsigned short, char*)+0x90>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1596:	mov	r3, lr
    1598:	mov	r2, r5
    159a:	mov	r0, sp
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    159c:	strb.w	lr, [sp, #49]	; 0x31
    15a0:	strb.w	lr, [sp, #50]	; 0x32
    15a4:	strb.w	lr, [sp, #51]	; 0x33
    15a8:	bl	9880 <ExFatFile::open(ExFatVolume*, char const*, int)>
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
  filename[i1]=0;
  if(!sdx[store].exists(filename))
    15ac:	cmp	r0, #0
    15ae:	bne.n	1584 <checkPath(unsigned short, char*)+0x64>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    15b0:	mov	r0, r5
    15b2:	bl	11700 <strlen>
    15b6:	mov	r1, r0
    15b8:	mov	r0, r5
    15ba:	bl	de04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    15be:	ldr	r0, [pc, #96]	; (1620 <checkPath(unsigned short, char*)+0x100>)
    15c0:	bl	f7b8 <Print::println()>
    15c4:	ldr.w	r7, [r6, #1156]	; 0x484
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    15c8:	cbz	r7, 15f6 <checkPath(unsigned short, char*)+0xd6>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    15ca:	mov	r2, r5
    15cc:	addw	r1, r7, #1092	; 0x444
    15d0:	movs	r5, #0
    15d2:	movs	r3, #1
    15d4:	mov	r0, sp
    15d6:	strb.w	r5, [sp]
    15da:	strb.w	r5, [sp, #1]
    15de:	strb.w	r5, [sp, #2]
    15e2:	bl	aaa4 <FatFile::mkdir(FatFile*, char const*, bool)>
  { Serial.println(filename); 
    if(!sdx[store].mkdir(filename)) return 0;
    15e6:	cmp	r0, #0
    15e8:	bne.n	1584 <checkPath(unsigned short, char*)+0x64>
    15ea:	movs	r0, #0
    15ec:	b.n	158a <checkPath(unsigned short, char*)+0x6a>
int16_t checkPath(uint16_t store, char *filename)
{
  int ln=strlen(filename);
  int i1=-1;
  for(int ii=0;ii<ln;ii++) if(filename[ii]=='/') i1=ii;
  if(i1<0) return 1; // no path
    15ee:	movs	r0, #1
    if(!sdx[store].mkdir(filename)) return 0;
  }

  filename[i1]='/';
  return 1;
}
    15f0:	add	sp, #56	; 0x38
    15f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15f6:	ldr.w	r1, [r6, #1160]	; 0x488
    15fa:	cmp	r1, #0
    15fc:	beq.n	15ea <checkPath(unsigned short, char*)+0xca>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    15fe:	mov	r2, r5
    1600:	add.w	r1, r1, #1096	; 0x448
    1604:	movs	r3, #1
    1606:	mov	r0, sp
    1608:	strb.w	r7, [sp, #49]	; 0x31
    160c:	strb.w	r7, [sp, #50]	; 0x32
    1610:	strb.w	r7, [sp, #51]	; 0x33
    1614:	bl	a2b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1618:	b.n	15e6 <checkPath(unsigned short, char*)+0xc6>
    161a:	nop
    161c:	.word	0x1fff4550
    1620:	.word	0x1fff0c58

00001624 <file_open(unsigned short)>:
void makeHeader(char *header);
int16_t makeFilename(char *filename);
int16_t checkPath(uint16_t store, char *filename);

int16_t file_open(uint16_t store)
{ char filename[80];
    1624:	push	{r4, r5, r6, r7, lr}
    1626:	sub	sp, #164	; 0xa4
    1628:	mov	r4, r0
  if(!makeFilename(filename)) return 0;
    162a:	mov	r0, sp
    162c:	bl	1498 <makeFilename(char*)>
    1630:	cbnz	r0, 1638 <file_open(unsigned short)+0x14>
    1632:	movs	r0, #0
  if(!checkPath(store, filename)) return 0;
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}
    1634:	add	sp, #164	; 0xa4
    1636:	pop	{r4, r5, r6, r7, pc}
int16_t checkPath(uint16_t store, char *filename);

int16_t file_open(uint16_t store)
{ char filename[80];
  if(!makeFilename(filename)) return 0;
  if(!checkPath(store, filename)) return 0;
    1638:	mov	r1, sp
    163a:	mov	r0, r4
    163c:	bl	1520 <checkPath(unsigned short, char*)>
    1640:	cmp	r0, #0
    1642:	beq.n	1632 <file_open(unsigned short)+0xe>
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    1644:	ldr	r3, [pc, #188]	; (1704 <file_open(unsigned short)+0xe0>)
    1646:	mov.w	r1, #1208	; 0x4b8
    164a:	mla	r1, r1, r4, r3
    164e:	mov	r2, sp
    1650:	movw	r3, #16898	; 0x4202
    1654:	adds	r1, #4
    1656:	add	r0, sp, #80	; 0x50
    1658:	bl	c46c <FsVolume::open(char const*, int)>
    165c:	ldr	r3, [sp, #152]	; 0x98
    165e:	cmp	r3, #0
    1660:	beq.n	16f2 <file_open(unsigned short)+0xce>
		if (file) return File(new SDFile(file));
    1662:	movs	r0, #104	; 0x68
    1664:	bl	f958 <operator new(unsigned int)>
    1668:	mov	r4, r0
	// Classes derived from File are never meant to be constructed
	// anywhere other than open() in the parent FS class and
	// openNextFile() while traversing a directory.
	// Only the abstract File class which references these derived
	// classes is meant to have a public constructor!
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    166a:	ldr	r5, [pc, #156]	; (1708 <file_open(unsigned short)+0xe4>)
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    166c:	ldrb.w	r1, [sp, #84]	; 0x54
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1670:	ldr	r2, [sp, #88]	; 0x58
    1672:	ldrb.w	r3, [sp, #92]	; 0x5c
    1676:	str	r5, [r4, #0]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1678:	mov.w	r0, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
    167c:	movs	r5, #0
    167e:	add	r6, sp, #96	; 0x60
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1680:	ldr	r7, [pc, #136]	; (170c <file_open(unsigned short)+0xe8>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1682:	str	r0, [r4, #8]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1684:	strb	r1, [r4, #24]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    1686:	str	r2, [r4, #28]
    1688:	strb.w	r3, [r4, #32]
    168c:	add.w	r0, r4, #36	; 0x24
    1690:	mov	r1, r6
    1692:	str	r7, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    1694:	strb	r5, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1696:	strb	r5, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1698:	str	r5, [r4, #16]
    169a:	bl	c224 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    169e:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    16a0:	ldr	r2, [pc, #108]	; (1710 <file_open(unsigned short)+0xec>)
    16a2:	str	r5, [r4, #100]	; 0x64
    16a4:	adds	r3, #1
    16a6:	str	r2, [r4, #20]
    16a8:	str	r3, [r4, #16]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    16aa:	ldr	r5, [pc, #104]	; (1714 <file_open(unsigned short)+0xf0>)
    16ac:	ldr	r3, [pc, #104]	; (1718 <file_open(unsigned short)+0xf4>)
    16ae:	str	r3, [sp, #80]	; 0x50
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
    16b0:	mov	r0, r6
    16b2:	bl	c29c <FsBaseFile::close()>
    16b6:	ldr	r2, [r5, #16]
    16b8:	cbz	r2, 16cc <file_open(unsigned short)+0xa8>
    16ba:	ldr	r3, [r2, #16]
    16bc:	subs	r3, #1
    16be:	str	r3, [r2, #16]
    16c0:	cbnz	r3, 16cc <file_open(unsigned short)+0xa8>
    16c2:	ldr	r0, [r5, #16]
    16c4:	cbz	r0, 16cc <file_open(unsigned short)+0xa8>
    16c6:	ldr	r3, [r0, #0]
    16c8:	ldr	r3, [r3, #32]
    16ca:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    16cc:	str	r4, [r5, #16]
    16ce:	ldr	r5, [pc, #68]	; (1714 <file_open(unsigned short)+0xf0>)
		if (f) f->refcount++;
    16d0:	cbz	r4, 16fe <file_open(unsigned short)+0xda>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    16d2:	ldr	r3, [r4, #16]
    16d4:	cbnz	r3, 16e4 <file_open(unsigned short)+0xc0>
    16d6:	ldr	r3, [r4, #0]
    16d8:	mov	r0, r4
    16da:	ldr	r3, [r3, #32]
    16dc:	blx	r3
    16de:	ldr	r4, [r5, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    16e0:	cmp	r4, #0
    16e2:	beq.n	1632 <file_open(unsigned short)+0xe>
    16e4:	ldr	r3, [r4, #0]
    16e6:	mov	r0, r4
    16e8:	ldr	r3, [r3, #68]	; 0x44
    16ea:	blx	r3
    16ec:	sxth	r0, r0
  mfile = sdx[store].open(filename,FILE_WRITE);
  return !(!mfile);
}
    16ee:	add	sp, #164	; 0xa4
    16f0:	pop	{r4, r5, r6, r7, pc}
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    16f2:	ldr	r0, [sp, #156]	; 0x9c
    16f4:	cmp	r0, #0
    16f6:	bne.n	1662 <file_open(unsigned short)+0x3e>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    16f8:	mov	r4, r0
    16fa:	add	r6, sp, #96	; 0x60
    16fc:	b.n	16aa <file_open(unsigned short)+0x86>
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    16fe:	mov	r0, r4
    1700:	b.n	1634 <file_open(unsigned short)+0x10>
    1702:	nop
    1704:	.word	0x1fff4550
    1708:	.word	0x00014c3c
    170c:	.word	0x00014b70
    1710:	.word	0x00014bb8
    1714:	.word	0x1fff097c
    1718:	.word	0x00014b94

0000171c <do_logger(unsigned short, short)>:
#define NBUF_DISK (NDBL*NBUF_ACQ)
uint32_t diskBuffer[NBUF_DISK];
uint32_t maxDel=0;

int16_t do_logger(uint16_t store, int16_t state)
{ uint32_t to=millis();
    171c:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    171e:	ldr	r5, [pc, #164]	; (17c4 <do_logger(unsigned short, short)+0xa8>)
    1720:	sub	sp, #12
    1722:	ldr	r3, [r5, #0]
    1724:	str	r3, [sp, #0]
    1726:	mov	r7, r0
    1728:	mov	r4, r1
  if(pullData(diskBuffer,NDBL))
    172a:	ldr	r0, [pc, #156]	; (17c8 <do_logger(unsigned short, short)+0xac>)
	return ret;
    172c:	ldr	r6, [sp, #0]
    172e:	movs	r1, #8
    1730:	bl	12b0 <pullData(unsigned long*, unsigned long)>
    1734:	cbz	r0, 174a <do_logger(unsigned short, short)+0x2e>
  {
    if(state==0)
    1736:	cbz	r4, 1770 <do_logger(unsigned short, short)+0x54>
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
      state=1;
    }
    if(state==1)
    1738:	cmp	r4, #1
    173a:	beq.n	1778 <do_logger(unsigned short, short)+0x5c>
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
      
    }
    if(state>=2)
    173c:	ble.n	174e <do_logger(unsigned short, short)+0x32>
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    173e:	mov.w	r1, #8192	; 0x2000
    1742:	ldr	r0, [pc, #132]	; (17c8 <do_logger(unsigned short, short)+0xac>)
    1744:	bl	1380 <file_writeData(void*, unsigned long)>
    1748:	cbz	r0, 17a4 <do_logger(unsigned short, short)+0x88>
    }
  }

  if(state==3)
    174a:	cmp	r4, #3
    174c:	beq.n	178e <do_logger(unsigned short, short)+0x72>
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    state=0;
  }

  if(state==4)
    174e:	cmp	r4, #4
    1750:	beq.n	1798 <do_logger(unsigned short, short)+0x7c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1752:	ldr	r3, [r5, #0]
    1754:	str	r3, [sp, #4]
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
  if(dt>maxDel) maxDel=dt;
    1756:	ldr	r2, [pc, #116]	; (17cc <do_logger(unsigned short, short)+0xb0>)
	return ret;
    1758:	ldr	r3, [sp, #4]
    175a:	ldr	r1, [r2, #0]
  { // close file and stop acquisition
    if(!file_close()) return -6;
    state=-1;
  }

  uint32_t dt=millis()-to;
    175c:	subs	r3, r3, r6
  if(dt>maxDel) maxDel=dt;
    175e:	cmp	r3, r1
    1760:	bls.n	176a <do_logger(unsigned short, short)+0x4e>
    1762:	str	r3, [r2, #0]

  return state;
    1764:	mov	r0, r4
}
    1766:	add	sp, #12
    1768:	pop	{r4, r5, r6, r7, pc}
  }

  uint32_t dt=millis()-to;
  if(dt>maxDel) maxDel=dt;

  return state;
    176a:	mov	r0, r4
}
    176c:	add	sp, #12
    176e:	pop	{r4, r5, r6, r7, pc}
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
    1770:	mov	r0, r7
    1772:	bl	1624 <file_open(unsigned short)>
    1776:	cbz	r0, 17aa <do_logger(unsigned short, short)+0x8e>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    1778:	bl	1458 <file_writeHeader()>
    177c:	cbz	r0, 17b0 <do_logger(unsigned short, short)+0x94>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    177e:	mov.w	r1, #8192	; 0x2000
    1782:	ldr	r0, [pc, #68]	; (17c8 <do_logger(unsigned short, short)+0xac>)
    1784:	bl	1380 <file_writeData(void*, unsigned long)>
    1788:	cbz	r0, 17a4 <do_logger(unsigned short, short)+0x88>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
      state=2;
    178a:	movs	r4, #2
    178c:	b.n	1752 <do_logger(unsigned short, short)+0x36>
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    178e:	bl	13b8 <file_close()>
    1792:	cbz	r0, 17bc <do_logger(unsigned short, short)+0xa0>
    state=0;
    1794:	movs	r4, #0
    1796:	b.n	1752 <do_logger(unsigned short, short)+0x36>
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    1798:	bl	13b8 <file_close()>
    179c:	cbz	r0, 17b6 <do_logger(unsigned short, short)+0x9a>
    state=-1;
    179e:	mov.w	r4, #4294967295
    17a2:	b.n	1752 <do_logger(unsigned short, short)+0x36>
      state=2;
      
    }
    if(state>=2)
    { // write data to disk
      if(!file_writeData(diskBuffer,NBUF_DISK*4)) return -4;
    17a4:	mvn.w	r0, #3
    17a8:	b.n	1766 <do_logger(unsigned short, short)+0x4a>
{ uint32_t to=millis();
  if(pullData(diskBuffer,NDBL))
  {
    if(state==0)
    { // acquisition is running, need to open file
      if(!file_open(store)) return -2;
    17aa:	mvn.w	r0, #1
    17ae:	b.n	1766 <do_logger(unsigned short, short)+0x4a>
      state=1;
    }
    if(state==1)
    { // file just opended, need to write header
      if(!file_writeHeader()) return -3;
    17b0:	mvn.w	r0, #2
    17b4:	b.n	1766 <do_logger(unsigned short, short)+0x4a>
    state=0;
  }

  if(state==4)
  { // close file and stop acquisition
    if(!file_close()) return -6;
    17b6:	mvn.w	r0, #5
    17ba:	b.n	1766 <do_logger(unsigned short, short)+0x4a>
    }
  }

  if(state==3)
  { // close file, but continue acquisition
    if(!file_close()) return -5;
    17bc:	mvn.w	r0, #4
    17c0:	b.n	1766 <do_logger(unsigned short, short)+0x4a>
    17c2:	nop
    17c4:	.word	0x2000701c
    17c8:	.word	0x1fff1844
    17cc:	.word	0x1fff1640

000017d0 <Adjust_MCLK(long, long*, long*)>:
  //Teensy 3.2, 3.6 or 3.5
      #define MCLK_SRC  3

    // estimate MCLK to generate precise sampling frequency (typically equal or greater desired frequency)
    void Adjust_MCLK(int32_t fsamp, int32_t *mult, int32_t *div)
    {
    17d0:	vmov	s15, r0
    17d4:	vldr	s13, [pc, #168]	; 1880 <Adjust_MCLK(long, long*, long*)+0xb0>
    17d8:	vcvt.f32.s32	s15, s15
    17dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17e0:	vdiv.f32	s14, s13, s15
    17e4:	mov	r7, r2
    17e6:	mov	r8, r1
      float A = (float)F_PLL / (BIT_DIV*ovr);
      float X[255];
      for(int ii=0; ii<255;ii++) X[ii]=A/((float) fsamp)*(ii+1);
    17e8:	movs	r3, #0
  //Teensy 3.2, 3.6 or 3.5
      #define MCLK_SRC  3

    // estimate MCLK to generate precise sampling frequency (typically equal or greater desired frequency)
    void Adjust_MCLK(int32_t fsamp, int32_t *mult, int32_t *div)
    {
    17ea:	vpush	{d8-d9}
    17ee:	sub.w	sp, sp, #1024	; 0x400
    17f2:	add	r5, sp, #4
    17f4:	mov	r2, r5
      float A = (float)F_PLL / (BIT_DIV*ovr);
      float X[255];
      for(int ii=0; ii<255;ii++) X[ii]=A/((float) fsamp)*(ii+1);
    17f6:	adds	r3, #1
    17f8:	vmov	s15, r3
    17fc:	vcvt.f32.s32	s15, s15
    1800:	cmp	r3, #255	; 0xff
    1802:	vmul.f32	s15, s15, s14
    1806:	vstmia	r2!, {s15}
    180a:	bne.n	17f6 <Adjust_MCLK(long, long*, long*)+0x26>
    180c:	movs	r4, #0
      int32_t iimin=0;
      float xmin=1.0f;
      for(int ii=0; ii<255;ii++) if((X[ii]<4096.0f) && (fmodf(X[ii],1.0f)<xmin)) {iimin=ii; xmin=fmodf(X[ii],1.0f);}
    180e:	vldr	s17, [pc, #116]	; 1884 <Adjust_MCLK(long, long*, long*)+0xb4>
    1812:	mov	r6, r4
    1814:	vmov.f32	s18, #112	; 0x3f800000  1.0
    1818:	b.n	1820 <Adjust_MCLK(long, long*, long*)+0x50>
    181a:	adds	r4, #1
    181c:	cmp	r4, #255	; 0xff
    181e:	beq.n	185c <Adjust_MCLK(long, long*, long*)+0x8c>
    1820:	vldmia	r5!, {s16}
    1824:	vcmpe.f32	s16, s17
    1828:	vmrs	APSR_nzcv, fpscr
    182c:	bpl.n	181a <Adjust_MCLK(long, long*, long*)+0x4a>
    182e:	vmov.f32	s1, #112	; 0x3f800000  1.0
    1832:	vmov.f32	s0, s16
    1836:	bl	f960 <fmodf>
    183a:	vcmpe.f32	s0, s18
    183e:	vmrs	APSR_nzcv, fpscr
    1842:	vmov.f32	s1, #112	; 0x3f800000  1.0
    1846:	vmov.f32	s0, s16
    184a:	bpl.n	181a <Adjust_MCLK(long, long*, long*)+0x4a>
    184c:	bl	f960 <fmodf>
    1850:	mov	r6, r4
    1852:	adds	r4, #1
    1854:	cmp	r4, #255	; 0xff
    1856:	vmov.f32	s18, s0
    185a:	bne.n	1820 <Adjust_MCLK(long, long*, long*)+0x50>
      *mult=iimin+1;
      *div=(int) X[iimin];
    185c:	add	r3, sp, #4
    185e:	add.w	r3, r3, r6, lsl #2
    1862:	vldr	s15, [r3]
    1866:	vcvt.s32.f32	s15, s15
      float X[255];
      for(int ii=0; ii<255;ii++) X[ii]=A/((float) fsamp)*(ii+1);
      int32_t iimin=0;
      float xmin=1.0f;
      for(int ii=0; ii<255;ii++) if((X[ii]<4096.0f) && (fmodf(X[ii],1.0f)<xmin)) {iimin=ii; xmin=fmodf(X[ii],1.0f);}
      *mult=iimin+1;
    186a:	adds	r6, #1
    186c:	str.w	r6, [r8]
      *div=(int) X[iimin];
    1870:	vstr	s15, [r7]
    }
    1874:	add.w	sp, sp, #1024	; 0x400
    1878:	vpop	{d8-d9}
    187c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1880:	.word	0x492037a0
    1884:	.word	0x45800000

00001888 <acq_init(long)>:
        SIM_SCGC7 |= SIM_SCGC7_DMA;
        SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    }

    void acq_init(int32_t fsamp)
    {
    1888:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    188c:	sub	sp, #32
      int32_t MCLK_MULT, MCLK_DIV;

#define EST_MCKL 0 // 0 precise frequency, 1 minimal jitter
#if EST_MCKL==0
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
    188e:	add	r2, sp, #28
    1890:	add	r1, sp, #24
        SIM_SCGC7 |= SIM_SCGC7_DMA;
        SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    }

    void acq_init(int32_t fsamp)
    {
    1892:	mov	r4, r0
      int32_t MCLK_MULT, MCLK_DIV;

#define EST_MCKL 0 // 0 precise frequency, 1 minimal jitter
#if EST_MCKL==0
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
    1894:	bl	17d0 <Adjust_MCLK(long, long*, long*)>
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    1898:	vldr	s15, [sp, #24]
    189c:	vldr	s14, [pc, #376]	; 1a18 <acq_init(long)+0x190>
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, mclk0,fsamp,fsamp0); Serial.flush();
    18a0:	str	r4, [sp, #12]
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    18a2:	vcvt.f32.s32	s12, s15
    18a6:	vldr	s15, [sp, #28]
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, mclk0,fsamp,fsamp0); Serial.flush();
    18aa:	ldr	r1, [sp, #28]
    18ac:	ldr	r3, [sp, #24]
    18ae:	ldr	r0, [pc, #364]	; (1a1c <acq_init(long)+0x194>)
P36 PTC9                    I2S0_RX_BCLK (4)
P37 PTC10                   I2S0_RX_FS (4)
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
    18b0:	ldr	r7, [pc, #364]	; (1a20 <acq_init(long)+0x198>)
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
    18b2:	ldr	r6, [pc, #368]	; (1a24 <acq_init(long)+0x19c>)
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    18b4:	vcvt.f32.s32	s13, s15
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, mclk0,fsamp,fsamp0); Serial.flush();
    18b8:	movs	r2, #2
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    18ba:	vdiv.f32	s15, s12, s13
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, mclk0,fsamp,fsamp0); Serial.flush();
    18be:	stmia.w	sp, {r1, r2}
    18c2:	ldr	r2, [pc, #356]	; (1a28 <acq_init(long)+0x1a0>)
    18c4:	ldr	r1, [pc, #356]	; (1a2c <acq_init(long)+0x1a4>)
      Adjust_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#elif EST_MCKL==1
      Approx_MCLK(fsamp,&MCLK_MULT,&MCLK_DIV);
#endif
      float fract = (float)MCLK_MULT/((float) MCLK_DIV);
      int32_t mclk0=((F_PLL)*fract);
    18c6:	vmul.f32	s15, s15, s14
    18ca:	vcvt.s32.f32	s15, s15
    18ce:	vmov	r4, s15
      int32_t fsamp0=(mclk0/(BIT_DIV*ovr));

      Serial.printf("%d %d %d %d %d %d %d\n",F_CPU, MCLK_MULT, MCLK_DIV, BIT_DIV, mclk0,fsamp,fsamp0); Serial.flush();
    18d2:	lsrs	r5, r4, #8
    18d4:	vstr	s15, [sp, #8]
    18d8:	str	r5, [sp, #16]
    18da:	bl	f7e8 <Print::printf(char const*, ...)>
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
        CORE_PIN23_CONFIG = PORT_PCR_MUX(6);   // PTC2,  I2S0_TX_FS 
    18de:	ldr	r5, [pc, #336]	; (1a30 <acq_init(long)+0x1a8>)
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    18e0:	bl	df6c <usb_serial_flush_output>

        I2S0_RCSR=0;
    18e4:	ldr	r2, [pc, #332]	; (1a34 <acq_init(long)+0x1ac>)

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    18e6:	ldr	r0, [pc, #336]	; (1a38 <acq_init(long)+0x1b0>)
        while(I2S0_MCR & I2S_MCR_DUF);
    18e8:	ldr	r1, [pc, #336]	; (1a3c <acq_init(long)+0x1b4>)
P36 PTC9                    I2S0_RX_BCLK (4)
P37 PTC10                   I2S0_RX_FS (4)
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
    18ea:	mov.w	r3, #1536	; 0x600
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
        CORE_PIN23_CONFIG = PORT_PCR_MUX(6);   // PTC2,  I2S0_TX_FS 

        I2S0_RCSR=0;
    18ee:	movs	r4, #0
P36 PTC9                    I2S0_RX_BCLK (4)
P37 PTC10                   I2S0_RX_FS (4)
P38 PTC11                   I2S0_RXD1 (4)
P39 PTA17  I2S0_MCLK (6)
*/
        CORE_PIN11_CONFIG = PORT_PCR_MUX(6);   // PTC6,  I2S0_MCLK
    18f0:	str	r3, [r7, #0]
        CORE_PIN9_CONFIG = PORT_PCR_MUX(6);    // PTC3,  I2S0_TX_BCLK
    18f2:	str	r3, [r6, #0]
        CORE_PIN23_CONFIG = PORT_PCR_MUX(6);   // PTC2,  I2S0_TX_FS 
    18f4:	str	r3, [r5, #0]

        I2S0_RCSR=0;
    18f6:	str	r4, [r2, #0]

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    18f8:	ldr	r2, [sp, #24]
    18fa:	ldr	r3, [sp, #28]
    18fc:	subs	r2, #1
    18fe:	lsls	r2, r2, #12
    1900:	subs	r3, #1
    1902:	and.w	r2, r2, #1044480	; 0xff000
    1906:	ubfx	r3, r3, #0, #12
    190a:	orrs	r3, r2
    190c:	str	r3, [r0, #0]
        while(I2S0_MCR & I2S_MCR_DUF);
    190e:	ldr	r3, [r1, #0]
    1910:	ldr	r2, [pc, #296]	; (1a3c <acq_init(long)+0x1b4>)
    1912:	cmp	r3, #0
    1914:	blt.n	190e <acq_init(long)+0x86>
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        // configure transmitter
        I2S0_TMR = 0;
    1916:	ldr	r4, [pc, #296]	; (1a40 <acq_init(long)+0x1b8>)
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
        I2S0_TCR2 = I2S_TCR2_SYNC(0) 
                    | I2S_TCR2_BCP 
                    | I2S_TCR2_MSEL(1)
                    | I2S_TCR2_BCD 
                    | I2S_TCR2_DIV((BIT_DIV-1));
    1918:	ldr.w	ip, [pc, #364]	; 1a88 <acq_init(long)+0x200>
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        // configure transmitter
        I2S0_TMR = 0;
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    191c:	ldr.w	r8, [pc, #364]	; 1a8c <acq_init(long)+0x204>
        I2S0_TCR4 = I2S_TCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_TCR4_SYWD(31)
                    | I2S_TCR4_MF
                    | I2S_TCR4_FSE 
                    | I2S_TCR4_FSP 
                    | I2S_TCR4_FSD;
    1920:	ldr	r3, [pc, #288]	; (1a44 <acq_init(long)+0x1bc>)
        I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    1922:	ldr	r7, [pc, #292]	; (1a48 <acq_init(long)+0x1c0>)

      	// configure receiver (sync'd to transmitter clocks)
        I2S0_RMR=0;
    1924:	ldr	r5, [pc, #292]	; (1a4c <acq_init(long)+0x1c4>)
        I2S0_RCR1 = I2S_RCR1_RFW(1); 
    1926:	ldr.w	lr, [pc, #360]	; 1a90 <acq_init(long)+0x208>

        I2S0_RCR2 = I2S_RCR2_SYNC(1) 
                    | I2S_RCR2_BCP 
                    | I2S_RCR2_BCD  // Bit clock in master mode
                    | I2S_RCR2_DIV((BIT_DIV-1)); // divides MCLK down to Bitclock (BIT_DIV)*2
    192a:	ldr	r1, [pc, #292]	; (1a50 <acq_init(long)+0x1c8>)
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_SYWD(31)
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSP 
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
    192c:	ldr	r0, [pc, #292]	; (1a54 <acq_init(long)+0x1cc>)
        I2S0_RCSR=0;

        // enable MCLK output // MCLK = INP *((MULT)/(DIV))
        I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    192e:	mov.w	r6, #1124073472	; 0x43000000
    1932:	str	r6, [r2, #0]
        
        // configure transmitter
        I2S0_TMR = 0;
    1934:	movs	r6, #0
    1936:	str	r6, [r4, #0]
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
        I2S0_TCR2 = I2S_TCR2_SYNC(0) 
                    | I2S_TCR2_BCP 
                    | I2S_TCR2_MSEL(1)
                    | I2S_TCR2_BCD 
                    | I2S_TCR2_DIV((BIT_DIV-1));
    1938:	ldr	r2, [pc, #284]	; (1a58 <acq_init(long)+0x1d0>)
        while(I2S0_MCR & I2S_MCR_DUF);
        I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
        
        // configure transmitter
        I2S0_TMR = 0;
        I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    193a:	movs	r4, #1
    193c:	str.w	r4, [r8]
        I2S0_TCR2 = I2S_TCR2_SYNC(0) 
                    | I2S_TCR2_BCP 
                    | I2S_TCR2_MSEL(1)
                    | I2S_TCR2_BCD 
                    | I2S_TCR2_DIV((BIT_DIV-1));
    1940:	str.w	r2, [ip]
        I2S0_TCR4 = I2S_TCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_TCR4_SYWD(31)
                    | I2S_TCR4_MF
                    | I2S_TCR4_FSE 
                    | I2S_TCR4_FSP 
                    | I2S_TCR4_FSD;
    1944:	ldr	r2, [pc, #276]	; (1a5c <acq_init(long)+0x1d4>)
    1946:	str	r2, [r3, #0]
        I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    1948:	ldr	r3, [pc, #276]	; (1a60 <acq_init(long)+0x1d8>)
    194a:	str	r3, [r7, #0]

      	// configure receiver (sync'd to transmitter clocks)
        I2S0_RMR=0;
    194c:	str	r6, [r5, #0]
                    | I2S_RCR4_MF;
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);


  dma.begin(true); // Allocate the DMA channel first
    194e:	ldr	r5, [pc, #276]	; (1a64 <acq_init(long)+0x1dc>)
                    | I2S_TCR4_FSD;
        I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);

      	// configure receiver (sync'd to transmitter clocks)
        I2S0_RMR=0;
        I2S0_RCR1 = I2S_RCR1_RFW(1); 
    1950:	str.w	r4, [lr]

        I2S0_RCR2 = I2S_RCR2_SYNC(1) 
                    | I2S_RCR2_BCP 
                    | I2S_RCR2_BCD  // Bit clock in master mode
                    | I2S_RCR2_DIV((BIT_DIV-1)); // divides MCLK down to Bitclock (BIT_DIV)*2
    1954:	ldr.w	lr, [pc, #316]	; 1a94 <acq_init(long)+0x20c>
    1958:	str.w	lr, [r1]
        I2S0_RCR4 = I2S_RCR4_FRSZ((FRAME_I2S-1)) 
                    | I2S_RCR4_SYWD(31)
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSP 
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
    195c:	str	r2, [r0, #0]
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);


  dma.begin(true); // Allocate the DMA channel first
    195e:	mov	r1, r4
    1960:	mov	r0, r5
                    | I2S_RCR4_FSE  // frame sync early
                    | I2S_RCR4_FSP 
                    | I2S_RCR4_FSD  // Frame sync in master mode
                    | I2S_RCR4_MF;
        
        I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    1962:	str.w	r3, [r7, #128]	; 0x80


  dma.begin(true); // Allocate the DMA channel first
    1966:	bl	f588 <DMAChannel::begin(bool)>

#if N_ADC==1
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
    196a:	ldr	r3, [pc, #252]	; (1a68 <acq_init(long)+0x1e0>)

          I2S0_TCR3 = I2S_TCR3_TCE;
    196c:	ldr	r0, [pc, #252]	; (1a6c <acq_init(long)+0x1e4>)
          I2S0_RCR3 = I2S_RCR3_RCE;
    196e:	ldr	r1, [pc, #256]	; (1a70 <acq_init(long)+0x1e8>)

          dma.TCD->SADDR = &I2S0_RDR0;
    1970:	ldr	r2, [pc, #256]	; (1a74 <acq_init(long)+0x1ec>)
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
    1972:	ldr.w	lr, [pc, #292]	; 1a98 <acq_init(long)+0x210>


  dma.begin(true); // Allocate the DMA channel first

#if N_ADC==1
          CORE_PIN13_CONFIG = PORT_PCR_MUX(4);  // PTC5,  I2S0_RXD0
    1976:	mov.w	r7, #1024	; 0x400
    197a:	str	r7, [r3, #0]

          I2S0_TCR3 = I2S_TCR3_TCE;
    197c:	mov.w	r3, #65536	; 0x10000
    1980:	str	r3, [r0, #0]
          I2S0_RCR3 = I2S_RCR3_RCE;
    1982:	str	r3, [r1, #0]

          dma.TCD->SADDR = &I2S0_RDR0;
    1984:	ldr	r3, [r5, #0]
    1986:	str	r2, [r3, #0]
          dma.TCD->SOFF = 0;
    1988:	strh	r6, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    198a:	ldrb	r2, [r5, #4]
          dma.TCD->NBYTES_MLOFFYES = DMA_TCD_NBYTES_SMLOE |
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
    198c:	str.w	lr, [r3, #16]
    1990:	add.w	r2, r2, #1073741824	; 0x40000000
    1994:	add.w	r2, r2, #135168	; 0x21000
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
    1998:	sub.w	r7, r7, #3072	; 0xc00
          I2S0_TCR3 = I2S_TCR3_TCE;
          I2S0_RCR3 = I2S_RCR3_RCE;

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
    199c:	movw	r1, #514	; 0x202
    19a0:	strh	r1, [r3, #6]
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
    19a2:	str	r7, [r3, #24]
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    19a4:	mov.w	r0, #512	; 0x200
          I2S0_RCR3 = I2S_RCR3_RCE;

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
    19a8:	movs	r1, #4
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    19aa:	mov.w	lr, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    19ae:	movs	r7, #140	; 0x8c
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    19b0:	strh	r0, [r3, #30]

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
          dma.TCD->SLAST = 0;
    19b2:	str	r6, [r3, #12]
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
    19b4:	strh	r0, [r3, #22]
          I2S0_RCR3 = I2S_RCR3_RCE;

          dma.TCD->SADDR = &I2S0_RDR0;
          dma.TCD->SOFF = 0;
          dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(2) | DMA_TCD_ATTR_DSIZE(2);
          dma.TCD->NBYTES_MLNO = 4;
    19b6:	str	r1, [r3, #8]
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
          dma.TCD->CITER_ELINKNO = dma.TCD->BITER_ELINKNO = NDAT*FRAME_I2S*2;
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    19b8:	strh.w	lr, [r3, #28]
              DMA_TCD_NBYTES_MLOFFYES_MLOFF(-8) |
              DMA_TCD_NBYTES_MLOFFYES_NBYTES(8);
          dma.TCD->SLAST = -8;
#endif
          dma.TCD->DADDR = tdm_rx_buffer;
          dma.TCD->DOFF = 4;
    19bc:	strh	r1, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    19be:	strb	r6, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    19c0:	strb	r7, [r2, #0]
    19c2:	ldrb	r2, [r5, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    19c4:	ldr	r3, [pc, #176]	; (1a78 <acq_init(long)+0x1f0>)
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
          dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
          dma.enable();

          I2S0_RCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19c6:	ldr	r1, [pc, #108]	; (1a34 <acq_init(long)+0x1ac>)
    19c8:	strb	r2, [r3, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19ca:	asrs	r3, r2, #5
    19cc:	lsls	r3, r3, #2
    19ce:	add.w	r3, r3, #3758096384	; 0xe0000000
          I2S0_TCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19d2:	ldr	r0, [pc, #168]	; (1a7c <acq_init(long)+0x1f4>)
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19d4:	ldr	r7, [pc, #168]	; (1a80 <acq_init(long)+0x1f8>)
    19d6:	ldr.w	lr, [pc, #196]	; 1a9c <acq_init(long)+0x214>
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19da:	and.w	r6, r2, #31
    19de:	add.w	r3, r3, #57600	; 0xe100
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19e2:	adds	r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19e4:	lsls	r4, r6
          dma.TCD->DLASTSGA = -sizeof(tdm_rx_buffer);
          dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
          dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
          dma.enable();

          I2S0_RCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19e6:	ldr	r6, [pc, #156]	; (1a84 <acq_init(long)+0x1fc>)
    19e8:	str	r6, [r1, #0]
          I2S0_TCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
    19ea:	str	r6, [r0, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void attachInterrupt(void (*isr)(void), uint8_t prio) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19ec:	str.w	lr, [r7, r2, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19f0:	str	r4, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
    19f2:	ldrb	r3, [r5, #4]
    19f4:	add.w	r3, r3, #3758096384	; 0xe0000000
    19f8:	add.w	r3, r3, #58368	; 0xe400
    19fc:	movs	r2, #96	; 0x60
    19fe:	strb	r2, [r3, #0]
      *div= iimin+1;
    }

    void acq_start(void)
    {
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
    1a00:	ldr	r3, [r0, #0]
    1a02:	orr.w	r3, r3, #2415919104	; 0x90000000
    1a06:	str	r3, [r0, #0]
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    1a08:	ldr	r3, [r1, #0]
    1a0a:	orr.w	r3, r3, #2415919104	; 0x90000000
    1a0e:	str	r3, [r1, #0]

          I2S0_RCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
          I2S0_TCSR = I2S_RCSR_FRDE | I2S_RCSR_FR;
          dma.attachInterrupt(acq_isr,I2S_DMA_PRIO*16);	
          acq_start();
    }
    1a10:	add	sp, #32
    1a12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a16:	nop
    1a18:	.word	0x4d2037a0
    1a1c:	.word	0x1fff0c58
    1a20:	.word	0x4004b018
    1a24:	.word	0x4004b00c
    1a28:	.word	0x0a037a00
    1a2c:	.word	0x00014dbc
    1a30:	.word	0x4004b008
    1a34:	.word	0x4002f080
    1a38:	.word	0x4002f104
    1a3c:	.word	0x4002f100
    1a40:	.word	0x4002f060
    1a44:	.word	0x4002f010
    1a48:	.word	0x4002f014
    1a4c:	.word	0x4002f0e0
    1a50:	.word	0x4002f088
    1a54:	.word	0x4002f090
    1a58:	.word	0x07000001
    1a5c:	.word	0x00011f1b
    1a60:	.word	0x1f1f1f00
    1a64:	.word	0x1fff1638
    1a68:	.word	0x4004b014
    1a6c:	.word	0x4002f00c
    1a70:	.word	0x4002f08c
    1a74:	.word	0x4002f0a0
    1a78:	.word	0x4000801b
    1a7c:	.word	0x4002f000
    1a80:	.word	0x1fff0200
    1a84:	.word	0x02000001
    1a88:	.word	0x4002f008
    1a8c:	.word	0x4002f004
    1a90:	.word	0x4002f084
    1a94:	.word	0x43000001
    1a98:	.word	0x1fff3d50
    1a9c:	.word	0x0000123d

00001aa0 <acq_check(short)>:
        if(!pushData(acq_rx_buffer)) acq_miss++;

    }

  int16_t acq_check(int16_t state)
  { if(!state)
    1aa0:	cbnz	r0, 1ab8 <acq_check(short)+0x18>
      *div= iimin+1;
    }

    void acq_start(void)
    {
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
    1aa2:	ldr	r1, [pc, #48]	; (1ad4 <acq_check(short)+0x34>)
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    1aa4:	ldr	r2, [pc, #48]	; (1ad8 <acq_check(short)+0x38>)
      *div= iimin+1;
    }

    void acq_start(void)
    {
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
    1aa6:	ldr	r3, [r1, #0]
    1aa8:	orr.w	r3, r3, #2415919104	; 0x90000000
    1aac:	str	r3, [r1, #0]
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    1aae:	ldr	r3, [r2, #0]
    1ab0:	orr.w	r3, r3, #2415919104	; 0x90000000
    1ab4:	str	r3, [r2, #0]
    1ab6:	bx	lr
  int16_t acq_check(int16_t state)
  { if(!state)
    { // start acquisition
      acq_start();
    }
    if(state>3)
    1ab8:	cmp	r0, #3
    1aba:	ble.n	1ad0 <acq_check(short)+0x30>
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1abc:	ldr	r1, [pc, #20]	; (1ad4 <acq_check(short)+0x34>)
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1abe:	ldr	r2, [pc, #24]	; (1ad8 <acq_check(short)+0x38>)
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1ac0:	ldr	r3, [r1, #0]
    1ac2:	bic.w	r3, r3, #2415919104	; 0x90000000
    1ac6:	str	r3, [r1, #0]
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1ac8:	ldr	r3, [r2, #0]
    1aca:	bic.w	r3, r3, #2415919104	; 0x90000000
    1ace:	str	r3, [r2, #0]
    if(state>3)
    { // stop acquisition
      acq_stop();
    }
    return state;
  }
    1ad0:	bx	lr
    1ad2:	nop
    1ad4:	.word	0x4002f000
    1ad8:	.word	0x4002f080

00001adc <loop>:
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1adc:	push	{r4, r5, r6, lr}
    1ade:	ldr	r2, [pc, #132]	; (1b64 <loop+0x88>)
  state = do_menu(state);
    1ae0:	ldr	r4, [pc, #132]	; (1b68 <loop+0x8c>)
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1ae2:	ldr	r3, [r2, #0]
  state = do_menu(state);
    1ae4:	ldrsh.w	r0, [r4]
  Serial.flush();
}

uint32_t loop_count=0;
void loop()
{ loop_count++;
    1ae8:	adds	r3, #1
    1aea:	sub	sp, #16
    1aec:	str	r3, [r2, #0]
  state = do_menu(state);
    1aee:	bl	1308 <do_menu(short)>
    1af2:	strh	r0, [r4, #0]
  state = acq_check(state);
    1af4:	bl	1aa0 <acq_check(short)>

uint32_t t_on = 60;
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
    1af8:	cmp	r0, #2

uint32_t loop_count=0;
void loop()
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
    1afa:	mov	r1, r0
    1afc:	strh	r0, [r4, #0]

uint32_t t_on = 60;
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
    1afe:	beq.n	1b3e <loop+0x62>
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
  //
  if(state<0)
    1b00:	cmp	r0, #0
    1b02:	blt.n	1b32 <loop+0x56>
    mtpd.loop();
  else
    state=do_logger(0,state);
    1b04:	movs	r0, #0
    1b06:	bl	171c <do_logger(unsigned short, short)>
    1b0a:	strh	r0, [r4, #0]

  if(state>=0) logg(1000,"loop");
    1b0c:	cmp	r0, #0
    1b0e:	blt.n	1b24 <loop+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b10:	ldr	r3, [pc, #88]	; (1b6c <loop+0x90>)
/**************** Online logging *******************************/
extern uint32_t loop_count, acq_count, acq_miss, maxDel;
extern uint16_t maxCount;
void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
    1b12:	ldr	r2, [pc, #92]	; (1b70 <loop+0x94>)
    1b14:	ldr	r3, [r3, #0]
    1b16:	str	r3, [sp, #12]
	return ret;
    1b18:	ldr	r3, [sp, #12]
    1b1a:	ldr	r2, [r2, #0]
    1b1c:	subs	r3, r3, r2
    1b1e:	cmp.w	r3, #1000	; 0x3e8
    1b22:	bhi.n	1b28 <loop+0x4c>
  else
    state=do_logger(0,state);

  if(state>=0) logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
    1b24:	add	sp, #16
    1b26:	pop	{r4, r5, r6, pc}
    1b28:	ldr	r0, [pc, #72]	; (1b74 <loop+0x98>)
    1b2a:	bl	884 <logg(unsigned long, char const*) [clone .part.54]>
    1b2e:	add	sp, #16
    1b30:	pop	{r4, r5, r6, pc}
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
  //
  if(state<0)
    mtpd.loop();
    1b32:	ldr	r0, [pc, #68]	; (1b78 <loop+0x9c>)
    1b34:	bl	7084 <MTPD::loop()>
    1b38:	ldrsh.w	r0, [r4]
    1b3c:	b.n	1b0c <loop+0x30>
    1b3e:	str	r0, [sp, #4]
int16_t check_filing(int16_t state)
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    1b40:	bl	e6cc <rtc_get>
    uint32_t dt = tt % t_on;
    1b44:	ldr	r3, [pc, #52]	; (1b7c <loop+0xa0>)
    if(dt<to) state = 3;
    1b46:	ldr	r2, [pc, #56]	; (1b80 <loop+0xa4>)
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    1b48:	ldr	r3, [r3, #0]
    if(dt<to) state = 3;
    1b4a:	ldr	r5, [r2, #0]
    1b4c:	ldr	r1, [sp, #4]
{
  static uint32_t to;
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    1b4e:	udiv	r6, r0, r3
    1b52:	mls	r0, r6, r3, r0
    if(dt<to) state = 3;
    1b56:	cmp	r0, r5
    1b58:	it	cc
    1b5a:	movcc	r1, #3
uint32_t loop_count=0;
void loop()
{ loop_count++;
  state = do_menu(state);
  state = acq_check(state);
  state = check_filing(state);
    1b5c:	strh	r1, [r4, #0]
  if(state==2)
  {
    uint32_t tt = rtc_get();
    uint32_t dt = tt % t_on;
    if(dt<to) state = 3;
    to = dt;
    1b5e:	str	r0, [r2, #0]
    1b60:	b.n	1b04 <loop+0x28>
    1b62:	nop
    1b64:	.word	0x20006a20
    1b68:	.word	0x1fff3d4e
    1b6c:	.word	0x2000701c
    1b70:	.word	0x20006a38
    1b74:	.word	0x00014dd4
    1b78:	.word	0x20006a08
    1b7c:	.word	0x1fff0974
    1b80:	.word	0x20006a34

00001b84 <_GLOBAL__sub_I_audioShield>:

void SGTL5000_disable(void)
{
  chipWrite(0, CHIP_DIG_POWER, 0); 
  chipWrite(0, CHIP_ANA_POWER, 0); 
}
    1b84:	push	{r3, r4, r5, r6, r7, lr}
#define AUDIO_HEADPHONE_LINEIN 1

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
    1b86:	ldr	r1, [pc, #240]	; (1c78 <_GLOBAL__sub_I_audioShield+0xf4>)


class SDClass : public FS
{
public:
	SDClass() { }
    1b88:	ldr	r3, [pc, #240]	; (1c7c <_GLOBAL__sub_I_audioShield+0xf8>)
  return state;
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
    1b8a:	ldr	r6, [pc, #244]	; (1c80 <_GLOBAL__sub_I_audioShield+0xfc>)
    1b8c:	ldr	r2, [pc, #244]	; (1c84 <_GLOBAL__sub_I_audioShield+0x100>)
    1b8e:	ldr	r0, [pc, #248]	; (1c88 <_GLOBAL__sub_I_audioShield+0x104>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    1b90:	ldr	r7, [pc, #248]	; (1c8c <_GLOBAL__sub_I_audioShield+0x108>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1b92:	ldr.w	lr, [pc, #296]	; 1cbc <_GLOBAL__sub_I_audioShield+0x138>
    1b96:	str	r2, [r1, #0]
    1b98:	movs	r4, #10
    1b9a:	strb	r4, [r1, #8]
    1b9c:	str	r0, [r3, #0]
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    1b9e:	movs	r4, #0
    1ba0:	str.w	r7, [r3, #1184]	; 0x4a0
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    1ba4:	ldr	r0, [pc, #232]	; (1c90 <_GLOBAL__sub_I_audioShield+0x10c>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1ba6:	ldr	r5, [pc, #236]	; (1c94 <_GLOBAL__sub_I_audioShield+0x110>)
    1ba8:	str.w	lr, [r3, #1172]	; 0x494
    1bac:	movs	r1, #1
    1bae:	movs	r7, #41	; 0x29
    1bb0:	mov	r2, r6
    1bb2:	str.w	r0, [r3, #1192]	; 0x4a8
    1bb6:	strb.w	r1, [r3, #1201]	; 0x4b1
    1bba:	strb.w	r7, [r3, #1203]	; 0x4b3
    1bbe:	str.w	r4, [r3, #1156]	; 0x484
    1bc2:	str.w	r4, [r3, #1160]	; 0x488
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    1bc6:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1bca:	strb.w	r4, [r3, #1181]	; 0x49d
    1bce:	strb.w	r4, [r3, #1206]	; 0x4b6
    1bd2:	mov	r0, r4
    1bd4:	ldr	r1, [pc, #192]	; (1c98 <_GLOBAL__sub_I_audioShield+0x114>)
    1bd6:	bl	fb40 <__aeabi_atexit>

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1bda:	mvn.w	r7, #1
    1bde:	ldr	r0, [pc, #188]	; (1c9c <_GLOBAL__sub_I_audioShield+0x118>)

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    1be0:	ldr	r3, [pc, #188]	; (1ca0 <_GLOBAL__sub_I_audioShield+0x11c>)
    1be2:	str	r0, [r5, #0]
  const int nfs = sizeof(lfs_size)/sizeof(int);

  LittleFS_RAM ramfs[nfs]; // needs to be declared if LittleFS is used in storage.h
#endif

MTPStorage_SD storage;
    1be4:	mov	r2, r6
    1be6:	str.w	r7, [r5, #240]	; 0xf0
    1bea:	ldr	r1, [pc, #184]	; (1ca4 <_GLOBAL__sub_I_audioShield+0x120>)
    1bec:	str.w	r3, [r5, #168]	; 0xa8
    1bf0:	mov.w	r7, #1000	; 0x3e8
    1bf4:	mov	r0, r5
    1bf6:	str.w	r7, [r5, #176]	; 0xb0
    1bfa:	str.w	r7, [r5, #196]	; 0xc4
    1bfe:	str.w	r7, [r5, #216]	; 0xd8
    1c02:	str.w	r3, [r5, #188]	; 0xbc
    1c06:	str.w	r3, [r5, #208]	; 0xd0
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
    1c0a:	ldr	r7, [pc, #156]	; (1ca8 <_GLOBAL__sub_I_audioShield+0x124>)

class mSD_Base
{
  public:
    mSD_Base() {
      fsCount = 0;
    1c0c:	str	r4, [r5, #4]
    1c0e:	strb.w	r4, [r5, #172]	; 0xac
    1c12:	strb.w	r4, [r5, #180]	; 0xb4
    1c16:	str.w	r4, [r5, #184]	; 0xb8
    1c1a:	strb.w	r4, [r5, #192]	; 0xc0
    1c1e:	strb.w	r4, [r5, #200]	; 0xc8
    1c22:	str.w	r4, [r5, #204]	; 0xcc
    1c26:	strb.w	r4, [r5, #212]	; 0xd4
    1c2a:	strb.w	r4, [r5, #220]	; 0xdc
    1c2e:	str.w	r4, [r5, #224]	; 0xe0

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
    1c32:	str.w	r4, [r5, #228]	; 0xe4
    1c36:	str.w	r4, [r5, #232]	; 0xe8
    1c3a:	str.w	r4, [r5, #236]	; 0xec
    1c3e:	str.w	r4, [r5, #244]	; 0xf4
    1c42:	strb.w	r4, [r5, #248]	; 0xf8
    1c46:	strb.w	r4, [r5, #249]	; 0xf9
    1c4a:	bl	fb40 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
    1c4e:	ldr	r3, [pc, #92]	; (1cac <_GLOBAL__sub_I_audioShield+0x128>)
}

/************ Basic File System Interface *************************/
#include "SD.h"
extern SDClass sdx[];
static File mfile;
    1c50:	ldr	r1, [pc, #92]	; (1cb0 <_GLOBAL__sub_I_audioShield+0x12c>)
    1c52:	ldr	r0, [pc, #96]	; (1cb4 <_GLOBAL__sub_I_audioShield+0x130>)
    1c54:	str	r5, [r3, #0]
    1c56:	mov	r2, r6
    1c58:	str	r4, [r3, #4]
    1c5a:	strb	r4, [r3, #8]
    1c5c:	str	r4, [r3, #12]
    1c5e:	bl	fb40 <__aeabi_atexit>
    1c62:	mov	r1, r4
    1c64:	mov	r0, r7
    1c66:	bl	f588 <DMAChannel::begin(bool)>
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    1c6a:	mov	r2, r6
    1c6c:	mov	r0, r7
    1c6e:	ldr	r1, [pc, #72]	; (1cb8 <_GLOBAL__sub_I_audioShield+0x134>)

void SGTL5000_disable(void)
{
  chipWrite(0, CHIP_DIG_POWER, 0); 
  chipWrite(0, CHIP_ANA_POWER, 0); 
}
    1c70:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  static uint32_t tdm_rx_buffer[2*NBUF_I2S];
  static uint32_t acq_rx_buffer[NBUF_ACQ];
  #define I2S_DMA_PRIO 6

  #include "DMAChannel.h"
  DMAChannel dma;
    1c74:	b.w	fb40 <__aeabi_atexit>
    1c78:	.word	0x20006a24
    1c7c:	.word	0x1fff4550
    1c80:	.word	0x1fff0970
    1c84:	.word	0x00015150
    1c88:	.word	0x00014c9c
    1c8c:	.word	0x000151f8
    1c90:	.word	0x38002003
    1c94:	.word	0x1fff3c48
    1c98:	.word	0x000005d5
    1c9c:	.word	0x00014e44
    1ca0:	.word	0x00014bdc
    1ca4:	.word	0x00000f61
    1ca8:	.word	0x1fff1638
    1cac:	.word	0x20006a08
    1cb0:	.word	0x00000ea5
    1cb4:	.word	0x1fff097c
    1cb8:	.word	0x00000789
    1cbc:	.word	0x00015250

00001cc0 <chipWrite(int, unsigned int, unsigned int)>:
  val |= Wire.read();
  return val;
}

bool chipWrite(int addr, unsigned int reg, unsigned int val)
{
    1cc0:	push	{r3, r4, r5, r6, r7, lr}
  Wire.beginTransmission(SGTL_ADDR[addr]);
    1cc2:	ldr	r3, [pc, #80]	; (1d14 <chipWrite(int, unsigned int, unsigned int)+0x54>)
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1cc4:	ldr	r4, [pc, #80]	; (1d18 <chipWrite(int, unsigned int, unsigned int)+0x58>)
    1cc6:	ldr.w	r3, [r3, r0, lsl #2]
		transmitting = 1;
    1cca:	movs	r5, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1ccc:	lsls	r3, r3, #1
  val |= Wire.read();
  return val;
}

bool chipWrite(int addr, unsigned int reg, unsigned int val)
{
    1cce:	mov	r7, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    1cd0:	mov	r0, r4
    1cd2:	ubfx	r1, r1, #8, #8
    1cd6:	mov	r6, r2
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1cd8:	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    1cdc:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    1ce0:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    1ce4:	bl	8830 <TwoWire::write(unsigned char)>
    1ce8:	uxtb	r1, r7
    1cea:	mov	r0, r4
    1cec:	bl	8830 <TwoWire::write(unsigned char)>
    1cf0:	ubfx	r1, r6, #8, #8
    1cf4:	mov	r0, r4
    1cf6:	bl	8830 <TwoWire::write(unsigned char)>
    1cfa:	uxtb	r1, r6
    1cfc:	mov	r0, r4
    1cfe:	bl	8830 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    1d02:	mov	r1, r5
    1d04:	mov	r0, r4
    1d06:	bl	8b08 <TwoWire::endTransmission(unsigned char)>
  Wire.write(reg);
  Wire.write(val >> 8);
  Wire.write(val);
  if (Wire.endTransmission() == 0) return true;
  return false;
}
    1d0a:	clz	r0, r0
    1d0e:	lsrs	r0, r0, #5
    1d10:	pop	{r3, r4, r5, r6, r7, pc}
    1d12:	nop
    1d14:	.word	0x00014cbc
    1d18:	.word	0x1fff0a84

00001d1c <setup>:
void printTimestamp(uint32_t tt);

#include "TimeLib.h" // for setSyncProvider

void setup()
{ while(!Serial && millis()<3000); 
    1d1c:	push	{r4, r5, r6, lr}
    1d1e:	ldr	r1, [pc, #264]	; (1e28 <setup+0x10c>)
    1d20:	ldr	r2, [pc, #264]	; (1e2c <setup+0x110>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d22:	ldr	r4, [pc, #268]	; (1e30 <setup+0x114>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1d24:	ldr	r6, [pc, #268]	; (1e34 <setup+0x118>)
    1d26:	sub	sp, #8
    1d28:	movw	r0, #2999	; 0xbb7
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d2c:	ldrb	r3, [r1, #0]
    1d2e:	cmp	r3, #0
    1d30:	beq.n	1dfc <setup+0xe0>
    1d32:	ldrb	r3, [r4, #0]
    1d34:	lsls	r3, r3, #31
    1d36:	bpl.n	1dfc <setup+0xe0>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1d38:	ldr	r3, [r2, #0]
    1d3a:	ldr	r5, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1d3c:	subs	r3, r3, r5
    1d3e:	cmp	r3, #14
    1d40:	bls.n	1dfc <setup+0xe0>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1d42:	movs	r1, #10
    1d44:	ldr	r0, [pc, #240]	; (1e38 <setup+0x11c>)
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
        SIM_SCGC7 |= SIM_SCGC7_DMA;
    1d46:	ldr	r6, [pc, #244]	; (1e3c <setup+0x120>)
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1d48:	ldr	r5, [pc, #244]	; (1e40 <setup+0x124>)

  acq_setup();
  acq_stop();
  acq_init(fsamp);

  audioShield.enable();
    1d4a:	ldr	r4, [pc, #248]	; (1e44 <setup+0x128>)
    1d4c:	bl	de04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1d50:	ldr	r0, [pc, #244]	; (1e48 <setup+0x12c>)
    1d52:	bl	f7b8 <Print::println()>
#include "TimeLib.h" // for setSyncProvider

void setup()
{ while(!Serial && millis()<3000); 
  Serial.println("MTP logger");
  setSyncProvider((long int (*)()) rtc_get);
    1d56:	ldr	r0, [pc, #244]	; (1e4c <setup+0x130>)
    1d58:	bl	81a0 <setSyncProvider(long (*)())>

  printTimestamp(rtc_get());
    1d5c:	bl	e6cc <rtc_get>
    1d60:	bl	13e0 <printTimestamp(unsigned long)>

  #if USE_EVENTS==1
    usb_init_events();
    1d64:	bl	76fc <usb_init_events>
  #endif

  #if !__has_include("usb_mtp.h")
    usb_mtp_configure();
  #endif
  storage_configure();
    1d68:	bl	1034 <storage_configure()>
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    1d6c:	ldr	r3, [pc, #224]	; (1e50 <setup+0x134>)
  #endif
  storage_configure();

  #if USE_SD==1
    // Set Time callback // needed for SDFat
    FsDateTime::callback = dateTime;
    1d6e:	ldr	r2, [pc, #228]	; (1e54 <setup+0x138>)
    1d70:	ldr	r1, [pc, #228]	; (1e58 <setup+0x13c>)
    1d72:	str	r1, [r2, #0]
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    1d74:	ldr	r2, [r3, #0]
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1d76:	ldr	r1, [pc, #228]	; (1e5c <setup+0x140>)
    FsDateTime::callback = dateTime;
  #endif

  acq_setup();
  acq_stop();
  acq_init(fsamp);
    1d78:	ldr	r0, [pc, #228]	; (1e60 <setup+0x144>)
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    }

    void acq_setup(void)
    {
        SIM_SCGC6 |= SIM_SCGC6_I2S;
    1d7a:	orr.w	r2, r2, #32768	; 0x8000
    1d7e:	str	r2, [r3, #0]
        SIM_SCGC7 |= SIM_SCGC7_DMA;
    1d80:	ldr	r2, [r6, #0]
    1d82:	orr.w	r2, r2, #2
    1d86:	str	r2, [r6, #0]
        SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    1d88:	ldr	r2, [r3, #0]
    1d8a:	orr.w	r2, r2, #2
    1d8e:	str	r2, [r3, #0]
          I2S0_TCSR |= (I2S_TCSR_TE | I2S_TCSR_BCE);
          I2S0_RCSR |= (I2S_RCSR_RE | I2S_RCSR_BCE);
    }
    void acq_stop(void)
    { 
          I2S0_TCSR &= ~(I2S_TCSR_TE | I2S_TCSR_BCE);
    1d90:	ldr	r3, [r5, #0]
    1d92:	bic.w	r3, r3, #2415919104	; 0x90000000
    1d96:	str	r3, [r5, #0]
          I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1d98:	ldr	r3, [r1, #0]
    1d9a:	bic.w	r3, r3, #2415919104	; 0x90000000
    1d9e:	str	r3, [r1, #0]
    FsDateTime::callback = dateTime;
  #endif

  acq_setup();
  acq_stop();
  acq_init(fsamp);
    1da0:	bl	1888 <acq_init(long)>

  audioShield.enable();
    1da4:	mov	r0, r4
    1da6:	bl	8584 <AudioControlSGTL5000::enable()>
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    1daa:	mov	r0, r4
    1dac:	movw	r2, #371	; 0x173
    1db0:	movs	r1, #42	; 0x2a
    1db2:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1db6:	cbnz	r0, 1e08 <setup+0xec>
  audioShield.inputSelect(AUDIO_SELECT);  //AUDIO_INPUT_LINEIN or AUDIO_INPUT_MIC

  delay(10);
    1db8:	movs	r0, #10
    1dba:	bl	e75c <delay>

  //(0: 8kHz, 1: 16 kHz 2:32 kHz, 3:44.1 kHz, 4:48 kHz, 5:96 kHz, 6:192 kHz)

//  write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
//	write(CHIP_I2S_CTRL, 0x0130); // SCLK=32*Fs, 16bit, I2S format
  chipWrite(0, CHIP_CLK_CTRL, (sgtl_mode<<2));  // 256*Fs| sgtl_mode = 0:32 kHz; 1:44.1 kHz; 2:48 kHz; 3:96 kHz
    1dbe:	movs	r2, #12
    1dc0:	movs	r1, #4
    1dc2:	movs	r0, #0
    1dc4:	bl	1cc0 <chipWrite(int, unsigned int, unsigned int)>
  delay(10);
  SGTL5000_modification(fsamp); // must be called after I2S initialization stabilized 
  
  
  #if AUDIO_SELECT == AUDIO_INPUT_MIC
    audioShield.micGain(MicGain);
    1dc8:	movs	r1, #0
    1dca:	ldr	r0, [pc, #120]	; (1e44 <setup+0x128>)
    1dcc:	bl	8318 <AudioControlSGTL5000::micGain(unsigned int)>
  #endif

  state=-1;
    1dd0:	ldr	r3, [pc, #144]	; (1e64 <setup+0x148>)
    1dd2:	ldr	r0, [pc, #148]	; (1e68 <setup+0x14c>)
    1dd4:	movw	r2, #65535	; 0xffff
    1dd8:	movs	r1, #10
    1dda:	strh	r2, [r3, #0]
    1ddc:	bl	de04 <usb_serial_write>
    1de0:	ldr	r0, [pc, #100]	; (1e48 <setup+0x12c>)
    1de2:	bl	f7b8 <Print::println()>
    1de6:	movs	r1, #67	; 0x43
    1de8:	ldr	r0, [pc, #128]	; (1e6c <setup+0x150>)
    1dea:	bl	de04 <usb_serial_write>
    1dee:	ldr	r0, [pc, #88]	; (1e48 <setup+0x12c>)
    1df0:	bl	f7b8 <Print::println()>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1df4:	bl	df6c <usb_serial_flush_output>

  Serial.println("Setup done");
  Serial.println(" Enter 's' to start, 'q' to stop acquisition and 'r' to restart MTP");
  Serial.flush();
}
    1df8:	add	sp, #8
    1dfa:	pop	{r4, r5, r6, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dfc:	ldr	r3, [r2, #0]
    1dfe:	str	r3, [sp, #4]
	return ret;
    1e00:	ldr	r3, [sp, #4]
void printTimestamp(uint32_t tt);

#include "TimeLib.h" // for setSyncProvider

void setup()
{ while(!Serial && millis()<3000); 
    1e02:	cmp	r3, r0
    1e04:	bls.n	1d2c <setup+0x10>
    1e06:	b.n	1d42 <setup+0x26>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    1e08:	movs	r2, #136	; 0x88
    1e0a:	movs	r1, #32
    1e0c:	mov	r0, r4
    1e0e:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1e12:	cmp	r0, #0
    1e14:	beq.n	1db8 <setup+0x9c>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    1e16:	ldrh	r2, [r4, #6]
    1e18:	mov	r0, r4
    1e1a:	bic.w	r2, r2, #4
    1e1e:	movs	r1, #36	; 0x24
    1e20:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1e24:	b.n	1db8 <setup+0x9c>
    1e26:	nop
    1e28:	.word	0x20007120
    1e2c:	.word	0x2000701c
    1e30:	.word	0x20007018
    1e34:	.word	0x200071a4
    1e38:	.word	0x00014ddc
    1e3c:	.word	0x40048040
    1e40:	.word	0x4002f000
    1e44:	.word	0x20006a24
    1e48:	.word	0x1fff0c58
    1e4c:	.word	0x0000e6cd
    1e50:	.word	0x4004803c
    1e54:	.word	0x20006af8
    1e58:	.word	0x000006f1
    1e5c:	.word	0x4002f080
    1e60:	.word	0x00017700
    1e64:	.word	0x1fff3d4e
    1e68:	.word	0x00014de8
    1e6c:	.word	0x00014df4

00001e70 <MTPStorage_SD::addFilesystem(FS&, char const*)>:
    mSD_Base() {
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
    1e70:	ldr	r3, [r0, #4]
    1e72:	cmp	r3, #19
    1e74:	bgt.n	1e88 <MTPStorage_SD::addFilesystem(FS&, char const*)+0x18>

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1e76:	push	{r4}
    1e78:	add.w	r4, r0, r3, lsl #2
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
        sdx[fsCount++] = &fs;
    1e7c:	adds	r3, #1
      fsCount = 0;
    }

    void sd_addFilesystem(FS &fs, const char *name) {
      if (fsCount < MTPD_MAX_FILESYSTEMS) {
        sd_name[fsCount] = name;
    1e7e:	str	r2, [r4, #8]
        sdx[fsCount++] = &fs;
    1e80:	str	r3, [r0, #4]
    1e82:	str	r1, [r4, #88]	; 0x58

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(FS &fs, const char *name) { sd_addFilesystem(fs, name);}
    1e84:	ldr.w	r4, [sp], #4
    1e88:	bx	lr
    1e8a:	nop

00001e8c <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    1e8c:	ldr	r0, [r0, #4]
    1e8e:	bx	lr

00001e90 <MTPStorage_SD::get_FSName(unsigned long)>:
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    1e90:	add.w	r1, r0, r1, lsl #2
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    1e94:	ldr	r0, [r1, #8]
    1e96:	bx	lr

00001e98 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    1e98:	movs	r0, #0
    1e9a:	bx	lr

00001e9c <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    1e9c:	movs	r0, #1
    1e9e:	bx	lr

00001ea0 <MTPStorage_SD::totalSize(unsigned long)>:
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }

    uint64_t sd_totalSize(uint32_t store) { return sdx[store]->totalSize();  }
    1ea0:	add.w	r1, r0, r1, lsl #2
    1ea4:	ldr	r0, [r1, #88]	; 0x58
    1ea6:	ldr	r3, [r0, #0]
    1ea8:	ldr	r3, [r3, #28]
    1eaa:	bx	r3

00001eac <MTPStorage_SD::usedSize(unsigned long)>:
    uint64_t sd_usedSize(uint32_t store)  { return sdx[store]->usedSize();  }
    1eac:	add.w	r1, r0, r1, lsl #2
    1eb0:	ldr	r0, [r1, #88]	; 0x58
    1eb2:	ldr	r3, [r0, #0]
    1eb4:	ldr	r3, [r3, #24]
    1eb6:	bx	r3

00001eb8 <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    1eb8:	ldr.w	r0, [r0, #204]	; 0xcc
    1ebc:	cmp	r0, #0
    1ebe:	beq.n	1f26 <MTPStorage_SD::write(char const*, unsigned long)+0x6e>
    #endif
    return ret;
  }

  size_t MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    1ec0:	push	{r4, r5, r6}
    1ec2:	ldr	r4, [r0, #0]
    1ec4:	ldr	r3, [pc, #108]	; (1f34 <MTPStorage_SD::write(char const*, unsigned long)+0x7c>)
    1ec6:	ldr	r4, [r4, #44]	; 0x2c
    1ec8:	cmp	r4, r3
    1eca:	bne.n	1f20 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1ecc:	ldr	r0, [r0, #16]
    1ece:	cbz	r0, 1f1a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ed0:	ldr	r4, [r0, #0]
    1ed2:	ldr	r4, [r4, #44]	; 0x2c
    1ed4:	cmp	r4, r3
    1ed6:	bne.n	1f20 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1ed8:	ldr	r0, [r0, #16]
    1eda:	cbz	r0, 1f1a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1edc:	ldr	r4, [r0, #0]
    1ede:	ldr	r4, [r4, #44]	; 0x2c
    1ee0:	cmp	r4, r3
    1ee2:	bne.n	1f20 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1ee4:	ldr	r0, [r0, #16]
    1ee6:	cbz	r0, 1f1a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ee8:	ldr	r4, [r0, #0]
    1eea:	ldr	r4, [r4, #44]	; 0x2c
    1eec:	cmp	r4, r3
    1eee:	bne.n	1f20 <MTPStorage_SD::write(char const*, unsigned long)+0x68>
    1ef0:	ldr	r0, [r0, #16]
    1ef2:	cbz	r0, 1f1a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1ef4:	mov	r6, r2
    1ef6:	ldr	r2, [r0, #0]
    1ef8:	ldr	r4, [r2, #44]	; 0x2c
    1efa:	cmp	r4, r3
    1efc:	mov	r5, r1
    1efe:	bne.n	1f2a <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1f00:	ldr	r0, [r0, #16]
    1f02:	cbz	r0, 1f1a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1f04:	ldr	r2, [r0, #0]
    1f06:	ldr	r4, [r2, #44]	; 0x2c
    1f08:	cmp	r4, r3
    1f0a:	bne.n	1f2a <MTPStorage_SD::write(char const*, unsigned long)+0x72>
    1f0c:	ldr	r0, [r0, #16]
    1f0e:	cbz	r0, 1f1a <MTPStorage_SD::write(char const*, unsigned long)+0x62>
    1f10:	ldr	r3, [r0, #0]
    1f12:	mov	r2, r6
    1f14:	ldr	r3, [r3, #44]	; 0x2c
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    1f16:	pop	{r4, r5, r6}
    1f18:	bx	r3
    1f1a:	movs	r0, #0
    1f1c:	pop	{r4, r5, r6}
    1f1e:	bx	lr
    1f20:	mov	r3, r4
    1f22:	pop	{r4, r5, r6}
    1f24:	bx	r3
    1f26:	movs	r0, #0
    1f28:	bx	lr
    1f2a:	mov	r2, r6
    1f2c:	mov	r1, r5
    1f2e:	mov	r3, r4
    1f30:	pop	{r4, r5, r6}
    1f32:	bx	r3
    1f34:	.word	0x00000489

00001f38 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    1f38:	ldr.w	r3, [r0, #184]	; 0xb8
    1f3c:	cmp	r3, #0
    1f3e:	beq.n	1fa8 <MTPStorage_SD::ResetIndex()+0x70>
    1f40:	ldr	r2, [r3, #0]
    1f42:	ldr	r1, [pc, #108]	; (1fb0 <MTPStorage_SD::ResetIndex()+0x78>)
    1f44:	ldr	r2, [r2, #68]	; 0x44
    1f46:	cmp	r2, r1
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::ResetIndex() {
    1f48:	push	{r4, lr}
    1f4a:	mov	r4, r0
    1f4c:	bne.n	1fa2 <MTPStorage_SD::ResetIndex()+0x6a>
    1f4e:	ldr	r0, [r3, #16]
    1f50:	cbz	r0, 1fa0 <MTPStorage_SD::ResetIndex()+0x68>
    1f52:	ldr	r3, [r0, #0]
    1f54:	ldr	r3, [r3, #68]	; 0x44
    1f56:	cmp	r3, r2
    1f58:	bne.n	1faa <MTPStorage_SD::ResetIndex()+0x72>
    1f5a:	ldr	r0, [r0, #16]
    1f5c:	cbz	r0, 1fa0 <MTPStorage_SD::ResetIndex()+0x68>
    1f5e:	ldr	r2, [r0, #0]
    1f60:	ldr	r2, [r2, #68]	; 0x44
    1f62:	cmp	r2, r3
    1f64:	bne.n	1fa4 <MTPStorage_SD::ResetIndex()+0x6c>
    1f66:	ldr	r0, [r0, #16]
    1f68:	cbz	r0, 1fa0 <MTPStorage_SD::ResetIndex()+0x68>
    1f6a:	ldr	r3, [r0, #0]
    1f6c:	ldr	r3, [r3, #68]	; 0x44
    1f6e:	cmp	r3, r2
    1f70:	bne.n	1faa <MTPStorage_SD::ResetIndex()+0x72>
    1f72:	ldr	r0, [r0, #16]
    1f74:	cbz	r0, 1fa0 <MTPStorage_SD::ResetIndex()+0x68>
    1f76:	ldr	r2, [r0, #0]
    1f78:	ldr	r2, [r2, #68]	; 0x44
    1f7a:	cmp	r2, r3
    1f7c:	bne.n	1fa4 <MTPStorage_SD::ResetIndex()+0x6c>
    1f7e:	ldr	r0, [r0, #16]
    1f80:	cbz	r0, 1fa0 <MTPStorage_SD::ResetIndex()+0x68>
    1f82:	ldr	r3, [r0, #0]
    1f84:	ldr	r3, [r3, #68]	; 0x44
    1f86:	blx	r3
    if(!sd_isOpen(index_)) return;
    1f88:	cbz	r0, 1fa0 <MTPStorage_SD::ResetIndex()+0x68>
    CloseIndex();
    1f8a:	ldr	r3, [r4, #0]
    1f8c:	mov	r0, r4
    1f8e:	ldr	r3, [r3, #64]	; 0x40
    1f90:	blx	r3
//    OpenIndex();

    all_scanned_ = false;
    1f92:	movs	r2, #0
    open_file_ = 0xFFFFFFFEUL;
    1f94:	mvn.w	r3, #1
  void MTPStorage_SD::ResetIndex() {
    if(!sd_isOpen(index_)) return;
    CloseIndex();
//    OpenIndex();

    all_scanned_ = false;
    1f98:	strb.w	r2, [r4, #249]	; 0xf9
    open_file_ = 0xFFFFFFFEUL;
    1f9c:	str.w	r3, [r4, #240]	; 0xf0
    1fa0:	pop	{r4, pc}
    1fa2:	mov	r0, r3
    1fa4:	blx	r2
    1fa6:	b.n	1f88 <MTPStorage_SD::ResetIndex()+0x50>
    1fa8:	bx	lr
    1faa:	blx	r3
    1fac:	b.n	1f88 <MTPStorage_SD::ResetIndex()+0x50>
    1fae:	nop
    1fb0:	.word	0x0000050d

00001fb4 <MTPStorage_SD::CloseIndex()>:

  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }

  void MTPStorage_SD::CloseIndex()
  {
    1fb4:	push	{r4, lr}
    1fb6:	mov	r4, r0
    1fb8:	ldr.w	r0, [r0, #184]	; 0xb8
    1fbc:	cmp	r0, #0
    1fbe:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
    1fc0:	ldr	r3, [r0, #0]
    1fc2:	ldr	r2, [pc, #256]	; (20c4 <MTPStorage_SD::CloseIndex()+0x110>)
    1fc4:	ldr	r3, [r3, #68]	; 0x44
    1fc6:	cmp	r3, r2
    1fc8:	bne.n	20ac <MTPStorage_SD::CloseIndex()+0xf8>
    1fca:	ldr	r0, [r0, #16]
    1fcc:	cmp	r0, #0
    1fce:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
    1fd0:	ldr	r2, [r0, #0]
    1fd2:	ldr	r2, [r2, #68]	; 0x44
    1fd4:	cmp	r2, r3
    1fd6:	bne.n	20be <MTPStorage_SD::CloseIndex()+0x10a>
    1fd8:	ldr	r0, [r0, #16]
    1fda:	cmp	r0, #0
    1fdc:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
    1fde:	ldr	r3, [r0, #0]
    1fe0:	ldr	r3, [r3, #68]	; 0x44
    1fe2:	cmp	r3, r2
    1fe4:	bne.n	20ac <MTPStorage_SD::CloseIndex()+0xf8>
    1fe6:	ldr	r0, [r0, #16]
    1fe8:	cmp	r0, #0
    1fea:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
    1fec:	ldr	r2, [r0, #0]
    1fee:	ldr	r2, [r2, #68]	; 0x44
    1ff0:	cmp	r2, r3
    1ff2:	bne.n	20be <MTPStorage_SD::CloseIndex()+0x10a>
    1ff4:	ldr	r0, [r0, #16]
    1ff6:	cmp	r0, #0
    1ff8:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
    1ffa:	ldr	r3, [r0, #0]
    1ffc:	ldr	r3, [r3, #68]	; 0x44
    1ffe:	cmp	r3, r2
    2000:	bne.n	20ac <MTPStorage_SD::CloseIndex()+0xf8>
    2002:	ldr	r0, [r0, #16]
    2004:	cmp	r0, #0
    2006:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
    2008:	ldr	r3, [r0, #0]
    200a:	ldr	r3, [r3, #68]	; 0x44
    200c:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    200e:	cmp	r0, #0
    2010:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2012:	ldr.w	r0, [r4, #184]	; 0xb8
    2016:	cmp	r0, #0
    2018:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
    201a:	ldr	r2, [r0, #0]
    201c:	ldr	r3, [pc, #168]	; (20c8 <MTPStorage_SD::CloseIndex()+0x114>)
    201e:	ldr	r2, [r2, #64]	; 0x40
    2020:	cmp	r2, r3
    2022:	bne.n	20b0 <MTPStorage_SD::CloseIndex()+0xfc>
    2024:	ldr	r0, [r0, #16]
    2026:	cmp	r0, #0
    2028:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
    202a:	ldr	r2, [r0, #0]
    202c:	ldr	r2, [r2, #64]	; 0x40
    202e:	cmp	r2, r3
    2030:	bne.n	20b0 <MTPStorage_SD::CloseIndex()+0xfc>
    2032:	ldr	r0, [r0, #16]
    2034:	cmp	r0, #0
    2036:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
    2038:	ldr	r2, [r0, #0]
    203a:	ldr	r2, [r2, #64]	; 0x40
    203c:	cmp	r2, r3
    203e:	bne.n	20b0 <MTPStorage_SD::CloseIndex()+0xfc>
    2040:	ldr	r0, [r0, #16]
    2042:	cmp	r0, #0
    2044:	beq.n	20a0 <MTPStorage_SD::CloseIndex()+0xec>
    2046:	ldr	r2, [r0, #0]
    2048:	ldr	r2, [r2, #64]	; 0x40
    204a:	cmp	r2, r3
    204c:	bne.n	20b0 <MTPStorage_SD::CloseIndex()+0xfc>
    204e:	ldr	r0, [r0, #16]
    2050:	cbz	r0, 20a0 <MTPStorage_SD::CloseIndex()+0xec>
    2052:	ldr	r2, [r0, #0]
    2054:	ldr	r2, [r2, #64]	; 0x40
    2056:	cmp	r2, r3
    2058:	bne.n	20b0 <MTPStorage_SD::CloseIndex()+0xfc>
    205a:	ldr	r0, [r0, #16]
    205c:	cbz	r0, 20a0 <MTPStorage_SD::CloseIndex()+0xec>
    205e:	ldr	r2, [r0, #0]
    2060:	ldr	r2, [r2, #64]	; 0x40
    2062:	cmp	r2, r3
    2064:	bne.n	20b0 <MTPStorage_SD::CloseIndex()+0xfc>
    2066:	ldr	r0, [r0, #16]
    2068:	cbz	r0, 20a0 <MTPStorage_SD::CloseIndex()+0xec>
    206a:	ldr	r2, [r0, #0]
    206c:	ldr	r2, [r2, #64]	; 0x40
    206e:	cmp	r2, r3
    2070:	bne.n	20b0 <MTPStorage_SD::CloseIndex()+0xfc>
    2072:	ldr	r0, [r0, #16]
    2074:	cbz	r0, 20a0 <MTPStorage_SD::CloseIndex()+0xec>
    2076:	ldr	r2, [r0, #0]
    2078:	ldr	r2, [r2, #64]	; 0x40
    207a:	cmp	r2, r3
    207c:	bne.n	20b0 <MTPStorage_SD::CloseIndex()+0xfc>
    207e:	ldr	r0, [r0, #16]
    2080:	cbz	r0, 20a0 <MTPStorage_SD::CloseIndex()+0xec>
    2082:	ldr	r2, [r0, #0]
    2084:	ldr	r2, [r2, #64]	; 0x40
    2086:	cmp	r2, r3
    2088:	bne.n	20b0 <MTPStorage_SD::CloseIndex()+0xfc>
    208a:	ldr	r0, [r0, #16]
    208c:	cbz	r0, 20a0 <MTPStorage_SD::CloseIndex()+0xec>
    208e:	ldr	r2, [r0, #0]
    2090:	ldr	r2, [r2, #64]	; 0x40
    2092:	cmp	r2, r3
    2094:	bne.n	20b0 <MTPStorage_SD::CloseIndex()+0xfc>
    2096:	ldr	r0, [r0, #16]
    2098:	cbz	r0, 20a0 <MTPStorage_SD::CloseIndex()+0xec>
    209a:	ldr	r3, [r0, #0]
    209c:	ldr	r3, [r3, #64]	; 0x40
    209e:	blx	r3
    mtp_lock_storage(false);
    index_generated = false;
    20a0:	movs	r3, #0
    20a2:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    20a6:	str.w	r3, [r4, #244]	; 0xf4
    20aa:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    20ac:	blx	r3
    20ae:	b.n	200e <MTPStorage_SD::CloseIndex()+0x5a>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    20b0:	blx	r2
  void MTPStorage_SD::CloseIndex()
  {
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
    mtp_lock_storage(false);
    index_generated = false;
    20b2:	movs	r3, #0
    20b4:	strb.w	r3, [r4, #248]	; 0xf8
    index_entries_ = 0;
    20b8:	str.w	r3, [r4, #244]	; 0xf4
    20bc:	pop	{r4, pc}
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    20be:	blx	r2
    20c0:	b.n	200e <MTPStorage_SD::CloseIndex()+0x5a>
    20c2:	nop
    20c4:	.word	0x0000050d
    20c8:	.word	0x00000501

000020cc <File::invalidate() [clone .isra.1]>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    20cc:	ldr	r2, [r0, #0]
    20ce:	cmp	r2, #0
    20d0:	beq.n	214c <File::invalidate() [clone .isra.1]+0x80>
    20d2:	ldr	r3, [r2, #16]
    20d4:	subs	r3, #1
    20d6:	str	r3, [r2, #16]
    20d8:	cmp	r3, #0
    20da:	bne.n	214c <File::invalidate() [clone .isra.1]+0x80>
	}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
    20dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (f && --(f->refcount) == 0) delete f;
    20e0:	ldr	r4, [r0, #0]
    20e2:	cmp	r4, #0
    20e4:	beq.n	214e <File::invalidate() [clone .isra.1]+0x82>
    20e6:	ldr	r3, [r4, #0]
    20e8:	ldr	r1, [pc, #120]	; (2164 <File::invalidate() [clone .isra.1]+0x98>)
    20ea:	ldr	r3, [r3, #32]
    20ec:	cmp	r3, r1
    20ee:	bne.n	2152 <File::invalidate() [clone .isra.1]+0x86>
    20f0:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    20f2:	ldr	r6, [pc, #116]	; (2168 <File::invalidate() [clone .isra.1]+0x9c>)
    20f4:	str	r6, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    20f6:	cbz	r2, 2140 <File::invalidate() [clone .isra.1]+0x74>
    20f8:	ldr	r3, [r2, #16]
    20fa:	subs	r3, #1
    20fc:	str	r3, [r2, #16]
    20fe:	cbnz	r3, 2140 <File::invalidate() [clone .isra.1]+0x74>
    2100:	ldr	r5, [r4, #16]
    2102:	cbz	r5, 2140 <File::invalidate() [clone .isra.1]+0x74>
    2104:	ldr	r3, [r5, #0]
    2106:	ldr	r3, [r3, #32]
    2108:	cmp	r3, r1
    210a:	bne.n	215a <File::invalidate() [clone .isra.1]+0x8e>
    210c:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    210e:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2110:	cbz	r2, 2138 <File::invalidate() [clone .isra.1]+0x6c>
    2112:	ldr	r3, [r2, #16]
    2114:	subs	r3, #1
    2116:	str	r3, [r2, #16]
    2118:	cbnz	r3, 2138 <File::invalidate() [clone .isra.1]+0x6c>
    211a:	ldr	r7, [r5, #16]
    211c:	cbz	r7, 2138 <File::invalidate() [clone .isra.1]+0x6c>
    211e:	ldr	r3, [r7, #0]
    2120:	ldr	r3, [r3, #32]
    2122:	cmp	r3, r1
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2124:	mov	r0, r7
    2126:	bne.n	2160 <File::invalidate() [clone .isra.1]+0x94>
    2128:	str.w	r6, [r0], #16
		invalidate();
    212c:	bl	20cc <File::invalidate() [clone .isra.1]>
	}
    2130:	mov	r0, r7
    2132:	movs	r1, #20
    2134:	bl	f95c <operator delete(void*, unsigned int)>
    2138:	mov	r0, r5
    213a:	movs	r1, #20
    213c:	bl	f95c <operator delete(void*, unsigned int)>
    2140:	mov	r0, r4
    2142:	movs	r1, #20
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
	}
    2144:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2148:	b.w	f95c <operator delete(void*, unsigned int)>
    214c:	bx	lr
    214e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2152:	mov	r0, r4
	}
    2154:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2158:	bx	r3
    215a:	mov	r0, r5
    215c:	blx	r3
    215e:	b.n	2140 <File::invalidate() [clone .isra.1]+0x74>
    2160:	blx	r3
    2162:	b.n	2138 <File::invalidate() [clone .isra.1]+0x6c>
    2164:	.word	0x00000f31
    2168:	.word	0x00014bdc

0000216c <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
    216c:	bx	lr
    216e:	nop

00002170 <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    2170:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2174:	mov	r4, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2176:	ldr.w	r0, [r0, #184]	; 0xb8
    217a:	sub	sp, #28
    217c:	cbz	r0, 21d0 <MTPStorage_SD::OpenIndex()+0x60>
    217e:	ldr	r3, [r0, #0]
    2180:	ldr	r2, [pc, #536]	; (239c <MTPStorage_SD::OpenIndex()+0x22c>)
    2182:	ldr	r3, [r3, #68]	; 0x44
    2184:	cmp	r3, r2
    2186:	bne.w	24a0 <MTPStorage_SD::OpenIndex()+0x330>
    218a:	ldr	r0, [r0, #16]
    218c:	cbz	r0, 21d0 <MTPStorage_SD::OpenIndex()+0x60>
    218e:	ldr	r2, [r0, #0]
    2190:	ldr	r2, [r2, #68]	; 0x44
    2192:	cmp	r2, r3
    2194:	bne.w	24b4 <MTPStorage_SD::OpenIndex()+0x344>
    2198:	ldr	r0, [r0, #16]
    219a:	cbz	r0, 21d0 <MTPStorage_SD::OpenIndex()+0x60>
    219c:	ldr	r3, [r0, #0]
    219e:	ldr	r3, [r3, #68]	; 0x44
    21a0:	cmp	r3, r2
    21a2:	bne.w	24a0 <MTPStorage_SD::OpenIndex()+0x330>
    21a6:	ldr	r0, [r0, #16]
    21a8:	cbz	r0, 21d0 <MTPStorage_SD::OpenIndex()+0x60>
    21aa:	ldr	r2, [r0, #0]
    21ac:	ldr	r2, [r2, #68]	; 0x44
    21ae:	cmp	r2, r3
    21b0:	bne.w	24b4 <MTPStorage_SD::OpenIndex()+0x344>
    21b4:	ldr	r0, [r0, #16]
    21b6:	cbz	r0, 21d0 <MTPStorage_SD::OpenIndex()+0x60>
    21b8:	ldr	r3, [r0, #0]
    21ba:	ldr	r3, [r3, #68]	; 0x44
    21bc:	cmp	r3, r2
    21be:	bne.w	24a0 <MTPStorage_SD::OpenIndex()+0x330>
    21c2:	ldr	r0, [r0, #16]
    21c4:	cbz	r0, 21d0 <MTPStorage_SD::OpenIndex()+0x60>
    21c6:	ldr	r3, [r0, #0]
    21c8:	ldr	r3, [r3, #68]	; 0x44
    21ca:	blx	r3
    21cc:	cmp	r0, #0
    21ce:	bne.n	22a4 <MTPStorage_SD::OpenIndex()+0x134>
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    21d0:	ldr	r1, [r4, #88]	; 0x58
    21d2:	ldr	r2, [pc, #460]	; (23a0 <MTPStorage_SD::OpenIndex()+0x230>)
    21d4:	ldr	r3, [r1, #0]
    21d6:	add	r0, sp, #4
    21d8:	ldr	r5, [r3, #0]
    21da:	movs	r3, #2
    21dc:	blx	r5
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    21de:	ldr.w	r3, [r4, #184]	; 0xb8
    21e2:	cbz	r3, 21f0 <MTPStorage_SD::OpenIndex()+0x80>
    21e4:	ldr	r2, [r3, #16]
    21e6:	subs	r2, #1
    21e8:	str	r2, [r3, #16]
    21ea:	cmp	r2, #0
    21ec:	beq.w	23b4 <MTPStorage_SD::OpenIndex()+0x244>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    21f0:	ldr	r3, [sp, #20]
    21f2:	str.w	r3, [r4, #184]	; 0xb8
		if (f) f->refcount++;
    21f6:	cbz	r3, 2210 <MTPStorage_SD::OpenIndex()+0xa0>
    21f8:	ldr	r2, [r3, #16]
		return *this;
	}
	virtual ~File() {
    21fa:	ldr	r1, [pc, #424]	; (23a4 <MTPStorage_SD::OpenIndex()+0x234>)
    21fc:	str	r1, [sp, #4]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    21fe:	adds	r2, #1
    2200:	str	r2, [r3, #16]
    2202:	ldr	r2, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2204:	cbz	r2, 2210 <MTPStorage_SD::OpenIndex()+0xa0>
    2206:	ldr	r3, [r2, #16]
    2208:	subs	r3, #1
    220a:	str	r3, [r2, #16]
    220c:	cmp	r3, #0
    220e:	beq.n	22aa <MTPStorage_SD::OpenIndex()+0x13a>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2210:	ldr.w	r0, [r4, #184]	; 0xb8
    2214:	cmp	r0, #0
    2216:	beq.n	2296 <MTPStorage_SD::OpenIndex()+0x126>
    2218:	ldr	r2, [r0, #0]
    221a:	ldr	r3, [pc, #384]	; (239c <MTPStorage_SD::OpenIndex()+0x22c>)
    221c:	ldr	r2, [r2, #68]	; 0x44
    221e:	cmp	r2, r3
    2220:	bne.w	24aa <MTPStorage_SD::OpenIndex()+0x33a>
    2224:	ldr	r0, [r0, #16]
    2226:	cmp	r0, #0
    2228:	beq.n	2296 <MTPStorage_SD::OpenIndex()+0x126>
    222a:	ldr	r2, [r0, #0]
    222c:	ldr	r2, [r2, #68]	; 0x44
    222e:	cmp	r2, r3
    2230:	bne.w	24aa <MTPStorage_SD::OpenIndex()+0x33a>
    2234:	ldr	r0, [r0, #16]
    2236:	cmp	r0, #0
    2238:	beq.n	2296 <MTPStorage_SD::OpenIndex()+0x126>
    223a:	ldr	r2, [r0, #0]
    223c:	ldr	r2, [r2, #68]	; 0x44
    223e:	cmp	r2, r3
    2240:	bne.w	24aa <MTPStorage_SD::OpenIndex()+0x33a>
    2244:	ldr	r0, [r0, #16]
    2246:	cbz	r0, 2296 <MTPStorage_SD::OpenIndex()+0x126>
    2248:	ldr	r2, [r0, #0]
    224a:	ldr	r2, [r2, #68]	; 0x44
    224c:	cmp	r2, r3
    224e:	bne.w	24aa <MTPStorage_SD::OpenIndex()+0x33a>
    2252:	ldr	r0, [r0, #16]
    2254:	cbz	r0, 2296 <MTPStorage_SD::OpenIndex()+0x126>
    2256:	ldr	r2, [r0, #0]
    2258:	ldr	r2, [r2, #68]	; 0x44
    225a:	cmp	r2, r3
    225c:	bne.w	24aa <MTPStorage_SD::OpenIndex()+0x33a>
    2260:	ldr	r0, [r0, #16]
    2262:	cbz	r0, 2296 <MTPStorage_SD::OpenIndex()+0x126>
    2264:	ldr	r2, [r0, #0]
    2266:	ldr	r2, [r2, #68]	; 0x44
    2268:	cmp	r2, r3
    226a:	bne.w	24aa <MTPStorage_SD::OpenIndex()+0x33a>
    226e:	ldr	r0, [r0, #16]
    2270:	cbz	r0, 2296 <MTPStorage_SD::OpenIndex()+0x126>
    2272:	ldr	r2, [r0, #0]
    2274:	ldr	r2, [r2, #68]	; 0x44
    2276:	cmp	r2, r3
    2278:	bne.w	24aa <MTPStorage_SD::OpenIndex()+0x33a>
    227c:	ldr	r0, [r0, #16]
    227e:	cbz	r0, 2296 <MTPStorage_SD::OpenIndex()+0x126>
    2280:	ldr	r2, [r0, #0]
    2282:	ldr	r2, [r2, #68]	; 0x44
    2284:	cmp	r2, r3
    2286:	bne.w	24aa <MTPStorage_SD::OpenIndex()+0x33a>
    228a:	ldr	r0, [r0, #16]
    228c:	cbz	r0, 2296 <MTPStorage_SD::OpenIndex()+0x126>
    228e:	ldr	r3, [r0, #0]
    2290:	ldr	r3, [r3, #68]	; 0x44
    2292:	blx	r3
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    2294:	cbnz	r0, 22a4 <MTPStorage_SD::OpenIndex()+0x134>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2296:	movs	r1, #22
    2298:	ldr	r0, [pc, #268]	; (23a8 <MTPStorage_SD::OpenIndex()+0x238>)
    229a:	bl	de04 <usb_serial_write>
    229e:	ldr	r0, [pc, #268]	; (23ac <MTPStorage_SD::OpenIndex()+0x23c>)
    22a0:	bl	f7b8 <Print::println()>
    mtp_lock_storage(false);
  }
    22a4:	add	sp, #28
    22a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    22aa:	ldr	r5, [sp, #20]
    22ac:	cmp	r5, #0
    22ae:	beq.n	2210 <MTPStorage_SD::OpenIndex()+0xa0>
    22b0:	ldr	r2, [r5, #0]
    22b2:	ldr	r3, [pc, #252]	; (23b0 <MTPStorage_SD::OpenIndex()+0x240>)
    22b4:	ldr	r2, [r2, #32]
    22b6:	cmp	r2, r3
    22b8:	bne.w	24c4 <MTPStorage_SD::OpenIndex()+0x354>
    22bc:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    22be:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    22c0:	cmp	r0, #0
    22c2:	beq.n	2392 <MTPStorage_SD::OpenIndex()+0x222>
    22c4:	ldr	r2, [r0, #16]
    22c6:	subs	r2, #1
    22c8:	str	r2, [r0, #16]
    22ca:	cmp	r2, #0
    22cc:	bne.n	2392 <MTPStorage_SD::OpenIndex()+0x222>
    22ce:	ldr	r6, [r5, #16]
    22d0:	cmp	r6, #0
    22d2:	beq.n	2392 <MTPStorage_SD::OpenIndex()+0x222>
    22d4:	ldr	r2, [r6, #0]
    22d6:	ldr	r2, [r2, #32]
    22d8:	cmp	r2, r3
    22da:	bne.w	24ca <MTPStorage_SD::OpenIndex()+0x35a>
    22de:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    22e0:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    22e2:	cmp	r0, #0
    22e4:	beq.n	238a <MTPStorage_SD::OpenIndex()+0x21a>
    22e6:	ldr	r2, [r0, #16]
    22e8:	subs	r2, #1
    22ea:	str	r2, [r0, #16]
    22ec:	cmp	r2, #0
    22ee:	bne.n	238a <MTPStorage_SD::OpenIndex()+0x21a>
    22f0:	ldr	r7, [r6, #16]
    22f2:	cmp	r7, #0
    22f4:	beq.n	238a <MTPStorage_SD::OpenIndex()+0x21a>
    22f6:	ldr	r2, [r7, #0]
    22f8:	ldr	r2, [r2, #32]
    22fa:	cmp	r2, r3
    22fc:	bne.w	24dc <MTPStorage_SD::OpenIndex()+0x36c>
    2300:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2302:	str	r1, [r7, #0]
    2304:	ldr.w	lr, [pc, #156]	; 23a4 <MTPStorage_SD::OpenIndex()+0x234>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2308:	cmp	r0, #0
    230a:	beq.n	2382 <MTPStorage_SD::OpenIndex()+0x212>
    230c:	ldr	r2, [r0, #16]
    230e:	subs	r2, #1
    2310:	str	r2, [r0, #16]
    2312:	cmp	r2, #0
    2314:	bne.n	2382 <MTPStorage_SD::OpenIndex()+0x212>
    2316:	ldr.w	r8, [r7, #16]
    231a:	cmp.w	r8, #0
    231e:	beq.n	2382 <MTPStorage_SD::OpenIndex()+0x212>
    2320:	ldr.w	r2, [r8]
    2324:	ldr	r2, [r2, #32]
    2326:	cmp	r2, r3
    2328:	bne.w	24e8 <MTPStorage_SD::OpenIndex()+0x378>
    232c:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2330:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2334:	cbz	r0, 237a <MTPStorage_SD::OpenIndex()+0x20a>
    2336:	ldr	r2, [r0, #16]
    2338:	subs	r2, #1
    233a:	str	r2, [r0, #16]
    233c:	cbnz	r2, 237a <MTPStorage_SD::OpenIndex()+0x20a>
    233e:	ldr.w	r9, [r8, #16]
    2342:	cmp.w	r9, #0
    2346:	beq.n	237a <MTPStorage_SD::OpenIndex()+0x20a>
    2348:	ldr.w	r2, [r9]
    234c:	ldr	r2, [r2, #32]
    234e:	cmp	r2, r3
    2350:	bne.w	24f4 <MTPStorage_SD::OpenIndex()+0x384>
    2354:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2358:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    235c:	cbz	r2, 2372 <MTPStorage_SD::OpenIndex()+0x202>
    235e:	ldr	r3, [r2, #16]
    2360:	subs	r3, #1
    2362:	str	r3, [r2, #16]
    2364:	cbnz	r3, 2372 <MTPStorage_SD::OpenIndex()+0x202>
    2366:	ldr.w	r0, [r9, #16]
    236a:	cbz	r0, 2372 <MTPStorage_SD::OpenIndex()+0x202>
    236c:	ldr	r3, [r0, #0]
    236e:	ldr	r3, [r3, #32]
    2370:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2372:	mov	r0, r9
    2374:	movs	r1, #20
    2376:	bl	f95c <operator delete(void*, unsigned int)>
    237a:	mov	r0, r8
    237c:	movs	r1, #20
    237e:	bl	f95c <operator delete(void*, unsigned int)>
    2382:	mov	r0, r7
    2384:	movs	r1, #20
    2386:	bl	f95c <operator delete(void*, unsigned int)>
    238a:	mov	r0, r6
    238c:	movs	r1, #20
    238e:	bl	f95c <operator delete(void*, unsigned int)>
    2392:	mov	r0, r5
    2394:	movs	r1, #20
    2396:	bl	f95c <operator delete(void*, unsigned int)>
    239a:	b.n	2210 <MTPStorage_SD::OpenIndex()+0xa0>
    239c:	.word	0x0000050d
    23a0:	.word	0x00014e9c
    23a4:	.word	0x00014bdc
    23a8:	.word	0x00014eac
    23ac:	.word	0x1fff0c58
    23b0:	.word	0x00000f31
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    23b4:	ldr.w	r5, [r4, #184]	; 0xb8
    23b8:	cmp	r5, #0
    23ba:	beq.w	21f0 <MTPStorage_SD::OpenIndex()+0x80>
    23be:	ldr	r2, [r5, #0]
    23c0:	ldr	r3, [pc, #312]	; (24fc <MTPStorage_SD::OpenIndex()+0x38c>)
    23c2:	ldr	r2, [r2, #32]
    23c4:	cmp	r2, r3
    23c6:	bne.n	24be <MTPStorage_SD::OpenIndex()+0x34e>
    23c8:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    23ca:	ldr	r1, [pc, #308]	; (2500 <MTPStorage_SD::OpenIndex()+0x390>)
    23cc:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    23ce:	cmp	r0, #0
    23d0:	beq.n	2496 <MTPStorage_SD::OpenIndex()+0x326>
    23d2:	ldr	r2, [r0, #16]
    23d4:	subs	r2, #1
    23d6:	str	r2, [r0, #16]
    23d8:	cmp	r2, #0
    23da:	bne.n	2496 <MTPStorage_SD::OpenIndex()+0x326>
    23dc:	ldr	r6, [r5, #16]
    23de:	cmp	r6, #0
    23e0:	beq.n	2496 <MTPStorage_SD::OpenIndex()+0x326>
    23e2:	ldr	r2, [r6, #0]
    23e4:	ldr	r2, [r2, #32]
    23e6:	cmp	r2, r3
    23e8:	bne.n	24d0 <MTPStorage_SD::OpenIndex()+0x360>
    23ea:	ldr	r0, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    23ec:	str	r1, [r6, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    23ee:	cmp	r0, #0
    23f0:	beq.n	248e <MTPStorage_SD::OpenIndex()+0x31e>
    23f2:	ldr	r2, [r0, #16]
    23f4:	subs	r2, #1
    23f6:	str	r2, [r0, #16]
    23f8:	cmp	r2, #0
    23fa:	bne.n	248e <MTPStorage_SD::OpenIndex()+0x31e>
    23fc:	ldr	r7, [r6, #16]
    23fe:	cmp	r7, #0
    2400:	beq.n	248e <MTPStorage_SD::OpenIndex()+0x31e>
    2402:	ldr	r2, [r7, #0]
    2404:	ldr	r2, [r2, #32]
    2406:	cmp	r2, r3
    2408:	bne.n	24d6 <MTPStorage_SD::OpenIndex()+0x366>
    240a:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    240c:	str	r1, [r7, #0]
    240e:	ldr.w	lr, [pc, #240]	; 2500 <MTPStorage_SD::OpenIndex()+0x390>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2412:	cmp	r0, #0
    2414:	beq.n	2486 <MTPStorage_SD::OpenIndex()+0x316>
    2416:	ldr	r2, [r0, #16]
    2418:	subs	r2, #1
    241a:	str	r2, [r0, #16]
    241c:	cbnz	r2, 2486 <MTPStorage_SD::OpenIndex()+0x316>
    241e:	ldr.w	r8, [r7, #16]
    2422:	cmp.w	r8, #0
    2426:	beq.n	2486 <MTPStorage_SD::OpenIndex()+0x316>
    2428:	ldr.w	r2, [r8]
    242c:	ldr	r2, [r2, #32]
    242e:	cmp	r2, r3
    2430:	bne.n	24e2 <MTPStorage_SD::OpenIndex()+0x372>
    2432:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2436:	str.w	lr, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    243a:	cbz	r0, 247e <MTPStorage_SD::OpenIndex()+0x30e>
    243c:	ldr	r2, [r0, #16]
    243e:	subs	r2, #1
    2440:	str	r2, [r0, #16]
    2442:	cbnz	r2, 247e <MTPStorage_SD::OpenIndex()+0x30e>
    2444:	ldr.w	r9, [r8, #16]
    2448:	cmp.w	r9, #0
    244c:	beq.n	247e <MTPStorage_SD::OpenIndex()+0x30e>
    244e:	ldr.w	r2, [r9]
    2452:	ldr	r2, [r2, #32]
    2454:	cmp	r2, r3
    2456:	bne.n	24ee <MTPStorage_SD::OpenIndex()+0x37e>
    2458:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    245c:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2460:	cbz	r2, 2476 <MTPStorage_SD::OpenIndex()+0x306>
    2462:	ldr	r3, [r2, #16]
    2464:	subs	r3, #1
    2466:	str	r3, [r2, #16]
    2468:	cbnz	r3, 2476 <MTPStorage_SD::OpenIndex()+0x306>
    246a:	ldr.w	r0, [r9, #16]
    246e:	cbz	r0, 2476 <MTPStorage_SD::OpenIndex()+0x306>
    2470:	ldr	r3, [r0, #0]
    2472:	ldr	r3, [r3, #32]
    2474:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2476:	mov	r0, r9
    2478:	movs	r1, #20
    247a:	bl	f95c <operator delete(void*, unsigned int)>
    247e:	mov	r0, r8
    2480:	movs	r1, #20
    2482:	bl	f95c <operator delete(void*, unsigned int)>
    2486:	mov	r0, r7
    2488:	movs	r1, #20
    248a:	bl	f95c <operator delete(void*, unsigned int)>
    248e:	mov	r0, r6
    2490:	movs	r1, #20
    2492:	bl	f95c <operator delete(void*, unsigned int)>
    2496:	mov	r0, r5
    2498:	movs	r1, #20
    249a:	bl	f95c <operator delete(void*, unsigned int)>
    249e:	b.n	21f0 <MTPStorage_SD::OpenIndex()+0x80>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    24a0:	blx	r3
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    24a2:	cmp	r0, #0
    24a4:	bne.w	22a4 <MTPStorage_SD::OpenIndex()+0x134>
    24a8:	b.n	21d0 <MTPStorage_SD::OpenIndex()+0x60>
    24aa:	blx	r2
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    if(!index_) Serial.println("cannot open Index file"); 
    24ac:	cmp	r0, #0
    24ae:	bne.w	22a4 <MTPStorage_SD::OpenIndex()+0x134>
    24b2:	b.n	2296 <MTPStorage_SD::OpenIndex()+0x126>
    24b4:	blx	r2
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
    24b6:	cmp	r0, #0
    24b8:	bne.w	22a4 <MTPStorage_SD::OpenIndex()+0x134>
    24bc:	b.n	21d0 <MTPStorage_SD::OpenIndex()+0x60>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    24be:	mov	r0, r5
    24c0:	blx	r2
    24c2:	b.n	21f0 <MTPStorage_SD::OpenIndex()+0x80>
    24c4:	mov	r0, r5
    24c6:	blx	r2
    24c8:	b.n	2210 <MTPStorage_SD::OpenIndex()+0xa0>
    24ca:	mov	r0, r6
    24cc:	blx	r2
    24ce:	b.n	2392 <MTPStorage_SD::OpenIndex()+0x222>
    24d0:	mov	r0, r6
    24d2:	blx	r2
    24d4:	b.n	2496 <MTPStorage_SD::OpenIndex()+0x326>
    24d6:	mov	r0, r7
    24d8:	blx	r2
    24da:	b.n	248e <MTPStorage_SD::OpenIndex()+0x31e>
    24dc:	mov	r0, r7
    24de:	blx	r2
    24e0:	b.n	238a <MTPStorage_SD::OpenIndex()+0x21a>
    24e2:	mov	r0, r8
    24e4:	blx	r2
    24e6:	b.n	2486 <MTPStorage_SD::OpenIndex()+0x316>
    24e8:	mov	r0, r8
    24ea:	blx	r2
    24ec:	b.n	2382 <MTPStorage_SD::OpenIndex()+0x212>
    24ee:	mov	r0, r9
    24f0:	blx	r2
    24f2:	b.n	247e <MTPStorage_SD::OpenIndex()+0x30e>
    24f4:	mov	r0, r9
    24f6:	blx	r2
    24f8:	b.n	237a <MTPStorage_SD::OpenIndex()+0x20a>
    24fa:	nop
    24fc:	.word	0x00000f31
    2500:	.word	0x00014bdc

00002504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    all_scanned_ = false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    2504:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2508:	mov	r6, r0
    250a:	sub	sp, #12
    250c:	mov	r4, r1
    250e:	mov	r7, r2
    2510:	bl	2170 <MTPStorage_SD::OpenIndex()>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    2514:	ldr.w	r5, [r6, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek((sizeof(r) * i));
    2518:	add.w	r4, r4, r4, lsl #4
    251c:	cmp	r5, #0
    251e:	beq.n	25f6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2520:	ldr	r0, [r5, #0]
    2522:	ldr	r1, [pc, #308]	; (2658 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x154>)
    2524:	lsls	r2, r4, #4
    2526:	ldr	r4, [r0, #52]	; 0x34
    2528:	cmp	r4, r1
    252a:	mov.w	ip, #0
    252e:	bne.n	261e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x11a>
    2530:	ldr	r1, [r5, #16]
    2532:	cmp	r1, #0
    2534:	beq.n	25ee <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xea>
    2536:	ldr	r3, [r1, #0]
    2538:	ldr.w	r8, [r3, #52]	; 0x34
    253c:	cmp	r8, r4
    253e:	bne.n	262a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x126>
    2540:	ldr.w	lr, [r1, #16]
    2544:	cmp.w	lr, #0
    2548:	beq.n	25fc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    254a:	ldr.w	r4, [lr]
    254e:	ldr	r4, [r4, #52]	; 0x34
    2550:	cmp	r4, r8
    2552:	bne.n	2636 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x132>
    2554:	ldr.w	lr, [lr, #16]
    2558:	cmp.w	lr, #0
    255c:	beq.n	25fc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    255e:	ldr.w	r3, [lr]
    2562:	ldr.w	r8, [r3, #52]	; 0x34
    2566:	cmp	r8, r4
    2568:	bne.n	2642 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x13e>
    256a:	ldr.w	r4, [lr, #16]
    256e:	cmp	r4, #0
    2570:	beq.n	25fc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    2572:	ldr	r3, [r4, #0]
    2574:	ldr.w	r9, [r3, #52]	; 0x34
    2578:	cmp	r9, r8
    257a:	bne.n	264e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x14a>
    257c:	ldr	r4, [r4, #16]
    257e:	cmp	r4, #0
    2580:	beq.n	25fc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf8>
    2582:	ldr	r1, [r4, #0]
    2584:	str.w	ip, [sp]
    2588:	mov	r3, ip
    258a:	mov	r0, r4
    258c:	ldr	r1, [r1, #52]	; 0x34
    258e:	blx	r1
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    2590:	ldr.w	r5, [r6, #184]	; 0xb8
    2594:	cmp	r5, #0
    2596:	beq.n	25f6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    2598:	ldr	r2, [r5, #0]
    259a:	ldr	r3, [pc, #192]	; (265c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    259c:	ldr	r4, [r2, #44]	; 0x2c
    259e:	cmp	r4, r3
    25a0:	bne.n	2608 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    25a2:	ldr	r0, [r5, #16]
    25a4:	cbz	r0, 25f6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    25a6:	ldr	r2, [r0, #0]
    25a8:	ldr	r4, [r2, #44]	; 0x2c
    25aa:	cmp	r4, r3
    25ac:	bne.n	261a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    25ae:	ldr	r0, [r0, #16]
    25b0:	cbz	r0, 25f6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    25b2:	ldr	r2, [r0, #0]
    25b4:	ldr	r4, [r2, #44]	; 0x2c
    25b6:	cmp	r4, r3
    25b8:	bne.n	261a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    25ba:	ldr	r0, [r0, #16]
    25bc:	cbz	r0, 25f6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    25be:	ldr	r2, [r0, #0]
    25c0:	ldr	r4, [r2, #44]	; 0x2c
    25c2:	cmp	r4, r3
    25c4:	bne.n	261a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    25c6:	ldr	r0, [r0, #16]
    25c8:	cbz	r0, 25f6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    25ca:	ldr	r2, [r0, #0]
    25cc:	ldr	r4, [r2, #44]	; 0x2c
    25ce:	cmp	r4, r3
    25d0:	bne.n	261a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    25d2:	ldr	r0, [r0, #16]
    25d4:	cbz	r0, 25f6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    25d6:	ldr	r2, [r0, #0]
    25d8:	ldr	r4, [r2, #44]	; 0x2c
    25da:	cmp	r4, r3
    25dc:	bne.n	261a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x116>
    25de:	ldr	r0, [r0, #16]
    25e0:	cbz	r0, 25f6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xf2>
    25e2:	ldr	r3, [r0, #0]
    25e4:	mov	r1, r7
    25e6:	ldr	r3, [r3, #44]	; 0x2c
    25e8:	mov.w	r2, #272	; 0x110
    25ec:	b.n	2612 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x10e>
    25ee:	ldr	r4, [r0, #44]	; 0x2c
    25f0:	ldr	r3, [pc, #104]	; (265c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    25f2:	cmp	r4, r3
    25f4:	bne.n	2608 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    25f6:	add	sp, #12
    25f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    25fc:	ldr	r4, [r0, #44]	; 0x2c
    25fe:	ldr	r3, [pc, #92]	; (265c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x158>)
    2600:	cmp	r4, r3
    2602:	bne.n	2608 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x104>
    2604:	mov	r0, r1
    2606:	b.n	25a6 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0xa2>
    2608:	mov	r1, r7
    260a:	mov	r0, r5
    260c:	mov.w	r2, #272	; 0x110
    2610:	mov	r3, r4
    2612:	add	sp, #12
    2614:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2618:	bx	r3
    261a:	mov	r1, r7
    261c:	b.n	260c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x108>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    261e:	str.w	ip, [sp]
    2622:	mov	r3, ip
    2624:	mov	r0, r5
    2626:	blx	r4
    2628:	b.n	2590 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    262a:	str.w	ip, [sp]
    262e:	mov	r3, ip
    2630:	mov	r0, r1
    2632:	blx	r8
    2634:	b.n	2590 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2636:	str.w	ip, [sp]
    263a:	mov	r3, ip
    263c:	mov	r0, lr
    263e:	blx	r4
    2640:	b.n	2590 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2642:	str.w	ip, [sp]
    2646:	mov	r3, ip
    2648:	mov	r0, lr
    264a:	blx	r8
    264c:	b.n	2590 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    264e:	movs	r3, #0
    2650:	mov	r0, r4
    2652:	str	r3, [sp, #0]
    2654:	blx	r9
    2656:	b.n	2590 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x8c>
    2658:	.word	0x000004c9
    265c:	.word	0x00000489

00002660 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    2660:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  { if (index_generated) return; 
    index_generated = true;
    2664:	movs	r7, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    2666:	mov	r4, r0
    2668:	sub	sp, #272	; 0x110
    266a:	movs	r1, #13
  { if (index_generated) return; 
    index_generated = true;
    266c:	strb.w	r7, [r0, #248]	; 0xf8
    2670:	ldr	r0, [pc, #104]	; (26dc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
    2672:	bl	de04 <usb_serial_write>
    2676:	ldr	r0, [pc, #104]	; (26e0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x80>)
    2678:	bl	f7b8 <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    267c:	ldr	r0, [r4, #88]	; 0x58
    267e:	ldr	r1, [pc, #92]	; (26dc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x7c>)
    2680:	ldr	r3, [r0, #0]
    2682:	ldr	r3, [r3, #16]
    2684:	blx	r3
    2686:	ldr	r3, [r4, #4]
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();
    2688:	str.w	r3, [r4, #228]	; 0xe4

    index_entries_ = 0;
    268c:	movs	r1, #0
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    268e:	cmp	r3, r1
    sd_remove(0,indexFile);
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    2690:	str.w	r1, [r4, #244]	; 0xf4
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    2694:	ble.n	26d6 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x76>
    2696:	mov	r5, r1
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
    2698:	mov	r6, r1
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    269a:	mov.w	r8, #4294967295
    269e:	b.n	26a4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x44>
    26a0:	ldr.w	r1, [r4, #244]	; 0xf4

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
    26a4:	strh.w	r5, [sp, #14]
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    26a8:	adds	r3, r1, #1
    26aa:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    26ae:	mov	r2, sp
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    26b0:	movs	r3, #47	; 0x2f
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    26b2:	mov	r0, r4
      r.parent = 0xFFFFFFFFUL; // 
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    26b4:	strh.w	r3, [sp, #16]
    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    26b8:	str.w	r8, [sp]
      r.sibling = 0;
    26bc:	str	r6, [sp, #8]
      r.child = 0;
    26be:	str	r6, [sp, #4]
      r.isdir = true;
    26c0:	strb.w	r7, [sp, #12]
      r.scanned = false;
    26c4:	strb.w	r6, [sp, #13]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    26c8:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    26cc:	ldr.w	r3, [r4, #228]	; 0xe4
    26d0:	adds	r5, #1
    26d2:	cmp	r3, r5
    26d4:	bgt.n	26a0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]+0x40>
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
      AppendIndexRecord(r);
    }
  }
    26d6:	add	sp, #272	; 0x110
    26d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26dc:	.word	0x00014e9c
    26e0:	.word	0x1fff0c58

000026e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    26e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26e8:	mov	r5, r1
    26ea:	mov	r4, r2
    26ec:	sub	sp, #8
    Record ret;
    memset(&ret, 0, sizeof(ret));
    26ee:	movs	r1, #0
    26f0:	mov.w	r2, #272	; 0x110
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    26f4:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    26f6:	bl	1109c <memset>
    if (i > index_entries_) 
    26fa:	ldr.w	r3, [r5, #244]	; 0xf4
    26fe:	cmp	r3, r4
    2700:	bcc.w	287a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x196>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    2704:	mov	r0, r5
    2706:	bl	2170 <MTPStorage_SD::OpenIndex()>
    270a:	ldr.w	r0, [r5, #184]	; 0xb8
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    270e:	add.w	r4, r4, r4, lsl #4
    2712:	lsls	r2, r4, #4
    2714:	mov.w	ip, #0
    2718:	cmp	r0, #0
    271a:	beq.w	2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    271e:	ldr	r7, [r0, #0]
    2720:	ldr	r4, [pc, #456]	; (28ec <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x208>)
    2722:	ldr	r1, [r7, #52]	; 0x34
    2724:	cmp	r1, r4
    2726:	bne.w	28a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c2>
    272a:	ldr	r1, [r0, #16]
    272c:	cmp	r1, #0
    272e:	beq.w	288e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1aa>
    2732:	ldr	r3, [r1, #0]
    2734:	ldr.w	r8, [r3, #52]	; 0x34
    2738:	cmp	r8, r4
    273a:	bne.w	28d4 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1f0>
    273e:	ldr.w	lr, [r1, #16]
    2742:	cmp.w	lr, #0
    2746:	beq.n	27fa <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2748:	ldr.w	r3, [lr]
    274c:	ldr.w	r8, [r3, #52]	; 0x34
    2750:	cmp	r8, r4
    2752:	bne.w	28c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    2756:	ldr.w	lr, [lr, #16]
    275a:	cmp.w	lr, #0
    275e:	beq.n	27fa <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2760:	ldr.w	r3, [lr]
    2764:	ldr.w	r8, [r3, #52]	; 0x34
    2768:	cmp	r8, r4
    276a:	bne.w	28c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e4>
    276e:	ldr.w	lr, [lr, #16]
    2772:	cmp.w	lr, #0
    2776:	beq.n	27fa <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2778:	ldr.w	r3, [lr]
    277c:	ldr.w	r8, [r3, #52]	; 0x34
    2780:	cmp	r8, r4
    2782:	bne.w	28e0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    2786:	ldr.w	lr, [lr, #16]
    278a:	cmp.w	lr, #0
    278e:	beq.n	27fa <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    2790:	ldr.w	r3, [lr]
    2794:	ldr.w	r8, [r3, #52]	; 0x34
    2798:	cmp	r8, r4
    279a:	bne.w	28e0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    279e:	ldr.w	lr, [lr, #16]
    27a2:	cmp.w	lr, #0
    27a6:	beq.n	27fa <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    27a8:	ldr.w	r3, [lr]
    27ac:	ldr.w	r8, [r3, #52]	; 0x34
    27b0:	cmp	r8, r4
    27b2:	bne.w	28e0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    27b6:	ldr.w	lr, [lr, #16]
    27ba:	cmp.w	lr, #0
    27be:	beq.n	27fa <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    27c0:	ldr.w	r3, [lr]
    27c4:	ldr.w	r8, [r3, #52]	; 0x34
    27c8:	cmp	r8, r4
    27ca:	bne.w	28e0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    27ce:	ldr.w	lr, [lr, #16]
    27d2:	cmp.w	lr, #0
    27d6:	beq.n	27fa <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    27d8:	ldr.w	r3, [lr]
    27dc:	ldr.w	r8, [r3, #52]	; 0x34
    27e0:	cmp	r8, r4
    27e2:	bne.n	28e0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1fc>
    27e4:	ldr.w	r4, [lr, #16]
    27e8:	cbz	r4, 27fa <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x116>
    27ea:	ldr	r1, [r4, #0]
    27ec:	str.w	ip, [sp]
    27f0:	mov	r3, ip
    27f2:	mov	r0, r4
    27f4:	ldr	r1, [r1, #52]	; 0x34
    27f6:	blx	r1
    27f8:	b.n	28ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    27fa:	ldr	r4, [r7, #40]	; 0x28
    27fc:	ldr	r3, [pc, #240]	; (28f0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    27fe:	cmp	r4, r3
    2800:	bne.n	2896 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2802:	mov	r0, r1
    2804:	ldr	r2, [r0, #0]
    2806:	ldr	r4, [r2, #40]	; 0x28
    2808:	cmp	r4, r3
    280a:	bne.n	2896 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    280c:	ldr	r0, [r0, #16]
    280e:	cmp	r0, #0
    2810:	beq.n	2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2812:	ldr	r2, [r0, #0]
    2814:	ldr	r4, [r2, #40]	; 0x28
    2816:	cmp	r4, r3
    2818:	bne.n	2896 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    281a:	ldr	r0, [r0, #16]
    281c:	cbz	r0, 2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    281e:	ldr	r2, [r0, #0]
    2820:	ldr	r4, [r2, #40]	; 0x28
    2822:	cmp	r4, r3
    2824:	bne.n	2896 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2826:	ldr	r0, [r0, #16]
    2828:	cbz	r0, 2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    282a:	ldr	r2, [r0, #0]
    282c:	ldr	r4, [r2, #40]	; 0x28
    282e:	cmp	r4, r3
    2830:	bne.n	2896 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2832:	ldr	r0, [r0, #16]
    2834:	cbz	r0, 2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2836:	ldr	r2, [r0, #0]
    2838:	ldr	r4, [r2, #40]	; 0x28
    283a:	cmp	r4, r3
    283c:	bne.n	2896 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    283e:	ldr	r0, [r0, #16]
    2840:	cbz	r0, 2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2842:	ldr	r2, [r0, #0]
    2844:	ldr	r4, [r2, #40]	; 0x28
    2846:	cmp	r4, r3
    2848:	bne.n	2896 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    284a:	ldr	r0, [r0, #16]
    284c:	cbz	r0, 2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    284e:	ldr	r2, [r0, #0]
    2850:	ldr	r4, [r2, #40]	; 0x28
    2852:	cmp	r4, r3
    2854:	bne.n	2896 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2856:	ldr	r0, [r0, #16]
    2858:	cbz	r0, 2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    285a:	ldr	r2, [r0, #0]
    285c:	ldr	r4, [r2, #40]	; 0x28
    285e:	cmp	r4, r3
    2860:	bne.n	2896 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    2862:	ldr	r0, [r0, #16]
    2864:	cbz	r0, 2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2866:	ldr	r3, [r0, #0]
    2868:	mov.w	r2, #272	; 0x110
    286c:	ldr	r3, [r3, #40]	; 0x28
    286e:	mov	r1, r6
    2870:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    2872:	mov	r0, r6
    2874:	add	sp, #8
    2876:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    287a:	mov.w	r2, #272	; 0x110
    287e:	movs	r1, #0
    2880:	mov	r0, r6
    2882:	bl	1109c <memset>
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);

    return ret;
  }
    2886:	mov	r0, r6
    2888:	add	sp, #8
    288a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    288e:	ldr	r4, [r7, #40]	; 0x28
    2890:	ldr	r3, [pc, #92]	; (28f0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    2892:	cmp	r4, r3
    2894:	beq.n	2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    2896:	mov.w	r2, #272	; 0x110
    289a:	mov	r1, r6
    289c:	blx	r4
    289e:	mov	r0, r6
    28a0:	add	sp, #8
    28a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    28a6:	str.w	ip, [sp]
    28aa:	mov	r3, ip
    28ac:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    28ae:	ldr.w	r0, [r5, #184]	; 0xb8
    28b2:	cmp	r0, #0
    28b4:	beq.n	2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
    28b6:	ldr	r2, [r0, #0]
    28b8:	ldr	r3, [pc, #52]	; (28f0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20c>)
    28ba:	ldr	r4, [r2, #40]	; 0x28
    28bc:	cmp	r4, r3
    28be:	bne.n	2896 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1b2>
    28c0:	ldr	r0, [r0, #16]
    28c2:	cmp	r0, #0
    28c4:	bne.n	2804 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x120>
    28c6:	b.n	2872 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x18e>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    28c8:	str.w	ip, [sp]
    28cc:	mov	r3, ip
    28ce:	mov	r0, lr
    28d0:	blx	r8
    28d2:	b.n	28ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    28d4:	str.w	ip, [sp]
    28d8:	mov	r3, ip
    28da:	mov	r0, r1
    28dc:	blx	r8
    28de:	b.n	28ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    28e0:	movs	r3, #0
    28e2:	mov	r0, lr
    28e4:	str	r3, [sp, #0]
    28e6:	blx	r8
    28e8:	b.n	28ae <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1ca>
    28ea:	nop
    28ec:	.word	0x000004c9
    28f0:	.word	0x0000047d

000028f4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    28f4:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    28f6:	ldr.w	r5, [r0, #252]	; 0xfc
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    28fa:	sub	sp, #276	; 0x114
    28fc:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    28fe:	cbnz	r5, 2914 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
    2900:	b.n	294a <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    2902:	ldr	r3, [sp, #8]
    2904:	str.w	r3, [r4, #252]	; 0xfc
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    2908:	ldrb.w	r3, [sp, #16]
    290c:	cbnz	r3, 2944 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    290e:	ldr.w	r5, [r4, #252]	; 0xfc
    2912:	cbz	r5, 294a <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    2914:	mov	r2, r5
    2916:	mov	r1, r4
    2918:	mov	r0, sp
    291a:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    291e:	ldrb.w	r2, [r4, #256]	; 0x100
    2922:	cmp	r2, #0
    2924:	bne.n	2902 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    2926:	ldr.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    292a:	ldr.w	r1, [r4, #244]	; 0xf4
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    292e:	adds	r3, #1
    2930:	str.w	r3, [r4, #252]	; 0xfc
        if (next_ >= index_entries_) next_ = 0;
    2934:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    2936:	ldrb.w	r3, [sp, #16]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    293a:	it	cs
    293c:	strcs.w	r2, [r4, #252]	; 0xfc
      }
      if (r.name[0]) return ret;
    2940:	cmp	r3, #0
    2942:	beq.n	290e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
    }
  }
    2944:	mov	r0, r5
    2946:	add	sp, #276	; 0x114
    2948:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    while (true) 
    { if (next_ == 0) return 0;
    294a:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    294c:	mov	r0, r5
    294e:	add	sp, #276	; 0x114
    2950:	pop	{r4, r5, pc}
    2952:	nop

00002954 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    2954:	push	{r4, r5, r6, r7, lr}
    2956:	sub	sp, #276	; 0x114
    2958:	mov	r7, r2
    Record r = ReadIndexRecord(handle);
    295a:	mov	r2, r1
    295c:	mov	r1, r0
    295e:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    2960:	mov	r5, r3
    2962:	ldr	r6, [sp, #296]	; 0x128
    2964:	ldr	r4, [sp, #300]	; 0x12c
    Record r = ReadIndexRecord(handle);
    2966:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    296a:	mov	r0, r7
    296c:	add	r1, sp, #16
    296e:	bl	11590 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2972:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    2976:	ldr	r2, [sp, #0]
    2978:	str	r2, [r6, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    297a:	cbnz	r3, 298a <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    297c:	ldr	r3, [sp, #4]
    *store = r.store;
    297e:	ldrh.w	r2, [sp, #14]
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    2982:	str	r3, [r5, #0]
    *store = r.store;
    2984:	strh	r2, [r4, #0]
  }
    2986:	add	sp, #276	; 0x114
    2988:	pop	{r4, r5, r6, r7, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent, uint16_t *store)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    298a:	mov.w	r3, #4294967295
    298e:	b.n	297e <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x2a>

00002990 <MTPStorage_SD::GetSize(unsigned long)>:
    *store = r.store;
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    2990:	push	{lr}
    2992:	sub	sp, #276	; 0x114
    return ReadIndexRecord(handle).child;
    2994:	mov	r2, r1
    2996:	mov	r1, r0
    2998:	mov	r0, sp
    299a:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    299e:	ldr	r0, [sp, #4]
    29a0:	add	sp, #276	; 0x114
    29a2:	ldr.w	pc, [sp], #4
    29a6:	nop

000029a8 <MTPStorage_SD::close()>:
      mtp_lock_storage(false);
      return ret;
  }

  void MTPStorage_SD::close() 
  {
    29a8:	push	{r4, r5, r6, lr}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    29aa:	ldr.w	r3, [r0, #204]	; 0xcc
    29ae:	sub	sp, #272	; 0x110
    29b0:	mov	r4, r0
    29b2:	cmp	r3, #0
    29b4:	beq.n	2a50 <MTPStorage_SD::close()+0xa8>
    29b6:	ldr	r5, [r3, #0]
    29b8:	ldr	r1, [pc, #384]	; (2b3c <MTPStorage_SD::close()+0x194>)
    29ba:	ldr	r2, [r5, #60]	; 0x3c
    29bc:	cmp	r2, r1
    29be:	bne.w	2b30 <MTPStorage_SD::close()+0x188>
    29c2:	ldr	r2, [r3, #16]
    29c4:	cmp	r2, #0
    29c6:	beq.w	2b20 <MTPStorage_SD::close()+0x178>
    29ca:	ldr	r0, [r2, #0]
    29cc:	ldr	r6, [r0, #60]	; 0x3c
    29ce:	cmp	r6, r1
    29d0:	bne.n	2a78 <MTPStorage_SD::close()+0xd0>
    29d2:	ldr	r0, [r2, #16]
    29d4:	cmp	r0, #0
    29d6:	beq.n	2a42 <MTPStorage_SD::close()+0x9a>
    29d8:	ldr	r6, [r0, #0]
    29da:	ldr	r6, [r6, #60]	; 0x3c
    29dc:	cmp	r6, r1
    29de:	bne.n	2a7a <MTPStorage_SD::close()+0xd2>
    29e0:	ldr	r0, [r0, #16]
    29e2:	cmp	r0, #0
    29e4:	beq.n	2a42 <MTPStorage_SD::close()+0x9a>
    29e6:	ldr	r6, [r0, #0]
    29e8:	ldr	r6, [r6, #60]	; 0x3c
    29ea:	cmp	r6, r1
    29ec:	bne.n	2a7a <MTPStorage_SD::close()+0xd2>
    29ee:	ldr	r0, [r0, #16]
    29f0:	cbz	r0, 2a42 <MTPStorage_SD::close()+0x9a>
    29f2:	ldr	r6, [r0, #0]
    29f4:	ldr	r6, [r6, #60]	; 0x3c
    29f6:	cmp	r6, r1
    29f8:	bne.n	2a7a <MTPStorage_SD::close()+0xd2>
    29fa:	ldr	r0, [r0, #16]
    29fc:	cbz	r0, 2a42 <MTPStorage_SD::close()+0x9a>
    29fe:	ldr	r6, [r0, #0]
    2a00:	ldr	r6, [r6, #60]	; 0x3c
    2a02:	cmp	r6, r1
    2a04:	bne.n	2a7a <MTPStorage_SD::close()+0xd2>
    2a06:	ldr	r0, [r0, #16]
    2a08:	cbz	r0, 2a42 <MTPStorage_SD::close()+0x9a>
    2a0a:	ldr	r6, [r0, #0]
    2a0c:	ldr	r6, [r6, #60]	; 0x3c
    2a0e:	cmp	r6, r1
    2a10:	bne.n	2a7a <MTPStorage_SD::close()+0xd2>
    2a12:	ldr	r0, [r0, #16]
    2a14:	cbz	r0, 2a42 <MTPStorage_SD::close()+0x9a>
    2a16:	ldr	r6, [r0, #0]
    2a18:	ldr	r6, [r6, #60]	; 0x3c
    2a1a:	cmp	r6, r1
    2a1c:	bne.n	2a7a <MTPStorage_SD::close()+0xd2>
    2a1e:	ldr	r0, [r0, #16]
    2a20:	cbz	r0, 2a42 <MTPStorage_SD::close()+0x9a>
    2a22:	ldr	r6, [r0, #0]
    2a24:	ldr	r6, [r6, #60]	; 0x3c
    2a26:	cmp	r6, r1
    2a28:	bne.n	2a7a <MTPStorage_SD::close()+0xd2>
    2a2a:	ldr	r0, [r0, #16]
    2a2c:	cbz	r0, 2a42 <MTPStorage_SD::close()+0x9a>
    2a2e:	ldr	r6, [r0, #0]
    2a30:	ldr	r6, [r6, #60]	; 0x3c
    2a32:	cmp	r6, r1
    2a34:	bne.n	2a7a <MTPStorage_SD::close()+0xd2>
    2a36:	ldr	r0, [r0, #16]
    2a38:	cbz	r0, 2a42 <MTPStorage_SD::close()+0x9a>
    2a3a:	ldr	r3, [r0, #0]
    2a3c:	ldr	r3, [r3, #60]	; 0x3c
    2a3e:	blx	r3
    2a40:	b.n	2a7c <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    2a42:	ldr	r6, [r5, #64]	; 0x40
    2a44:	ldr	r1, [pc, #248]	; (2b40 <MTPStorage_SD::close()+0x198>)
    2a46:	cmp	r6, r1
    2a48:	bne.n	2b36 <MTPStorage_SD::close()+0x18e>
    2a4a:	mov	r0, r2
    2a4c:	movs	r5, #0
    2a4e:	b.n	2a96 <MTPStorage_SD::close()+0xee>
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    2a50:	mov	r5, r3
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    2a52:	mov	r0, sp
    2a54:	ldr.w	r2, [r4, #240]	; 0xf0
    2a58:	mov	r1, r4
    2a5a:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    2a5e:	mov	r2, sp
    2a60:	ldr.w	r1, [r4, #240]	; 0xf0
    file_.close();
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    2a64:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    2a66:	mov	r0, r4
    2a68:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    2a6c:	mvn.w	r3, #1
    2a70:	str.w	r3, [r4, #240]	; 0xf0
  }
    2a74:	add	sp, #272	; 0x110
    2a76:	pop	{r4, r5, r6, pc}
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2a78:	mov	r0, r2
    2a7a:	blx	r6
	}
	virtual void close() {
		if (f) f->close();
    2a7c:	ldr.w	r3, [r4, #204]	; 0xcc
  }

  void MTPStorage_SD::close() 
  {
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    2a80:	mov	r5, r0
    2a82:	cmp	r3, #0
    2a84:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2a86:	ldr	r2, [r3, #0]
    2a88:	ldr	r1, [pc, #180]	; (2b40 <MTPStorage_SD::close()+0x198>)
    2a8a:	ldr	r6, [r2, #64]	; 0x40
    2a8c:	cmp	r6, r1
    2a8e:	bne.n	2b2a <MTPStorage_SD::close()+0x182>
    2a90:	ldr	r0, [r3, #16]
    2a92:	cmp	r0, #0
    2a94:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2a96:	ldr	r3, [r0, #0]
    2a98:	ldr	r3, [r3, #64]	; 0x40
    2a9a:	cmp	r3, r1
    2a9c:	bne.n	2b1c <MTPStorage_SD::close()+0x174>
    2a9e:	ldr	r0, [r0, #16]
    2aa0:	cmp	r0, #0
    2aa2:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2aa4:	ldr	r3, [r0, #0]
    2aa6:	ldr	r3, [r3, #64]	; 0x40
    2aa8:	cmp	r3, r1
    2aaa:	bne.n	2b1c <MTPStorage_SD::close()+0x174>
    2aac:	ldr	r0, [r0, #16]
    2aae:	cmp	r0, #0
    2ab0:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2ab2:	ldr	r3, [r0, #0]
    2ab4:	ldr	r3, [r3, #64]	; 0x40
    2ab6:	cmp	r3, r1
    2ab8:	bne.n	2b1c <MTPStorage_SD::close()+0x174>
    2aba:	ldr	r0, [r0, #16]
    2abc:	cmp	r0, #0
    2abe:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2ac0:	ldr	r3, [r0, #0]
    2ac2:	ldr	r3, [r3, #64]	; 0x40
    2ac4:	cmp	r3, r1
    2ac6:	bne.n	2b1c <MTPStorage_SD::close()+0x174>
    2ac8:	ldr	r0, [r0, #16]
    2aca:	cmp	r0, #0
    2acc:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2ace:	ldr	r3, [r0, #0]
    2ad0:	ldr	r3, [r3, #64]	; 0x40
    2ad2:	cmp	r3, r1
    2ad4:	bne.n	2b1c <MTPStorage_SD::close()+0x174>
    2ad6:	ldr	r0, [r0, #16]
    2ad8:	cmp	r0, #0
    2ada:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2adc:	ldr	r3, [r0, #0]
    2ade:	ldr	r3, [r3, #64]	; 0x40
    2ae0:	cmp	r3, r1
    2ae2:	bne.n	2b1c <MTPStorage_SD::close()+0x174>
    2ae4:	ldr	r0, [r0, #16]
    2ae6:	cmp	r0, #0
    2ae8:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2aea:	ldr	r3, [r0, #0]
    2aec:	ldr	r3, [r3, #64]	; 0x40
    2aee:	cmp	r3, r1
    2af0:	bne.n	2b1c <MTPStorage_SD::close()+0x174>
    2af2:	ldr	r0, [r0, #16]
    2af4:	cmp	r0, #0
    2af6:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2af8:	ldr	r3, [r0, #0]
    2afa:	ldr	r3, [r3, #64]	; 0x40
    2afc:	cmp	r3, r1
    2afe:	bne.n	2b1c <MTPStorage_SD::close()+0x174>
    2b00:	ldr	r0, [r0, #16]
    2b02:	cmp	r0, #0
    2b04:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2b06:	ldr	r3, [r0, #0]
    2b08:	ldr	r3, [r3, #64]	; 0x40
    2b0a:	cmp	r3, r1
    2b0c:	bne.n	2b1c <MTPStorage_SD::close()+0x174>
    2b0e:	ldr	r0, [r0, #16]
    2b10:	cmp	r0, #0
    2b12:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2b14:	ldr	r3, [r0, #0]
    2b16:	ldr	r3, [r3, #64]	; 0x40
    2b18:	blx	r3
    2b1a:	b.n	2a52 <MTPStorage_SD::close()+0xaa>
    2b1c:	blx	r3
    2b1e:	b.n	2a52 <MTPStorage_SD::close()+0xaa>
    2b20:	ldr	r6, [r5, #64]	; 0x40
    2b22:	ldr	r1, [pc, #28]	; (2b40 <MTPStorage_SD::close()+0x198>)
    2b24:	cmp	r6, r1
    2b26:	mov	r5, r2
    2b28:	beq.n	2a52 <MTPStorage_SD::close()+0xaa>
    2b2a:	mov	r0, r3
    2b2c:	blx	r6
    2b2e:	b.n	2a52 <MTPStorage_SD::close()+0xaa>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    2b30:	mov	r0, r3
    2b32:	blx	r2
    2b34:	b.n	2a7c <MTPStorage_SD::close()+0xd4>
	}
	virtual void close() {
		if (f) f->close();
    2b36:	movs	r5, #0
    2b38:	b.n	2b2a <MTPStorage_SD::close()+0x182>
    2b3a:	nop
    2b3c:	.word	0x000004f1
    2b40:	.word	0x00000501

00002b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>:

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2b44:	push	{r4, r5, r6, lr}
    2b46:	mov	r6, r0
    2b48:	sub	sp, #272	; 0x110
    2b4a:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    2b4c:	mov	r0, sp
    2b4e:	mov	r2, r1
    2b50:	mov	r1, r6

    return ret;
  }

  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    2b52:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    2b54:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    2b58:	ldr	r1, [sp, #0]
    2b5a:	adds	r3, r1, #1
    2b5c:	beq.n	2b94 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    { strcpy(out, "/");
      return tmp.store;
    }
    else 
    { ConstructFilename(tmp.parent, out, len);
    2b5e:	mov	r3, r5
    2b60:	mov	r2, r4
    2b62:	mov	r0, r6
    2b64:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    2b68:	mov	r0, r4
    2b6a:	bl	11700 <strlen>
    2b6e:	add	r0, r4
    2b70:	ldrb.w	r3, [r0, #-1]
    2b74:	cmp	r3, #47	; 0x2f
    2b76:	beq.n	2b82 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3e>
    2b78:	mov	r2, r5
    2b7a:	ldr	r1, [pc, #40]	; (2ba4 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    2b7c:	mov	r0, r4
    2b7e:	bl	1164c <strlcat>
      strlcat(out, tmp.name,len);
    2b82:	mov	r2, r5
    2b84:	mov	r0, r4
    2b86:	add	r1, sp, #16
    2b88:	bl	1164c <strlcat>
      return tmp.store;
    2b8c:	ldrh.w	r0, [sp, #14]
    }
  }
    2b90:	add	sp, #272	; 0x110
    2b92:	pop	{r4, r5, r6, pc}
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    2b94:	ldr	r3, [pc, #12]	; (2ba4 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    2b96:	ldrh.w	r0, [sp, #14]
  uint16_t MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    Record tmp = ReadIndexRecord(i);
      
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    { strcpy(out, "/");
    2b9a:	ldrh	r3, [r3, #0]
    2b9c:	strh	r3, [r4, #0]
    { ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
      strlcat(out, tmp.name,len);
      return tmp.store;
    }
  }
    2b9e:	add	sp, #272	; 0x110
    2ba0:	pop	{r4, r5, r6, pc}
    2ba2:	nop
    2ba4:	.word	0x00014ec4

00002ba8 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2ba8:	push	{r4, r5, r6, r7, lr}
    2baa:	subw	sp, sp, #1044	; 0x414
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2bae:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2bb2:	mov	r7, r2
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2bb4:	mov	r2, sp
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    2bb6:	mov	r5, r1
    2bb8:	mov	r4, r0
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    2bba:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2bbe:	mov	r6, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2bc0:	mov	r0, sp
    2bc2:	bl	11700 <strlen>
    2bc6:	mov	r1, r0
    2bc8:	mov	r0, sp
    2bca:	bl	de04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2bce:	ldr	r0, [pc, #132]	; (2c54 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2bd0:	bl	f7b8 <Print::println()>
    Serial.println(oldName);

    Record p1 = ReadIndexRecord(handle);
    2bd4:	mov	r2, r5
    2bd6:	mov	r1, r4
    2bd8:	add	r0, sp, #768	; 0x300
    2bda:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    2bde:	add	r1, sp, #784	; 0x310
    2be0:	mov.w	r2, #256	; 0x100
    2be4:	add	r0, sp, #512	; 0x200
    2be6:	bl	116a0 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    2bea:	mov	r1, r7
    2bec:	mov.w	r2, #256	; 0x100
    2bf0:	add	r0, sp, #784	; 0x310
    2bf2:	bl	116a0 <strlcpy>

    WriteIndexRecord(handle, p1);
    2bf6:	add	r2, sp, #768	; 0x300
    2bf8:	mov	r1, r5
    2bfa:	mov	r0, r4
    2bfc:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    2c00:	add	r2, sp, #256	; 0x100
    2c02:	mov.w	r3, #256	; 0x100
    2c06:	mov	r1, r5
    2c08:	mov	r0, r4
    2c0a:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2c0e:	add	r0, sp, #256	; 0x100
    2c10:	bl	11700 <strlen>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    2c14:	add.w	r6, r4, r6, lsl #2
    2c18:	mov	r1, r0
    2c1a:	add	r0, sp, #256	; 0x100
    2c1c:	bl	de04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2c20:	ldr	r0, [pc, #48]	; (2c54 <MTPStorage_SD::rename(unsigned long, char const*)+0xac>)
    2c22:	bl	f7b8 <Print::println()>
    2c26:	ldr	r0, [r6, #88]	; 0x58
    2c28:	ldr	r3, [r0, #0]
    2c2a:	add	r2, sp, #256	; 0x100
    2c2c:	mov	r1, sp
    2c2e:	ldr	r3, [r3, #12]
    2c30:	blx	r3
    Serial.println(newName);

    if (sd_rename(store,oldName,newName)) return true;
    2c32:	mov	r6, r0
    2c34:	cbnz	r0, 2c4c <MTPStorage_SD::rename(unsigned long, char const*)+0xa4>

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    2c36:	add	r1, sp, #512	; 0x200
    2c38:	mov.w	r2, #256	; 0x100
    2c3c:	add	r0, sp, #784	; 0x310
    2c3e:	bl	116a0 <strlcpy>
    WriteIndexRecord(handle, p1);
    2c42:	add	r2, sp, #768	; 0x300
    2c44:	mov	r1, r5
    2c46:	mov	r0, r4
    2c48:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    2c4c:	mov	r0, r6
    2c4e:	addw	sp, sp, #1044	; 0x414
    2c52:	pop	{r4, r5, r6, r7, pc}
    2c54:	.word	0x1fff0c58

00002c58 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    2c58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (open_file_ == i && mode_ == mode) return;
    2c5c:	ldr.w	r3, [r0, #240]	; 0xf0
    2c60:	cmp	r3, r1
      return tmp.store;
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    2c62:	sub	sp, #292	; 0x124
    if (open_file_ == i && mode_ == mode) return;
    2c64:	beq.w	305c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x404>
    2c68:	mov	r6, r2
    char filename[MAX_FILENAME_LEN];
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    2c6a:	mov.w	r3, #256	; 0x100
    2c6e:	add	r2, sp, #32
    2c70:	mov	r4, r0
    2c72:	mov	r5, r1
    2c74:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    2c78:	mov	r7, r0
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    2c7a:	ldr.w	r0, [r4, #204]	; 0xcc
    2c7e:	cmp	r0, #0
    2c80:	beq.w	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c84:	ldr	r2, [r0, #0]
    2c86:	ldr	r3, [pc, #348]	; (2de4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x18c>)
    2c88:	ldr	r2, [r2, #68]	; 0x44
    2c8a:	cmp	r2, r3
    2c8c:	bne.w	306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2c90:	ldr	r0, [r0, #16]
    2c92:	cmp	r0, #0
    2c94:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2c96:	ldr	r2, [r0, #0]
    2c98:	ldr	r2, [r2, #68]	; 0x44
    2c9a:	cmp	r2, r3
    2c9c:	bne.w	306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2ca0:	ldr	r0, [r0, #16]
    2ca2:	cmp	r0, #0
    2ca4:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2ca6:	ldr	r2, [r0, #0]
    2ca8:	ldr	r2, [r2, #68]	; 0x44
    2caa:	cmp	r2, r3
    2cac:	bne.w	306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2cb0:	ldr	r0, [r0, #16]
    2cb2:	cmp	r0, #0
    2cb4:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cb6:	ldr	r2, [r0, #0]
    2cb8:	ldr	r2, [r2, #68]	; 0x44
    2cba:	cmp	r2, r3
    2cbc:	bne.w	306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2cc0:	ldr	r0, [r0, #16]
    2cc2:	cmp	r0, #0
    2cc4:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cc6:	ldr	r2, [r0, #0]
    2cc8:	ldr	r2, [r2, #68]	; 0x44
    2cca:	cmp	r2, r3
    2ccc:	bne.w	306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2cd0:	ldr	r0, [r0, #16]
    2cd2:	cmp	r0, #0
    2cd4:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cd6:	ldr	r2, [r0, #0]
    2cd8:	ldr	r2, [r2, #68]	; 0x44
    2cda:	cmp	r2, r3
    2cdc:	bne.w	306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2ce0:	ldr	r0, [r0, #16]
    2ce2:	cmp	r0, #0
    2ce4:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2ce6:	ldr	r2, [r0, #0]
    2ce8:	ldr	r2, [r2, #68]	; 0x44
    2cea:	cmp	r2, r3
    2cec:	bne.w	306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2cf0:	ldr	r0, [r0, #16]
    2cf2:	cmp	r0, #0
    2cf4:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2cf6:	ldr	r2, [r0, #0]
    2cf8:	ldr	r2, [r2, #68]	; 0x44
    2cfa:	cmp	r2, r3
    2cfc:	bne.w	306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2d00:	ldr	r0, [r0, #16]
    2d02:	cmp	r0, #0
    2d04:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d06:	ldr	r2, [r0, #0]
    2d08:	ldr	r2, [r2, #68]	; 0x44
    2d0a:	cmp	r2, r3
    2d0c:	bne.w	306c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x414>
    2d10:	ldr	r0, [r0, #16]
    2d12:	cmp	r0, #0
    2d14:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d16:	ldr	r3, [r0, #0]
    2d18:	ldr	r3, [r3, #68]	; 0x44
    2d1a:	blx	r3

    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    2d1c:	cmp	r0, #0
    2d1e:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    2d20:	ldr.w	r0, [r4, #204]	; 0xcc
    2d24:	cmp	r0, #0
    2d26:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d28:	ldr	r2, [r0, #0]
    2d2a:	ldr	r3, [pc, #188]	; (2de8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x190>)
    2d2c:	ldr	r2, [r2, #64]	; 0x40
    2d2e:	cmp	r2, r3
    2d30:	bne.w	3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d34:	ldr	r0, [r0, #16]
    2d36:	cmp	r0, #0
    2d38:	beq.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d3a:	ldr	r2, [r0, #0]
    2d3c:	ldr	r2, [r2, #64]	; 0x40
    2d3e:	cmp	r2, r3
    2d40:	bne.w	3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d44:	ldr	r0, [r0, #16]
    2d46:	cbz	r0, 2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d48:	ldr	r2, [r0, #0]
    2d4a:	ldr	r2, [r2, #64]	; 0x40
    2d4c:	cmp	r2, r3
    2d4e:	bne.w	3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d52:	ldr	r0, [r0, #16]
    2d54:	cbz	r0, 2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d56:	ldr	r2, [r0, #0]
    2d58:	ldr	r2, [r2, #64]	; 0x40
    2d5a:	cmp	r2, r3
    2d5c:	bne.w	3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d60:	ldr	r0, [r0, #16]
    2d62:	cbz	r0, 2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d64:	ldr	r2, [r0, #0]
    2d66:	ldr	r2, [r2, #64]	; 0x40
    2d68:	cmp	r2, r3
    2d6a:	bne.w	3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d6e:	ldr	r0, [r0, #16]
    2d70:	cbz	r0, 2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d72:	ldr	r2, [r0, #0]
    2d74:	ldr	r2, [r2, #64]	; 0x40
    2d76:	cmp	r2, r3
    2d78:	bne.w	3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d7c:	ldr	r0, [r0, #16]
    2d7e:	cbz	r0, 2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d80:	ldr	r2, [r0, #0]
    2d82:	ldr	r2, [r2, #64]	; 0x40
    2d84:	cmp	r2, r3
    2d86:	bne.w	3070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x418>
    2d8a:	ldr	r0, [r0, #16]
    2d8c:	cbz	r0, 2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
    2d8e:	ldr	r3, [r0, #0]
    2d90:	ldr	r3, [r3, #64]	; 0x40
    2d92:	blx	r3
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    2d94:	add.w	r7, r4, r7, lsl #2
    2d98:	add	r2, sp, #32
    2d9a:	ldr	r1, [r7, #88]	; 0x58
    2d9c:	ldr	r3, [r1, #0]
    2d9e:	add	r0, sp, #12
    2da0:	ldr	r7, [r3, #0]
    2da2:	uxtb	r3, r6
    2da4:	blx	r7
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2da6:	ldr.w	r2, [r4, #204]	; 0xcc
    2daa:	cbz	r2, 2db4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2dac:	ldr	r3, [r2, #16]
    2dae:	subs	r3, #1
    2db0:	str	r3, [r2, #16]
    2db2:	cbz	r3, 2df0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x198>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    2db4:	ldr	r2, [sp, #28]
    2db6:	str.w	r2, [r4, #204]	; 0xcc
		if (f) f->refcount++;
    2dba:	cbz	r2, 2dd6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2dbc:	ldr	r1, [r2, #16]
		return *this;
	}
	virtual ~File() {
    2dbe:	ldr	r3, [pc, #44]	; (2dec <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x194>)
    2dc0:	str	r3, [sp, #12]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    2dc2:	adds	r1, #1
    2dc4:	str	r1, [r2, #16]
    2dc6:	ldr	r1, [sp, #28]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2dc8:	cbz	r1, 2dd6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2dca:	ldr	r2, [r1, #16]
    2dcc:	subs	r2, #1
    2dce:	str	r2, [r1, #16]
    2dd0:	cmp	r2, #0
    2dd2:	beq.w	2f2c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2d4>
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    2dd6:	str.w	r5, [r4, #240]	; 0xf0
    mode_ = mode;
    2dda:	str.w	r6, [r4, #236]	; 0xec
    mtp_lock_storage(false);
  }
    2dde:	add	sp, #292	; 0x124
    2de0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2de4:	.word	0x0000050d
    2de8:	.word	0x00000501
    2dec:	.word	0x00014bdc
    2df0:	ldr.w	r7, [r4, #204]	; 0xcc
    2df4:	cmp	r7, #0
    2df6:	beq.n	2db4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    2df8:	ldr	r3, [r7, #0]
    2dfa:	ldr	r1, [pc, #680]	; (30a4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2dfc:	ldr	r3, [r3, #32]
    2dfe:	cmp	r3, r1
    2e00:	bne.w	3074 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x41c>
    2e04:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e06:	ldr	r3, [pc, #672]	; (30a8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
    2e08:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e0a:	cmp	r0, #0
    2e0c:	beq.w	2f22 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2e10:	ldr	r2, [r0, #16]
    2e12:	subs	r2, #1
    2e14:	str	r2, [r0, #16]
    2e16:	cmp	r2, #0
    2e18:	bne.w	2f22 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2e1c:	ldr.w	r8, [r7, #16]
    2e20:	cmp.w	r8, #0
    2e24:	beq.n	2f22 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    2e26:	ldr.w	r2, [r8]
    2e2a:	ldr	r2, [r2, #32]
    2e2c:	cmp	r2, r1
    2e2e:	bne.w	3092 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x43a>
    2e32:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e36:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e3a:	cmp	r0, #0
    2e3c:	beq.n	2f1a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2e3e:	ldr	r2, [r0, #16]
    2e40:	subs	r2, #1
    2e42:	str	r2, [r0, #16]
    2e44:	cmp	r2, #0
    2e46:	bne.n	2f1a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2e48:	ldr.w	r9, [r8, #16]
    2e4c:	cmp.w	r9, #0
    2e50:	beq.n	2f1a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    2e52:	ldr.w	r2, [r9]
    2e56:	ldr	r2, [r2, #32]
    2e58:	cmp	r2, r1
    2e5a:	bne.w	3086 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x42e>
    2e5e:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e62:	str.w	r3, [r9]
    2e66:	ldr.w	lr, [pc, #576]	; 30a8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e6a:	cmp	r0, #0
    2e6c:	beq.n	2f12 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2e6e:	ldr	r2, [r0, #16]
    2e70:	subs	r2, #1
    2e72:	str	r2, [r0, #16]
    2e74:	cmp	r2, #0
    2e76:	bne.n	2f12 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2e78:	ldr.w	sl, [r9, #16]
    2e7c:	cmp.w	sl, #0
    2e80:	beq.n	2f12 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    2e82:	ldr.w	r2, [sl]
    2e86:	ldr	r2, [r2, #32]
    2e88:	cmp	r2, r1
    2e8a:	bne.w	309e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x446>
    2e8e:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2e92:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2e96:	cmp	r0, #0
    2e98:	beq.n	2f0a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2e9a:	ldr	r2, [r0, #16]
    2e9c:	subs	r2, #1
    2e9e:	str	r2, [r0, #16]
    2ea0:	cmp	r2, #0
    2ea2:	bne.n	2f0a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2ea4:	ldr.w	fp, [sl, #16]
    2ea8:	cmp.w	fp, #0
    2eac:	beq.n	2f0a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    2eae:	ldr.w	r2, [fp]
    2eb2:	ldr	r2, [r2, #32]
    2eb4:	cmp	r2, r1
    2eb6:	bne.w	30b2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x45a>
    2eba:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2ebe:	str.w	r3, [fp]
    2ec2:	ldr	r0, [pc, #484]	; (30a8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ec4:	cbz	r2, 2f02 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2ec6:	ldr	r3, [r2, #16]
    2ec8:	subs	r3, #1
    2eca:	str	r3, [r2, #16]
    2ecc:	cbnz	r3, 2f02 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2ece:	ldr.w	r2, [fp, #16]
    2ed2:	cbz	r2, 2f02 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>
    2ed4:	ldr	r3, [r2, #0]
    2ed6:	ldr	r3, [r3, #32]
    2ed8:	cmp	r3, r1
    2eda:	bne.w	30be <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x466>
    2ede:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2ee0:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ee2:	cbz	r1, 2efa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2ee4:	ldr	r3, [r1, #16]
    2ee6:	subs	r3, #1
    2ee8:	str	r3, [r1, #16]
    2eea:	cbnz	r3, 2efa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2eec:	ldr	r0, [r2, #16]
    2eee:	cbz	r0, 2efa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2a2>
    2ef0:	ldr	r3, [r0, #0]
    2ef2:	str	r2, [sp, #4]
    2ef4:	ldr	r3, [r3, #32]
    2ef6:	blx	r3
    2ef8:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    2efa:	mov	r0, r2
    2efc:	movs	r1, #20
    2efe:	bl	f95c <operator delete(void*, unsigned int)>
    2f02:	mov	r0, fp
    2f04:	movs	r1, #20
    2f06:	bl	f95c <operator delete(void*, unsigned int)>
    2f0a:	mov	r0, sl
    2f0c:	movs	r1, #20
    2f0e:	bl	f95c <operator delete(void*, unsigned int)>
    2f12:	mov	r0, r9
    2f14:	movs	r1, #20
    2f16:	bl	f95c <operator delete(void*, unsigned int)>
    2f1a:	mov	r0, r8
    2f1c:	movs	r1, #20
    2f1e:	bl	f95c <operator delete(void*, unsigned int)>
    2f22:	mov	r0, r7
    2f24:	movs	r1, #20
    2f26:	bl	f95c <operator delete(void*, unsigned int)>
    2f2a:	b.n	2db4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f2c:	ldr	r7, [sp, #28]
    2f2e:	cmp	r7, #0
    2f30:	beq.w	2dd6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    2f34:	ldr	r2, [r7, #0]
    2f36:	ldr	r1, [pc, #364]	; (30a4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44c>)
    2f38:	ldr	r2, [r2, #32]
    2f3a:	cmp	r2, r1
    2f3c:	bne.w	307a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x422>
    2f40:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f42:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f44:	cmp	r0, #0
    2f46:	beq.w	3052 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2f4a:	ldr	r2, [r0, #16]
    2f4c:	subs	r2, #1
    2f4e:	str	r2, [r0, #16]
    2f50:	cmp	r2, #0
    2f52:	bne.n	3052 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2f54:	ldr.w	r8, [r7, #16]
    2f58:	cmp.w	r8, #0
    2f5c:	beq.n	3052 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    2f5e:	ldr.w	r2, [r8]
    2f62:	ldr	r2, [r2, #32]
    2f64:	cmp	r2, r1
    2f66:	bne.w	308c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x434>
    2f6a:	ldr.w	r0, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f6e:	str.w	r3, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2f72:	cmp	r0, #0
    2f74:	beq.n	304a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2f76:	ldr	r2, [r0, #16]
    2f78:	subs	r2, #1
    2f7a:	str	r2, [r0, #16]
    2f7c:	cmp	r2, #0
    2f7e:	bne.n	304a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2f80:	ldr.w	r9, [r8, #16]
    2f84:	cmp.w	r9, #0
    2f88:	beq.n	304a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    2f8a:	ldr.w	r2, [r9]
    2f8e:	ldr	r2, [r2, #32]
    2f90:	cmp	r2, r1
    2f92:	bne.n	3080 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x428>
    2f94:	ldr.w	r0, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2f98:	str.w	r3, [r9]
    2f9c:	ldr.w	lr, [pc, #264]	; 30a8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fa0:	cmp	r0, #0
    2fa2:	beq.n	3042 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2fa4:	ldr	r2, [r0, #16]
    2fa6:	subs	r2, #1
    2fa8:	str	r2, [r0, #16]
    2faa:	cmp	r2, #0
    2fac:	bne.n	3042 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2fae:	ldr.w	sl, [r9, #16]
    2fb2:	cmp.w	sl, #0
    2fb6:	beq.n	3042 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    2fb8:	ldr.w	r2, [sl]
    2fbc:	ldr	r2, [r2, #32]
    2fbe:	cmp	r2, r1
    2fc0:	bne.n	3098 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x440>
    2fc2:	ldr.w	r0, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2fc6:	str.w	lr, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2fca:	cmp	r0, #0
    2fcc:	beq.n	303a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2fce:	ldr	r2, [r0, #16]
    2fd0:	subs	r2, #1
    2fd2:	str	r2, [r0, #16]
    2fd4:	cmp	r2, #0
    2fd6:	bne.n	303a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2fd8:	ldr.w	fp, [sl, #16]
    2fdc:	cmp.w	fp, #0
    2fe0:	beq.n	303a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    2fe2:	ldr.w	r2, [fp]
    2fe6:	ldr	r2, [r2, #32]
    2fe8:	cmp	r2, r1
    2fea:	bne.n	30ac <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x454>
    2fec:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    2ff0:	str.w	r3, [fp]
    2ff4:	ldr	r0, [pc, #176]	; (30a8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x450>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    2ff6:	cbz	r2, 3032 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    2ff8:	ldr	r3, [r2, #16]
    2ffa:	subs	r3, #1
    2ffc:	str	r3, [r2, #16]
    2ffe:	cbnz	r3, 3032 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    3000:	ldr.w	r2, [fp, #16]
    3004:	cbz	r2, 3032 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    3006:	ldr	r3, [r2, #0]
    3008:	ldr	r3, [r3, #32]
    300a:	cmp	r3, r1
    300c:	bne.n	30b8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x460>
    300e:	ldr	r1, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3010:	str	r0, [r2, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3012:	cbz	r1, 302a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    3014:	ldr	r3, [r1, #16]
    3016:	subs	r3, #1
    3018:	str	r3, [r1, #16]
    301a:	cbnz	r3, 302a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    301c:	ldr	r0, [r2, #16]
    301e:	cbz	r0, 302a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3d2>
    3020:	ldr	r3, [r0, #0]
    3022:	str	r2, [sp, #4]
    3024:	ldr	r3, [r3, #32]
    3026:	blx	r3
    3028:	ldr	r2, [sp, #4]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    302a:	mov	r0, r2
    302c:	movs	r1, #20
    302e:	bl	f95c <operator delete(void*, unsigned int)>
    3032:	mov	r0, fp
    3034:	movs	r1, #20
    3036:	bl	f95c <operator delete(void*, unsigned int)>
    303a:	mov	r0, sl
    303c:	movs	r1, #20
    303e:	bl	f95c <operator delete(void*, unsigned int)>
    3042:	mov	r0, r9
    3044:	movs	r1, #20
    3046:	bl	f95c <operator delete(void*, unsigned int)>
    304a:	mov	r0, r8
    304c:	movs	r1, #20
    304e:	bl	f95c <operator delete(void*, unsigned int)>
    3052:	mov	r0, r7
    3054:	movs	r1, #20
    3056:	bl	f95c <operator delete(void*, unsigned int)>
    305a:	b.n	2dd6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    305c:	ldr.w	r3, [r0, #236]	; 0xec
    3060:	cmp	r3, r2
    3062:	bne.w	2c68 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(store,filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    3066:	add	sp, #292	; 0x124
    3068:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    306c:	blx	r2
    306e:	b.n	2d1c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc4>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    3070:	blx	r2
    3072:	b.n	2d94 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x13c>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3074:	mov	r0, r7
    3076:	blx	r3
    3078:	b.n	2db4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x15c>
    307a:	mov	r0, r7
    307c:	blx	r2
    307e:	b.n	2dd6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x17e>
    3080:	mov	r0, r9
    3082:	blx	r2
    3084:	b.n	304a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3f2>
    3086:	mov	r0, r9
    3088:	blx	r2
    308a:	b.n	2f1a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c2>
    308c:	mov	r0, r8
    308e:	blx	r2
    3090:	b.n	3052 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3fa>
    3092:	mov	r0, r8
    3094:	blx	r2
    3096:	b.n	2f22 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ca>
    3098:	mov	r0, sl
    309a:	blx	r2
    309c:	b.n	3042 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3ea>
    309e:	mov	r0, sl
    30a0:	blx	r2
    30a2:	b.n	2f12 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2ba>
    30a4:	.word	0x00000f31
    30a8:	.word	0x00014bdc
    30ac:	mov	r0, fp
    30ae:	blx	r2
    30b0:	b.n	303a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e2>
    30b2:	mov	r0, fp
    30b4:	blx	r2
    30b6:	b.n	2f0a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2b2>
    30b8:	mov	r0, r2
    30ba:	blx	r3
    30bc:	b.n	3032 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3da>
    30be:	mov	r0, r2
    30c0:	blx	r3
    30c2:	b.n	2f02 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2aa>

000030c4 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    30c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30c8:	mov	r5, r0
    30ca:	sub	sp, #8
    30cc:	mov	r7, r2
    OpenFileByIndex(handle);
    30ce:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    30d0:	mov	r8, r3
    30d2:	ldr.w	r9, [sp, #40]	; 0x28
    OpenFileByIndex(handle);
    30d6:	bl	2c58 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    30da:	ldr.w	r4, [r5, #204]	; 0xcc
    30de:	cmp	r4, #0
    30e0:	beq.n	31b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    30e2:	ldr	r0, [r4, #0]
    30e4:	ldr	r2, [pc, #308]	; (321c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x158>)
    30e6:	ldr	r6, [r0, #52]	; 0x34
    30e8:	cmp	r6, r2
    30ea:	mov.w	r3, #0
    30ee:	bne.n	31e8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x124>
    30f0:	ldr	r1, [r4, #16]
    30f2:	cmp	r1, #0
    30f4:	beq.n	31b0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xec>
    30f6:	ldr	r2, [r1, #0]
    30f8:	ldr.w	sl, [r2, #52]	; 0x34
    30fc:	cmp	sl, r6
    30fe:	bne.n	31f2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x12e>
    3100:	ldr.w	lr, [r1, #16]
    3104:	cmp.w	lr, #0
    3108:	beq.n	31be <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    310a:	ldr.w	r2, [lr]
    310e:	ldr	r6, [r2, #52]	; 0x34
    3110:	cmp	r6, sl
    3112:	bne.n	31fc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x138>
    3114:	ldr.w	lr, [lr, #16]
    3118:	cmp.w	lr, #0
    311c:	beq.n	31be <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    311e:	ldr.w	r2, [lr]
    3122:	ldr.w	sl, [r2, #52]	; 0x34
    3126:	cmp	sl, r6
    3128:	bne.n	3206 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x142>
    312a:	ldr.w	lr, [lr, #16]
    312e:	cmp.w	lr, #0
    3132:	beq.n	31be <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    3134:	ldr.w	r3, [lr]
    3138:	ldr	r6, [r3, #52]	; 0x34
    313a:	cmp	r6, sl
    313c:	bne.n	3210 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x14c>
    313e:	ldr.w	r6, [lr, #16]
    3142:	cmp	r6, #0
    3144:	beq.n	31be <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xfa>
    3146:	ldr	r1, [r6, #0]
    3148:	movs	r3, #0
    314a:	str	r3, [sp, #0]
    314c:	mov	r2, r7
    314e:	mov	r0, r6
    3150:	ldr	r1, [r1, #52]	; 0x34
    3152:	blx	r1
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    3154:	ldr.w	r4, [r5, #204]	; 0xcc
    3158:	cmp	r4, #0
    315a:	beq.n	31b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    315c:	ldr	r2, [r4, #0]
    315e:	ldr	r3, [pc, #192]	; (3220 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    3160:	ldr	r5, [r2, #40]	; 0x28
    3162:	cmp	r5, r3
    3164:	bne.n	31ca <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    3166:	ldr	r0, [r4, #16]
    3168:	cbz	r0, 31b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    316a:	ldr	r2, [r0, #0]
    316c:	ldr	r4, [r2, #40]	; 0x28
    316e:	cmp	r4, r3
    3170:	bne.n	31da <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3172:	ldr	r0, [r0, #16]
    3174:	cbz	r0, 31b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3176:	ldr	r2, [r0, #0]
    3178:	ldr	r4, [r2, #40]	; 0x28
    317a:	cmp	r4, r3
    317c:	bne.n	31da <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    317e:	ldr	r0, [r0, #16]
    3180:	cbz	r0, 31b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    3182:	ldr	r2, [r0, #0]
    3184:	ldr	r4, [r2, #40]	; 0x28
    3186:	cmp	r4, r3
    3188:	bne.n	31da <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    318a:	ldr	r0, [r0, #16]
    318c:	cbz	r0, 31b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    318e:	ldr	r2, [r0, #0]
    3190:	ldr	r4, [r2, #40]	; 0x28
    3192:	cmp	r4, r3
    3194:	bne.n	31da <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    3196:	ldr	r0, [r0, #16]
    3198:	cbz	r0, 31b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    319a:	ldr	r2, [r0, #0]
    319c:	ldr	r4, [r2, #40]	; 0x28
    319e:	cmp	r4, r3
    31a0:	bne.n	31da <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x116>
    31a2:	ldr	r0, [r0, #16]
    31a4:	cbz	r0, 31b8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xf4>
    31a6:	ldr	r3, [r0, #0]
    31a8:	mov	r2, r9
    31aa:	mov	r1, r8
    31ac:	ldr	r3, [r3, #40]	; 0x28
    31ae:	b.n	31d2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x10e>
    31b0:	ldr	r5, [r0, #40]	; 0x28
    31b2:	ldr	r3, [pc, #108]	; (3220 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    31b4:	cmp	r5, r3
    31b6:	bne.n	31ca <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    31b8:	add	sp, #8
    31ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31be:	ldr	r5, [r0, #40]	; 0x28
    31c0:	ldr	r3, [pc, #92]	; (3220 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x15c>)
    31c2:	cmp	r5, r3
    31c4:	bne.n	31ca <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x106>
    31c6:	mov	r0, r1
    31c8:	b.n	316a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0xa6>
    31ca:	mov	r2, r9
    31cc:	mov	r1, r8
    31ce:	mov	r0, r4
    31d0:	mov	r3, r5
    31d2:	add	sp, #8
    31d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31d8:	bx	r3
    31da:	mov	r2, r9
    31dc:	mov	r1, r8
    31de:	mov	r3, r4
    31e0:	add	sp, #8
    31e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31e6:	bx	r3
	}
	virtual bool truncate(uint64_t size=0) {
		return (f) ? f->truncate(size) : false;
	}
	virtual bool seek(uint64_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    31e8:	str	r3, [sp, #0]
    31ea:	mov	r2, r7
    31ec:	mov	r0, r4
    31ee:	blx	r6
    31f0:	b.n	3154 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31f2:	str	r3, [sp, #0]
    31f4:	mov	r2, r7
    31f6:	mov	r0, r1
    31f8:	blx	sl
    31fa:	b.n	3154 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    31fc:	str	r3, [sp, #0]
    31fe:	mov	r2, r7
    3200:	mov	r0, lr
    3202:	blx	r6
    3204:	b.n	3154 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    3206:	str	r3, [sp, #0]
    3208:	mov	r2, r7
    320a:	mov	r0, lr
    320c:	blx	sl
    320e:	b.n	3154 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    3210:	movs	r3, #0
    3212:	mov	r2, r7
    3214:	mov	r0, lr
    3216:	str	r3, [sp, #0]
    3218:	blx	r6
    321a:	b.n	3154 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x90>
    321c:	.word	0x000004c9
    3220:	.word	0x0000047d

00003224 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    3224:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    3228:	cmp.w	r2, #4294967295
    322c:	ite	ne
    322e:	movne	r6, r2
    3230:	moveq	r6, r1
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    3232:	sub.w	sp, sp, #800	; 0x320
    3236:	mov	r4, r0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    3238:	mov	r2, r6
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    323a:	mov	r7, r1
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    323c:	mov	r1, r0
    323e:	add	r0, sp, #256	; 0x100
    }
    return 1;
  }

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    3240:	mov	r8, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    3242:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    3246:	ldr	r1, [sp, #824]	; 0x338
    3248:	mov.w	r2, #256	; 0x100
    324c:	add	r0, sp, #544	; 0x220
    324e:	bl	116a0 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3252:	ldr.w	r5, [r4, #244]	; 0xf4
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    3256:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    325a:	ldr	r2, [sp, #260]	; 0x104
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    325c:	strh.w	r3, [sp, #542]	; 0x21e
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3260:	adds	r1, r5, #1
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    3262:	movs	r3, #0
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3264:	str.w	r1, [r4, #244]	; 0xf4
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    3268:	str	r3, [sp, #532]	; 0x214
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    326a:	mov	r1, r5
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    326c:	movs	r3, #1
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    326e:	str	r2, [sp, #536]	; 0x218
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    3270:	mov	r0, r4
    3272:	add	r2, sp, #528	; 0x210
    if (parent == 0xFFFFFFFFUL) parent = store;
    Record p = ReadIndexRecord(parent);
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    r.store = p.store;
    r.parent = parent;
    3274:	str	r6, [sp, #528]	; 0x210
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    3276:	strb.w	r8, [sp, #540]	; 0x21c
    // New folder is empty, scanned = true.
    r.scanned = 1;
    327a:	strb.w	r3, [sp, #541]	; 0x21d
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    327e:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    3282:	mov	r1, r6
    3284:	add	r2, sp, #256	; 0x100
    3286:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    3288:	str	r5, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    328a:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    328e:	cmp.w	r8, #0
    3292:	bne.n	32a8 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x84>
      sd_mkdir(store,filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    3294:	mov	r0, r4
    3296:	movs	r2, #2
    3298:	mov	r1, r5
    329a:	bl	2c58 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    329e:	mov	r0, r5
    32a0:	add.w	sp, sp, #800	; 0x320
    32a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    32a8:	mov	r0, r4
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    32aa:	add.w	r4, r4, r7, lsl #2
    32ae:	mov	r2, sp
    32b0:	mov	r1, r5
    32b2:	mov.w	r3, #256	; 0x100
    32b6:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    32ba:	ldr	r0, [r4, #88]	; 0x58
    32bc:	ldr	r3, [r0, #0]
    32be:	mov	r1, sp
    32c0:	ldr	r3, [r3, #8]
    32c2:	blx	r3
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    32c4:	mov	r0, r5
    32c6:	add.w	sp, sp, #800	; 0x320
    32ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32ce:	nop

000032d0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    32d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32d4:	cmp.w	r2, #4294967295
    32d8:	ite	ne
    32da:	movne	r6, r2
    32dc:	moveq	r6, r1
    32de:	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    32e2:	mov	r1, r0
      AppendIndexRecord(r);
    }
  }

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    32e4:	mov	r4, r0
    
    Record record = ReadIndexRecord(i);
    32e6:	mov	r2, r6
    32e8:	add	r0, sp, #16
    32ea:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    32ee:	ldrb.w	r3, [sp, #28]
    32f2:	cbz	r3, 32fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    32f4:	ldrb.w	r2, [sp, #29]
    32f8:	cbz	r2, 3302 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    32fa:	add.w	sp, sp, #564	; 0x234
    32fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    3302:	mov	r0, r4
    3304:	mov	r1, r6
    3306:	bl	2c58 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    330a:	ldr.w	r0, [r4, #204]	; 0xcc
    330e:	cmp	r0, #0
    3310:	beq.n	32fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3312:	ldr	r3, [r0, #0]
    3314:	ldr.w	r8, [pc, #892]	; 3694 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c4>
    3318:	ldr	r3, [r3, #68]	; 0x44
    331a:	cmp	r3, r8
    331c:	bne.n	33d8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    331e:	ldr	r0, [r0, #16]
    3320:	cmp	r0, #0
    3322:	beq.n	32fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3324:	ldr	r3, [r0, #0]
    3326:	ldr	r3, [r3, #68]	; 0x44
    3328:	cmp	r3, r8
    332a:	bne.n	33d8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    332c:	ldr	r0, [r0, #16]
    332e:	cmp	r0, #0
    3330:	beq.n	32fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3332:	ldr	r3, [r0, #0]
    3334:	ldr	r3, [r3, #68]	; 0x44
    3336:	cmp	r3, r8
    3338:	bne.n	33d8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    333a:	ldr	r0, [r0, #16]
    333c:	cmp	r0, #0
    333e:	beq.n	32fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    3340:	ldr	r3, [r0, #0]
    3342:	ldr	r3, [r3, #68]	; 0x44
    3344:	cmp	r3, r8
    3346:	bne.n	33d8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    3348:	ldr	r0, [r0, #16]
    334a:	cmp	r0, #0
    334c:	beq.n	32fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    334e:	ldr	r3, [r0, #0]
    3350:	ldr	r3, [r3, #68]	; 0x44
    3352:	cmp	r3, r8
    3354:	bne.n	33d8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x108>
    3356:	ldr	r0, [r0, #16]
    3358:	cmp	r0, #0
    335a:	beq.n	32fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    335c:	ldr	r3, [r0, #0]
    335e:	ldr	r3, [r3, #68]	; 0x44
    3360:	blx	r3
      if (!sd_isOpen(file_)) return;
    3362:	cmp	r0, #0
    3364:	beq.n	32fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3366:	ldr.w	r9, [pc, #804]	; 368c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>
    336a:	ldr.w	fp, [pc, #812]	; 3698 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c8>
    336e:	movs	r5, #0
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3370:	ldr.w	r1, [r4, #204]	; 0xcc
    3374:	cmp	r1, #0
    3376:	beq.n	33dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3378:	ldr	r3, [r1, #0]
    337a:	ldr	r3, [r3, #80]	; 0x50
    337c:	cmp	r3, fp
    337e:	bne.w	3892 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3382:	ldr	r1, [r1, #16]
    3384:	cbz	r1, 33dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3386:	ldr	r3, [r1, #0]
    3388:	ldr	r3, [r3, #80]	; 0x50
    338a:	cmp	r3, fp
    338c:	bne.w	3892 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    3390:	ldr	r1, [r1, #16]
    3392:	cbz	r1, 33dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    3394:	ldr	r3, [r1, #0]
    3396:	ldr	r3, [r3, #80]	; 0x50
    3398:	cmp	r3, fp
    339a:	bne.w	3892 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    339e:	ldr	r1, [r1, #16]
    33a0:	cbz	r1, 33dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    33a2:	ldr	r3, [r1, #0]
    33a4:	ldr	r3, [r3, #80]	; 0x50
    33a6:	cmp	r3, fp
    33a8:	bne.w	3892 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    33ac:	ldr	r1, [r1, #16]
    33ae:	cbz	r1, 33dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    33b0:	ldr	r3, [r1, #0]
    33b2:	ldr	r3, [r3, #80]	; 0x50
    33b4:	cmp	r3, fp
    33b6:	bne.w	3892 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    33ba:	ldr	r1, [r1, #16]
    33bc:	cbz	r1, 33dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    33be:	ldr	r3, [r1, #0]
    33c0:	ldr	r3, [r3, #80]	; 0x50
    33c2:	cmp	r3, fp
    33c4:	bne.w	3892 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5c2>
    33c8:	ldr	r1, [r1, #16]
    33ca:	cbz	r1, 33dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
    33cc:	ldr	r3, [r1, #0]
    33ce:	movs	r2, #0
    33d0:	ldr	r3, [r3, #80]	; 0x50
    33d2:	add	r0, sp, #288	; 0x120
    33d4:	blx	r3
    33d6:	b.n	33f2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    33d8:	blx	r3
    33da:	b.n	3362 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x92>
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    33dc:	movs	r3, #0
    33de:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    33e2:	str.w	r9, [sp, #288]	; 0x120
    33e6:	strb.w	r3, [sp, #292]	; 0x124
    33ea:	strb.w	r3, [sp, #300]	; 0x12c
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    33ee:	str	r3, [sp, #304]	; 0x130
    33f0:	str	r2, [sp, #296]	; 0x128
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    33f2:	ldr.w	r2, [r4, #224]	; 0xe0
    33f6:	cmp	r2, #0
    33f8:	beq.n	348e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    33fa:	ldr	r3, [r2, #16]
    33fc:	subs	r3, #1
    33fe:	str	r3, [r2, #16]
    3400:	cmp	r3, #0
    3402:	bne.n	348e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    3404:	ldr.w	r7, [r4, #224]	; 0xe0
    3408:	cmp	r7, #0
    340a:	beq.n	348e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    340c:	ldr	r3, [r7, #0]
    340e:	ldr	r0, [pc, #632]	; (3688 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    3410:	ldr	r3, [r3, #32]
    3412:	cmp	r3, r0
    3414:	bne.w	38b4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5e4>
    3418:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    341a:	str.w	r9, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    341e:	cbz	r2, 3486 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3420:	ldr	r3, [r2, #16]
    3422:	subs	r3, #1
    3424:	str	r3, [r2, #16]
    3426:	cbnz	r3, 3486 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3428:	ldr.w	sl, [r7, #16]
    342c:	cmp.w	sl, #0
    3430:	beq.n	3486 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3432:	ldr.w	r3, [sl]
    3436:	ldr	r3, [r3, #32]
    3438:	cmp	r3, r0
    343a:	bne.w	3a82 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b2>
    343e:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3442:	ldr	r3, [pc, #584]	; (368c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    3444:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3448:	cbz	r2, 347e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    344a:	ldr	r3, [r2, #16]
    344c:	subs	r3, #1
    344e:	str	r3, [r2, #16]
    3450:	cbnz	r3, 347e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3452:	ldr.w	r3, [sl, #16]
    3456:	cbz	r3, 347e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3458:	ldr	r2, [r3, #0]
    345a:	ldr	r2, [r2, #32]
    345c:	cmp	r2, r0
    345e:	bne.w	3a94 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c4>
    3462:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3464:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3468:	cbz	r1, 3476 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    346a:	ldr	r2, [r1, #16]
    346c:	subs	r2, #1
    346e:	str	r2, [r1, #16]
    3470:	cmp	r2, #0
    3472:	beq.w	38cc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5fc>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3476:	mov	r0, r3
    3478:	movs	r1, #20
    347a:	bl	f95c <operator delete(void*, unsigned int)>
    347e:	mov	r0, sl
    3480:	movs	r1, #20
    3482:	bl	f95c <operator delete(void*, unsigned int)>
    3486:	mov	r0, r7
    3488:	movs	r1, #20
    348a:	bl	f95c <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    348e:	ldr	r3, [sp, #304]	; 0x130
    3490:	str.w	r3, [r4, #224]	; 0xe0
		if (f) f->refcount++;
    3494:	cmp	r3, #0
    3496:	beq.n	353a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    3498:	ldr	r2, [r3, #16]
    349a:	adds	r2, #1
    349c:	str	r2, [r3, #16]
    349e:	ldr	r2, [sp, #304]	; 0x130
		return *this;
	}
	virtual ~File() {
    34a0:	str.w	r9, [sp, #288]	; 0x120
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34a4:	cmp	r2, #0
    34a6:	beq.n	353a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    34a8:	ldr	r3, [r2, #16]
    34aa:	subs	r3, #1
    34ac:	str	r3, [r2, #16]
    34ae:	cmp	r3, #0
    34b0:	bne.n	353a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    34b2:	ldr	r7, [sp, #304]	; 0x130
    34b4:	cmp	r7, #0
    34b6:	beq.n	353a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    34b8:	ldr	r3, [r7, #0]
    34ba:	ldr	r0, [pc, #460]	; (3688 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b8>)
    34bc:	ldr	r3, [r3, #32]
    34be:	cmp	r3, r0
    34c0:	bne.w	38ae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5de>
    34c4:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    34c6:	ldr	r3, [pc, #452]	; (368c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    34c8:	str	r3, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34ca:	cbz	r2, 3532 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    34cc:	ldr	r3, [r2, #16]
    34ce:	subs	r3, #1
    34d0:	str	r3, [r2, #16]
    34d2:	cbnz	r3, 3532 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    34d4:	ldr.w	sl, [r7, #16]
    34d8:	cmp.w	sl, #0
    34dc:	beq.n	3532 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    34de:	ldr.w	r3, [sl]
    34e2:	ldr	r3, [r3, #32]
    34e4:	cmp	r3, r0
    34e6:	bne.w	3a88 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7b8>
    34ea:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    34ee:	ldr	r3, [pc, #412]	; (368c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3bc>)
    34f0:	str.w	r3, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    34f4:	cbz	r2, 352a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    34f6:	ldr	r3, [r2, #16]
    34f8:	subs	r3, #1
    34fa:	str	r3, [r2, #16]
    34fc:	cbnz	r3, 352a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    34fe:	ldr.w	r3, [sl, #16]
    3502:	cbz	r3, 352a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    3504:	ldr	r2, [r3, #0]
    3506:	ldr	r2, [r2, #32]
    3508:	cmp	r2, r0
    350a:	bne.w	3a8e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7be>
    350e:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3510:	str.w	r9, [r3]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3514:	cbz	r1, 3522 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    3516:	ldr	r2, [r1, #16]
    3518:	subs	r2, #1
    351a:	str	r2, [r1, #16]
    351c:	cmp	r2, #0
    351e:	beq.w	39aa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6da>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3522:	mov	r0, r3
    3524:	movs	r1, #20
    3526:	bl	f95c <operator delete(void*, unsigned int)>
    352a:	mov	r0, sl
    352c:	movs	r1, #20
    352e:	bl	f95c <operator delete(void*, unsigned int)>
    3532:	mov	r0, r7
    3534:	movs	r1, #20
    3536:	bl	f95c <operator delete(void*, unsigned int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    353a:	ldr.w	r0, [r4, #224]	; 0xe0
    353e:	cmp	r0, #0
    3540:	beq.w	366a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3544:	ldr	r3, [r0, #0]
    3546:	ldr	r3, [r3, #68]	; 0x44
    3548:	cmp	r3, r8
    354a:	bne.w	3684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    354e:	ldr	r0, [r0, #16]
    3550:	cmp	r0, #0
    3552:	beq.w	366a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3556:	ldr	r3, [r0, #0]
    3558:	ldr	r3, [r3, #68]	; 0x44
    355a:	cmp	r3, r8
    355c:	bne.w	3684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3560:	ldr	r0, [r0, #16]
    3562:	cmp	r0, #0
    3564:	beq.w	366a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3568:	ldr	r3, [r0, #0]
    356a:	ldr	r3, [r3, #68]	; 0x44
    356c:	cmp	r3, r8
    356e:	bne.w	3684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3572:	ldr	r0, [r0, #16]
    3574:	cmp	r0, #0
    3576:	beq.n	366a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3578:	ldr	r3, [r0, #0]
    357a:	ldr	r3, [r3, #68]	; 0x44
    357c:	cmp	r3, r8
    357e:	bne.w	3684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3582:	ldr	r0, [r0, #16]
    3584:	cmp	r0, #0
    3586:	beq.n	366a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3588:	ldr	r3, [r0, #0]
    358a:	ldr	r3, [r3, #68]	; 0x44
    358c:	cmp	r3, r8
    358e:	bne.n	3684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    3590:	ldr	r0, [r0, #16]
    3592:	cmp	r0, #0
    3594:	beq.n	366a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    3596:	ldr	r3, [r0, #0]
    3598:	ldr	r3, [r3, #68]	; 0x44
    359a:	cmp	r3, r8
    359c:	bne.n	3684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    359e:	ldr	r0, [r0, #16]
    35a0:	cmp	r0, #0
    35a2:	beq.n	366a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    35a4:	ldr	r3, [r0, #0]
    35a6:	ldr	r3, [r3, #68]	; 0x44
    35a8:	cmp	r3, r8
    35aa:	bne.n	3684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    35ac:	ldr	r0, [r0, #16]
    35ae:	cmp	r0, #0
    35b0:	beq.n	366a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    35b2:	ldr	r3, [r0, #0]
    35b4:	ldr	r3, [r3, #68]	; 0x44
    35b6:	cmp	r3, r8
    35b8:	bne.n	3684 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3b4>
    35ba:	ldr	r0, [r0, #16]
    35bc:	cmp	r0, #0
    35be:	beq.n	366a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
    35c0:	ldr	r3, [r0, #0]
    35c2:	ldr	r3, [r3, #68]	; 0x44
    35c4:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    35c6:	cmp	r0, #0
    35c8:	beq.n	366a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x39a>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    35ca:	ldr.w	r3, [r4, #224]	; 0xe0

        Record r;
        r.store = record.store;
    35ce:	ldrh.w	r2, [sp, #30]
        r.parent = i;
    35d2:	str	r6, [sp, #288]	; 0x120
        r.sibling = sibling;
    35d4:	str	r5, [sp, #296]	; 0x128
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;

        Record r;
        r.store = record.store;
    35d6:	strh.w	r2, [sp, #302]	; 0x12e
    35da:	cmp	r3, #0
    35dc:	beq.w	3806 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35e0:	ldr	r1, [r3, #0]
    35e2:	ldr	r2, [pc, #172]	; (3690 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3c0>)
    35e4:	ldr	r1, [r1, #76]	; 0x4c
    35e6:	cmp	r1, r2
    35e8:	bne.n	369c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3cc>
    35ea:	ldr	r0, [r3, #16]
    35ec:	cmp	r0, #0
    35ee:	beq.w	3806 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    35f2:	ldr	r1, [r0, #0]
    35f4:	ldr	r1, [r1, #76]	; 0x4c
    35f6:	cmp	r1, r2
    35f8:	bne.n	369e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    35fa:	ldr	r0, [r0, #16]
    35fc:	cmp	r0, #0
    35fe:	beq.w	3806 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3602:	ldr	r1, [r0, #0]
    3604:	ldr	r1, [r1, #76]	; 0x4c
    3606:	cmp	r1, r2
    3608:	bne.n	369e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    360a:	ldr	r0, [r0, #16]
    360c:	cmp	r0, #0
    360e:	beq.w	3806 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3612:	ldr	r1, [r0, #0]
    3614:	ldr	r1, [r1, #76]	; 0x4c
    3616:	cmp	r1, r2
    3618:	bne.n	369e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    361a:	ldr	r0, [r0, #16]
    361c:	cmp	r0, #0
    361e:	beq.w	3806 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3622:	ldr	r1, [r0, #0]
    3624:	ldr	r1, [r1, #76]	; 0x4c
    3626:	cmp	r1, r2
    3628:	bne.n	369e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    362a:	ldr	r0, [r0, #16]
    362c:	cmp	r0, #0
    362e:	beq.w	3806 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3632:	ldr	r1, [r0, #0]
    3634:	ldr	r1, [r1, #76]	; 0x4c
    3636:	cmp	r1, r2
    3638:	bne.n	369e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    363a:	ldr	r0, [r0, #16]
    363c:	cmp	r0, #0
    363e:	beq.w	3806 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3642:	ldr	r1, [r0, #0]
    3644:	ldr	r1, [r1, #76]	; 0x4c
    3646:	cmp	r1, r2
    3648:	bne.n	369e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    364a:	ldr	r0, [r0, #16]
    364c:	cmp	r0, #0
    364e:	beq.w	3806 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3652:	ldr	r1, [r0, #0]
    3654:	ldr	r1, [r1, #76]	; 0x4c
    3656:	cmp	r1, r2
    3658:	bne.n	369e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3ce>
    365a:	ldr	r0, [r0, #16]
    365c:	cmp	r0, #0
    365e:	beq.w	3806 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x536>
    3662:	ldr	r3, [r0, #0]
    3664:	ldr	r3, [r3, #76]	; 0x4c
    3666:	blx	r3
    3668:	b.n	36a0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3d0>
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    366a:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    366c:	mov	r1, r6
    366e:	mov	r0, r4
    3670:	add	r2, sp, #16
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    3672:	str	r5, [sp, #20]
        r.scanned = false;
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    3674:	strb.w	r3, [sp, #29]
      record.child = sibling;
      WriteIndexRecord(i, record);
    3678:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    367c:	add.w	sp, sp, #564	; 0x234
    3680:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3684:	blx	r3
    3686:	b.n	35c6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2f6>
    3688:	.word	0x00000f31
    368c:	.word	0x00014bdc
    3690:	.word	0x0000052d
    3694:	.word	0x0000050d
    3698:	.word	0x00000539
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    369c:	mov	r0, r3
    369e:	blx	r1

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    36a0:	strb.w	r0, [sp, #300]	; 0x12c
    36a4:	ldr.w	r3, [r4, #224]	; 0xe0
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    36a8:	cmp	r0, #0
    36aa:	beq.w	380c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x53c>
    36ae:	movs	r0, #0
        r.scanned = false;
    36b0:	movs	r2, #0
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    36b2:	str	r0, [sp, #292]	; 0x124
        r.scanned = false;
    36b4:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    36b8:	cmp	r3, #0
    36ba:	beq.w	388e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36be:	ldr	r1, [r3, #0]
    36c0:	ldr	r2, [pc, #504]	; (38bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    36c2:	ldr	r1, [r1, #72]	; 0x48
    36c4:	cmp	r1, r2
    36c6:	bne.w	3886 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5b6>
    36ca:	ldr	r0, [r3, #16]
    36cc:	cmp	r0, #0
    36ce:	beq.w	388e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36d2:	ldr	r3, [r0, #0]
    36d4:	ldr	r3, [r3, #72]	; 0x48
    36d6:	cmp	r3, r2
    36d8:	bne.n	374c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36da:	ldr	r0, [r0, #16]
    36dc:	cmp	r0, #0
    36de:	beq.w	388e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36e2:	ldr	r3, [r0, #0]
    36e4:	ldr	r3, [r3, #72]	; 0x48
    36e6:	cmp	r3, r2
    36e8:	bne.n	374c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36ea:	ldr	r0, [r0, #16]
    36ec:	cmp	r0, #0
    36ee:	beq.w	388e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    36f2:	ldr	r3, [r0, #0]
    36f4:	ldr	r3, [r3, #72]	; 0x48
    36f6:	cmp	r3, r2
    36f8:	bne.n	374c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    36fa:	ldr	r0, [r0, #16]
    36fc:	cmp	r0, #0
    36fe:	beq.w	388e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3702:	ldr	r3, [r0, #0]
    3704:	ldr	r3, [r3, #72]	; 0x48
    3706:	cmp	r3, r2
    3708:	bne.n	374c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    370a:	ldr	r0, [r0, #16]
    370c:	cmp	r0, #0
    370e:	beq.w	388e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3712:	ldr	r3, [r0, #0]
    3714:	ldr	r3, [r3, #72]	; 0x48
    3716:	cmp	r3, r2
    3718:	bne.n	374c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    371a:	ldr	r0, [r0, #16]
    371c:	cmp	r0, #0
    371e:	beq.w	388e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3722:	ldr	r3, [r0, #0]
    3724:	ldr	r3, [r3, #72]	; 0x48
    3726:	cmp	r3, r2
    3728:	bne.n	374c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    372a:	ldr	r0, [r0, #16]
    372c:	cmp	r0, #0
    372e:	beq.w	388e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3732:	ldr	r3, [r0, #0]
    3734:	ldr	r3, [r3, #72]	; 0x48
    3736:	cmp	r3, r2
    3738:	bne.n	374c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x47c>
    373a:	ldr	r0, [r0, #16]
    373c:	cmp	r0, #0
    373e:	beq.w	388e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5be>
    3742:	ldr	r3, [r0, #0]
    3744:	ldr	r3, [r3, #72]	; 0x48
    3746:	blx	r3
    3748:	mov	r1, r0
    374a:	b.n	3750 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    374c:	blx	r3
    374e:	mov	r1, r0
        sd_getName(child_,r.name, MAX_FILENAME_LEN);
    3750:	mov.w	r2, #256	; 0x100
    3754:	add	r0, sp, #304	; 0x130
    3756:	bl	116a0 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    375a:	ldr.w	r5, [r4, #244]	; 0xf4
    375e:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    3760:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    3762:	str.w	r3, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    3766:	mov	r1, r5
    3768:	add	r2, sp, #288	; 0x120
    376a:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    376e:	ldr.w	r0, [r4, #224]	; 0xe0
    3772:	cmp	r0, #0
    3774:	beq.w	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3778:	ldr	r2, [r0, #0]
    377a:	ldr	r3, [pc, #324]	; (38c0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f0>)
    377c:	ldr	r2, [r2, #64]	; 0x40
    377e:	cmp	r2, r3
    3780:	bne.n	3802 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    3782:	ldr	r0, [r0, #16]
    3784:	cmp	r0, #0
    3786:	beq.w	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    378a:	ldr	r2, [r0, #0]
    378c:	ldr	r2, [r2, #64]	; 0x40
    378e:	cmp	r2, r3
    3790:	bne.n	3802 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    3792:	ldr	r0, [r0, #16]
    3794:	cmp	r0, #0
    3796:	beq.w	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    379a:	ldr	r2, [r0, #0]
    379c:	ldr	r2, [r2, #64]	; 0x40
    379e:	cmp	r2, r3
    37a0:	bne.n	3802 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    37a2:	ldr	r0, [r0, #16]
    37a4:	cmp	r0, #0
    37a6:	beq.w	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37aa:	ldr	r2, [r0, #0]
    37ac:	ldr	r2, [r2, #64]	; 0x40
    37ae:	cmp	r2, r3
    37b0:	bne.n	3802 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    37b2:	ldr	r0, [r0, #16]
    37b4:	cmp	r0, #0
    37b6:	beq.w	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37ba:	ldr	r2, [r0, #0]
    37bc:	ldr	r2, [r2, #64]	; 0x40
    37be:	cmp	r2, r3
    37c0:	bne.n	3802 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    37c2:	ldr	r0, [r0, #16]
    37c4:	cmp	r0, #0
    37c6:	beq.w	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37ca:	ldr	r2, [r0, #0]
    37cc:	ldr	r2, [r2, #64]	; 0x40
    37ce:	cmp	r2, r3
    37d0:	bne.n	3802 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    37d2:	ldr	r0, [r0, #16]
    37d4:	cmp	r0, #0
    37d6:	beq.w	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37da:	ldr	r2, [r0, #0]
    37dc:	ldr	r2, [r2, #64]	; 0x40
    37de:	cmp	r2, r3
    37e0:	bne.n	3802 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    37e2:	ldr	r0, [r0, #16]
    37e4:	cmp	r0, #0
    37e6:	beq.w	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37ea:	ldr	r2, [r0, #0]
    37ec:	ldr	r2, [r2, #64]	; 0x40
    37ee:	cmp	r2, r3
    37f0:	bne.n	3802 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x532>
    37f2:	ldr	r0, [r0, #16]
    37f4:	cmp	r0, #0
    37f6:	beq.w	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    37fa:	ldr	r3, [r0, #0]
    37fc:	ldr	r3, [r3, #64]	; 0x40
    37fe:	blx	r3
    3800:	b.n	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>
    3802:	blx	r2
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
      if (!sd_isOpen(file_)) return;
    
      int sibling = 0;
      while (true) 
    3804:	b.n	3370 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa0>

        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    3806:	movs	r2, #0
    3808:	strb.w	r2, [sp, #300]	; 0x12c
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    380c:	cmp	r3, #0
    380e:	beq.n	38a4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5d4>
    3810:	ldr	r1, [r3, #0]
    3812:	ldr	r2, [pc, #176]	; (38c4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f4>)
    3814:	ldr	r1, [r1, #60]	; 0x3c
    3816:	cmp	r1, r2
    3818:	bne.n	389a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ca>
    381a:	ldr	r0, [r3, #16]
    381c:	cbz	r0, 3872 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    381e:	ldr	r1, [r0, #0]
    3820:	ldr	r1, [r1, #60]	; 0x3c
    3822:	cmp	r1, r2
    3824:	bne.n	389c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3826:	ldr	r0, [r0, #16]
    3828:	cbz	r0, 3872 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    382a:	ldr	r1, [r0, #0]
    382c:	ldr	r1, [r1, #60]	; 0x3c
    382e:	cmp	r1, r2
    3830:	bne.n	389c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3832:	ldr	r0, [r0, #16]
    3834:	cbz	r0, 3872 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3836:	ldr	r1, [r0, #0]
    3838:	ldr	r1, [r1, #60]	; 0x3c
    383a:	cmp	r1, r2
    383c:	bne.n	389c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    383e:	ldr	r0, [r0, #16]
    3840:	cbz	r0, 3872 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3842:	ldr	r1, [r0, #0]
    3844:	ldr	r1, [r1, #60]	; 0x3c
    3846:	cmp	r1, r2
    3848:	bne.n	389c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    384a:	ldr	r0, [r0, #16]
    384c:	cbz	r0, 3872 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    384e:	ldr	r1, [r0, #0]
    3850:	ldr	r1, [r1, #60]	; 0x3c
    3852:	cmp	r1, r2
    3854:	bne.n	389c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3856:	ldr	r0, [r0, #16]
    3858:	cbz	r0, 3872 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    385a:	ldr	r1, [r0, #0]
    385c:	ldr	r1, [r1, #60]	; 0x3c
    385e:	cmp	r1, r2
    3860:	bne.n	389c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5cc>
    3862:	ldr	r0, [r0, #16]
    3864:	cbz	r0, 3872 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a2>
    3866:	ldr	r3, [r0, #0]
    3868:	ldr	r3, [r3, #60]	; 0x3c
    386a:	blx	r3
    386c:	ldr.w	r3, [r4, #224]	; 0xe0
    3870:	b.n	36b0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    3872:	movs	r2, #0
        r.scanned = false;
    3874:	strb.w	r2, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3878:	ldr	r1, [r3, #0]
        Record r;
        r.store = record.store;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    387a:	str	r2, [sp, #292]	; 0x124
    387c:	ldr	r1, [r1, #72]	; 0x48
    387e:	ldr	r2, [pc, #60]	; (38bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5ec>)
    3880:	cmp	r1, r2
    3882:	beq.w	36ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3fa>
    3886:	mov	r0, r3
    3888:	blx	r1
    388a:	mov	r1, r0
    388c:	b.n	3750 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
    388e:	ldr	r1, [pc, #56]	; (38c8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    3890:	b.n	3750 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3892:	movs	r2, #0
    3894:	add	r0, sp, #288	; 0x120
    3896:	blx	r3
    3898:	b.n	33f2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x122>
	}
	virtual uint64_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
    389a:	mov	r0, r3
    389c:	blx	r1
    389e:	ldr.w	r3, [r4, #224]	; 0xe0
    38a2:	b.n	36b0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x3e0>
    38a4:	str	r3, [sp, #292]	; 0x124
        r.scanned = false;
    38a6:	strb.w	r3, [sp, #301]	; 0x12d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    38aa:	ldr	r1, [pc, #28]	; (38c8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5f8>)
    38ac:	b.n	3750 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x480>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38ae:	mov	r0, r7
    38b0:	blx	r3
    38b2:	b.n	353a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x26a>
    38b4:	mov	r0, r7
    38b6:	blx	r3
    38b8:	b.n	348e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1be>
    38ba:	nop
    38bc:	.word	0x00000519
    38c0:	.word	0x00000501
    38c4:	.word	0x000004f1
    38c8:	.word	0x00014d98
    38cc:	ldr	r2, [r3, #16]
    38ce:	cmp	r2, #0
    38d0:	beq.w	3476 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    38d4:	ldr	r1, [r2, #0]
    38d6:	ldr	r1, [r1, #32]
    38d8:	cmp	r1, r0
    38da:	bne.w	3aa4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7d4>
    38de:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    38e2:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    38e6:	cmp.w	lr, #0
    38ea:	beq.n	399c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    38ec:	ldr.w	r1, [lr, #16]
    38f0:	subs	r1, #1
    38f2:	str.w	r1, [lr, #16]
    38f6:	cmp	r1, #0
    38f8:	bne.n	399c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    38fa:	ldr	r1, [r2, #16]
    38fc:	str	r1, [sp, #0]
    38fe:	cmp	r1, #0
    3900:	beq.n	399c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3902:	ldr	r1, [sp, #0]
    3904:	ldr	r1, [r1, #0]
    3906:	ldr	r1, [r1, #32]
    3908:	cmp	r1, r0
    390a:	bne.w	3abc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ec>
    390e:	ldr	r1, [sp, #0]
    3910:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3914:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3918:	cmp.w	lr, #0
    391c:	beq.n	398c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    391e:	ldr.w	r1, [lr, #16]
    3922:	subs	r1, #1
    3924:	str.w	r1, [lr, #16]
    3928:	cbnz	r1, 398c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    392a:	ldr	r1, [sp, #0]
    392c:	ldr.w	ip, [r1, #16]
    3930:	cmp.w	ip, #0
    3934:	beq.n	398c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    3936:	ldr.w	r1, [ip]
    393a:	ldr	r1, [r1, #32]
    393c:	cmp	r1, r0
    393e:	bne.w	3ad8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x808>
    3942:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3946:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    394a:	cbz	r0, 397c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    394c:	ldr	r1, [r0, #16]
    394e:	add.w	lr, r1, #4294967295
    3952:	str.w	lr, [r0, #16]
    3956:	cmp.w	lr, #0
    395a:	bne.n	397c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    395c:	ldr.w	r0, [ip, #16]
    3960:	cbz	r0, 397c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6ac>
    3962:	ldr.w	lr, [r0]
    3966:	str.w	ip, [sp, #12]
    396a:	str	r2, [sp, #8]
    396c:	str	r3, [sp, #4]
    396e:	ldr.w	r3, [lr, #32]
    3972:	blx	r3
    3974:	ldr.w	ip, [sp, #12]
    3978:	ldr	r2, [sp, #8]
    397a:	ldr	r3, [sp, #4]
    397c:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    397e:	mov	r0, ip
    3980:	movs	r1, #20
    3982:	str	r3, [sp, #4]
    3984:	bl	f95c <operator delete(void*, unsigned int)>
    3988:	ldr	r3, [sp, #4]
    398a:	ldr	r2, [sp, #8]
    398c:	ldr	r0, [sp, #0]
    398e:	str	r2, [sp, #8]
    3990:	movs	r1, #20
    3992:	str	r3, [sp, #4]
    3994:	bl	f95c <operator delete(void*, unsigned int)>
    3998:	ldr	r3, [sp, #4]
    399a:	ldr	r2, [sp, #8]
    399c:	str	r3, [sp, #0]
    399e:	mov	r0, r2
    39a0:	movs	r1, #20
    39a2:	bl	f95c <operator delete(void*, unsigned int)>
    39a6:	ldr	r3, [sp, #0]
    39a8:	b.n	3476 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39aa:	ldr	r2, [r3, #16]
    39ac:	cmp	r2, #0
    39ae:	beq.w	3522 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    39b2:	ldr	r1, [r2, #0]
    39b4:	ldr	r1, [r1, #32]
    39b6:	cmp	r1, r0
    39b8:	bne.n	3a9a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7ca>
    39ba:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    39be:	str.w	r9, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39c2:	cmp.w	lr, #0
    39c6:	beq.n	3a74 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    39c8:	ldr.w	r1, [lr, #16]
    39cc:	subs	r1, #1
    39ce:	str.w	r1, [lr, #16]
    39d2:	cmp	r1, #0
    39d4:	bne.n	3a74 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    39d6:	ldr	r1, [r2, #16]
    39d8:	str	r1, [sp, #0]
    39da:	cmp	r1, #0
    39dc:	beq.n	3a74 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    39de:	ldr	r1, [sp, #0]
    39e0:	ldr	r1, [r1, #0]
    39e2:	ldr	r1, [r1, #32]
    39e4:	cmp	r1, r0
    39e6:	bne.n	3aae <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7de>
    39e8:	ldr	r1, [sp, #0]
    39ea:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    39ee:	str.w	r9, [r1]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    39f2:	cmp.w	lr, #0
    39f6:	beq.n	3a64 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    39f8:	ldr.w	r1, [lr, #16]
    39fc:	subs	r1, #1
    39fe:	str.w	r1, [lr, #16]
    3a02:	cbnz	r1, 3a64 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    3a04:	ldr	r1, [sp, #0]
    3a06:	ldr.w	ip, [r1, #16]
    3a0a:	cmp.w	ip, #0
    3a0e:	beq.n	3a64 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    3a10:	ldr.w	r1, [ip]
    3a14:	ldr	r1, [r1, #32]
    3a16:	cmp	r1, r0
    3a18:	bne.n	3aca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7fa>
    3a1a:	ldr.w	r0, [ip, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3a1e:	str.w	r9, [ip]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3a22:	cbz	r0, 3a54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    3a24:	ldr	r1, [r0, #16]
    3a26:	add.w	lr, r1, #4294967295
    3a2a:	str.w	lr, [r0, #16]
    3a2e:	cmp.w	lr, #0
    3a32:	bne.n	3a54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    3a34:	ldr.w	r0, [ip, #16]
    3a38:	cbz	r0, 3a54 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x784>
    3a3a:	ldr.w	lr, [r0]
    3a3e:	str.w	ip, [sp, #12]
    3a42:	str	r2, [sp, #8]
    3a44:	str	r3, [sp, #4]
    3a46:	ldr.w	r3, [lr, #32]
    3a4a:	blx	r3
    3a4c:	ldr.w	ip, [sp, #12]
    3a50:	ldr	r2, [sp, #8]
    3a52:	ldr	r3, [sp, #4]
    3a54:	str	r2, [sp, #8]
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3a56:	mov	r0, ip
    3a58:	movs	r1, #20
    3a5a:	str	r3, [sp, #4]
    3a5c:	bl	f95c <operator delete(void*, unsigned int)>
    3a60:	ldr	r3, [sp, #4]
    3a62:	ldr	r2, [sp, #8]
    3a64:	ldr	r0, [sp, #0]
    3a66:	str	r2, [sp, #8]
    3a68:	movs	r1, #20
    3a6a:	str	r3, [sp, #4]
    3a6c:	bl	f95c <operator delete(void*, unsigned int)>
    3a70:	ldr	r3, [sp, #4]
    3a72:	ldr	r2, [sp, #8]
    3a74:	str	r3, [sp, #0]
    3a76:	mov	r0, r2
    3a78:	movs	r1, #20
    3a7a:	bl	f95c <operator delete(void*, unsigned int)>
    3a7e:	ldr	r3, [sp, #0]
    3a80:	b.n	3522 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3a82:	mov	r0, sl
    3a84:	blx	r3
    3a86:	b.n	3486 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b6>
    3a88:	mov	r0, sl
    3a8a:	blx	r3
    3a8c:	b.n	3532 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x262>
    3a8e:	mov	r0, r3
    3a90:	blx	r2
    3a92:	b.n	352a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x25a>
    3a94:	mov	r0, r3
    3a96:	blx	r2
    3a98:	b.n	347e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1ae>
    3a9a:	str	r3, [sp, #0]
    3a9c:	mov	r0, r2
    3a9e:	blx	r1
    3aa0:	ldr	r3, [sp, #0]
    3aa2:	b.n	3522 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x252>
    3aa4:	str	r3, [sp, #0]
    3aa6:	mov	r0, r2
    3aa8:	blx	r1
    3aaa:	ldr	r3, [sp, #0]
    3aac:	b.n	3476 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a6>
    3aae:	str	r2, [sp, #8]
    3ab0:	str	r3, [sp, #4]
    3ab2:	ldr	r0, [sp, #0]
    3ab4:	blx	r1
    3ab6:	ldr	r2, [sp, #8]
    3ab8:	ldr	r3, [sp, #4]
    3aba:	b.n	3a74 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7a4>
    3abc:	str	r2, [sp, #8]
    3abe:	str	r3, [sp, #4]
    3ac0:	ldr	r0, [sp, #0]
    3ac2:	blx	r1
    3ac4:	ldr	r2, [sp, #8]
    3ac6:	ldr	r3, [sp, #4]
    3ac8:	b.n	399c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6cc>
    3aca:	str	r2, [sp, #8]
    3acc:	str	r3, [sp, #4]
    3ace:	mov	r0, ip
    3ad0:	blx	r1
    3ad2:	ldr	r2, [sp, #8]
    3ad4:	ldr	r3, [sp, #4]
    3ad6:	b.n	3a64 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x794>
    3ad8:	str	r2, [sp, #8]
    3ada:	str	r3, [sp, #4]
    3adc:	mov	r0, ip
    3ade:	blx	r1
    3ae0:	ldr	r2, [sp, #8]
    3ae2:	ldr	r3, [sp, #4]
    3ae4:	b.n	398c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x6bc>
    3ae6:	nop

00003ae8 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>:

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3ae8:	ldrb.w	r3, [r0, #248]	; 0xf8
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;
    3aec:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    3aee:	push	{r4, r5, r6, lr}
    3af0:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    3af2:	strb.w	r2, [r0, #249]	; 0xf9
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
    3af6:	mov	r6, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3af8:	cbz	r3, 3b18 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x30>
  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    3afa:	ldr.w	r3, [r5, #244]	; 0xf4
    3afe:	cbz	r3, 3b16 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x2e>
    3b00:	movs	r4, #0
    3b02:	mov	r2, r4
    3b04:	mov	r1, r6
    3b06:	mov	r0, r5
    3b08:	bl	32d0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    3b0c:	ldr.w	r3, [r5, #244]	; 0xf4
    3b10:	adds	r4, #1
    3b12:	cmp	r3, r4
    3b14:	bhi.n	3b02 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x1a>
    3b16:	pop	{r4, r5, r6, pc}
    3b18:	bl	2660 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    3b1c:	b.n	3afa <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]+0x12>
    3b1e:	nop

00003b20 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    3b20:	push	{r4, r5, lr}
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    3b22:	cmp.w	r2, #4294967295
    3b26:	ite	ne
    3b28:	movne	r5, r2
    3b2a:	moveq	r5, r1

    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    3b2c:	mov	r4, r0
    3b2e:	sub	sp, #276	; 0x114
  { 
    GenerateIndex(store);
    if (parent) 
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization

      ScanDir(store, parent);
    3b30:	mov	r2, r5
    3b32:	bl	32d0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    3b36:	movs	r3, #1
    3b38:	strb.w	r3, [r4, #256]	; 0x100
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    3b3c:	mov	r2, r5
    3b3e:	mov	r1, r4
    3b40:	mov	r0, sp
    3b42:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    3b46:	ldr	r3, [sp, #4]
    3b48:	str.w	r3, [r4, #252]	; 0xfc
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    3b4c:	add	sp, #276	; 0x114
    3b4e:	pop	{r4, r5, pc}

00003b50 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    3b50:	push	{r4, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3b52:	ldrb.w	r3, [r0, #248]	; 0xf8
    GenerateIndex(store);
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    3b56:	sub	sp, #8
    3b58:	mov	r4, r0

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    3b5a:	cbz	r3, 3b80 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    GenerateIndex(store);
    if (parent) 
    3b5c:	cbz	r2, 3b6a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1a>
    3b5e:	mov	r0, r4
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    3b60:	add	sp, #8
    3b62:	ldmia.w	sp!, {r4, lr}
    3b66:	b.w	3b20 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.8] [clone .constprop.13]>
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    3b6a:	ldrb.w	r3, [r4, #249]	; 0xf9
    3b6e:	cbz	r3, 3b8e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3e>
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    3b70:	movs	r2, #0
      next_ = 1;
    3b72:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
    3b74:	strb.w	r2, [r4, #256]	; 0x100
      next_ = 1;
    3b78:	str.w	r3, [r4, #252]	; 0xfc
    }
  }
    3b7c:	add	sp, #8
    3b7e:	pop	{r4, pc}
    3b80:	stmia.w	sp, {r1, r2}
    3b84:	bl	2660 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.6] [clone .constprop.14]>
    3b88:	ldmia.w	sp, {r1, r2}
    3b8c:	b.n	3b5c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xc>
    3b8e:	mov	r0, r4
    3b90:	bl	3ae8 <MTPStorage_SD::ScanAll(unsigned long) [clone .part.7] [clone .constprop.12]>
    3b94:	b.n	3b70 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x20>
    3b96:	nop

00003b98 <MTPStorage_SD::removeFile(unsigned long, char*)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

void MTPStorage_SD::removeFile(uint32_t store, char *file)
{ 
    3b98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b9c:	add.w	r9, r0, r1, lsl #2
    3ba0:	sub	sp, #340	; 0x154
    3ba2:	str	r1, [sp, #12]
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    3ba4:	ldr.w	r1, [r9, #88]	; 0x58
    3ba8:	str	r0, [sp, #8]
    3baa:	ldr	r3, [r1, #0]
    3bac:	str	r2, [sp, #4]
    3bae:	ldr	r4, [r3, #0]
    3bb0:	add	r0, sp, #40	; 0x28
    3bb2:	movs	r3, #0
    3bb4:	blx	r4
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3bb6:	ldr	r0, [sp, #56]	; 0x38
    3bb8:	cmp	r0, #0
    3bba:	beq.w	3f64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bbe:	ldr	r3, [r0, #0]
    3bc0:	ldr.w	sl, [pc, #868]	; 3f28 <MTPStorage_SD::removeFile(unsigned long, char*)+0x390>
    3bc4:	ldr	r3, [r3, #76]	; 0x4c
    3bc6:	cmp	r3, sl
    3bc8:	bne.w	40c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bcc:	ldr	r0, [r0, #16]
    3bce:	cmp	r0, #0
    3bd0:	beq.w	3f64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bd4:	ldr	r3, [r0, #0]
    3bd6:	ldr	r3, [r3, #76]	; 0x4c
    3bd8:	cmp	r3, sl
    3bda:	bne.w	40c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bde:	ldr	r0, [r0, #16]
    3be0:	cmp	r0, #0
    3be2:	beq.w	3f64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3be6:	ldr	r3, [r0, #0]
    3be8:	ldr	r3, [r3, #76]	; 0x4c
    3bea:	cmp	r3, sl
    3bec:	bne.w	40c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3bf0:	ldr	r0, [r0, #16]
    3bf2:	cmp	r0, #0
    3bf4:	beq.w	3f64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3bf8:	ldr	r3, [r0, #0]
    3bfa:	ldr	r3, [r3, #76]	; 0x4c
    3bfc:	cmp	r3, sl
    3bfe:	bne.w	40c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3c02:	ldr	r0, [r0, #16]
    3c04:	cmp	r0, #0
    3c06:	beq.w	3f64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3c0a:	ldr	r3, [r0, #0]
    3c0c:	ldr	r3, [r3, #76]	; 0x4c
    3c0e:	cmp	r3, sl
    3c10:	bne.w	40c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3c14:	ldr	r0, [r0, #16]
    3c16:	cmp	r0, #0
    3c18:	beq.w	3f64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3c1c:	ldr	r3, [r0, #0]
    3c1e:	ldr	r3, [r3, #76]	; 0x4c
    3c20:	cmp	r3, sl
    3c22:	bne.w	40c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3c26:	ldr	r0, [r0, #16]
    3c28:	cmp	r0, #0
    3c2a:	beq.w	3f64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3c2e:	ldr	r3, [r0, #0]
    3c30:	ldr	r3, [r3, #76]	; 0x4c
    3c32:	cmp	r3, sl
    3c34:	bne.w	40c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3c38:	ldr	r0, [r0, #16]
    3c3a:	cmp	r0, #0
    3c3c:	beq.w	3f64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3c40:	ldr	r3, [r0, #0]
    3c42:	ldr	r3, [r3, #76]	; 0x4c
    3c44:	cmp	r3, sl
    3c46:	bne.w	40c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x530>
    3c4a:	ldr	r0, [r0, #16]
    3c4c:	cmp	r0, #0
    3c4e:	beq.w	3f64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3c52:	ldr	r3, [r0, #0]
    3c54:	ldr	r3, [r3, #76]	; 0x4c
    3c56:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
    3c58:	cmp	r0, #0
    3c5a:	beq.w	3f64 <MTPStorage_SD::removeFile(unsigned long, char*)+0x3cc>
    3c5e:	ldr.w	fp, [pc, #700]	; 3f1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
    3c62:	ldr.w	r8, [pc, #712]	; 3f2c <MTPStorage_SD::removeFile(unsigned long, char*)+0x394>
    3c66:	movs	r4, #0
    3c68:	mov	r7, fp
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3c6a:	ldr	r1, [sp, #56]	; 0x38
    3c6c:	cmp	r1, #0
    3c6e:	beq.w	3f4e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c72:	ldr	r3, [r1, #0]
    3c74:	ldr	r2, [pc, #668]	; (3f14 <MTPStorage_SD::removeFile(unsigned long, char*)+0x37c>)
    3c76:	ldr	r3, [r3, #80]	; 0x50
    3c78:	cmp	r3, r2
    3c7a:	bne.w	40cc <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c7e:	ldr	r1, [r1, #16]
    3c80:	cmp	r1, #0
    3c82:	beq.w	3f4e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c86:	ldr	r3, [r1, #0]
    3c88:	ldr	r3, [r3, #80]	; 0x50
    3c8a:	cmp	r3, r2
    3c8c:	bne.w	40cc <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3c90:	ldr	r1, [r1, #16]
    3c92:	cmp	r1, #0
    3c94:	beq.w	3f4e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3c98:	ldr	r3, [r1, #0]
    3c9a:	ldr	r3, [r3, #80]	; 0x50
    3c9c:	cmp	r3, r2
    3c9e:	bne.w	40cc <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3ca2:	ldr	r1, [r1, #16]
    3ca4:	cmp	r1, #0
    3ca6:	beq.w	3f4e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3caa:	ldr	r3, [r1, #0]
    3cac:	ldr	r3, [r3, #80]	; 0x50
    3cae:	cmp	r3, r2
    3cb0:	bne.w	40cc <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3cb4:	ldr	r1, [r1, #16]
    3cb6:	cmp	r1, #0
    3cb8:	beq.w	3f4e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3cbc:	ldr	r3, [r1, #0]
    3cbe:	ldr	r3, [r3, #80]	; 0x50
    3cc0:	cmp	r3, r2
    3cc2:	bne.w	40cc <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3cc6:	ldr	r1, [r1, #16]
    3cc8:	cmp	r1, #0
    3cca:	beq.w	3f4e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3cce:	ldr	r3, [r1, #0]
    3cd0:	ldr	r3, [r3, #80]	; 0x50
    3cd2:	cmp	r3, r2
    3cd4:	bne.w	40cc <MTPStorage_SD::removeFile(unsigned long, char*)+0x534>
    3cd8:	ldr	r1, [r1, #16]
    3cda:	cmp	r1, #0
    3cdc:	beq.w	3f4e <MTPStorage_SD::removeFile(unsigned long, char*)+0x3b6>
    3ce0:	ldr	r3, [r1, #0]
    3ce2:	movs	r2, #0
    3ce4:	ldr	r3, [r3, #80]	; 0x50
    3ce6:	add	r0, sp, #60	; 0x3c
    3ce8:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3cea:	cbz	r4, 3d08 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3cec:	ldr	r3, [r4, #16]
    3cee:	subs	r3, #1
    3cf0:	str	r3, [r4, #16]
    3cf2:	cbnz	r3, 3d08 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    3cf4:	ldr	r3, [r4, #0]
    3cf6:	ldr	r2, [pc, #544]	; (3f18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3cf8:	ldr	r3, [r3, #32]
    3cfa:	cmp	r3, r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3cfc:	mov	r0, r4
    3cfe:	bne.w	42bc <MTPStorage_SD::removeFile(unsigned long, char*)+0x724>
    3d02:	movs	r1, #20
    3d04:	bl	f95c <operator delete(void*, unsigned int)>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    3d08:	ldr	r4, [sp, #76]	; 0x4c
		if (f) f->refcount++;
    3d0a:	cmp	r4, #0
    3d0c:	beq.w	4288 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
    3d10:	ldr	r3, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3d12:	ldr	r2, [r4, #0]
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
		if (f) f->refcount++;
    3d14:	adds	r0, r3, #1
    3d16:	str	r0, [r4, #16]
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    3d18:	ldr	r2, [r2, #68]	; 0x44
    3d1a:	cmp	r2, r8
    3d1c:	bne.w	4274 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6dc>
    3d20:	cmp	r0, #0
    3d22:	beq.w	4254 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d26:	ldr.w	r3, [r3, #1]
    3d2a:	ldr	r3, [r3, #68]	; 0x44
    3d2c:	cmp	r3, r8
    3d2e:	bne.w	426c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3d32:	ldr	r0, [r0, #16]
    3d34:	cmp	r0, #0
    3d36:	beq.w	4254 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d3a:	ldr	r3, [r0, #0]
    3d3c:	ldr	r3, [r3, #68]	; 0x44
    3d3e:	cmp	r3, r8
    3d40:	bne.w	426c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3d44:	ldr	r0, [r0, #16]
    3d46:	cmp	r0, #0
    3d48:	beq.w	4254 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d4c:	ldr	r3, [r0, #0]
    3d4e:	ldr	r3, [r3, #68]	; 0x44
    3d50:	cmp	r3, r8
    3d52:	bne.w	426c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3d56:	ldr	r0, [r0, #16]
    3d58:	cmp	r0, #0
    3d5a:	beq.w	4254 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d5e:	ldr	r3, [r0, #0]
    3d60:	ldr	r3, [r3, #68]	; 0x44
    3d62:	cmp	r3, r8
    3d64:	bne.w	426c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d4>
    3d68:	ldr	r0, [r0, #16]
    3d6a:	cmp	r0, #0
    3d6c:	beq.w	4254 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6bc>
    3d70:	ldr	r3, [r0, #0]
    3d72:	ldr	r3, [r3, #68]	; 0x44
    3d74:	blx	r3
    3d76:	ldr	r2, [sp, #76]	; 0x4c
    3d78:	mov	r6, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3d7a:	str	r7, [sp, #60]	; 0x3c
    3d7c:	ldr	r1, [pc, #412]	; (3f1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3d7e:	cmp	r2, #0
    3d80:	beq.n	3e18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3d82:	ldr	r3, [r2, #16]
    3d84:	subs	r3, #1
    3d86:	str	r3, [r2, #16]
    3d88:	cmp	r3, #0
    3d8a:	bne.n	3e18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3d8c:	ldr	r5, [sp, #76]	; 0x4c
    3d8e:	cmp	r5, #0
    3d90:	beq.n	3e18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x280>
    3d92:	ldr	r3, [r5, #0]
    3d94:	ldr	r2, [pc, #384]	; (3f18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3d96:	ldr	r3, [r3, #32]
    3d98:	cmp	r3, r2
    3d9a:	bne.w	427e <MTPStorage_SD::removeFile(unsigned long, char*)+0x6e6>
    3d9e:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3da0:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3da2:	cmp	r2, #0
    3da4:	beq.n	3e10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3da6:	ldr	r3, [r2, #16]
    3da8:	subs	r3, #1
    3daa:	str	r3, [r2, #16]
    3dac:	cbnz	r3, 3e10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3dae:	ldr.w	fp, [r5, #16]
    3db2:	cmp.w	fp, #0
    3db6:	beq.n	3e10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    3db8:	ldr.w	r3, [fp]
    3dbc:	ldr	r2, [pc, #344]	; (3f18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3dbe:	ldr	r3, [r3, #32]
    3dc0:	cmp	r3, r2
    3dc2:	bne.w	42c0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x728>
    3dc6:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3dca:	str.w	r1, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3dce:	cbz	r2, 3e08 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3dd0:	ldr	r3, [r2, #16]
    3dd2:	subs	r3, #1
    3dd4:	str	r3, [r2, #16]
    3dd6:	cbnz	r3, 3e08 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3dd8:	ldr.w	r3, [fp, #16]
    3ddc:	cbz	r3, 3e08 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    3dde:	ldr	r2, [r3, #0]
    3de0:	ldr	r1, [pc, #308]	; (3f18 <MTPStorage_SD::removeFile(unsigned long, char*)+0x380>)
    3de2:	ldr	r2, [r2, #32]
    3de4:	cmp	r2, r1
    3de6:	bne.w	42c6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x72e>
    3dea:	ldr	r1, [r3, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3dec:	str	r7, [r3, #0]
    3dee:	ldr.w	ip, [pc, #300]	; 3f1c <MTPStorage_SD::removeFile(unsigned long, char*)+0x384>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3df2:	cbz	r1, 3e00 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    3df4:	ldr	r2, [r1, #16]
    3df6:	subs	r2, #1
    3df8:	str	r2, [r1, #16]
    3dfa:	cmp	r2, #0
    3dfc:	beq.w	40e0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x548>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    3e00:	mov	r0, r3
    3e02:	movs	r1, #20
    3e04:	bl	f95c <operator delete(void*, unsigned int)>
    3e08:	mov	r0, fp
    3e0a:	movs	r1, #20
    3e0c:	bl	f95c <operator delete(void*, unsigned int)>
    3e10:	mov	r0, r5
    3e12:	movs	r1, #20
    3e14:	bl	f95c <operator delete(void*, unsigned int)>
  {
    File f2;
    while(f2=f1.openNextFile())
    3e18:	cmp	r6, #0
    3e1a:	beq.w	4288 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6f0>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    3e1e:	cmp	r4, #0
    3e20:	beq.w	4224 <MTPStorage_SD::removeFile(unsigned long, char*)+0x68c>
    3e24:	ldr	r2, [r4, #0]
    3e26:	ldr	r3, [pc, #248]	; (3f20 <MTPStorage_SD::removeFile(unsigned long, char*)+0x388>)
    3e28:	ldr	r2, [r2, #72]	; 0x48
    3e2a:	cmp	r2, r3
    3e2c:	bne.w	4260 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c8>
    3e30:	ldr	r0, [r4, #16]
    3e32:	cmp	r0, #0
    3e34:	beq.w	4268 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e38:	ldr	r2, [r0, #0]
    3e3a:	ldr	r2, [r2, #72]	; 0x48
    3e3c:	cmp	r2, r3
    3e3e:	bne.w	4262 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e42:	ldr	r0, [r0, #16]
    3e44:	cmp	r0, #0
    3e46:	beq.w	4268 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e4a:	ldr	r2, [r0, #0]
    3e4c:	ldr	r2, [r2, #72]	; 0x48
    3e4e:	cmp	r2, r3
    3e50:	bne.w	4262 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e54:	ldr	r0, [r0, #16]
    3e56:	cmp	r0, #0
    3e58:	beq.w	4268 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e5c:	ldr	r2, [r0, #0]
    3e5e:	ldr	r2, [r2, #72]	; 0x48
    3e60:	cmp	r2, r3
    3e62:	bne.w	4262 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e66:	ldr	r0, [r0, #16]
    3e68:	cmp	r0, #0
    3e6a:	beq.w	4268 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e6e:	ldr	r2, [r0, #0]
    3e70:	ldr	r2, [r2, #72]	; 0x48
    3e72:	cmp	r2, r3
    3e74:	bne.w	4262 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e78:	ldr	r0, [r0, #16]
    3e7a:	cmp	r0, #0
    3e7c:	beq.w	4268 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e80:	ldr	r2, [r0, #0]
    3e82:	ldr	r2, [r2, #72]	; 0x48
    3e84:	cmp	r2, r3
    3e86:	bne.w	4262 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6ca>
    3e8a:	ldr	r0, [r0, #16]
    3e8c:	cmp	r0, #0
    3e8e:	beq.w	4268 <MTPStorage_SD::removeFile(unsigned long, char*)+0x6d0>
    3e92:	ldr	r3, [r0, #0]
    3e94:	ldr	r3, [r3, #72]	; 0x48
    3e96:	blx	r3
    3e98:	mov	r3, r0
    { sprintf(tname,"%s/%s",file,f2.name());
    3e9a:	add	r5, sp, #80	; 0x50
    3e9c:	ldr	r1, [pc, #132]	; (3f24 <MTPStorage_SD::removeFile(unsigned long, char*)+0x38c>)
    3e9e:	ldr	r2, [sp, #4]
    3ea0:	mov	r0, r5
    3ea2:	bl	11544 <sprintf>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    3ea6:	ldr	r3, [r4, #0]
    3ea8:	ldr	r3, [r3, #76]	; 0x4c
    3eaa:	cmp	r3, sl
    3eac:	bne.w	425a <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c2>
    3eb0:	ldr	r0, [r4, #16]
    3eb2:	cmp	r0, #0
    3eb4:	beq.w	4232 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3eb8:	ldr	r3, [r0, #0]
    3eba:	ldr	r3, [r3, #76]	; 0x4c
    3ebc:	cmp	r3, sl
    3ebe:	bne.w	425c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3ec2:	ldr	r0, [r0, #16]
    3ec4:	cmp	r0, #0
    3ec6:	beq.w	4232 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3eca:	ldr	r3, [r0, #0]
    3ecc:	ldr	r3, [r3, #76]	; 0x4c
    3ece:	cmp	r3, sl
    3ed0:	bne.w	425c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3ed4:	ldr	r0, [r0, #16]
    3ed6:	cmp	r0, #0
    3ed8:	beq.w	4232 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3edc:	ldr	r3, [r0, #0]
    3ede:	ldr	r3, [r3, #76]	; 0x4c
    3ee0:	cmp	r3, sl
    3ee2:	bne.w	425c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3ee6:	ldr	r0, [r0, #16]
    3ee8:	cmp	r0, #0
    3eea:	beq.w	4232 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3eee:	ldr	r3, [r0, #0]
    3ef0:	ldr	r3, [r3, #76]	; 0x4c
    3ef2:	cmp	r3, sl
    3ef4:	bne.w	425c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3ef8:	ldr	r0, [r0, #16]
    3efa:	cmp	r0, #0
    3efc:	beq.w	4232 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3f00:	ldr	r3, [r0, #0]
    3f02:	ldr	r3, [r3, #76]	; 0x4c
    3f04:	cmp	r3, sl
    3f06:	bne.w	425c <MTPStorage_SD::removeFile(unsigned long, char*)+0x6c4>
    3f0a:	ldr	r0, [r0, #16]
    3f0c:	cmp	r0, #0
    3f0e:	beq.w	4232 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3f12:	b.n	3f30 <MTPStorage_SD::removeFile(unsigned long, char*)+0x398>
    3f14:	.word	0x00000539
    3f18:	.word	0x00000f31
    3f1c:	.word	0x00014bdc
    3f20:	.word	0x00000519
    3f24:	.word	0x00014ec8
    3f28:	.word	0x0000052d
    3f2c:	.word	0x0000050d
    3f30:	ldr	r3, [r0, #0]
    3f32:	ldr	r3, [r3, #76]	; 0x4c
    3f34:	blx	r3
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    3f36:	cmp	r0, #0
    3f38:	beq.w	4232 <MTPStorage_SD::removeFile(unsigned long, char*)+0x69a>
    3f3c:	ldr	r1, [sp, #12]
    3f3e:	ldr	r0, [sp, #8]
    3f40:	mov	r2, r5
    3f42:	bl	3b98 <MTPStorage_SD::removeFile(unsigned long, char*)>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    3f46:	ldr	r1, [sp, #56]	; 0x38
    3f48:	cmp	r1, #0
    3f4a:	bne.w	3c72 <MTPStorage_SD::removeFile(unsigned long, char*)+0xda>
    3f4e:	movs	r3, #0
    3f50:	mov.w	r2, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    3f54:	str	r7, [sp, #60]	; 0x3c
    3f56:	strb.w	r3, [sp, #64]	; 0x40
    3f5a:	strb.w	r3, [sp, #72]	; 0x48
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    3f5e:	str	r3, [sp, #76]	; 0x4c
    3f60:	str	r2, [sp, #68]	; 0x44
    3f62:	b.n	3cea <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3f64:	ldr	r4, [sp, #4]
    3f66:	ldr.w	fp, [pc, #368]	; 40d8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>
    3f6a:	mov	r0, r4
    3f6c:	bl	11700 <strlen>
    3f70:	mov	r1, r0
    3f72:	mov	r0, r4
    3f74:	bl	de04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3f78:	ldr	r0, [pc, #344]	; (40d4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x53c>)
    3f7a:	bl	f7b8 <Print::println()>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    3f7e:	ldr.w	r0, [r9, #88]	; 0x58
    3f82:	ldr	r3, [r0, #0]
    3f84:	mov	r1, r4
    3f86:	ldr	r3, [r3, #16]
    3f88:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f8a:	ldr	r2, [sp, #56]	; 0x38
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3f8c:	str.w	fp, [sp, #40]	; 0x28
    3f90:	ldr	r1, [pc, #324]	; (40d8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3f92:	cmp	r2, #0
    3f94:	beq.w	40c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3f98:	ldr	r3, [r2, #16]
    3f9a:	subs	r3, #1
    3f9c:	str	r3, [r2, #16]
    3f9e:	cmp	r3, #0
    3fa0:	bne.w	40c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3fa4:	ldr	r4, [sp, #56]	; 0x38
    3fa6:	cmp	r4, #0
    3fa8:	beq.w	40c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    3fac:	ldr	r3, [r4, #0]
    3fae:	ldr	r0, [pc, #300]	; (40dc <MTPStorage_SD::removeFile(unsigned long, char*)+0x544>)
    3fb0:	ldr	r3, [r3, #32]
    3fb2:	cmp	r3, r0
    3fb4:	bne.w	42cc <MTPStorage_SD::removeFile(unsigned long, char*)+0x734>
    3fb8:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fba:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fbc:	cmp	r2, #0
    3fbe:	beq.n	40ba <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3fc0:	ldr	r3, [r2, #16]
    3fc2:	subs	r3, #1
    3fc4:	str	r3, [r2, #16]
    3fc6:	cmp	r3, #0
    3fc8:	bne.n	40ba <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3fca:	ldr	r5, [r4, #16]
    3fcc:	cmp	r5, #0
    3fce:	beq.n	40ba <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    3fd0:	ldr	r3, [r5, #0]
    3fd2:	ldr	r3, [r3, #32]
    3fd4:	cmp	r3, r0
    3fd6:	bne.w	42e0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x748>
    3fda:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3fdc:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    3fde:	cmp	r2, #0
    3fe0:	beq.n	40b2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3fe2:	ldr	r3, [r2, #16]
    3fe4:	subs	r3, #1
    3fe6:	str	r3, [r2, #16]
    3fe8:	cmp	r3, #0
    3fea:	bne.n	40b2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3fec:	ldr	r6, [r5, #16]
    3fee:	cmp	r6, #0
    3ff0:	beq.n	40b2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    3ff2:	ldr	r3, [r6, #0]
    3ff4:	ldr	r3, [r3, #32]
    3ff6:	cmp	r3, r0
    3ff8:	bne.w	42f4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x75c>
    3ffc:	ldr	r2, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    3ffe:	str.w	fp, [r6]
    4002:	ldr	r1, [pc, #212]	; (40d8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4004:	cmp	r2, #0
    4006:	beq.n	40aa <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    4008:	ldr	r3, [r2, #16]
    400a:	subs	r3, #1
    400c:	str	r3, [r2, #16]
    400e:	cmp	r3, #0
    4010:	bne.n	40aa <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    4012:	ldr	r7, [r6, #16]
    4014:	cmp	r7, #0
    4016:	beq.n	40aa <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    4018:	ldr	r3, [r7, #0]
    401a:	ldr	r3, [r3, #32]
    401c:	cmp	r3, r0
    401e:	bne.w	42fa <MTPStorage_SD::removeFile(unsigned long, char*)+0x762>
    4022:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4024:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4026:	cmp	r2, #0
    4028:	beq.n	40a2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    402a:	ldr	r3, [r2, #16]
    402c:	subs	r3, #1
    402e:	str	r3, [r2, #16]
    4030:	cmp	r3, #0
    4032:	bne.n	40a2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    4034:	ldr.w	r8, [r7, #16]
    4038:	cmp.w	r8, #0
    403c:	beq.n	40a2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    403e:	ldr.w	r3, [r8]
    4042:	ldr	r3, [r3, #32]
    4044:	cmp	r3, r0
    4046:	bne.w	431c <MTPStorage_SD::removeFile(unsigned long, char*)+0x784>
    404a:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    404e:	str.w	fp, [r8]
    4052:	ldr	r1, [pc, #132]	; (40d8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x540>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4054:	cbz	r2, 409a <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    4056:	ldr	r3, [r2, #16]
    4058:	subs	r3, #1
    405a:	str	r3, [r2, #16]
    405c:	cbnz	r3, 409a <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    405e:	ldr.w	r9, [r8, #16]
    4062:	cmp.w	r9, #0
    4066:	beq.n	409a <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    4068:	ldr.w	r3, [r9]
    406c:	ldr	r3, [r3, #32]
    406e:	cmp	r3, r0
    4070:	bne.w	4332 <MTPStorage_SD::removeFile(unsigned long, char*)+0x79a>
    4074:	ldr.w	r2, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4078:	str.w	r1, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    407c:	cbz	r2, 4092 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    407e:	ldr	r3, [r2, #16]
    4080:	subs	r3, #1
    4082:	str	r3, [r2, #16]
    4084:	cbnz	r3, 4092 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    4086:	ldr.w	r0, [r9, #16]
    408a:	cbz	r0, 4092 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4fa>
    408c:	ldr	r3, [r0, #0]
    408e:	ldr	r3, [r3, #32]
    4090:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4092:	mov	r0, r9
    4094:	movs	r1, #20
    4096:	bl	f95c <operator delete(void*, unsigned int)>
    409a:	mov	r0, r8
    409c:	movs	r1, #20
    409e:	bl	f95c <operator delete(void*, unsigned int)>
    40a2:	mov	r0, r7
    40a4:	movs	r1, #20
    40a6:	bl	f95c <operator delete(void*, unsigned int)>
    40aa:	mov	r0, r6
    40ac:	movs	r1, #20
    40ae:	bl	f95c <operator delete(void*, unsigned int)>
    40b2:	mov	r0, r5
    40b4:	movs	r1, #20
    40b6:	bl	f95c <operator delete(void*, unsigned int)>
    40ba:	mov	r0, r4
    40bc:	movs	r1, #20
    40be:	bl	f95c <operator delete(void*, unsigned int)>
  }
  else
  {
    sd_remove(store,file);
  }
}
    40c2:	add	sp, #340	; 0x154
    40c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    40c8:	blx	r3
    40ca:	b.n	3c58 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc0>
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    40cc:	movs	r2, #0
    40ce:	add	r0, sp, #60	; 0x3c
    40d0:	blx	r3
    40d2:	b.n	3cea <MTPStorage_SD::removeFile(unsigned long, char*)+0x152>
    40d4:	.word	0x1fff0c58
    40d8:	.word	0x00014bdc
    40dc:	.word	0x00000f31
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40e0:	ldr	r2, [r3, #16]
    40e2:	cmp	r2, #0
    40e4:	beq.w	3e00 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    40e8:	ldr	r1, [r2, #0]
    40ea:	ldr	r0, [pc, #588]	; (4338 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    40ec:	ldr	r1, [r1, #32]
    40ee:	cmp	r1, r0
    40f0:	bne.w	42d6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x73e>
    40f4:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    40f8:	str.w	ip, [r2]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    40fc:	cmp.w	lr, #0
    4100:	beq.w	4216 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    4104:	ldr.w	r1, [lr, #16]
    4108:	subs	r1, #1
    410a:	str.w	r1, [lr, #16]
    410e:	cmp	r1, #0
    4110:	bne.w	4216 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    4114:	ldr	r1, [r2, #16]
    4116:	str	r1, [sp, #16]
    4118:	cmp	r1, #0
    411a:	beq.n	4216 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    411c:	ldr	r1, [sp, #16]
    411e:	ldr	r0, [pc, #536]	; (4338 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    4120:	ldr	r1, [r1, #0]
    4122:	ldr	r1, [r1, #32]
    4124:	cmp	r1, r0
    4126:	bne.w	42e6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x74e>
    412a:	ldr	r1, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    412c:	ldr.w	ip, [pc, #536]	; 4348 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7b0>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4130:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4134:	str	r7, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4136:	cmp.w	lr, #0
    413a:	beq.n	4206 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    413c:	ldr.w	r1, [lr, #16]
    4140:	subs	r1, #1
    4142:	str.w	r1, [lr, #16]
    4146:	cmp	r1, #0
    4148:	bne.n	4206 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    414a:	ldr	r1, [sp, #16]
    414c:	ldr	r1, [r1, #16]
    414e:	str	r1, [sp, #20]
    4150:	cmp	r1, #0
    4152:	beq.n	4206 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    4154:	ldr	r1, [sp, #20]
    4156:	ldr	r0, [pc, #480]	; (4338 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    4158:	ldr	r1, [r1, #0]
    415a:	ldr	r1, [r1, #32]
    415c:	cmp	r1, r0
    415e:	bne.w	4300 <MTPStorage_SD::removeFile(unsigned long, char*)+0x768>
    4162:	ldr	r0, [sp, #20]
    4164:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4168:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    416c:	cmp.w	lr, #0
    4170:	beq.n	41f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    4172:	ldr.w	r1, [lr, #16]
    4176:	subs	r1, #1
    4178:	str.w	r1, [lr, #16]
    417c:	cmp	r1, #0
    417e:	bne.n	41f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    4180:	ldr	r1, [sp, #20]
    4182:	ldr	r1, [r1, #16]
    4184:	str	r1, [sp, #24]
    4186:	cmp	r1, #0
    4188:	beq.n	41f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    418a:	ldr	r1, [sp, #24]
    418c:	ldr	r0, [pc, #424]	; (4338 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    418e:	ldr	r1, [r1, #0]
    4190:	ldr	r1, [r1, #32]
    4192:	cmp	r1, r0
    4194:	bne.w	430e <MTPStorage_SD::removeFile(unsigned long, char*)+0x776>
    4198:	ldr	r0, [sp, #24]
    419a:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    419e:	str.w	ip, [r0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    41a2:	cmp.w	lr, #0
    41a6:	beq.n	41e6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    41a8:	ldr.w	r1, [lr, #16]
    41ac:	subs	r1, #1
    41ae:	str.w	r1, [lr, #16]
    41b2:	cbnz	r1, 41e6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    41b4:	ldr	r1, [sp, #24]
    41b6:	ldr	r1, [r1, #16]
    41b8:	cbz	r1, 41e6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    41ba:	ldr	r0, [r1, #0]
    41bc:	ldr	r0, [r0, #32]
    41be:	mov	lr, r0
    41c0:	ldr	r0, [pc, #372]	; (4338 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    41c2:	cmp	lr, r0
    41c4:	bne.w	4322 <MTPStorage_SD::removeFile(unsigned long, char*)+0x78a>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    41c8:	mov	r0, r1
    41ca:	str	r2, [sp, #36]	; 0x24
    41cc:	str.w	r7, [r0], #16
    41d0:	str	r3, [sp, #32]
    41d2:	str	r1, [sp, #28]
		invalidate();
    41d4:	bl	20cc <File::invalidate() [clone .isra.1]>
	}
    41d8:	ldr	r1, [sp, #28]
    41da:	mov	r0, r1
    41dc:	movs	r1, #20
    41de:	bl	f95c <operator delete(void*, unsigned int)>
    41e2:	ldr	r3, [sp, #32]
    41e4:	ldr	r2, [sp, #36]	; 0x24
    41e6:	ldr	r0, [sp, #24]
    41e8:	str	r2, [sp, #32]
    41ea:	movs	r1, #20
    41ec:	str	r3, [sp, #28]
    41ee:	bl	f95c <operator delete(void*, unsigned int)>
    41f2:	ldr	r3, [sp, #28]
    41f4:	ldr	r2, [sp, #32]
    41f6:	ldr	r0, [sp, #20]
    41f8:	str	r2, [sp, #28]
    41fa:	movs	r1, #20
    41fc:	str	r3, [sp, #24]
    41fe:	bl	f95c <operator delete(void*, unsigned int)>
    4202:	ldr	r3, [sp, #24]
    4204:	ldr	r2, [sp, #28]
    4206:	ldr	r0, [sp, #16]
    4208:	str	r2, [sp, #24]
    420a:	movs	r1, #20
    420c:	str	r3, [sp, #20]
    420e:	bl	f95c <operator delete(void*, unsigned int)>
    4212:	ldr	r3, [sp, #20]
    4214:	ldr	r2, [sp, #24]
    4216:	str	r3, [sp, #16]
    4218:	mov	r0, r2
    421a:	movs	r1, #20
    421c:	bl	f95c <operator delete(void*, unsigned int)>
    4220:	ldr	r3, [sp, #16]
    4222:	b.n	3e00 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    { sprintf(tname,"%s/%s",file,f2.name());
    4224:	add	r5, sp, #80	; 0x50
    4226:	mov	r0, r5
    4228:	ldr	r3, [pc, #272]	; (433c <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    422a:	ldr	r1, [pc, #276]	; (4340 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a8>)
    422c:	ldr	r2, [sp, #4]
    422e:	bl	11544 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    4232:	mov	r0, r5
    4234:	bl	11700 <strlen>
    4238:	mov	r1, r0
    423a:	mov	r0, r5
    423c:	bl	de04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    4240:	ldr	r0, [pc, #256]	; (4344 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7ac>)
    4242:	bl	f7b8 <Print::println()>
    4246:	ldr.w	r0, [r9, #88]	; 0x58
    424a:	ldr	r3, [r0, #0]
    424c:	mov	r1, r5
    424e:	ldr	r3, [r3, #16]
    4250:	blx	r3
    4252:	b.n	3c6a <MTPStorage_SD::removeFile(unsigned long, char*)+0xd2>
    4254:	ldr	r2, [sp, #76]	; 0x4c
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4256:	movs	r6, #0
    4258:	b.n	3d7a <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    425a:	mov	r0, r4
    425c:	blx	r3
    425e:	b.n	3f36 <MTPStorage_SD::removeFile(unsigned long, char*)+0x39e>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    4260:	mov	r0, r4
    4262:	blx	r2
    4264:	mov	r3, r0
    4266:	b.n	3e9a <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
    4268:	ldr	r3, [pc, #208]	; (433c <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a4>)
    426a:	b.n	3e9a <MTPStorage_SD::removeFile(unsigned long, char*)+0x302>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    426c:	blx	r3
    426e:	ldr	r2, [sp, #76]	; 0x4c
    4270:	mov	r6, r0
    4272:	b.n	3d7a <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
    4274:	mov	r0, r4
    4276:	blx	r2
    4278:	ldr	r2, [sp, #76]	; 0x4c
    427a:	mov	r6, r0
    427c:	b.n	3d7a <MTPStorage_SD::removeFile(unsigned long, char*)+0x1e2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    427e:	mov	r0, r5
    4280:	blx	r3
  char tname[MAX_FILENAME_LEN];
  File f1=sd_open(store,file,0);
  if(f1.isDirectory())
  {
    File f2;
    while(f2=f1.openNextFile())
    4282:	cmp	r6, #0
    4284:	bne.w	3e1e <MTPStorage_SD::removeFile(unsigned long, char*)+0x286>
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    4288:	ldr.w	r0, [r9, #88]	; 0x58
    428c:	ldr	r1, [sp, #4]
    428e:	ldr	r3, [r0, #0]
    4290:	ldr	r3, [r3, #20]
    4292:	mov	fp, r7
    4294:	blx	r3
    4296:	cmp	r4, #0
    4298:	beq.w	3f8a <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    429c:	ldr	r3, [r4, #16]
    429e:	subs	r3, #1
    42a0:	str	r3, [r4, #16]
    42a2:	cmp	r3, #0
    42a4:	bne.w	3f8a <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    42a8:	ldr	r3, [r4, #0]
    42aa:	ldr	r2, [pc, #140]	; (4338 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7a0>)
    42ac:	ldr	r3, [r3, #32]
    42ae:	cmp	r3, r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    42b0:	mov	r0, r4
    42b2:	bne.n	42d2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x73a>
    42b4:	movs	r1, #20
    42b6:	bl	f95c <operator delete(void*, unsigned int)>
    42ba:	b.n	3f8a <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    42bc:	blx	r3
    42be:	b.n	3d08 <MTPStorage_SD::removeFile(unsigned long, char*)+0x170>
    42c0:	mov	r0, fp
    42c2:	blx	r3
    42c4:	b.n	3e10 <MTPStorage_SD::removeFile(unsigned long, char*)+0x278>
    42c6:	mov	r0, r3
    42c8:	blx	r2
    42ca:	b.n	3e08 <MTPStorage_SD::removeFile(unsigned long, char*)+0x270>
    42cc:	mov	r0, r4
    42ce:	blx	r3
  }
  else
  {
    sd_remove(store,file);
  }
}
    42d0:	b.n	40c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x52a>
    42d2:	blx	r3
    42d4:	b.n	3f8a <MTPStorage_SD::removeFile(unsigned long, char*)+0x3f2>
    42d6:	str	r3, [sp, #16]
    42d8:	mov	r0, r2
    42da:	blx	r1
    42dc:	ldr	r3, [sp, #16]
    42de:	b.n	3e00 <MTPStorage_SD::removeFile(unsigned long, char*)+0x268>
    42e0:	mov	r0, r5
    42e2:	blx	r3
    42e4:	b.n	40ba <MTPStorage_SD::removeFile(unsigned long, char*)+0x522>
    42e6:	str	r2, [sp, #24]
    42e8:	str	r3, [sp, #20]
    42ea:	ldr	r0, [sp, #16]
    42ec:	blx	r1
    42ee:	ldr	r2, [sp, #24]
    42f0:	ldr	r3, [sp, #20]
    42f2:	b.n	4216 <MTPStorage_SD::removeFile(unsigned long, char*)+0x67e>
    42f4:	mov	r0, r6
    42f6:	blx	r3
    42f8:	b.n	40b2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x51a>
    42fa:	mov	r0, r7
    42fc:	blx	r3
    42fe:	b.n	40aa <MTPStorage_SD::removeFile(unsigned long, char*)+0x512>
    4300:	str	r2, [sp, #28]
    4302:	str	r3, [sp, #24]
    4304:	ldr	r0, [sp, #20]
    4306:	blx	r1
    4308:	ldr	r2, [sp, #28]
    430a:	ldr	r3, [sp, #24]
    430c:	b.n	4206 <MTPStorage_SD::removeFile(unsigned long, char*)+0x66e>
    430e:	str	r2, [sp, #32]
    4310:	str	r3, [sp, #28]
    4312:	ldr	r0, [sp, #24]
    4314:	blx	r1
    4316:	ldr	r2, [sp, #32]
    4318:	ldr	r3, [sp, #28]
    431a:	b.n	41f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x65e>
    431c:	mov	r0, r8
    431e:	blx	r3
    4320:	b.n	40a2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x50a>
    4322:	str	r2, [sp, #32]
    4324:	str	r3, [sp, #28]
    4326:	mov	r0, r1
    4328:	mov	r3, lr
    432a:	blx	r3
    432c:	ldr	r2, [sp, #32]
    432e:	ldr	r3, [sp, #28]
    4330:	b.n	41e6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x64e>
    4332:	mov	r0, r9
    4334:	blx	r3
    4336:	b.n	409a <MTPStorage_SD::removeFile(unsigned long, char*)+0x502>
    4338:	.word	0x00000f31
    433c:	.word	0x00014d98
    4340:	.word	0x00014ec8
    4344:	.word	0x1fff0c58
    4348:	.word	0x00014bdc

0000434c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
    434c:	push	{r4, r5, r6, r7, lr}
    434e:	subw	sp, sp, #1348	; 0x544
    4352:	mov	r5, r0
    4354:	mov	r6, r1
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below

    // first create full filename
    char filename[MAX_FILENAME_LEN];
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    4356:	mov.w	r3, #256	; 0x100
    435a:	add	r2, sp, #272	; 0x110
    435c:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    4360:	mov	r2, r6
    4362:	mov	r1, r5
    4364:	add	r0, sp, #528	; 0x210
    4366:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    // remove file from storage (assume it is always working)
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    436a:	add	r2, sp, #272	; 0x110
    436c:	ldrh.w	r1, [sp, #542]	; 0x21e
    4370:	mov	r0, r5
    4372:	bl	3b98 <MTPStorage_SD::removeFile(unsigned long, char*)>
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    4376:	movs	r3, #0
    WriteIndexRecord(object, r);
    4378:	add	r2, sp, #528	; 0x210
    437a:	mov	r1, r6
    437c:	mov	r0, r5
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    437e:	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    4382:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    4386:	ldr	r2, [sp, #528]	; 0x210
    4388:	mov	r1, r5
    438a:	add	r0, sp, #800	; 0x320
    438c:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    4390:	ldr	r7, [sp, #804]	; 0x324
    4392:	cmp	r6, r7
    4394:	beq.n	43e6 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x9a>
    }
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
    4396:	add.w	r0, sp, #1072	; 0x430
    439a:	mov	r2, r7
    439c:	mov	r1, r5
    439e:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    43a2:	ldr.w	r4, [sp, #1080]	; 0x438
    43a6:	cmp	r6, r4
    43a8:	bne.n	43ae <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x62>
    43aa:	b.n	43fa <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0xae>
    43ac:	mov	r4, r3
    43ae:	mov	r2, r4
    43b0:	mov	r1, r5
    43b2:	mov	r0, sp
    43b4:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    43b8:	mov.w	r2, #272	; 0x110
    43bc:	mov	r1, sp
    43be:	add.w	r0, sp, #1072	; 0x430
    43c2:	bl	db90 <memcpy>
    43c6:	ldr.w	r3, [sp, #1080]	; 0x438
    43ca:	cmp	r6, r3
    43cc:	bne.n	43ac <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x60>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    43ce:	mov	r0, r5
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
      // is points now to junder sibling
      x.sibling = r.sibling;
    43d0:	ldr	r3, [sp, #536]	; 0x218
    43d2:	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    43d6:	add.w	r2, sp, #1072	; 0x430
    43da:	mov	r1, r4
    43dc:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
    return 1;
  }
    43e0:	addw	sp, sp, #1348	; 0x544
    43e4:	pop	{r4, r5, r6, r7, pc}
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
      WriteIndexRecord(r.parent, t);
    43e6:	mov	r0, r5
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    43e8:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    43ea:	ldr	r1, [sp, #528]	; 0x210
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    if(t.child==object)
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    43ec:	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(r.parent, t);
    43ee:	add	r2, sp, #800	; 0x320
    43f0:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    43f4:	addw	sp, sp, #1348	; 0x544
    43f8:	pop	{r4, r5, r6, r7, pc}
    else
    { // link junger to older sibling
      // find junger sibling
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    43fa:	mov	r4, r7
    43fc:	b.n	43ce <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]+0x82>
    43fe:	nop

00004400 <MTPStorage_SD::DeleteObject(unsigned long)>:
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    4400:	adds	r2, r1, #1
    4402:	beq.n	440e <MTPStorage_SD::DeleteObject(unsigned long)+0xe>
    sd_remove(store,file);
  }
}

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    4404:	push	{r3, lr}
    4406:	bl	434c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.9] [clone .constprop.11]>
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    }
    return 1;
  }
    440a:	movs	r0, #1
    440c:	pop	{r3, pc}
    440e:	movs	r0, #1
    4410:	bx	lr
    4412:	nop

00004414 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    4414:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    4418:	add.w	r1, r0, r1, lsl #2
    441c:	mov	r6, r0
    441e:	ldr	r1, [r1, #84]	; 0x54
    4420:	ldr	r0, [r1, #0]
    4422:	subw	sp, sp, #2092	; 0x82c
    4426:	ldr	r4, [r0, #0]
    4428:	mov	r7, r3
    442a:	mov	r0, sp
    442c:	movs	r3, #0
    442e:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4430:	ldr	r3, [sp, #16]
    4432:	cmp	r3, #0
    4434:	beq.w	485e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x44a>
    4438:	ldr	r2, [r3, #0]
    443a:	ldr	r5, [pc, #624]	; (46ac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x298>)
    443c:	ldr	r2, [r2, #68]	; 0x44
    443e:	cmp	r2, r5
    4440:	bne.w	47bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a8>
    4444:	ldr	r0, [r3, #16]
    4446:	cmp	r0, #0
    4448:	beq.w	466c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    444c:	ldr	r2, [r0, #0]
    444e:	ldr	r2, [r2, #68]	; 0x44
    4450:	cmp	r2, r5
    4452:	bne.w	47be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4456:	ldr	r0, [r0, #16]
    4458:	cmp	r0, #0
    445a:	beq.w	466c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    445e:	ldr	r2, [r0, #0]
    4460:	ldr	r2, [r2, #68]	; 0x44
    4462:	cmp	r2, r5
    4464:	bne.w	47be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    4468:	ldr	r0, [r0, #16]
    446a:	cmp	r0, #0
    446c:	beq.w	466c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4470:	ldr	r2, [r0, #0]
    4472:	ldr	r2, [r2, #68]	; 0x44
    4474:	cmp	r2, r5
    4476:	bne.w	47be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    447a:	ldr	r0, [r0, #16]
    447c:	cmp	r0, #0
    447e:	beq.w	466c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4482:	ldr	r2, [r0, #0]
    4484:	ldr	r2, [r2, #68]	; 0x44
    4486:	cmp	r2, r5
    4488:	bne.w	47be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    448c:	ldr	r0, [r0, #16]
    448e:	cmp	r0, #0
    4490:	beq.w	466c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    4494:	ldr	r2, [r0, #0]
    4496:	ldr	r2, [r2, #68]	; 0x44
    4498:	cmp	r2, r5
    449a:	bne.w	47be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    449e:	ldr	r0, [r0, #16]
    44a0:	cmp	r0, #0
    44a2:	beq.w	466c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    44a6:	ldr	r2, [r0, #0]
    44a8:	ldr	r2, [r2, #68]	; 0x44
    44aa:	cmp	r2, r5
    44ac:	bne.w	47be <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3aa>
    44b0:	ldr	r0, [r0, #16]
    44b2:	cmp	r0, #0
    44b4:	beq.w	466c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x258>
    44b8:	ldr	r3, [r0, #0]
    44ba:	ldr	r3, [r3, #68]	; 0x44
    44bc:	blx	r3
    44be:	mov	r4, r0
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    44c0:	cmp	r4, #0
    44c2:	beq.w	4ca6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x892>
    44c6:	add.w	r6, r6, r7, lsl #2
    44ca:	add	r0, sp, #20
    44cc:	ldr	r1, [r6, #84]	; 0x54
    44ce:	ldr.w	r2, [sp, #2128]	; 0x850
    44d2:	ldr	r3, [r1, #0]
    44d4:	ldr	r4, [r3, #0]
    44d6:	movs	r3, #2
    44d8:	blx	r4
    44da:	ldr	r0, [sp, #36]	; 0x24
    44dc:	cmp	r0, #0
    44de:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44e2:	ldr	r3, [r0, #0]
    44e4:	ldr	r3, [r3, #68]	; 0x44
    44e6:	cmp	r3, r5
    44e8:	bne.w	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44ec:	ldr	r0, [r0, #16]
    44ee:	cmp	r0, #0
    44f0:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    44f4:	ldr	r3, [r0, #0]
    44f6:	ldr	r3, [r3, #68]	; 0x44
    44f8:	cmp	r3, r5
    44fa:	bne.w	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    44fe:	ldr	r0, [r0, #16]
    4500:	cmp	r0, #0
    4502:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4506:	ldr	r3, [r0, #0]
    4508:	ldr	r3, [r3, #68]	; 0x44
    450a:	cmp	r3, r5
    450c:	bne.w	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4510:	ldr	r0, [r0, #16]
    4512:	cmp	r0, #0
    4514:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4518:	ldr	r3, [r0, #0]
    451a:	ldr	r3, [r3, #68]	; 0x44
    451c:	cmp	r3, r5
    451e:	bne.w	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4522:	ldr	r0, [r0, #16]
    4524:	cmp	r0, #0
    4526:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    452a:	ldr	r3, [r0, #0]
    452c:	ldr	r3, [r3, #68]	; 0x44
    452e:	cmp	r3, r5
    4530:	bne.w	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4534:	ldr	r0, [r0, #16]
    4536:	cmp	r0, #0
    4538:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    453c:	ldr	r3, [r0, #0]
    453e:	ldr	r3, [r3, #68]	; 0x44
    4540:	cmp	r3, r5
    4542:	bne.w	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4546:	ldr	r0, [r0, #16]
    4548:	cmp	r0, #0
    454a:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    454e:	ldr	r3, [r0, #0]
    4550:	ldr	r3, [r3, #68]	; 0x44
    4552:	cmp	r3, r5
    4554:	bne.w	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    4558:	ldr	r0, [r0, #16]
    455a:	cmp	r0, #0
    455c:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4560:	ldr	r3, [r0, #0]
    4562:	ldr	r3, [r3, #68]	; 0x44
    4564:	cmp	r3, r5
    4566:	bne.w	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    456a:	ldr	r0, [r0, #16]
    456c:	cmp	r0, #0
    456e:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4572:	ldr	r3, [r0, #0]
    4574:	ldr	r3, [r3, #68]	; 0x44
    4576:	cmp	r3, r5
    4578:	bne.w	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    457c:	ldr	r0, [r0, #16]
    457e:	cmp	r0, #0
    4580:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4584:	ldr	r3, [r0, #0]
    4586:	ldr	r3, [r3, #68]	; 0x44
    4588:	cmp	r3, r5
    458a:	bne.w	498e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57a>
    458e:	ldr	r0, [r0, #16]
    4590:	cmp	r0, #0
    4592:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    4596:	ldr	r3, [r0, #0]
    4598:	ldr	r3, [r3, #68]	; 0x44
    459a:	blx	r3
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    459c:	cmp	r0, #0
    459e:	beq.w	47c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3b0>
    45a2:	ldr	r5, [pc, #268]	; (46b0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x29c>)
    45a4:	mov.w	r4, #4294967295
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    45a8:	ldr	r3, [sp, #16]
    45aa:	cmp	r3, #0
    45ac:	beq.w	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    45b0:	ldr	r1, [r3, #0]
    45b2:	ldr	r2, [r1, #16]
    45b4:	cmp	r2, r5
    45b6:	bne.w	4b9c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x788>
    45ba:	ldr	r2, [r3, #16]
    45bc:	cmp	r2, #0
    45be:	beq.w	4ba2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x78e>
    45c2:	ldr	r0, [r2, #0]
    45c4:	ldr	r6, [r0, #16]
    45c6:	cmp	r6, r5
    45c8:	bne.w	4a44 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x630>
    45cc:	ldr	r0, [r2, #16]
    45ce:	cmp	r0, #0
    45d0:	beq.w	4992 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45d4:	ldr	r6, [r0, #0]
    45d6:	ldr	r6, [r6, #16]
    45d8:	cmp	r6, r5
    45da:	bne.w	4a46 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45de:	ldr	r0, [r0, #16]
    45e0:	cmp	r0, #0
    45e2:	beq.w	4992 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45e6:	ldr	r6, [r0, #0]
    45e8:	ldr	r6, [r6, #16]
    45ea:	cmp	r6, r5
    45ec:	bne.w	4a46 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    45f0:	ldr	r0, [r0, #16]
    45f2:	cmp	r0, #0
    45f4:	beq.w	4992 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    45f8:	ldr	r6, [r0, #0]
    45fa:	ldr	r6, [r6, #16]
    45fc:	cmp	r6, r5
    45fe:	bne.w	4a46 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4602:	ldr	r0, [r0, #16]
    4604:	cmp	r0, #0
    4606:	beq.w	4992 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    460a:	ldr	r6, [r0, #0]
    460c:	ldr	r6, [r6, #16]
    460e:	cmp	r6, r5
    4610:	bne.w	4a46 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4614:	ldr	r0, [r0, #16]
    4616:	cmp	r0, #0
    4618:	beq.w	4992 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    461c:	ldr	r6, [r0, #0]
    461e:	ldr	r6, [r6, #16]
    4620:	cmp	r6, r5
    4622:	bne.w	4a46 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4626:	ldr	r0, [r0, #16]
    4628:	cmp	r0, #0
    462a:	beq.w	4992 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    462e:	ldr	r6, [r0, #0]
    4630:	ldr	r6, [r6, #16]
    4632:	cmp	r6, r5
    4634:	bne.w	4a46 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    4638:	ldr	r0, [r0, #16]
    463a:	cmp	r0, #0
    463c:	beq.w	4992 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4640:	ldr	r6, [r0, #0]
    4642:	ldr	r6, [r6, #16]
    4644:	cmp	r6, r5
    4646:	bne.w	4a46 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    464a:	ldr	r0, [r0, #16]
    464c:	cmp	r0, #0
    464e:	beq.w	4992 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4652:	ldr	r6, [r0, #0]
    4654:	ldr	r6, [r6, #16]
    4656:	cmp	r6, r5
    4658:	bne.w	4a46 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x632>
    465c:	ldr	r0, [r0, #16]
    465e:	cmp	r0, #0
    4660:	beq.w	4992 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x57e>
    4664:	ldr	r3, [r0, #0]
    4666:	ldr	r3, [r3, #16]
    4668:	blx	r3
    466a:	b.n	4a48 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    466c:	ldr	r6, [pc, #68]	; (46b4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a0>)
    466e:	str	r6, [sp, #0]
    4670:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4672:	ldr	r2, [r3, #16]
    4674:	subs	r2, #1
    4676:	str	r2, [r3, #16]
    4678:	cbnz	r2, 46a0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    467a:	ldr	r5, [sp, #16]
    467c:	cbz	r5, 46a0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
    467e:	ldr	r3, [r5, #0]
    4680:	ldr	r2, [pc, #52]	; (46b8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a4>)
    4682:	ldr	r3, [r3, #32]
    4684:	cmp	r3, r2
    4686:	bne.w	4c3a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x826>
    468a:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    468c:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    468e:	cbz	r1, 4698 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    4690:	ldr	r3, [r1, #16]
    4692:	subs	r3, #1
    4694:	str	r3, [r1, #16]
    4696:	cbz	r3, 46bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a8>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4698:	mov	r0, r5
    469a:	movs	r1, #20
    469c:	bl	f95c <operator delete(void*, unsigned int)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    46a0:	mov	r0, r4
    46a2:	addw	sp, sp, #2092	; 0x82c
    46a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46aa:	nop
    46ac:	.word	0x0000050d
    46b0:	.word	0x00000495
    46b4:	.word	0x00014bdc
    46b8:	.word	0x00000f31
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46bc:	ldr	r7, [r5, #16]
    46be:	cmp	r7, #0
    46c0:	beq.n	4698 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    46c2:	ldr	r3, [r7, #0]
    46c4:	ldr	r3, [r3, #32]
    46c6:	cmp	r3, r2
    46c8:	bne.w	4c5c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x848>
    46cc:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    46ce:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46d0:	cmp	r1, #0
    46d2:	beq.n	47b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    46d4:	ldr	r3, [r1, #16]
    46d6:	subs	r3, #1
    46d8:	str	r3, [r1, #16]
    46da:	cmp	r3, #0
    46dc:	bne.n	47b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    46de:	ldr.w	r8, [r7, #16]
    46e2:	cmp.w	r8, #0
    46e6:	beq.n	47b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    46e8:	ldr.w	r3, [r8]
    46ec:	ldr	r3, [r3, #32]
    46ee:	cmp	r3, r2
    46f0:	bne.w	4c82 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x86e>
    46f4:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    46f8:	str.w	r6, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    46fc:	cmp	r1, #0
    46fe:	beq.n	47aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    4700:	ldr	r3, [r1, #16]
    4702:	subs	r3, #1
    4704:	str	r3, [r1, #16]
    4706:	cmp	r3, #0
    4708:	bne.n	47aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    470a:	ldr.w	r9, [r8, #16]
    470e:	cmp.w	r9, #0
    4712:	beq.n	47aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    4714:	ldr.w	r3, [r9]
    4718:	ldr	r3, [r3, #32]
    471a:	cmp	r3, r2
    471c:	bne.w	4c88 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x874>
    4720:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4724:	str.w	r6, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4728:	cmp	r1, #0
    472a:	beq.n	47a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    472c:	ldr	r3, [r1, #16]
    472e:	subs	r3, #1
    4730:	str	r3, [r1, #16]
    4732:	cmp	r3, #0
    4734:	bne.n	47a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4736:	ldr.w	sl, [r9, #16]
    473a:	cmp.w	sl, #0
    473e:	beq.n	47a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4740:	ldr.w	r3, [sl]
    4744:	ldr	r3, [r3, #32]
    4746:	cmp	r3, r2
    4748:	bne.w	4c9a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x886>
    474c:	ldr.w	r1, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4750:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4754:	cbz	r1, 479a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4756:	ldr	r3, [r1, #16]
    4758:	subs	r3, #1
    475a:	str	r3, [r1, #16]
    475c:	cbnz	r3, 479a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    475e:	ldr.w	fp, [sl, #16]
    4762:	cmp.w	fp, #0
    4766:	beq.n	479a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4768:	ldr.w	r3, [fp]
    476c:	ldr	r3, [r3, #32]
    476e:	cmp	r3, r2
    4770:	bne.w	4ca0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x88c>
    4774:	ldr.w	r2, [fp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4778:	str.w	r6, [fp]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    477c:	cbz	r2, 4792 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    477e:	ldr	r3, [r2, #16]
    4780:	subs	r3, #1
    4782:	str	r3, [r2, #16]
    4784:	cbnz	r3, 4792 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    4786:	ldr.w	r0, [fp, #16]
    478a:	cbz	r0, 4792 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x37e>
    478c:	ldr	r3, [r0, #0]
    478e:	ldr	r3, [r3, #32]
    4790:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4792:	mov	r0, fp
    4794:	movs	r1, #20
    4796:	bl	f95c <operator delete(void*, unsigned int)>
    479a:	mov	r0, sl
    479c:	movs	r1, #20
    479e:	bl	f95c <operator delete(void*, unsigned int)>
    47a2:	mov	r0, r9
    47a4:	movs	r1, #20
    47a6:	bl	f95c <operator delete(void*, unsigned int)>
    47aa:	mov	r0, r8
    47ac:	movs	r1, #20
    47ae:	bl	f95c <operator delete(void*, unsigned int)>
    47b2:	mov	r0, r7
    47b4:	movs	r1, #20
    47b6:	bl	f95c <operator delete(void*, unsigned int)>
    47ba:	b.n	4698 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    47bc:	mov	r0, r3
    47be:	blx	r2
    47c0:	mov	r4, r0
    47c2:	b.n	44c0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xac>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    47c4:	ldr	r0, [sp, #16]
    47c6:	cmp	r0, #0
    47c8:	beq.n	486a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47ca:	ldr	r3, [r0, #0]
    47cc:	ldr	r1, [pc, #616]	; (4a38 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    47ce:	ldr	r3, [r3, #64]	; 0x40
    47d0:	cmp	r3, r1
    47d2:	bne.w	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47d6:	ldr	r0, [r0, #16]
    47d8:	cmp	r0, #0
    47da:	beq.n	486a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47dc:	ldr	r3, [r0, #0]
    47de:	ldr	r3, [r3, #64]	; 0x40
    47e0:	cmp	r3, r1
    47e2:	bne.w	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47e6:	ldr	r0, [r0, #16]
    47e8:	cmp	r0, #0
    47ea:	beq.n	486a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47ec:	ldr	r3, [r0, #0]
    47ee:	ldr	r3, [r3, #64]	; 0x40
    47f0:	cmp	r3, r1
    47f2:	bne.w	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    47f6:	ldr	r0, [r0, #16]
    47f8:	cmp	r0, #0
    47fa:	beq.n	486a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    47fc:	ldr	r3, [r0, #0]
    47fe:	ldr	r3, [r3, #64]	; 0x40
    4800:	cmp	r3, r1
    4802:	bne.w	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4806:	ldr	r0, [r0, #16]
    4808:	cmp	r0, #0
    480a:	beq.n	486a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    480c:	ldr	r3, [r0, #0]
    480e:	ldr	r3, [r3, #64]	; 0x40
    4810:	cmp	r3, r1
    4812:	bne.w	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4816:	ldr	r0, [r0, #16]
    4818:	cbz	r0, 486a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    481a:	ldr	r3, [r0, #0]
    481c:	ldr	r3, [r3, #64]	; 0x40
    481e:	cmp	r3, r1
    4820:	bne.w	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4824:	ldr	r0, [r0, #16]
    4826:	cbz	r0, 486a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4828:	ldr	r3, [r0, #0]
    482a:	ldr	r3, [r3, #64]	; 0x40
    482c:	cmp	r3, r1
    482e:	bne.w	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4832:	ldr	r0, [r0, #16]
    4834:	cbz	r0, 486a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4836:	ldr	r3, [r0, #0]
    4838:	ldr	r3, [r3, #64]	; 0x40
    483a:	cmp	r3, r1
    483c:	bne.w	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    4840:	ldr	r0, [r0, #16]
    4842:	cbz	r0, 486a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4844:	ldr	r3, [r0, #0]
    4846:	ldr	r3, [r3, #64]	; 0x40
    4848:	cmp	r3, r1
    484a:	bne.w	4986 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x572>
    484e:	ldr	r0, [r0, #16]
    4850:	cbz	r0, 486a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x456>
    4852:	ldr	r3, [r0, #0]
    4854:	ldr	r3, [r3, #64]	; 0x40
    4856:	blx	r3
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    4858:	movs	r4, #0
    485a:	ldr	r3, [sp, #36]	; 0x24
    485c:	b.n	486e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
  #if DEBUG>1
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
    485e:	mov	r4, r3
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    4860:	mov	r0, r4
    4862:	addw	sp, sp, #2092	; 0x82c
    4866:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    486a:	ldr	r3, [sp, #36]	; 0x24
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  File f1 = sd_open(store0,oldfilename,FILE_READ); if(!f1) {DBG_FAIL_MACRO; return false;}
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    486c:	movs	r4, #0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    486e:	ldr	r6, [pc, #460]	; (4a3c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
    4870:	str	r6, [sp, #20]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4872:	cmp	r3, #0
    4874:	beq.w	497a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4878:	ldr	r2, [r3, #16]
    487a:	subs	r2, #1
    487c:	str	r2, [r3, #16]
    487e:	cmp	r2, #0
    4880:	bne.n	497a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4882:	ldr	r5, [sp, #36]	; 0x24
    4884:	cmp	r5, #0
    4886:	beq.n	497a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
    4888:	ldr	r3, [r5, #0]
    488a:	ldr	r2, [pc, #436]	; (4a40 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x62c>)
    488c:	ldr	r3, [r3, #32]
    488e:	cmp	r3, r2
    4890:	bne.w	4c62 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x84e>
    4894:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4896:	str	r6, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4898:	cmp	r1, #0
    489a:	beq.n	4972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    489c:	ldr	r3, [r1, #16]
    489e:	subs	r3, #1
    48a0:	str	r3, [r1, #16]
    48a2:	cmp	r3, #0
    48a4:	bne.n	4972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    48a6:	ldr	r7, [r5, #16]
    48a8:	cmp	r7, #0
    48aa:	beq.n	4972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    48ac:	ldr	r3, [r7, #0]
    48ae:	ldr	r3, [r3, #32]
    48b0:	cmp	r3, r2
    48b2:	bne.w	4c7c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x868>
    48b6:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    48b8:	str	r6, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    48ba:	cmp	r1, #0
    48bc:	beq.n	496a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    48be:	ldr	r3, [r1, #16]
    48c0:	subs	r3, #1
    48c2:	str	r3, [r1, #16]
    48c4:	cmp	r3, #0
    48c6:	bne.n	496a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    48c8:	ldr.w	r8, [r7, #16]
    48cc:	cmp.w	r8, #0
    48d0:	beq.n	496a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    48d2:	ldr.w	r3, [r8]
    48d6:	ldr	r3, [r3, #32]
    48d8:	cmp	r3, r2
    48da:	bne.w	4c8e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x87a>
    48de:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    48e2:	str.w	r6, [r8]
    48e6:	ldr	r0, [pc, #340]	; (4a3c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x628>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    48e8:	cmp	r1, #0
    48ea:	beq.n	4962 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    48ec:	ldr	r3, [r1, #16]
    48ee:	subs	r3, #1
    48f0:	str	r3, [r1, #16]
    48f2:	cmp	r3, #0
    48f4:	bne.n	4962 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    48f6:	ldr.w	r9, [r8, #16]
    48fa:	cmp.w	r9, #0
    48fe:	beq.n	4962 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4900:	ldr.w	r3, [r9]
    4904:	ldr	r3, [r3, #32]
    4906:	cmp	r3, r2
    4908:	bne.w	4c94 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x880>
    490c:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4910:	str.w	r0, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4914:	cbz	r1, 495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4916:	ldr	r3, [r1, #16]
    4918:	subs	r3, #1
    491a:	str	r3, [r1, #16]
    491c:	cbnz	r3, 495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    491e:	ldr.w	sl, [r9, #16]
    4922:	cmp.w	sl, #0
    4926:	beq.n	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4928:	ldr.w	r3, [sl]
    492c:	ldr	r3, [r3, #32]
    492e:	cmp	r3, r2
    4930:	bne.w	4cb0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x89c>
    4934:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    4938:	str.w	r6, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    493c:	cbz	r2, 4952 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    493e:	ldr	r3, [r2, #16]
    4940:	subs	r3, #1
    4942:	str	r3, [r2, #16]
    4944:	cbnz	r3, 4952 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    4946:	ldr.w	r0, [sl, #16]
    494a:	cbz	r0, 4952 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x53e>
    494c:	ldr	r3, [r0, #0]
    494e:	ldr	r3, [r3, #32]
    4950:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    4952:	mov	r0, sl
    4954:	movs	r1, #20
    4956:	bl	f95c <operator delete(void*, unsigned int)>
    495a:	mov	r0, r9
    495c:	movs	r1, #20
    495e:	bl	f95c <operator delete(void*, unsigned int)>
    4962:	mov	r0, r8
    4964:	movs	r1, #20
    4966:	bl	f95c <operator delete(void*, unsigned int)>
    496a:	mov	r0, r7
    496c:	movs	r1, #20
    496e:	bl	f95c <operator delete(void*, unsigned int)>
    4972:	mov	r0, r5
    4974:	movs	r1, #20
    4976:	bl	f95c <operator delete(void*, unsigned int)>
    497a:	ldr	r3, [sp, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    497c:	str	r6, [sp, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    497e:	cmp	r3, #0
    4980:	bne.w	4672 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x25e>
    4984:	b.n	46a0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4986:	blx	r3
    4988:	movs	r4, #0
    498a:	ldr	r3, [sp, #36]	; 0x24
    498c:	b.n	486e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    498e:	blx	r3
    4990:	b.n	459c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x188>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4992:	ldr	r5, [r1, #64]	; 0x40
    4994:	ldr	r1, [pc, #160]	; (4a38 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x624>)
    4996:	cmp	r5, r1
    4998:	bne.w	4c68 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    499c:	mov	r0, r2
    499e:	ldr	r3, [r0, #0]
    49a0:	ldr	r3, [r3, #64]	; 0x40
    49a2:	cmp	r3, r1
    49a4:	bne.w	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49a8:	ldr	r0, [r0, #16]
    49aa:	cmp	r0, #0
    49ac:	beq.w	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49b0:	ldr	r3, [r0, #0]
    49b2:	ldr	r3, [r3, #64]	; 0x40
    49b4:	cmp	r3, r1
    49b6:	bne.w	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49ba:	ldr	r0, [r0, #16]
    49bc:	cmp	r0, #0
    49be:	beq.w	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49c2:	ldr	r3, [r0, #0]
    49c4:	ldr	r3, [r3, #64]	; 0x40
    49c6:	cmp	r3, r1
    49c8:	bne.w	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49cc:	ldr	r0, [r0, #16]
    49ce:	cmp	r0, #0
    49d0:	beq.w	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49d4:	ldr	r3, [r0, #0]
    49d6:	ldr	r3, [r3, #64]	; 0x40
    49d8:	cmp	r3, r1
    49da:	bne.w	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49de:	ldr	r0, [r0, #16]
    49e0:	cmp	r0, #0
    49e2:	beq.w	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49e6:	ldr	r3, [r0, #0]
    49e8:	ldr	r3, [r3, #64]	; 0x40
    49ea:	cmp	r3, r1
    49ec:	bne.w	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    49f0:	ldr	r0, [r0, #16]
    49f2:	cmp	r0, #0
    49f4:	beq.w	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    49f8:	ldr	r3, [r0, #0]
    49fa:	ldr	r3, [r3, #64]	; 0x40
    49fc:	cmp	r3, r1
    49fe:	bne.w	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4a02:	ldr	r0, [r0, #16]
    4a04:	cmp	r0, #0
    4a06:	beq.w	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4a0a:	ldr	r3, [r0, #0]
    4a0c:	ldr	r3, [r3, #64]	; 0x40
    4a0e:	cmp	r3, r1
    4a10:	bne.w	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4a14:	ldr	r0, [r0, #16]
    4a16:	cmp	r0, #0
    4a18:	beq.w	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4a1c:	ldr	r3, [r0, #0]
    4a1e:	ldr	r3, [r3, #64]	; 0x40
    4a20:	cmp	r3, r1
    4a22:	bne.w	4c58 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x844>
    4a26:	ldr	r0, [r0, #16]
    4a28:	cmp	r0, #0
    4a2a:	beq.w	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4a2e:	ldr	r3, [r0, #0]
    4a30:	ldr	r3, [r3, #64]	; 0x40
    4a32:	blx	r3
    4a34:	b.n	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4a36:	nop
    4a38:	.word	0x00000501
    4a3c:	.word	0x00014bdc
    4a40:	.word	0x00000f31
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4a44:	mov	r0, r2
    4a46:	blx	r6

  while(f1.available()>0)
    4a48:	cmp	r0, #0
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    4a4a:	ldr	r3, [sp, #16]
    4a4c:	ble.n	4af8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e4>
    4a4e:	cmp	r3, #0
    4a50:	beq.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a52:	ldr	r1, [r3, #0]
    4a54:	ldr	r2, [pc, #536]	; (4c70 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x85c>)
    4a56:	ldr	r4, [r1, #40]	; 0x28
    4a58:	cmp	r4, r2
    4a5a:	bne.n	4ada <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c6>
    4a5c:	ldr	r0, [r3, #16]
    4a5e:	cmp	r0, #0
    4a60:	beq.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a62:	ldr	r1, [r0, #0]
    4a64:	ldr	r4, [r1, #40]	; 0x28
    4a66:	cmp	r4, r2
    4a68:	bne.n	4adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a6a:	ldr	r0, [r0, #16]
    4a6c:	cmp	r0, #0
    4a6e:	beq.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a70:	ldr	r1, [r0, #0]
    4a72:	ldr	r4, [r1, #40]	; 0x28
    4a74:	cmp	r4, r2
    4a76:	bne.n	4adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a78:	ldr	r0, [r0, #16]
    4a7a:	cmp	r0, #0
    4a7c:	beq.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a7e:	ldr	r1, [r0, #0]
    4a80:	ldr	r4, [r1, #40]	; 0x28
    4a82:	cmp	r4, r2
    4a84:	bne.n	4adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a86:	ldr	r0, [r0, #16]
    4a88:	cmp	r0, #0
    4a8a:	beq.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a8c:	ldr	r1, [r0, #0]
    4a8e:	ldr	r4, [r1, #40]	; 0x28
    4a90:	cmp	r4, r2
    4a92:	bne.n	4adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4a94:	ldr	r0, [r0, #16]
    4a96:	cmp	r0, #0
    4a98:	beq.n	4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4a9a:	ldr	r1, [r0, #0]
    4a9c:	ldr	r4, [r1, #40]	; 0x28
    4a9e:	cmp	r4, r2
    4aa0:	bne.n	4adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4aa2:	ldr	r0, [r0, #16]
    4aa4:	cbz	r0, 4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4aa6:	ldr	r1, [r0, #0]
    4aa8:	ldr	r4, [r1, #40]	; 0x28
    4aaa:	cmp	r4, r2
    4aac:	bne.n	4adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4aae:	ldr	r0, [r0, #16]
    4ab0:	cbz	r0, 4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4ab2:	ldr	r1, [r0, #0]
    4ab4:	ldr	r4, [r1, #40]	; 0x28
    4ab6:	cmp	r4, r2
    4ab8:	bne.n	4adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4aba:	ldr	r0, [r0, #16]
    4abc:	cbz	r0, 4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4abe:	ldr	r1, [r0, #0]
    4ac0:	ldr	r4, [r1, #40]	; 0x28
    4ac2:	cmp	r4, r2
    4ac4:	bne.n	4adc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c8>
    4ac6:	ldr	r0, [r0, #16]
    4ac8:	cbz	r0, 4b00 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6ec>
    4aca:	ldr	r3, [r0, #0]
    4acc:	mov.w	r2, #2048	; 0x800
    4ad0:	ldr	r3, [r3, #40]	; 0x28
    4ad2:	add	r1, sp, #40	; 0x28
    4ad4:	blx	r3
    4ad6:	mov	r2, r0
    4ad8:	b.n	4ae6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6d2>
    4ada:	mov	r0, r3
    4adc:	mov.w	r2, #2048	; 0x800
    4ae0:	add	r1, sp, #40	; 0x28
    4ae2:	blx	r4
    4ae4:	mov	r2, r0
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    4ae6:	subs	r4, r2, #0
    4ae8:	blt.n	4af6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e2>
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    4aea:	ldr	r0, [sp, #36]	; 0x24
    4aec:	cbnz	r0, 4b0c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6f8>
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    4aee:	cmp.w	r4, #2048	; 0x800
    4af2:	bge.w	45a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x194>
    4af6:	ldr	r3, [sp, #16]
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4af8:	cmp	r3, #0
    4afa:	bne.w	4c46 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x832>
    4afe:	b.n	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    4b00:	ldr	r0, [sp, #36]	; 0x24
    4b02:	cmp	r0, #0
    4b04:	beq.w	4c40 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x82c>
    4b08:	movs	r2, #0
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4b0a:	mov	r4, r2
    4b0c:	ldr	r1, [r0, #0]
    4b0e:	ldr	r3, [pc, #356]	; (4c74 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x860>)
    4b10:	ldr	r6, [r1, #44]	; 0x2c
    4b12:	cmp	r6, r3
    4b14:	bne.n	4b96 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b16:	ldr	r0, [r0, #16]
    4b18:	cmp	r0, #0
    4b1a:	beq.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b1c:	ldr	r1, [r0, #0]
    4b1e:	ldr	r6, [r1, #44]	; 0x2c
    4b20:	cmp	r6, r3
    4b22:	bne.n	4b96 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b24:	ldr	r0, [r0, #16]
    4b26:	cmp	r0, #0
    4b28:	beq.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b2a:	ldr	r1, [r0, #0]
    4b2c:	ldr	r6, [r1, #44]	; 0x2c
    4b2e:	cmp	r6, r3
    4b30:	bne.n	4b96 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b32:	ldr	r0, [r0, #16]
    4b34:	cmp	r0, #0
    4b36:	beq.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b38:	ldr	r1, [r0, #0]
    4b3a:	ldr	r6, [r1, #44]	; 0x2c
    4b3c:	cmp	r6, r3
    4b3e:	bne.n	4b96 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b40:	ldr	r0, [r0, #16]
    4b42:	cmp	r0, #0
    4b44:	beq.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b46:	ldr	r1, [r0, #0]
    4b48:	ldr	r6, [r1, #44]	; 0x2c
    4b4a:	cmp	r6, r3
    4b4c:	bne.n	4b96 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b4e:	ldr	r0, [r0, #16]
    4b50:	cmp	r0, #0
    4b52:	beq.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b54:	ldr	r1, [r0, #0]
    4b56:	ldr	r6, [r1, #44]	; 0x2c
    4b58:	cmp	r6, r3
    4b5a:	bne.n	4b96 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b5c:	ldr	r0, [r0, #16]
    4b5e:	cmp	r0, #0
    4b60:	beq.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b62:	ldr	r1, [r0, #0]
    4b64:	ldr	r6, [r1, #44]	; 0x2c
    4b66:	cmp	r6, r3
    4b68:	bne.n	4b96 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b6a:	ldr	r0, [r0, #16]
    4b6c:	cmp	r0, #0
    4b6e:	beq.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b70:	ldr	r1, [r0, #0]
    4b72:	ldr	r6, [r1, #44]	; 0x2c
    4b74:	cmp	r6, r3
    4b76:	bne.n	4b96 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b78:	ldr	r0, [r0, #16]
    4b7a:	cmp	r0, #0
    4b7c:	beq.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b7e:	ldr	r1, [r0, #0]
    4b80:	ldr	r6, [r1, #44]	; 0x2c
    4b82:	cmp	r6, r3
    4b84:	bne.n	4b96 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x782>
    4b86:	ldr	r0, [r0, #16]
    4b88:	cmp	r0, #0
    4b8a:	beq.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b8c:	ldr	r3, [r0, #0]
    4b8e:	add	r1, sp, #40	; 0x28
    4b90:	ldr	r3, [r3, #44]	; 0x2c
    4b92:	blx	r3
    4b94:	b.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
    4b96:	add	r1, sp, #40	; 0x28
    4b98:	blx	r6
    4b9a:	b.n	4aee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6da>
	}
	virtual int available() {
		return (f) ? f->available() : 0;
    4b9c:	mov	r0, r3
    4b9e:	blx	r2
    4ba0:	b.n	4a48 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x634>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4ba2:	ldr	r5, [r1, #64]	; 0x40
    4ba4:	ldr	r2, [pc, #208]	; (4c78 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4ba6:	cmp	r5, r2
    4ba8:	bne.n	4c68 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4baa:	ldr	r3, [sp, #36]	; 0x24
    4bac:	cmp	r3, #0
    4bae:	beq.n	4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bb0:	ldr	r2, [r3, #0]
    4bb2:	ldr	r1, [pc, #196]	; (4c78 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4bb4:	ldr	r2, [r2, #64]	; 0x40
    4bb6:	cmp	r2, r1
    4bb8:	bne.n	4c2e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81a>
    4bba:	ldr	r0, [r3, #16]
    4bbc:	cmp	r0, #0
    4bbe:	beq.n	4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bc0:	ldr	r2, [r0, #0]
    4bc2:	ldr	r2, [r2, #64]	; 0x40
    4bc4:	cmp	r2, r1
    4bc6:	bne.n	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bc8:	ldr	r0, [r0, #16]
    4bca:	cmp	r0, #0
    4bcc:	beq.n	4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bce:	ldr	r2, [r0, #0]
    4bd0:	ldr	r2, [r2, #64]	; 0x40
    4bd2:	cmp	r2, r1
    4bd4:	bne.n	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bd6:	ldr	r0, [r0, #16]
    4bd8:	cmp	r0, #0
    4bda:	beq.n	4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bdc:	ldr	r2, [r0, #0]
    4bde:	ldr	r2, [r2, #64]	; 0x40
    4be0:	cmp	r2, r1
    4be2:	bne.n	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4be4:	ldr	r0, [r0, #16]
    4be6:	cbz	r0, 4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4be8:	ldr	r2, [r0, #0]
    4bea:	ldr	r2, [r2, #64]	; 0x40
    4bec:	cmp	r2, r1
    4bee:	bne.n	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bf0:	ldr	r0, [r0, #16]
    4bf2:	cbz	r0, 4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4bf4:	ldr	r2, [r0, #0]
    4bf6:	ldr	r2, [r2, #64]	; 0x40
    4bf8:	cmp	r2, r1
    4bfa:	bne.n	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4bfc:	ldr	r0, [r0, #16]
    4bfe:	cbz	r0, 4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c00:	ldr	r2, [r0, #0]
    4c02:	ldr	r2, [r2, #64]	; 0x40
    4c04:	cmp	r2, r1
    4c06:	bne.n	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4c08:	ldr	r0, [r0, #16]
    4c0a:	cbz	r0, 4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c0c:	ldr	r2, [r0, #0]
    4c0e:	ldr	r2, [r2, #64]	; 0x40
    4c10:	cmp	r2, r1
    4c12:	bne.n	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4c14:	ldr	r0, [r0, #16]
    4c16:	cbz	r0, 4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c18:	ldr	r2, [r0, #0]
    4c1a:	ldr	r2, [r2, #64]	; 0x40
    4c1c:	cmp	r2, r1
    4c1e:	bne.n	4c30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x81c>
    4c20:	ldr	r0, [r0, #16]
    4c22:	cbz	r0, 4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c24:	ldr	r3, [r0, #0]
    4c26:	ldr	r3, [r3, #64]	; 0x40
    4c28:	blx	r3
    4c2a:	ldr	r3, [sp, #36]	; 0x24
    4c2c:	b.n	4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4c2e:	mov	r0, r3
    4c30:	blx	r2
    4c32:	ldr	r3, [sp, #36]	; 0x24
    if(nd<nbuf) break;  // end of file
  }
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    4c34:	mvns	r4, r4
    4c36:	lsrs	r4, r4, #31
    4c38:	b.n	486e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x45a>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c3a:	mov	r0, r5
    4c3c:	blx	r3
    4c3e:	b.n	46a0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x28c>
  File f2 = sd_open(store1,newfilename,FILE_WRITE_BEGIN);
  if(!f2) { f1.close(); {DBG_FAIL_MACRO; return false;}}

  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    4c40:	mov	r4, r0
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4c42:	cmp	r3, #0
    4c44:	beq.n	4cac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x898>
    4c46:	ldr	r2, [r3, #0]
    4c48:	ldr	r1, [pc, #44]	; (4c78 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x864>)
    4c4a:	ldr	r5, [r2, #64]	; 0x40
    4c4c:	cmp	r5, r1
    4c4e:	bne.n	4c68 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x854>
    4c50:	ldr	r0, [r3, #16]
    4c52:	cmp	r0, #0
    4c54:	beq.n	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4c56:	b.n	499e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x58a>
    4c58:	blx	r3
    4c5a:	b.n	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c5c:	mov	r0, r7
    4c5e:	blx	r3
    4c60:	b.n	4698 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x284>
    4c62:	mov	r0, r5
    4c64:	blx	r3
    4c66:	b.n	497a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x566>
	}
	virtual uint64_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    4c68:	mov	r0, r3
    4c6a:	blx	r5
    4c6c:	b.n	4baa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x796>
    4c6e:	nop
    4c70:	.word	0x0000047d
    4c74:	.word	0x00000489
    4c78:	.word	0x00000501
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    4c7c:	mov	r0, r7
    4c7e:	blx	r3
    4c80:	b.n	4972 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x55e>
    4c82:	mov	r0, r8
    4c84:	blx	r3
    4c86:	b.n	47b2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x39e>
    4c88:	mov	r0, r9
    4c8a:	blx	r3
    4c8c:	b.n	47aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x396>
    4c8e:	mov	r0, r8
    4c90:	blx	r3
    4c92:	b.n	496a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x556>
    4c94:	mov	r0, r9
    4c96:	blx	r3
    4c98:	b.n	4962 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x54e>
    4c9a:	mov	r0, sl
    4c9c:	blx	r3
    4c9e:	b.n	47a2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38e>
    4ca0:	mov	r0, fp
    4ca2:	blx	r3
    4ca4:	b.n	479a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x386>
    4ca6:	ldr	r3, [sp, #16]
    4ca8:	ldr	r6, [pc, #12]	; (4cb8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8a4>)
    4caa:	b.n	497c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x568>
    4cac:	mov	r4, r3
    4cae:	b.n	4c34 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x820>
    4cb0:	mov	r0, sl
    4cb2:	blx	r3
    4cb4:	b.n	495a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x546>
    4cb6:	nop
    4cb8:	.word	0x00014bdc

00004cbc <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4cbc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cc0:	mov	r8, r1
    4cc2:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    4cc6:	cmp.w	r3, #4294967295
    4cca:	ite	ne
    4ccc:	movne	r7, r3
    4cce:	moveq	r7, r2

    Record p1 = ReadIndexRecord(handle);
    4cd0:	mov	r1, r0
    WriteIndexRecord(newParent,p2o);      
    return false;
  }

  uint32_t MTPStorage_SD::copy(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    4cd2:	mov	r4, r0
    if(newParent==0xFFFFFFFFUL) newParent=newStore;

    Record p1 = ReadIndexRecord(handle);
    4cd4:	mov	r2, r8
    4cd6:	add	r0, sp, #520	; 0x208
    4cd8:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    4cdc:	mov	r2, r7
    4cde:	mov	r1, r4
    4ce0:	add	r0, sp, #792	; 0x318
    4ce2:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    uint32_t newHandle;
    if(p1.isdir)
    4ce6:	ldrb.w	r6, [sp, #532]	; 0x214
    4cea:	cmp	r6, #0
    4cec:	bne.n	4d74 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0xb8>
      CopyFiles(handle, p2.store, newHandle);
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    4cee:	add	r1, sp, #536	; 0x218
    4cf0:	mov.w	r2, #256	; 0x100
    4cf4:	add.w	r0, sp, #1080	; 0x438
    4cf8:	bl	116a0 <strlcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4cfc:	ldr.w	r5, [r4, #244]	; 0xf4
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    4d00:	ldrh.w	r0, [sp, #806]	; 0x326
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    4d04:	ldr	r3, [sp, #796]	; 0x31c
    }
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
    4d06:	strh.w	r0, [sp, #1078]	; 0x436
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4d0a:	adds	r2, r5, #1
    4d0c:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    4d10:	mov	r1, r5
    4d12:	add.w	r2, sp, #1064	; 0x428
    4d16:	mov	r0, r4
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
    4d18:	str.w	r3, [sp, #1072]	; 0x430
    else
    {  
      Record r;
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
      r.store = p2.store;
      r.parent = newParent;
    4d1c:	str.w	r7, [sp, #1064]	; 0x428
      r.child = 0;
    4d20:	str.w	r6, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
      r.isdir = 0;
    4d24:	strb.w	r6, [sp, #1076]	; 0x434
      r.scanned = 0;
    4d28:	strb.w	r6, [sp, #1077]	; 0x435
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4d2c:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);
    4d30:	add	r2, sp, #792	; 0x318
    4d32:	mov	r1, r7
    4d34:	mov	r0, r4
      r.parent = newParent;
      r.child = 0;
      r.sibling = p2.child;
      r.isdir = 0;
      r.scanned = 0;
      newHandle = p2.child = AppendIndexRecord(r);
    4d36:	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    4d38:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    4d3c:	mov	r1, r8
    4d3e:	add	r2, sp, #8
    4d40:	mov.w	r3, #256	; 0x100
    4d44:	mov	r0, r4
    4d46:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    4d4a:	add	r6, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
      WriteIndexRecord(newParent, p2);

      char oldfilename[MAX_FILENAME_LEN];
      char newfilename[MAX_FILENAME_LEN];
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    4d4c:	mov	r7, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    4d4e:	mov	r1, r5
    4d50:	mov	r2, r6
    4d52:	mov.w	r3, #256	; 0x100
    4d56:	mov	r0, r4
    4d58:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>

      sd_copy(store0,oldfilename,store1,newfilename);
    4d5c:	str	r6, [sp, #0]
    4d5e:	mov	r3, r0
    4d60:	add	r2, sp, #8
    4d62:	mov	r1, r7
    4d64:	adds	r0, r4, #4
    4d66:	bl	4414 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }

    return newHandle;
  }
    4d6a:	mov	r0, r5
    4d6c:	add.w	sp, sp, #1336	; 0x538
    4d70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
    4d74:	ldrh.w	r1, [sp, #534]	; 0x216
    4d78:	mov	r2, r8
    4d7a:	mov	r0, r4
    4d7c:	adds	r1, #1
    4d7e:	bl	32d0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    4d82:	ldrb.w	r3, [sp, #532]	; 0x214
    4d86:	ldr	r0, [r4, #0]
    4d88:	ldrh.w	r1, [sp, #806]	; 0x326
    4d8c:	add	r2, sp, #536	; 0x218
    4d8e:	adds	r3, #0
    4d90:	str	r2, [sp, #0]
    4d92:	it	ne
    4d94:	movne	r3, #1
    4d96:	mov	r2, r7
    4d98:	ldr	r5, [r0, #44]	; 0x2c
    4d9a:	mov	r0, r4
    4d9c:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    4d9e:	ldr	r3, [r4, #0]
    4da0:	ldrh.w	r2, [sp, #806]	; 0x326
    4da4:	ldr	r6, [r3, #84]	; 0x54

    uint32_t newHandle;
    if(p1.isdir)
    {
      ScanDir(p1.store+1,handle);
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    4da6:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    4da8:	mov	r3, r0
    4daa:	mov	r1, r8
    4dac:	mov	r0, r4
    4dae:	blx	r6

      sd_copy(store0,oldfilename,store1,newfilename);
    }

    return newHandle;
  }
    4db0:	mov	r0, r5
    4db2:	add.w	sp, sp, #1336	; 0x538
    4db6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dba:	nop

00004dbc <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:

bool MTPStorage_SD::CopyFiles(uint32_t handle, uint32_t store, uint32_t newHandle)
{ // assume handle and newHandle point to existing directories
    4dbc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dc0:	mov	r4, r0
    4dc2:	subw	sp, sp, #1612	; 0x64c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    4dc6:	cmp.w	r3, #4294967295
    4dca:	ite	ne
    4dcc:	movne	r8, r3
    4dce:	moveq	r8, r2
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4dd0:	add	r0, sp, #520	; 0x208
    4dd2:	mov	r2, r1
    4dd4:	mov	r1, r4
    4dd6:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    4dda:	mov	r2, r8
    4ddc:	mov	r1, r4
    4dde:	add	r0, sp, #792	; 0x318
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
  #if DEBUG>1
    Serial.printf("%d -> %d\n",handle,newHandle);
  #endif

  Record p1=ReadIndexRecord(handle);
    4de0:	ldrh.w	r9, [sp, #534]	; 0x216
  Record p2=ReadIndexRecord(newHandle);
    4de4:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    4de8:	ldr	r6, [sp, #524]	; 0x20c
  uint32_t iy= 0;
  while(ix)
    4dea:	cmp	r6, #0
    4dec:	beq.n	4ec2 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x106>
    4dee:	movs	r5, #0
    4df0:	add	r7, sp, #264	; 0x108

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4df2:	add.w	sl, r4, #4
    4df6:	b.n	4e2c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    4df8:	ldrh.w	r3, [sp, #1350]	; 0x546
    4dfc:	add.w	r3, r4, r3, lsl #2
    4e00:	ldr	r0, [r3, #88]	; 0x58
    4e02:	ldr	r3, [r0, #0]
    4e04:	ldr	r3, [r3, #8]
    4e06:	blx	r3

    if(py.isdir) 
    { 
      sd_mkdir(py.store,newfilename);

      ScanDir(p1.store,ix); 
    4e08:	mov	r2, r6
    4e0a:	mov	r1, r9
    4e0c:	mov	r0, r4
    4e0e:	bl	32d0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    4e12:	ldr	r3, [r4, #0]
    4e14:	ldrh.w	r2, [sp, #806]	; 0x326
    4e18:	ldr.w	fp, [r3, #84]	; 0x54
    4e1c:	mov	r1, r6
    4e1e:	mov	r3, r5
    4e20:	mov	r0, r4
    4e22:	blx	fp
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
    4e24:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4e28:	cmp	r6, #0
    4e2a:	beq.n	4eac <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
  { // get child
    Record px = ReadIndexRecord(ix) ;
    4e2c:	mov	r2, r6
    4e2e:	mov	r1, r4
    4e30:	add.w	r0, sp, #1064	; 0x428
    4e34:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    4e38:	mov.w	r2, #272	; 0x110
    4e3c:	add.w	r1, sp, #1064	; 0x428
    4e40:	add.w	r0, sp, #1336	; 0x538
    4e44:	bl	db90 <memcpy>
    py.store = p2.store;
    py.parent = newHandle;
    py.sibling = iy;
    4e48:	str.w	r5, [sp, #1344]	; 0x540
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4e4c:	ldr.w	r5, [r4, #244]	; 0xf4
  uint32_t iy= 0;
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    4e50:	ldrh.w	r3, [sp, #806]	; 0x326
    4e54:	strh.w	r3, [sp, #1350]	; 0x546
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    4e58:	adds	r2, r5, #1
    4e5a:	str.w	r2, [r4, #244]	; 0xf4
    WriteIndexRecord(new_record, r);
    4e5e:	mov	r1, r5
    4e60:	add.w	r2, sp, #1336	; 0x538
    4e64:	mov	r0, r4
  while(ix)
  { // get child
    Record px = ReadIndexRecord(ix) ;
    Record py = px;
    py.store = p2.store;
    py.parent = newHandle;
    4e66:	str.w	r8, [sp, #1336]	; 0x538
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    4e6a:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    py.sibling = iy;
    iy = AppendIndexRecord(py);

    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    4e6e:	mov.w	r3, #256	; 0x100
    4e72:	add	r2, sp, #8
    4e74:	mov	r1, r6
    4e76:	mov	r0, r4
    4e78:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    4e7c:	mov	r1, r5
    4e7e:	mov.w	r3, #256	; 0x100
    4e82:	mov	r2, r7
    4e84:	mov	r0, r4
    4e86:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    if(py.isdir) 
    4e8a:	ldrb.w	r3, [sp, #1348]	; 0x544
    4e8e:	mov	r1, r7

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4e90:	add	r2, sp, #8
    4e92:	mov	r0, sl
    char oldfilename[MAX_FILENAME_LEN];
    char newfilename[MAX_FILENAME_LEN];
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);

    if(py.isdir) 
    4e94:	cmp	r3, #0
    4e96:	bne.n	4df8 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>

      ScanDir(p1.store,ix); 
      CopyFiles(ix,p2.store,iy); 
    }
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    4e98:	ldrh.w	r3, [sp, #1350]	; 0x546
    4e9c:	str	r7, [sp, #0]
    4e9e:	mov	r1, r9
    4ea0:	bl	4414 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    }
    ix = px.sibling;
    4ea4:	ldr.w	r6, [sp, #1072]	; 0x430

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
  while(ix)
    4ea8:	cmp	r6, #0
    4eaa:	bne.n	4e2c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x70>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
  WriteIndexRecord(newHandle,p2);
    4eac:	mov	r0, r4
    4eae:	mov	r1, r8
    4eb0:	add	r2, sp, #792	; 0x318
    else
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    }
    ix = px.sibling;
  }
  p2.child=iy;
    4eb2:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    4eb4:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  return true;
}
    4eb8:	movs	r0, #1
    4eba:	addw	sp, sp, #1612	; 0x64c
    4ebe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  #endif

  Record p1=ReadIndexRecord(handle);
  Record p2=ReadIndexRecord(newHandle);
  uint32_t ix= p1.child;
  uint32_t iy= 0;
    4ec2:	mov	r5, r6
    4ec4:	b.n	4eac <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xf0>
    4ec6:	nop

00004ec8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    4ec8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ecc:	mov	r5, r3
    4ece:	add.w	r3, r0, r3, lsl #2
    4ed2:	mov	r4, r0
    4ed4:	ldr	r0, [r3, #84]	; 0x54
    4ed6:	ldr	r6, [sp, #24]
    4ed8:	ldr	r3, [r0, #0]
    4eda:	mov	r7, r1
    4edc:	ldr	r3, [r3, #8]
    4ede:	mov	r1, r6
    4ee0:	mov	r8, r2
    4ee2:	blx	r3

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    4ee4:	cbnz	r0, 4eea <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x22>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    4ee6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4eea:	str	r6, [sp, #24]
    4eec:	mov	r3, r5
    4eee:	mov	r2, r8
    4ef0:	mov	r1, r7
    4ef2:	mov	r0, r4
    4ef4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4ef8:	b.w	4efc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>

00004efc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]>:
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    4efc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f00:	add.w	sl, r0, r1, lsl #2
    4f04:	mov	r8, r1
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    4f06:	ldr.w	r1, [sl, #84]	; 0x54
    4f0a:	sub.w	sp, sp, #596	; 0x254
    4f0e:	mov	r9, r0
    4f10:	ldr	r0, [r1, #0]
    4f12:	str	r3, [sp, #8]
    4f14:	ldr	r4, [r0, #0]
    4f16:	str	r2, [sp, #12]
    4f18:	movs	r3, #0
    4f1a:	add	r0, sp, #40	; 0x28
    4f1c:	blx	r4
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    4f1e:	ldr	r3, [sp, #56]	; 0x38
    4f20:	cmp	r3, #0
    4f22:	beq.w	587a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x97e>
    4f26:	ldr	r2, [r3, #0]
    4f28:	ldr	r6, [pc, #460]	; (50f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1fc>)
    4f2a:	ldr	r2, [r2, #68]	; 0x44
    4f2c:	cmp	r2, r6
    4f2e:	bne.w	5206 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30a>
    4f32:	ldr	r0, [r3, #16]
    4f34:	cmp	r0, #0
    4f36:	beq.w	50b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f3a:	ldr	r2, [r0, #0]
    4f3c:	ldr	r2, [r2, #68]	; 0x44
    4f3e:	cmp	r2, r6
    4f40:	bne.w	5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f44:	ldr	r0, [r0, #16]
    4f46:	cmp	r0, #0
    4f48:	beq.w	50b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f4c:	ldr	r2, [r0, #0]
    4f4e:	ldr	r2, [r2, #68]	; 0x44
    4f50:	cmp	r2, r6
    4f52:	bne.w	5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f56:	ldr	r0, [r0, #16]
    4f58:	cmp	r0, #0
    4f5a:	beq.w	50b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f5e:	ldr	r2, [r0, #0]
    4f60:	ldr	r2, [r2, #68]	; 0x44
    4f62:	cmp	r2, r6
    4f64:	bne.w	5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f68:	ldr	r0, [r0, #16]
    4f6a:	cmp	r0, #0
    4f6c:	beq.w	50b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f70:	ldr	r2, [r0, #0]
    4f72:	ldr	r2, [r2, #68]	; 0x44
    4f74:	cmp	r2, r6
    4f76:	bne.w	5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f7a:	ldr	r0, [r0, #16]
    4f7c:	cmp	r0, #0
    4f7e:	beq.w	50b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f82:	ldr	r2, [r0, #0]
    4f84:	ldr	r2, [r2, #68]	; 0x44
    4f86:	cmp	r2, r6
    4f88:	bne.w	5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f8c:	ldr	r0, [r0, #16]
    4f8e:	cmp	r0, #0
    4f90:	beq.w	50b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4f94:	ldr	r2, [r0, #0]
    4f96:	ldr	r2, [r2, #68]	; 0x44
    4f98:	cmp	r2, r6
    4f9a:	bne.w	5208 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x30c>
    4f9e:	ldr	r0, [r0, #16]
    4fa0:	cmp	r0, #0
    4fa2:	beq.w	50b4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1b8>
    4fa6:	ldr	r3, [r0, #0]
    4fa8:	ldr	r3, [r3, #68]	; 0x44
    4faa:	blx	r3
    4fac:	mov	r4, r0
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    4fae:	cmp	r4, #0
    4fb0:	beq.w	5930 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa34>
    4fb4:	ldr.w	fp, [pc, #336]	; 5108 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    4fb8:	add	r4, sp, #336	; 0x150
  { while(1)
    {
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    4fba:	mov.w	r2, #256	; 0x100
    4fbe:	ldr	r1, [sp, #12]
    4fc0:	add	r0, sp, #80	; 0x50
    4fc2:	bl	116a0 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    4fc6:	add	r0, sp, #80	; 0x50
    4fc8:	bl	11700 <strlen>
    4fcc:	add	r3, sp, #80	; 0x50
    4fce:	add	r0, r3
    4fd0:	ldrb.w	r3, [r0, #-1]
    4fd4:	cmp	r3, #47	; 0x2f
    4fd6:	beq.n	4fe4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xe8>
    4fd8:	mov.w	r2, #256	; 0x100
    4fdc:	ldr	r1, [pc, #284]	; (50fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    4fde:	add	r0, sp, #80	; 0x50
    4fe0:	bl	1164c <strlcat>

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    4fe4:	mov.w	r2, #256	; 0x100
    4fe8:	ldr	r1, [sp, #632]	; 0x278
    4fea:	mov	r0, r4
    4fec:	bl	116a0 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    4ff0:	mov	r0, r4
    4ff2:	bl	11700 <strlen>
    4ff6:	add	r0, r4
    4ff8:	ldrb.w	r3, [r0, #-1]
    4ffc:	cmp	r3, #47	; 0x2f
    4ffe:	beq.n	500c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x110>
    5000:	mov.w	r2, #256	; 0x100
    5004:	ldr	r1, [pc, #244]	; (50fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x200>)
    5006:	mov	r0, r4
    5008:	bl	1164c <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    500c:	ldr	r1, [sp, #56]	; 0x38
    500e:	cmp	r1, #0
    5010:	beq.w	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5014:	ldr	r3, [r1, #0]
    5016:	ldr	r2, [pc, #232]	; (5100 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x204>)
    5018:	ldr	r3, [r3, #80]	; 0x50
    501a:	cmp	r3, r2
    501c:	bne.w	52f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5020:	ldr	r1, [r1, #16]
    5022:	cmp	r1, #0
    5024:	beq.w	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5028:	ldr	r3, [r1, #0]
    502a:	ldr	r3, [r3, #80]	; 0x50
    502c:	cmp	r3, r2
    502e:	bne.w	52f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5032:	ldr	r1, [r1, #16]
    5034:	cmp	r1, #0
    5036:	beq.w	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    503a:	ldr	r3, [r1, #0]
    503c:	ldr	r3, [r3, #80]	; 0x50
    503e:	cmp	r3, r2
    5040:	bne.w	52f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5044:	ldr	r1, [r1, #16]
    5046:	cmp	r1, #0
    5048:	beq.w	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    504c:	ldr	r3, [r1, #0]
    504e:	ldr	r3, [r3, #80]	; 0x50
    5050:	cmp	r3, r2
    5052:	bne.w	52f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5056:	ldr	r1, [r1, #16]
    5058:	cmp	r1, #0
    505a:	beq.w	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    505e:	ldr	r3, [r1, #0]
    5060:	ldr	r3, [r3, #80]	; 0x50
    5062:	cmp	r3, r2
    5064:	bne.w	52f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    5068:	ldr	r1, [r1, #16]
    506a:	cmp	r1, #0
    506c:	beq.w	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5070:	ldr	r3, [r1, #0]
    5072:	ldr	r3, [r3, #80]	; 0x50
    5074:	cmp	r3, r2
    5076:	bne.w	52f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    507a:	ldr	r1, [r1, #16]
    507c:	cmp	r1, #0
    507e:	beq.w	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5082:	ldr	r3, [r1, #0]
    5084:	ldr	r3, [r3, #80]	; 0x50
    5086:	cmp	r3, r2
    5088:	bne.w	52f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    508c:	ldr	r1, [r1, #16]
    508e:	cmp	r1, #0
    5090:	beq.w	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5094:	ldr	r3, [r1, #0]
    5096:	ldr	r3, [r3, #80]	; 0x50
    5098:	cmp	r3, r2
    509a:	bne.w	52f0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f4>
    509e:	ldr	r1, [r1, #16]
    50a0:	cmp	r1, #0
    50a2:	beq.w	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    50a6:	ldr	r3, [r1, #0]
    50a8:	add	r5, sp, #60	; 0x3c
    50aa:	ldr	r3, [r3, #80]	; 0x50
    50ac:	mov	r0, r5
    50ae:	movs	r2, #0
    50b0:	blx	r3
    50b2:	b.n	52f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3fc>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50b4:	ldr.w	fp, [pc, #80]	; 5108 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x20c>
    50b8:	str.w	fp, [sp, #40]	; 0x28
    50bc:	movs	r4, #0
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50be:	ldr	r2, [r3, #16]
    50c0:	subs	r2, #1
    50c2:	str	r2, [r3, #16]
    50c4:	cbnz	r2, 50ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    50c6:	ldr	r5, [sp, #56]	; 0x38
    50c8:	cbz	r5, 50ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    50ca:	ldr	r2, [r5, #0]
    50cc:	ldr	r3, [pc, #52]	; (5104 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x208>)
    50ce:	ldr	r2, [r2, #32]
    50d0:	cmp	r2, r3
    50d2:	bne.w	5894 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x998>
    50d6:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    50d8:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    50dc:	cbz	r1, 50e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    50de:	ldr	r2, [r1, #16]
    50e0:	subs	r2, #1
    50e2:	str	r2, [r1, #16]
    50e4:	cbz	r2, 510c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x210>
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    50e6:	mov	r0, r5
    50e8:	movs	r1, #20
    50ea:	bl	f95c <operator delete(void*, unsigned int)>
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    50ee:	mov	r0, r4
    50f0:	add.w	sp, sp, #596	; 0x254
    50f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50f8:	.word	0x0000050d
    50fc:	.word	0x00014ec4
    5100:	.word	0x00000539
    5104:	.word	0x00000f31
    5108:	.word	0x00014bdc
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    510c:	ldr	r6, [r5, #16]
    510e:	cmp	r6, #0
    5110:	beq.n	50e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    5112:	ldr	r2, [r6, #0]
    5114:	ldr	r2, [r2, #32]
    5116:	cmp	r2, r3
    5118:	bne.w	58aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ae>
    511c:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    511e:	str.w	fp, [r6]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5122:	cmp	r1, #0
    5124:	beq.n	51fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    5126:	ldr	r2, [r1, #16]
    5128:	subs	r2, #1
    512a:	str	r2, [r1, #16]
    512c:	cmp	r2, #0
    512e:	bne.n	51fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    5130:	ldr	r7, [r6, #16]
    5132:	cmp	r7, #0
    5134:	beq.n	51fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    5136:	ldr	r2, [r7, #0]
    5138:	ldr	r2, [r2, #32]
    513a:	cmp	r2, r3
    513c:	bne.w	58c6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ca>
    5140:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5142:	str.w	fp, [r7]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5146:	cmp	r1, #0
    5148:	beq.n	51f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    514a:	ldr	r2, [r1, #16]
    514c:	subs	r2, #1
    514e:	str	r2, [r1, #16]
    5150:	cmp	r2, #0
    5152:	bne.n	51f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    5154:	ldr.w	r8, [r7, #16]
    5158:	cmp.w	r8, #0
    515c:	beq.n	51f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    515e:	ldr.w	r2, [r8]
    5162:	ldr	r2, [r2, #32]
    5164:	cmp	r2, r3
    5166:	bne.w	58dc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e0>
    516a:	ldr.w	r1, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    516e:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5172:	cmp	r1, #0
    5174:	beq.n	51ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    5176:	ldr	r2, [r1, #16]
    5178:	subs	r2, #1
    517a:	str	r2, [r1, #16]
    517c:	cmp	r2, #0
    517e:	bne.n	51ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    5180:	ldr.w	r9, [r8, #16]
    5184:	cmp.w	r9, #0
    5188:	beq.n	51ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    518a:	ldr.w	r2, [r9]
    518e:	ldr	r2, [r2, #32]
    5190:	cmp	r2, r3
    5192:	bne.w	5904 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa08>
    5196:	ldr.w	r1, [r9, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    519a:	str.w	fp, [r9]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    519e:	cbz	r1, 51e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    51a0:	ldr	r2, [r1, #16]
    51a2:	subs	r2, #1
    51a4:	str	r2, [r1, #16]
    51a6:	cbnz	r2, 51e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    51a8:	ldr.w	sl, [r9, #16]
    51ac:	cmp.w	sl, #0
    51b0:	beq.n	51e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    51b2:	ldr.w	r2, [sl]
    51b6:	ldr	r2, [r2, #32]
    51b8:	cmp	r2, r3
    51ba:	bne.w	590a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa0e>
    51be:	ldr.w	r2, [sl, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    51c2:	str.w	fp, [sl]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    51c6:	cbz	r2, 51dc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    51c8:	ldr	r3, [r2, #16]
    51ca:	subs	r3, #1
    51cc:	str	r3, [r2, #16]
    51ce:	cbnz	r3, 51dc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    51d0:	ldr.w	r0, [sl, #16]
    51d4:	cbz	r0, 51dc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e0>
    51d6:	ldr	r3, [r0, #0]
    51d8:	ldr	r3, [r3, #32]
    51da:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    51dc:	mov	r0, sl
    51de:	movs	r1, #20
    51e0:	bl	f95c <operator delete(void*, unsigned int)>
    51e4:	mov	r0, r9
    51e6:	movs	r1, #20
    51e8:	bl	f95c <operator delete(void*, unsigned int)>
    51ec:	mov	r0, r8
    51ee:	movs	r1, #20
    51f0:	bl	f95c <operator delete(void*, unsigned int)>
    51f4:	mov	r0, r7
    51f6:	movs	r1, #20
    51f8:	bl	f95c <operator delete(void*, unsigned int)>
    51fc:	mov	r0, r6
    51fe:	movs	r1, #20
    5200:	bl	f95c <operator delete(void*, unsigned int)>
    5204:	b.n	50e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    5206:	mov	r0, r3
    5208:	blx	r2
    520a:	mov	r4, r0
    520c:	b.n	4fae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xb2>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    520e:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5212:	ldr	r3, [r2, #16]
    5214:	subs	r3, #1
    5216:	str	r3, [r2, #16]
    5218:	cmp	r3, #0
    521a:	bne.n	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    521c:	ldr	r4, [r5, #16]
    521e:	cmp	r4, #0
    5220:	beq.n	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    5222:	ldr	r2, [r4, #0]
    5224:	ldr	r3, [pc, #192]	; (52e8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ec>)
    5226:	ldr	r2, [r2, #32]
    5228:	cmp	r2, r3
    522a:	bne.w	58b6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ba>
    522e:	ldr	r1, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5230:	str.w	fp, [r4]
    5234:	ldr	r0, [pc, #180]	; (52ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5236:	cmp	r1, #0
    5238:	beq.n	52c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    523a:	ldr	r2, [r1, #16]
    523c:	subs	r2, #1
    523e:	str	r2, [r1, #16]
    5240:	cmp	r2, #0
    5242:	bne.n	52c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    5244:	ldr	r5, [r4, #16]
    5246:	cmp	r5, #0
    5248:	beq.n	52c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    524a:	ldr	r2, [r5, #0]
    524c:	ldr	r2, [r2, #32]
    524e:	cmp	r2, r3
    5250:	bne.w	58cc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d0>
    5254:	ldr	r1, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5256:	str	r0, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5258:	cmp	r1, #0
    525a:	beq.n	52ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    525c:	ldr	r2, [r1, #16]
    525e:	subs	r2, #1
    5260:	str	r2, [r1, #16]
    5262:	cbnz	r2, 52ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5264:	ldr	r6, [r5, #16]
    5266:	cbz	r6, 52ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    5268:	ldr	r2, [r6, #0]
    526a:	ldr	r2, [r2, #32]
    526c:	cmp	r2, r3
    526e:	bne.w	58f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9f6>
    5272:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5274:	str.w	fp, [r6]
    5278:	ldr	r0, [pc, #112]	; (52ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3f0>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    527a:	cbz	r1, 52b2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    527c:	ldr	r2, [r1, #16]
    527e:	subs	r2, #1
    5280:	str	r2, [r1, #16]
    5282:	cbnz	r2, 52b2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    5284:	ldr	r7, [r6, #16]
    5286:	cbz	r7, 52b2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    5288:	ldr	r2, [r7, #0]
    528a:	ldr	r2, [r2, #32]
    528c:	cmp	r2, r3
    528e:	bne.w	58f8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9fc>
    5292:	ldr	r2, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5294:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5296:	cbz	r2, 52aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    5298:	ldr	r3, [r2, #16]
    529a:	subs	r3, #1
    529c:	str	r3, [r2, #16]
    529e:	cbnz	r3, 52aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    52a0:	ldr	r0, [r7, #16]
    52a2:	cbz	r0, 52aa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ae>
    52a4:	ldr	r3, [r0, #0]
    52a6:	ldr	r3, [r3, #32]
    52a8:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    52aa:	mov	r0, r7
    52ac:	movs	r1, #20
    52ae:	bl	f95c <operator delete(void*, unsigned int)>
    52b2:	mov	r0, r6
    52b4:	movs	r1, #20
    52b6:	bl	f95c <operator delete(void*, unsigned int)>
    52ba:	mov	r0, r5
    52bc:	movs	r1, #20
    52be:	bl	f95c <operator delete(void*, unsigned int)>
    52c2:	mov	r0, r4
    52c4:	movs	r1, #20
    52c6:	bl	f95c <operator delete(void*, unsigned int)>
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    52ca:	ldr.w	r0, [sl, #84]	; 0x54
    52ce:	ldr	r1, [sp, #12]
    52d0:	ldr	r3, [r0, #0]
    52d2:	ldr	r3, [r3, #20]
    52d4:	blx	r3
    52d6:	ldr	r3, [sp, #56]	; 0x38
    52d8:	mov	r4, r0
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    52da:	str.w	fp, [sp, #40]	; 0x28
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    52de:	cmp	r3, #0
    52e0:	bne.w	50be <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1c2>
    52e4:	b.n	50ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    52e6:	nop
    52e8:	.word	0x00000f31
    52ec:	.word	0x00014bdc
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    52f0:	add	r5, sp, #60	; 0x3c
    52f2:	mov	r0, r5
    52f4:	movs	r2, #0
    52f6:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    52f8:	ldr	r2, [r5, #16]
    52fa:	cmp	r2, #0
    52fc:	beq.n	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    52fe:	ldr	r3, [r2, #0]
    5300:	ldr	r3, [r3, #68]	; 0x44
    5302:	cmp	r3, r6
    5304:	bne.w	5848 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94c>
    5308:	ldr	r0, [r2, #16]
    530a:	cmp	r0, #0
    530c:	beq.w	520e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5310:	ldr	r1, [r0, #0]
    5312:	ldr	r1, [r1, #68]	; 0x44
    5314:	cmp	r1, r6
    5316:	bne.w	585e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x962>
    531a:	ldr	r0, [r0, #16]
    531c:	cmp	r0, #0
    531e:	beq.w	520e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5322:	ldr	r3, [r0, #0]
    5324:	ldr	r3, [r3, #68]	; 0x44
    5326:	cmp	r3, r6
    5328:	bne.w	584a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    532c:	ldr	r0, [r0, #16]
    532e:	cmp	r0, #0
    5330:	beq.w	520e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5334:	ldr	r3, [r0, #0]
    5336:	ldr	r3, [r3, #68]	; 0x44
    5338:	cmp	r3, r6
    533a:	bne.w	584a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    533e:	ldr	r0, [r0, #16]
    5340:	cmp	r0, #0
    5342:	beq.w	520e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5346:	ldr	r3, [r0, #0]
    5348:	ldr	r3, [r3, #68]	; 0x44
    534a:	cmp	r3, r6
    534c:	bne.w	584a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    5350:	ldr	r0, [r0, #16]
    5352:	cmp	r0, #0
    5354:	beq.w	520e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    5358:	ldr	r3, [r0, #0]
    535a:	ldr	r3, [r3, #68]	; 0x44
    535c:	cmp	r3, r6
    535e:	bne.w	584a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x94e>
    5362:	ldr	r0, [r0, #16]
    5364:	cmp	r0, #0
    5366:	beq.w	520e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x312>
    536a:	ldr	r3, [r0, #0]
    536c:	ldr	r3, [r3, #68]	; 0x44
    536e:	blx	r3

      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);

      File f2=f1.openNextFile();
      if(!f2) break;
    5370:	cmp	r0, #0
    5372:	beq.w	5922 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa26>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5376:	ldr	r0, [r5, #16]
    5378:	cmp	r0, #0
    537a:	beq.w	5844 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    537e:	ldr	r2, [r0, #0]
    5380:	ldr	r3, [pc, #696]	; (563c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    5382:	ldr	r2, [r2, #72]	; 0x48
    5384:	cmp	r2, r3
    5386:	bne.w	584e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    538a:	ldr	r0, [r0, #16]
    538c:	cmp	r0, #0
    538e:	beq.w	5844 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    5392:	ldr	r2, [r0, #0]
    5394:	ldr	r2, [r2, #72]	; 0x48
    5396:	cmp	r2, r3
    5398:	bne.w	584e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    539c:	ldr	r0, [r0, #16]
    539e:	cmp	r0, #0
    53a0:	beq.w	5844 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    53a4:	ldr	r2, [r0, #0]
    53a6:	ldr	r2, [r2, #72]	; 0x48
    53a8:	cmp	r2, r3
    53aa:	bne.w	584e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    53ae:	ldr	r0, [r0, #16]
    53b0:	cmp	r0, #0
    53b2:	beq.w	5844 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    53b6:	ldr	r2, [r0, #0]
    53b8:	ldr	r2, [r2, #72]	; 0x48
    53ba:	cmp	r2, r3
    53bc:	bne.w	584e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    53c0:	ldr	r0, [r0, #16]
    53c2:	cmp	r0, #0
    53c4:	beq.w	5844 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    53c8:	ldr	r2, [r0, #0]
    53ca:	ldr	r2, [r2, #72]	; 0x48
    53cc:	cmp	r2, r3
    53ce:	bne.w	584e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    53d2:	ldr	r0, [r0, #16]
    53d4:	cmp	r0, #0
    53d6:	beq.w	5844 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    53da:	ldr	r2, [r0, #0]
    53dc:	ldr	r2, [r2, #72]	; 0x48
    53de:	cmp	r2, r3
    53e0:	bne.w	584e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x952>
    53e4:	ldr	r0, [r0, #16]
    53e6:	cmp	r0, #0
    53e8:	beq.w	5844 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x948>
    53ec:	ldr	r3, [r0, #0]
    53ee:	ldr	r3, [r3, #72]	; 0x48
    53f0:	blx	r3
    53f2:	mov	r1, r0
      { // generate filenames
        strlcat(tmp0Name,f2.name(),MAX_FILENAME_LEN);
    53f4:	mov.w	r2, #256	; 0x100
    53f8:	add	r0, sp, #80	; 0x50
    53fa:	bl	1164c <strlcat>
    53fe:	ldr	r0, [r5, #16]
    5400:	cmp	r0, #0
    5402:	beq.w	5840 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    5406:	ldr	r2, [r0, #0]
    5408:	ldr	r3, [pc, #560]	; (563c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x740>)
    540a:	ldr	r2, [r2, #72]	; 0x48
    540c:	cmp	r2, r3
    540e:	bne.w	5858 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5412:	ldr	r0, [r0, #16]
    5414:	cmp	r0, #0
    5416:	beq.w	5840 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    541a:	ldr	r2, [r0, #0]
    541c:	ldr	r2, [r2, #72]	; 0x48
    541e:	cmp	r2, r3
    5420:	bne.w	5858 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5424:	ldr	r0, [r0, #16]
    5426:	cmp	r0, #0
    5428:	beq.w	5840 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    542c:	ldr	r2, [r0, #0]
    542e:	ldr	r2, [r2, #72]	; 0x48
    5430:	cmp	r2, r3
    5432:	bne.w	5858 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5436:	ldr	r0, [r0, #16]
    5438:	cmp	r0, #0
    543a:	beq.w	5840 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    543e:	ldr	r2, [r0, #0]
    5440:	ldr	r2, [r2, #72]	; 0x48
    5442:	cmp	r2, r3
    5444:	bne.w	5858 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    5448:	ldr	r0, [r0, #16]
    544a:	cmp	r0, #0
    544c:	beq.w	5840 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    5450:	ldr	r2, [r0, #0]
    5452:	ldr	r2, [r2, #72]	; 0x48
    5454:	cmp	r2, r3
    5456:	bne.w	5858 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    545a:	ldr	r0, [r0, #16]
    545c:	cmp	r0, #0
    545e:	beq.w	5840 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    5462:	ldr	r2, [r0, #0]
    5464:	ldr	r2, [r2, #72]	; 0x48
    5466:	cmp	r2, r3
    5468:	bne.w	5858 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x95c>
    546c:	ldr	r0, [r0, #16]
    546e:	cmp	r0, #0
    5470:	beq.w	5840 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x944>
    5474:	ldr	r3, [r0, #0]
    5476:	ldr	r3, [r3, #72]	; 0x48
    5478:	blx	r3
    547a:	mov	r1, r0
        strlcat(tmp1Name,f2.name(),MAX_FILENAME_LEN);
    547c:	mov.w	r2, #256	; 0x100
    5480:	mov	r0, r4
    5482:	bl	1164c <strlcat>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    5486:	ldr	r0, [r5, #16]
    5488:	cmp	r0, #0
    548a:	beq.w	570c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    548e:	ldr	r2, [r0, #0]
    5490:	ldr	r3, [pc, #428]	; (5640 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x744>)
    5492:	ldr	r2, [r2, #76]	; 0x4c
    5494:	cmp	r2, r3
    5496:	bne.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    549a:	ldr	r0, [r0, #16]
    549c:	cmp	r0, #0
    549e:	beq.w	570c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54a2:	ldr	r2, [r0, #0]
    54a4:	ldr	r2, [r2, #76]	; 0x4c
    54a6:	cmp	r2, r3
    54a8:	bne.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    54ac:	ldr	r0, [r0, #16]
    54ae:	cmp	r0, #0
    54b0:	beq.w	570c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54b4:	ldr	r2, [r0, #0]
    54b6:	ldr	r2, [r2, #76]	; 0x4c
    54b8:	cmp	r2, r3
    54ba:	bne.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    54be:	ldr	r0, [r0, #16]
    54c0:	cmp	r0, #0
    54c2:	beq.w	570c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54c6:	ldr	r2, [r0, #0]
    54c8:	ldr	r2, [r2, #76]	; 0x4c
    54ca:	cmp	r2, r3
    54cc:	bne.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    54d0:	ldr	r0, [r0, #16]
    54d2:	cmp	r0, #0
    54d4:	beq.w	570c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54d8:	ldr	r2, [r0, #0]
    54da:	ldr	r2, [r2, #76]	; 0x4c
    54dc:	cmp	r2, r3
    54de:	bne.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    54e2:	ldr	r0, [r0, #16]
    54e4:	cmp	r0, #0
    54e6:	beq.w	570c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54ea:	ldr	r2, [r0, #0]
    54ec:	ldr	r2, [r2, #76]	; 0x4c
    54ee:	cmp	r2, r3
    54f0:	bne.w	5854 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x958>
    54f4:	ldr	r0, [r0, #16]
    54f6:	cmp	r0, #0
    54f8:	beq.w	570c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
    54fc:	ldr	r3, [r0, #0]
    54fe:	ldr	r3, [r3, #76]	; 0x4c
    5500:	blx	r3

        if(f2.isDirectory())
    5502:	cmp	r0, #0
    5504:	beq.w	570c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x810>
        { 
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    5508:	str	r4, [sp, #0]
    550a:	ldr	r3, [sp, #8]
    550c:	add	r2, sp, #80	; 0x50
    550e:	mov	r1, r8
    5510:	mov	r0, r9
    5512:	bl	4ec8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    5516:	cmp	r0, #0
    5518:	beq.w	5742 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    551c:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    551e:	str.w	fp, [r5]
    5522:	ldr	r1, [pc, #288]	; (5644 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5524:	cmp	r2, #0
    5526:	beq.w	4fba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    552a:	ldr	r3, [r2, #16]
    552c:	subs	r3, #1
    552e:	str	r3, [r2, #16]
    5530:	cmp	r3, #0
    5532:	bne.w	4fba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    5536:	ldr	r5, [r5, #16]
    5538:	cmp	r5, #0
    553a:	beq.w	4fba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    553e:	ldr	r2, [r5, #0]
    5540:	ldr	r3, [pc, #260]	; (5648 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x74c>)
    5542:	ldr	r2, [r2, #32]
    5544:	cmp	r2, r3
    5546:	bne.w	5862 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x966>
    554a:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    554c:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    554e:	cmp	r0, #0
    5550:	beq.w	5702 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5554:	ldr	r2, [r0, #16]
    5556:	subs	r2, #1
    5558:	str	r2, [r0, #16]
    555a:	cmp	r2, #0
    555c:	bne.w	5702 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5560:	ldr	r7, [r5, #16]
    5562:	cmp	r7, #0
    5564:	beq.w	5702 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
    5568:	ldr	r2, [r7, #0]
    556a:	ldr	r2, [r2, #32]
    556c:	cmp	r2, r3
    556e:	bne.w	586a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x96e>
    5572:	ldr	r0, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5574:	str	r1, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5576:	cmp	r0, #0
    5578:	beq.w	56fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    557c:	ldr	r2, [r0, #16]
    557e:	subs	r2, #1
    5580:	str	r2, [r0, #16]
    5582:	cmp	r2, #0
    5584:	bne.w	56fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    5588:	ldr	r2, [r7, #16]
    558a:	cmp	r2, #0
    558c:	beq.w	56fa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7fe>
    5590:	ldr	r1, [r2, #0]
    5592:	ldr	r1, [r1, #32]
    5594:	cmp	r1, r3
    5596:	bne.w	5886 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x98a>
    559a:	ldr.w	lr, [r2, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    559e:	str.w	fp, [r2]
    55a2:	ldr	r0, [pc, #160]	; (5644 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    55a4:	cmp.w	lr, #0
    55a8:	beq.w	56f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    55ac:	ldr.w	r1, [lr, #16]
    55b0:	subs	r1, #1
    55b2:	str.w	r1, [lr, #16]
    55b6:	cmp	r1, #0
    55b8:	bne.w	56f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    55bc:	ldr	r1, [r2, #16]
    55be:	str	r1, [sp, #16]
    55c0:	cmp	r1, #0
    55c2:	beq.w	56f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    55c6:	ldr	r1, [sp, #16]
    55c8:	ldr	r1, [r1, #0]
    55ca:	ldr	r1, [r1, #32]
    55cc:	cmp	r1, r3
    55ce:	bne.w	589a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x99e>
    55d2:	ldr	r1, [sp, #16]
    55d4:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    55d8:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    55da:	cmp.w	lr, #0
    55de:	beq.w	56e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    55e2:	ldr.w	r1, [lr, #16]
    55e6:	subs	r1, #1
    55e8:	str.w	r1, [lr, #16]
    55ec:	cmp	r1, #0
    55ee:	bne.n	56e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    55f0:	ldr	r1, [sp, #16]
    55f2:	ldr	r1, [r1, #16]
    55f4:	str	r1, [sp, #20]
    55f6:	cmp	r1, #0
    55f8:	beq.n	56e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    55fa:	ldr	r0, [sp, #20]
    55fc:	ldr	r1, [r0, #0]
    55fe:	ldr	r1, [r1, #32]
    5600:	cmp	r1, r3
    5602:	bne.w	58bc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9c0>
    5606:	ldr.w	lr, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    560a:	str.w	fp, [r0]
    560e:	ldr	r0, [pc, #52]	; (5644 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x748>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5610:	cmp.w	lr, #0
    5614:	beq.n	56da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    5616:	ldr.w	r1, [lr, #16]
    561a:	subs	r1, #1
    561c:	str.w	r1, [lr, #16]
    5620:	cmp	r1, #0
    5622:	bne.n	56da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    5624:	ldr	r1, [sp, #20]
    5626:	ldr	r1, [r1, #16]
    5628:	str	r1, [sp, #24]
    562a:	cmp	r1, #0
    562c:	beq.n	56da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    562e:	ldr	r1, [sp, #24]
    5630:	ldr	r1, [r1, #0]
    5632:	ldr	r1, [r1, #32]
    5634:	cmp	r1, r3
    5636:	bne.w	58d2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9d6>
    563a:	b.n	564c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x750>
    563c:	.word	0x00000519
    5640:	.word	0x0000052d
    5644:	.word	0x00014bdc
    5648:	.word	0x00000f31
    564c:	ldr	r1, [sp, #24]
    564e:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5652:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5654:	cmp.w	lr, #0
    5658:	beq.n	56ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    565a:	ldr.w	r1, [lr, #16]
    565e:	subs	r1, #1
    5660:	str.w	r1, [lr, #16]
    5664:	cmp	r1, #0
    5666:	bne.n	56ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5668:	ldr	r1, [sp, #24]
    566a:	ldr	r1, [r1, #16]
    566c:	str	r1, [sp, #28]
    566e:	cbz	r1, 56ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    5670:	ldr	r1, [sp, #28]
    5672:	ldr	r1, [r1, #0]
    5674:	ldr	r1, [r1, #32]
    5676:	cmp	r1, r3
    5678:	bne.w	58e8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9ec>
    567c:	ldr	r1, [sp, #28]
    567e:	ldr.w	lr, [r1, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5682:	str	r0, [r1, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5684:	cmp.w	lr, #0
    5688:	beq.n	56c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    568a:	ldr.w	r1, [lr, #16]
    568e:	subs	r1, #1
    5690:	str.w	r1, [lr, #16]
    5694:	cbnz	r1, 56c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    5696:	ldr	r1, [sp, #28]
    5698:	ldr	r1, [r1, #16]
    569a:	cbz	r1, 56c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    569c:	ldr	r0, [r1, #0]
    569e:	ldr	r0, [r0, #32]
    56a0:	cmp	r0, r3
    56a2:	mov	lr, r0
    56a4:	bne.w	5910 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa14>
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    56a8:	mov	r0, r1
    56aa:	str	r2, [sp, #36]	; 0x24
    56ac:	str.w	fp, [r0], #16
    56b0:	str	r1, [sp, #32]
		invalidate();
    56b2:	bl	20cc <File::invalidate() [clone .isra.1]>
	}
    56b6:	ldr	r1, [sp, #32]
    56b8:	mov	r0, r1
    56ba:	movs	r1, #20
    56bc:	bl	f95c <operator delete(void*, unsigned int)>
    56c0:	ldr	r2, [sp, #36]	; 0x24
    56c2:	ldr	r0, [sp, #28]
    56c4:	str	r2, [sp, #32]
    56c6:	movs	r1, #20
    56c8:	bl	f95c <operator delete(void*, unsigned int)>
    56cc:	ldr	r2, [sp, #32]
    56ce:	ldr	r0, [sp, #24]
    56d0:	str	r2, [sp, #28]
    56d2:	movs	r1, #20
    56d4:	bl	f95c <operator delete(void*, unsigned int)>
    56d8:	ldr	r2, [sp, #28]
    56da:	ldr	r0, [sp, #20]
    56dc:	str	r2, [sp, #24]
    56de:	movs	r1, #20
    56e0:	bl	f95c <operator delete(void*, unsigned int)>
    56e4:	ldr	r2, [sp, #24]
    56e6:	ldr	r0, [sp, #16]
    56e8:	str	r2, [sp, #20]
    56ea:	movs	r1, #20
    56ec:	bl	f95c <operator delete(void*, unsigned int)>
    56f0:	ldr	r2, [sp, #20]
    56f2:	mov	r0, r2
    56f4:	movs	r1, #20
    56f6:	bl	f95c <operator delete(void*, unsigned int)>
    56fa:	mov	r0, r7
    56fc:	movs	r1, #20
    56fe:	bl	f95c <operator delete(void*, unsigned int)>
    5702:	mov	r0, r5
    5704:	movs	r1, #20
    5706:	bl	f95c <operator delete(void*, unsigned int)>
    570a:	b.n	4fba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
        }
        else
        { 
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    570c:	str	r4, [sp, #0]
    570e:	ldr	r3, [sp, #8]
    5710:	add	r2, sp, #80	; 0x50
    5712:	mov	r1, r8
    5714:	mov	r0, r9
    5716:	bl	4414 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    571a:	cbz	r0, 5742 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x846>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    571c:	add	r0, sp, #80	; 0x50
    571e:	bl	11700 <strlen>
    5722:	mov	r1, r0
    5724:	add	r0, sp, #80	; 0x50
    5726:	bl	de04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    572a:	ldr	r0, [pc, #524]	; (5938 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa3c>)
    572c:	bl	f7b8 <Print::println()>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    bool sd_remove(uint32_t store, const char *filename) {    Serial.println(filename); return sdx[store]->remove(filename);  }
    5730:	ldr.w	r0, [sl, #84]	; 0x54
    5734:	ldr	r3, [r0, #0]
    5736:	add	r1, sp, #80	; 0x50
    5738:	ldr	r3, [r3, #16]
    573a:	blx	r3
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    573c:	cmp	r0, #0
    573e:	bne.w	551c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x620>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5742:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5744:	str.w	fp, [r5]
    5748:	ldr	r1, [pc, #496]	; (593c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    574a:	cmp	r2, #0
    574c:	beq.n	583a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    574e:	ldr	r3, [r2, #16]
    5750:	subs	r3, #1
    5752:	str	r3, [r2, #16]
    5754:	cmp	r3, #0
    5756:	bne.n	583a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    5758:	ldr	r4, [r5, #16]
    575a:	cmp	r4, #0
    575c:	beq.n	583a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    575e:	ldr	r2, [r4, #0]
    5760:	ldr	r3, [pc, #476]	; (5940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa44>)
    5762:	ldr	r2, [r2, #32]
    5764:	cmp	r2, r3
    5766:	bne.w	58b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9b4>
    576a:	ldr	r0, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    576c:	str	r1, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    576e:	cmp	r0, #0
    5770:	beq.n	5832 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    5772:	ldr	r2, [r0, #16]
    5774:	subs	r2, #1
    5776:	str	r2, [r0, #16]
    5778:	cmp	r2, #0
    577a:	bne.n	5832 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    577c:	ldr	r5, [r4, #16]
    577e:	cmp	r5, #0
    5780:	beq.n	5832 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    5782:	ldr	r2, [r5, #0]
    5784:	ldr	r2, [r2, #32]
    5786:	cmp	r2, r3
    5788:	bne.w	58a4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9a8>
    578c:	ldr	r0, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    578e:	str	r1, [r5, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5790:	cmp	r0, #0
    5792:	beq.n	582a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    5794:	ldr	r2, [r0, #16]
    5796:	subs	r2, #1
    5798:	str	r2, [r0, #16]
    579a:	cmp	r2, #0
    579c:	bne.n	582a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    579e:	ldr	r6, [r5, #16]
    57a0:	cmp	r6, #0
    57a2:	beq.n	582a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    57a4:	ldr	r2, [r6, #0]
    57a6:	ldr	r2, [r2, #32]
    57a8:	cmp	r2, r3
    57aa:	bne.w	58e2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x9e6>
    57ae:	ldr	r1, [r6, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    57b0:	str.w	fp, [r6]
    57b4:	ldr	r0, [pc, #388]	; (593c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>)
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    57b6:	cmp	r1, #0
    57b8:	beq.n	5822 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    57ba:	ldr	r2, [r1, #16]
    57bc:	subs	r2, #1
    57be:	str	r2, [r1, #16]
    57c0:	cbnz	r2, 5822 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    57c2:	ldr	r7, [r6, #16]
    57c4:	cbz	r7, 5822 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    57c6:	ldr	r2, [r7, #0]
    57c8:	ldr	r2, [r2, #32]
    57ca:	cmp	r2, r3
    57cc:	bne.w	58fe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa02>
    57d0:	ldr	r1, [r7, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    57d2:	str	r0, [r7, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    57d4:	cbz	r1, 581a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    57d6:	ldr	r2, [r1, #16]
    57d8:	subs	r2, #1
    57da:	str	r2, [r1, #16]
    57dc:	cbnz	r2, 581a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    57de:	ldr.w	r8, [r7, #16]
    57e2:	cmp.w	r8, #0
    57e6:	beq.n	581a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    57e8:	ldr.w	r2, [r8]
    57ec:	ldr	r2, [r2, #32]
    57ee:	cmp	r2, r3
    57f0:	bne.w	591c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa20>
    57f4:	ldr.w	r2, [r8, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    57f8:	str.w	fp, [r8]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    57fc:	cbz	r2, 5812 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    57fe:	ldr	r3, [r2, #16]
    5800:	subs	r3, #1
    5802:	str	r3, [r2, #16]
    5804:	cbnz	r3, 5812 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    5806:	ldr.w	r0, [r8, #16]
    580a:	cbz	r0, 5812 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x916>
    580c:	ldr	r3, [r0, #0]
    580e:	ldr	r3, [r3, #32]
    5810:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    5812:	mov	r0, r8
    5814:	movs	r1, #20
    5816:	bl	f95c <operator delete(void*, unsigned int)>
    581a:	mov	r0, r7
    581c:	movs	r1, #20
    581e:	bl	f95c <operator delete(void*, unsigned int)>
    5822:	mov	r0, r6
    5824:	movs	r1, #20
    5826:	bl	f95c <operator delete(void*, unsigned int)>
    582a:	mov	r0, r5
    582c:	movs	r1, #20
    582e:	bl	f95c <operator delete(void*, unsigned int)>
    5832:	mov	r0, r4
    5834:	movs	r1, #20
    5836:	bl	f95c <operator delete(void*, unsigned int)>
    583a:	ldr	r3, [sp, #56]	; 0x38
    583c:	movs	r4, #0
    583e:	b.n	52da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5840:	ldr	r1, [pc, #256]	; (5944 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    5842:	b.n	547c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
    5844:	ldr	r1, [pc, #252]	; (5944 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa48>)
    5846:	b.n	53f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    5848:	mov	r0, r2
    584a:	blx	r3
    584c:	b.n	5370 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    584e:	blx	r2
    5850:	mov	r1, r0
    5852:	b.n	53f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x4f8>
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    5854:	blx	r2
    5856:	b.n	5502 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x606>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    5858:	blx	r2
    585a:	mov	r1, r0
    585c:	b.n	547c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x580>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    585e:	blx	r1
    5860:	b.n	5370 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x474>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5862:	mov	r0, r5
    5864:	blx	r2
    5866:	b.w	4fba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
    586a:	mov	r0, r7
    586c:	blx	r2
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    586e:	mov	r0, r5
    5870:	movs	r1, #20
    5872:	bl	f95c <operator delete(void*, unsigned int)>
    5876:	b.w	4fba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xbe>
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}

  File f1=sd_open(store0,oldfilename,FILE_READ);
  if(!f1) {DBG_FAIL_MACRO; return false;}
    587a:	mov	r4, r3
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    587c:	mov	r0, r4
    587e:	add.w	sp, sp, #596	; 0x254
    5882:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5886:	mov	r0, r2
    5888:	blx	r1
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
    588a:	mov	r0, r7
    588c:	movs	r1, #20
    588e:	bl	f95c <operator delete(void*, unsigned int)>
    5892:	b.n	5702 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x806>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5894:	mov	r0, r5
    5896:	blx	r2
    5898:	b.n	50ee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1f2>
    589a:	str	r2, [sp, #20]
    589c:	ldr	r0, [sp, #16]
    589e:	blx	r1
    58a0:	ldr	r2, [sp, #20]
    58a2:	b.n	56f2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7f6>
    58a4:	mov	r0, r5
    58a6:	blx	r2
    58a8:	b.n	5832 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x936>
    58aa:	mov	r0, r6
    58ac:	blx	r2
    58ae:	b.n	50e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x1ea>
    58b0:	mov	r0, r4
    58b2:	blx	r2
    58b4:	b.n	583a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x93e>
    58b6:	mov	r0, r4
    58b8:	blx	r2
    58ba:	b.n	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    58bc:	str	r2, [sp, #24]
    58be:	ldr	r0, [sp, #20]
    58c0:	blx	r1
    58c2:	ldr	r2, [sp, #24]
    58c4:	b.n	56e6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7ea>
    58c6:	mov	r0, r7
    58c8:	blx	r2
    58ca:	b.n	51fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x300>
    58cc:	mov	r0, r5
    58ce:	blx	r2
    58d0:	b.n	52c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3c6>
    58d2:	str	r2, [sp, #28]
    58d4:	ldr	r0, [sp, #24]
    58d6:	blx	r1
    58d8:	ldr	r2, [sp, #28]
    58da:	b.n	56da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7de>
    58dc:	mov	r0, r8
    58de:	blx	r2
    58e0:	b.n	51f4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f8>
    58e2:	mov	r0, r6
    58e4:	blx	r2
    58e6:	b.n	582a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x92e>
    58e8:	str	r2, [sp, #32]
    58ea:	ldr	r0, [sp, #28]
    58ec:	blx	r1
    58ee:	ldr	r2, [sp, #32]
    58f0:	b.n	56ce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7d2>
    58f2:	mov	r0, r6
    58f4:	blx	r2
    58f6:	b.n	52ba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3be>
    58f8:	mov	r0, r7
    58fa:	blx	r2
    58fc:	b.n	52b2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3b6>
    58fe:	mov	r0, r7
    5900:	blx	r2
    5902:	b.n	5822 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x926>
    5904:	mov	r0, r9
    5906:	blx	r2
    5908:	b.n	51ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2f0>
    590a:	mov	r0, sl
    590c:	blx	r2
    590e:	b.n	51e4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x2e8>
    5910:	str	r2, [sp, #32]
    5912:	mov	r0, r1
    5914:	mov	r3, lr
    5916:	blx	r3
    5918:	ldr	r2, [sp, #32]
    591a:	b.n	56c2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x7c6>
    591c:	mov	r0, r8
    591e:	blx	r2
    5920:	b.n	581a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x91e>
    5922:	ldr	r2, [r5, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
    5924:	str.w	fp, [r5]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    5928:	cmp	r2, #0
    592a:	beq.w	52ca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3ce>
    592e:	b.n	5212 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x316>
    5930:	ldr	r3, [sp, #56]	; 0x38
    5932:	ldr.w	fp, [pc, #8]	; 593c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0xa40>
    5936:	b.n	52da <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.10]+0x3de>
    5938:	.word	0x1fff0c58
    593c:	.word	0x00014bdc
    5940:	.word	0x00000f31
    5944:	.word	0x00014d98

00005948 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    5948:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    594c:	mov	r6, r1
    594e:	subw	sp, sp, #2696	; 0xa88
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    5952:	cmp.w	r3, #4294967295
    5956:	ite	ne
    5958:	movne	r7, r3
    595a:	moveq	r7, r2
 * save p2
 * 
*/

  bool MTPStorage_SD::move(uint32_t handle, uint32_t newStore, uint32_t newParent ) 
  { 
    595c:	mov	r4, r0
    #if DEBUG>1
      Serial.printf("%d -> %d %d\n",handle,newStorage,newParent);
    #endif
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0

    Record p1 = ReadIndexRecord(handle);
    595e:	mov	r1, r0
    5960:	mov	r2, r6
    5962:	add	r0, sp, #792	; 0x318
    5964:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    5968:	mov	r2, r7
    596a:	mov	r1, r4
    596c:	add.w	r0, sp, #1064	; 0x428
    5970:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    5974:	ldr	r2, [sp, #792]	; 0x318
    5976:	mov	r1, r4
    5978:	add.w	r0, sp, #1336	; 0x538
    597c:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if(p1.isdir) 
    5980:	ldrb.w	r3, [sp, #804]	; 0x324
    5984:	cbz	r3, 5990 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    5986:	ldrb.w	r3, [sp, #805]	; 0x325
    598a:	cmp	r3, #0
    598c:	beq.w	5b3c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f4>
      { ScanDir(p1.store, handle) ; // in case scan directory
        WriteIndexRecord(handle, p1);
      }
    }

    Record p1o = p1;
    5990:	mov.w	r2, #272	; 0x110
    5994:	add	r1, sp, #792	; 0x318
    5996:	add.w	r0, sp, #1608	; 0x648
    599a:	bl	db90 <memcpy>
    Record p2o = p2;
    599e:	mov.w	r2, #272	; 0x110
    59a2:	add.w	r1, sp, #1064	; 0x428
    59a6:	add.w	r0, sp, #1880	; 0x758
    59aa:	bl	db90 <memcpy>
    Record p3o = p3;

    char oldName[MAX_FILENAME_LEN];
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    59ae:	add	r2, sp, #280	; 0x118
    59b0:	mov.w	r3, #256	; 0x100
    59b4:	mov	r1, r6
    59b6:	mov	r0, r4
    59b8:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    uint32_t jx=-1;
    Record pxo;

      // remove index from old parent
      Record px;
      if(p3.child==handle)
    59bc:	ldr.w	r8, [sp, #1340]	; 0x53c
    59c0:	cmp	r6, r8
    59c2:	beq.w	5b02 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1ba>
        p3.child = p1.sibling;
        WriteIndexRecord(p1.parent, p3);    
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
    59c6:	add	r0, sp, #8
    59c8:	mov	r2, r8
    59ca:	mov	r1, r4
    59cc:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    59d0:	add	r1, sp, #8
    59d2:	mov.w	r2, #272	; 0x110
    59d6:	addw	r0, sp, #2424	; 0x978
    59da:	bl	db90 <memcpy>
        pxo = px;
    59de:	addw	r1, sp, #2424	; 0x978
    59e2:	addw	r0, sp, #2152	; 0x868
    59e6:	mov.w	r2, #272	; 0x110
    59ea:	bl	db90 <memcpy>
        while(handle != px.sibling)
    59ee:	ldr.w	r5, [sp, #2432]	; 0x980
    59f2:	cmp	r6, r5
    59f4:	bne.n	59fa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb2>
    59f6:	b.n	5b54 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x20c>
    59f8:	mov	r5, r3
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
    59fa:	mov	r2, r5
    59fc:	mov	r1, r4
    59fe:	add	r0, sp, #8
    5a00:	bl	26e4 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5a04:	mov.w	r2, #272	; 0x110
    5a08:	add	r1, sp, #8
    5a0a:	addw	r0, sp, #2424	; 0x978
    5a0e:	bl	db90 <memcpy>
          pxo = px;
    5a12:	mov.w	r2, #272	; 0x110
    5a16:	addw	r1, sp, #2424	; 0x978
    5a1a:	addw	r0, sp, #2152	; 0x868
    5a1e:	bl	db90 <memcpy>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    5a22:	ldr.w	r3, [sp, #2432]	; 0x980
    5a26:	cmp	r6, r3
    5a28:	bne.n	59f8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xb0>
        {
          jx = px.sibling;
          px = ReadIndexRecord(jx); 
          pxo = px;
        }
        px.sibling = p1.sibling;
    5a2a:	ldr	r3, [sp, #800]	; 0x320
    5a2c:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    5a30:	addw	r2, sp, #2424	; 0x978
    5a34:	mov	r1, r5
    5a36:	mov	r0, r4
    5a38:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    5a3c:	ldrh.w	r0, [sp, #1078]	; 0x436
      p1.sibling = p2.child;
    5a40:	ldr.w	r3, [sp, #1068]	; 0x42c
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
    5a44:	strh.w	r0, [sp, #806]	; 0x326
      p1.sibling = p2.child;
      p2.child = handle;
      WriteIndexRecord(handle, p1);
    5a48:	add	r2, sp, #792	; 0x318
    5a4a:	mov	r1, r6
    5a4c:	mov	r0, r4
      }
    
      // add to new parent
      p1.parent = newParent;
      p1.store = p2.store;
      p1.sibling = p2.child;
    5a4e:	str	r3, [sp, #800]	; 0x320
        px.sibling = p1.sibling;
        WriteIndexRecord(jx, px);
      }
    
      // add to new parent
      p1.parent = newParent;
    5a50:	str	r7, [sp, #792]	; 0x318
      p1.store = p2.store;
      p1.sibling = p2.child;
      p2.child = handle;
    5a52:	str.w	r6, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    5a56:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    5a5a:	add.w	r2, sp, #1064	; 0x428
    5a5e:	mov	r1, r7
    5a60:	mov	r0, r4
    5a62:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

      // now working on disk storage
      char newName[MAX_FILENAME_LEN];
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    5a66:	mov.w	r3, #256	; 0x100
    5a6a:	mov	r1, r6
    5a6c:	add	r2, sp, #536	; 0x218
    5a6e:	mov	r0, r4
    5a70:	bl	2b44 <MTPStorage_SD::ConstructFilename(int, char*, int)>
        Serial.print(p1.store); Serial.print(": ");Serial.println(newName);
        dumpIndexList();
      #endif


    if(p1o.store == p2o.store)
    5a74:	ldrh.w	r1, [sp, #1622]	; 0x656
    5a78:	ldrh.w	r3, [sp, #1894]	; 0x766
    5a7c:	cmp	r1, r3
    5a7e:	beq.n	5b1a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1d2>
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    5a80:	ldrb.w	r2, [sp, #1620]	; 0x654
    5a84:	cbz	r2, 5ac8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x180>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    }
    else
    { // move directory cross mtp-disks
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5a86:	add	r2, sp, #536	; 0x218
    5a88:	str	r2, [sp, #0]
    5a8a:	adds	r0, r4, #4
    5a8c:	add	r2, sp, #280	; 0x118
    5a8e:	bl	4ec8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    5a92:	cmp	r0, #0
    5a94:	bne.n	5b2e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e6>
    }

  fail:
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    5a96:	mov	r1, r5
    5a98:	addw	r2, sp, #2152	; 0x868
    5a9c:	mov	r0, r4
    5a9e:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    5aa2:	add.w	r2, sp, #1608	; 0x648
    5aa6:	mov	r1, r6
    5aa8:	mov	r0, r4
    5aaa:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    5aae:	add.w	r2, sp, #1880	; 0x758
    5ab2:	mov	r1, r7
    5ab4:	mov	r0, r4
    5ab6:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    5aba:	mov.w	r8, #0
  }
    5abe:	mov	r0, r8
    5ac0:	addw	sp, sp, #2696	; 0xa88
    5ac4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    }
    else if(!p1o.isdir)
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    5ac8:	add	r2, sp, #536	; 0x218
    5aca:	str	r2, [sp, #0]
    5acc:	adds	r0, r4, #4
    5ace:	add	r2, sp, #280	; 0x118
    5ad0:	bl	4414 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5ad4:	mov	r8, r0
    5ad6:	cmp	r0, #0
    5ad8:	beq.n	5a96 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    5ada:	add	r0, sp, #280	; 0x118
    5adc:	bl	11700 <strlen>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    5ae0:	ldrh.w	r5, [sp, #1894]	; 0x766
    5ae4:	mov	r1, r0
    5ae6:	add.w	r4, r4, r5, lsl #2
    5aea:	add	r0, sp, #280	; 0x118
    5aec:	bl	de04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    5af0:	ldr	r0, [pc, #100]	; (5b58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x210>)
    5af2:	bl	f7b8 <Print::println()>
    5af6:	ldr	r0, [r4, #88]	; 0x58
    5af8:	ldr	r3, [r0, #0]
    5afa:	add	r1, sp, #280	; 0x118
    5afc:	ldr	r3, [r3, #16]
    5afe:	blx	r3
    5b00:	b.n	5abe <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x176>

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    5b02:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(p1.parent, p3);    
    5b04:	ldr	r1, [sp, #792]	; 0x318

      // remove index from old parent
      Record px;
      if(p3.child==handle)
      {
        p3.child = p1.sibling;
    5b06:	str.w	r3, [sp, #1340]	; 0x53c
        WriteIndexRecord(p1.parent, p3);    
    5b0a:	add.w	r2, sp, #1336	; 0x538
    5b0e:	mov	r0, r4
    5b10:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    #if DEBUG>1
      Serial.print(p1.store); Serial.print(": "); Serial.println(oldName);
      dumpIndexList();
    #endif

    uint32_t jx=-1;
    5b14:	mov.w	r5, #4294967295
    5b18:	b.n	5a3c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf4>
    uint32_t sd_getFSCount(void) {return fsCount;}
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}

    File sd_open(uint32_t store, const char *filename, uint32_t mode) { return sdx[store]->open(filename,mode);  }
    bool sd_mkdir(uint32_t store, char *filename) {  return sdx[store]->mkdir(filename);  }
    bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    5b1a:	add.w	r1, r4, r1, lsl #2
    5b1e:	add	r2, sp, #536	; 0x218
    5b20:	ldr	r0, [r1, #88]	; 0x58
    5b22:	ldr	r3, [r0, #0]
    5b24:	add	r1, sp, #280	; 0x118
    5b26:	ldr	r3, [r3, #12]
    5b28:	blx	r3
      #endif


    if(p1o.store == p2o.store)
    { // do a simple rename (works for files and directories)
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5b2a:	cmp	r0, #0
    5b2c:	beq.n	5a96 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x14e>
    5b2e:	mov.w	r8, #1
    // undo changes in index list
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    WriteIndexRecord(handle, p1o);
    WriteIndexRecord(newParent,p2o);      
    return false;
  }
    5b32:	mov	r0, r8
    5b34:	addw	sp, sp, #2696	; 0xa88
    5b38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record p2 = ReadIndexRecord(newParent);
    Record p3 = ReadIndexRecord(p1.parent); 

    if(p1.isdir) 
    { if(!p1.scanned) 
      { ScanDir(p1.store, handle) ; // in case scan directory
    5b3c:	mov	r2, r6
    5b3e:	ldrh.w	r1, [sp, #806]	; 0x326
    5b42:	mov	r0, r4
    5b44:	bl	32d0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    5b48:	add	r2, sp, #792	; 0x318
    5b4a:	mov	r1, r6
    5b4c:	mov	r0, r4
    5b4e:	bl	2504 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    5b52:	b.n	5990 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
      }
      else
      { jx = p3.child;
        px = ReadIndexRecord(jx); 
        pxo = px;
        while(handle != px.sibling)
    5b54:	mov	r5, r8
    5b56:	b.n	5a2a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xe2>
    5b58:	.word	0x1fff0c58

00005b5c <MTPD::GetNumObjects(unsigned long, unsigned long)>:

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5b5c:	push	{r4, r5, r6, lr}
    5b5e:	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    5b60:	ldr	r0, [r0, #0]
    5b62:	ldr	r3, [r0, #0]

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    5b64:	subs	r5, r1, #1
    storage_->StartGetObjectHandles(store, parent);
    5b66:	ldr	r3, [r3, #28]
    5b68:	mov	r1, r5
    5b6a:	blx	r3
    int num = 0;
    5b6c:	movs	r4, #0
    5b6e:	b.n	5b72 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    while (storage_->GetNextObjectHandle(store)) num++;
    5b70:	adds	r4, #1
    5b72:	ldr	r0, [r6, #0]
    5b74:	ldr	r3, [r0, #0]
    5b76:	mov	r1, r5
    5b78:	ldr	r3, [r3, #32]
    5b7a:	blx	r3
    5b7c:	cmp	r0, #0
    5b7e:	bne.n	5b70 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
    return num;
  }
    5b80:	mov	r0, r4
    5b82:	pop	{r4, r5, r6, pc}

00005b84 <MTPD::get_buffer()>:


#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    5b84:	push	{r4, lr}
    5b86:	mov	r4, r0
    5b88:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    5b8a:	cbnz	r0, 5b94 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    5b8c:	bl	e968 <usb_malloc>
    5b90:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    5b92:	cbz	r0, 5b96 <MTPD::get_buffer()+0x12>
    5b94:	pop	{r4, pc}
    5b96:	bl	216c <mtp_yield()>
    5b9a:	b.n	5b88 <MTPD::get_buffer()+0x4>

00005b9c <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5b9c:	cmp	r2, #0
    5b9e:	ble.n	5bfe <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    5ba0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5ba4:	mov.w	r9, #0
    5ba8:	mov	r6, r2
    5baa:	mov	r7, r1
    5bac:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5bae:	mov	r8, r9
    5bb0:	b.n	5bb6 <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5bb2:	cmp	r6, r9
    5bb4:	ble.n	5bfa <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    5bb6:	mov	r0, r5
    5bb8:	bl	5b84 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    5bbc:	ldr	r3, [r5, #4]
    5bbe:	ldrh.w	r0, [r3], #8
    5bc2:	rsb	r2, r9, r6
    5bc6:	rsb	r4, r0, #64	; 0x40
    5bca:	cmp	r4, r2
    5bcc:	it	ge
    5bce:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    5bd0:	add.w	r1, r7, r9
    5bd4:	add	r0, r3
    5bd6:	mov	r2, r4
    5bd8:	bl	db90 <memcpy>
        data_buffer_->len += to_copy;
    5bdc:	ldr	r1, [r5, #4]
    5bde:	ldrh	r3, [r1, #0]
    5be0:	add	r3, r4
    5be2:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5be4:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    5be6:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    5be8:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    5bea:	bne.n	5bb2 <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    5bec:	movs	r0, #4
    5bee:	bl	eae0 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5bf2:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    5bf4:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    5bf8:	bgt.n	5bb6 <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    5bfa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5bfe:	bx	lr

00005c00 <MTPD::writestring(char const*)>:
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5c00:	push	{r4, r5, lr}
    if (*str) 
    5c02:	ldrb	r3, [r1, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    5c04:	sub	sp, #12
    5c06:	mov	r4, r0
    if (*str) 
    5c08:	cbz	r3, 5c64 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    5c0a:	mov	r0, r1
    5c0c:	mov	r5, r1
    5c0e:	bl	11700 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c12:	ldrb	r1, [r4, #8]
    5c14:	adds	r0, #1
    5c16:	strb.w	r0, [sp, #3]
    5c1a:	cbz	r1, 5c76 <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    5c1c:	ldr	r3, [r4, #12]
    5c1e:	adds	r3, #1
    5c20:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c22:	ldrb	r2, [r5, #0]
    5c24:	cbnz	r2, 5c34 <MTPD::writestring(char const*)+0x34>
    5c26:	b.n	5c5c <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5c28:	ldr	r3, [r4, #12]
    5c2a:	adds	r3, #2
    5c2c:	str	r3, [r4, #12]
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c2e:	ldrb.w	r2, [r5, #1]!
    5c32:	cbz	r2, 5c52 <MTPD::writestring(char const*)+0x52>
    5c34:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c38:	cmp	r1, #0
    5c3a:	bne.n	5c28 <MTPD::writestring(char const*)+0x28>
    5c3c:	movs	r2, #2
    5c3e:	add.w	r1, sp, #6
    5c42:	mov	r0, r4
    5c44:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c48:	ldrb.w	r2, [r5, #1]!
    5c4c:	ldrb	r1, [r4, #8]
    5c4e:	cmp	r2, #0
    5c50:	bne.n	5c34 <MTPD::writestring(char const*)+0x34>
    5c52:	movs	r3, #0
    5c54:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c58:	cbz	r1, 5c9a <MTPD::writestring(char const*)+0x9a>
    5c5a:	ldr	r3, [r4, #12]
      write_length_ += len;
    5c5c:	adds	r3, #2
    5c5e:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5c60:	add	sp, #12
    5c62:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5c64:	ldrb	r2, [r0, #8]
    5c66:	strb.w	r3, [sp, #2]
    5c6a:	cbz	r2, 5c8c <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    5c6c:	ldr	r3, [r0, #12]
    5c6e:	adds	r3, #1
    5c70:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5c72:	add	sp, #12
    5c74:	pop	{r4, r5, pc}
    5c76:	movs	r2, #1
    5c78:	add.w	r1, sp, #3
    5c7c:	mov	r0, r4
    5c7e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
#define Storage2Store(x) (x-1)

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c82:	ldrb	r2, [r5, #0]
    5c84:	ldrb	r1, [r4, #8]
    5c86:	cmp	r2, #0
    5c88:	bne.n	5c34 <MTPD::writestring(char const*)+0x34>
    5c8a:	b.n	5c52 <MTPD::writestring(char const*)+0x52>
    5c8c:	movs	r2, #1
    5c8e:	add.w	r1, sp, #2
    5c92:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    5c96:	add	sp, #12
    5c98:	pop	{r4, r5, pc}
    5c9a:	mov	r0, r4
    5c9c:	movs	r2, #2
    5c9e:	add	r1, sp, #4
    5ca0:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5ca4:	add	sp, #12
    5ca6:	pop	{r4, r5, pc}

00005ca8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5ca8:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5caa:	ldrb	r3, [r0, #8]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5cac:	sub	sp, #8
    5cae:	mov	r4, r0
    5cb0:	mov	r5, r1
    5cb2:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5cb6:	cbz	r3, 5cf0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    5cb8:	ldr	r3, [r0, #12]
    5cba:	movw	r2, #65535	; 0xffff
    5cbe:	adds	r3, #2
    5cc0:	str	r3, [r0, #12]
    5cc2:	strh.w	r2, [sp, #6]
    5cc6:	adds	r3, #2
    5cc8:	movs	r2, #0
    5cca:	str	r3, [r4, #12]
    5ccc:	strb.w	r2, [sp, #2]
    5cd0:	adds	r3, #1
    5cd2:	str	r3, [r4, #12]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5cd4:	movw	r3, #54274	; 0xd402
    5cd8:	cmp	r5, r3
    5cda:	beq.n	5d2c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5cdc:	ldrb	r3, [r4, #8]
    5cde:	movs	r2, #0
    5ce0:	strb.w	r2, [sp, #3]
    5ce4:	cbz	r3, 5d48 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    5ce6:	ldr	r3, [r4, #12]
    5ce8:	adds	r3, #1
    5cea:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5cec:	add	sp, #8
    5cee:	pop	{r4, r5, r6, pc}
    5cf0:	movs	r2, #2
    5cf2:	add	r1, sp, #4
    5cf4:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5cf8:	ldrb	r6, [r4, #8]
    5cfa:	movw	r3, #65535	; 0xffff
    5cfe:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d02:	cbnz	r6, 5d58 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    5d04:	movs	r2, #2
    5d06:	add.w	r1, sp, #6
    5d0a:	mov	r0, r4
    5d0c:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5d10:	ldrb	r3, [r4, #8]
    5d12:	strb.w	r6, [sp, #2]
    5d16:	cbnz	r3, 5d5c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    5d18:	movs	r2, #1
    5d1a:	add.w	r1, sp, #2
    5d1e:	mov	r0, r4
    5d20:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5d24:	movw	r3, #54274	; 0xd402
    5d28:	cmp	r5, r3
    5d2a:	bne.n	5cdc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    5d2c:	ldr	r1, [pc, #48]	; (5d60 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    5d2e:	mov	r0, r4
    5d30:	bl	5c00 <MTPD::writestring(char const*)>
    5d34:	ldr	r1, [pc, #40]	; (5d60 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    5d36:	mov	r0, r4
    5d38:	bl	5c00 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d3c:	ldrb	r3, [r4, #8]
    5d3e:	movs	r2, #0
    5d40:	strb.w	r2, [sp, #3]
    5d44:	cmp	r3, #0
    5d46:	bne.n	5ce6 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    5d48:	mov	r0, r4
    5d4a:	movs	r2, #1
    5d4c:	add.w	r1, sp, #3
    5d50:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5d54:	add	sp, #8
    5d56:	pop	{r4, r5, r6, pc}
    5d58:	ldr	r3, [r4, #12]
    5d5a:	b.n	5cc6 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    5d5c:	ldr	r3, [r4, #12]
    5d5e:	b.n	5cd0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    5d60:	.word	0x00014f34

00005d64 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5d64:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d66:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5d68:	sub	sp, #68	; 0x44
    5d6a:	movs	r5, #100	; 0x64
    5d6c:	mov	r4, r0
    5d6e:	strh.w	r5, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d72:	cmp	r3, #0
    5d74:	beq.w	5ec4 <MTPD::WriteDescriptor()+0x160>
      write_length_ += len;
    5d78:	ldr	r3, [r0, #12]
    5d7a:	movs	r2, #6
    5d7c:	adds	r3, #2
    5d7e:	str	r3, [r0, #12]
    5d80:	str	r2, [sp, #24]
    5d82:	adds	r3, #4
    5d84:	movs	r2, #100	; 0x64
    5d86:	str	r3, [r4, #12]
    5d88:	strh.w	r2, [sp, #6]
    5d8c:	adds	r3, #2
    5d8e:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    5d90:	ldr	r1, [pc, #556]	; (5fc0 <MTPD::WriteDescriptor()+0x25c>)
    5d92:	mov	r0, r4
    5d94:	bl	5c00 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5d98:	ldrb	r3, [r4, #8]
    5d9a:	movs	r2, #0
    5d9c:	strh.w	r2, [sp, #4]
    5da0:	cmp	r3, #0
    5da2:	beq.w	5f7e <MTPD::WriteDescriptor()+0x21a>
      write_length_ += len;
    5da6:	ldr	r3, [r4, #12]
    5da8:	movs	r2, #20
    5daa:	adds	r3, #2
    5dac:	str	r3, [r4, #12]
    5dae:	str	r2, [sp, #20]
    5db0:	adds	r3, #4
    5db2:	str	r3, [r4, #12]
    5db4:	movs	r6, #1
    5db6:	ldr	r5, [pc, #524]	; (5fc4 <MTPD::WriteDescriptor()+0x260>)
    5db8:	movw	r3, #4097	; 0x1001
    5dbc:	add.w	r7, r5, #38	; 0x26
    5dc0:	b.n	5dd2 <MTPD::WriteDescriptor()+0x6e>
    5dc2:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5dc4:	cmp	r5, r7
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5dc6:	add.w	r3, r3, #2
    5dca:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5dcc:	beq.n	5dec <MTPD::WriteDescriptor()+0x88>
    5dce:	ldrh.w	r3, [r5, #2]!
    5dd2:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5dd6:	cmp	r6, #0
    5dd8:	bne.n	5dc2 <MTPD::WriteDescriptor()+0x5e>
    5dda:	movs	r2, #2
    5ddc:	add.w	r1, sp, #10
    5de0:	mov	r0, r4
    5de2:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5de6:	cmp	r5, r7
    5de8:	ldrb	r6, [r4, #8]
    5dea:	bne.n	5dce <MTPD::WriteDescriptor()+0x6a>
    5dec:	movs	r2, #4
    5dee:	str	r2, [sp, #28]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5df0:	cmp	r6, #0
    5df2:	beq.w	5f72 <MTPD::WriteDescriptor()+0x20e>
      write_length_ += len;
    5df6:	ldr	r3, [r4, #12]
    5df8:	adds	r3, #4
    5dfa:	str	r3, [r4, #12]
    5dfc:	ldr	r5, [pc, #456]	; (5fc8 <MTPD::WriteDescriptor()+0x264>)
    5dfe:	movw	r3, #16388	; 0x4004
    5e02:	adds	r7, r5, #6
    5e04:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5e08:	cbz	r6, 5e22 <MTPD::WriteDescriptor()+0xbe>
      write_length_ += len;
    5e0a:	ldr	r3, [r4, #12]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5e0c:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    5e0e:	add.w	r3, r3, #2
    5e12:	str	r3, [r4, #12]
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5e14:	beq.n	5e32 <MTPD::WriteDescriptor()+0xce>
    5e16:	ldrh.w	r3, [r5, #2]!
    5e1a:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5e1e:	cmp	r6, #0
    5e20:	bne.n	5e0a <MTPD::WriteDescriptor()+0xa6>
    5e22:	movs	r2, #2
    5e24:	add	r1, sp, #12
    5e26:	mov	r0, r4
    5e28:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    
    // Events (array of uint16)
    write32(supported_event_num);      
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    5e2c:	cmp	r7, r5
    5e2e:	ldrb	r6, [r4, #8]
    5e30:	bne.n	5e16 <MTPD::WriteDescriptor()+0xb2>
    5e32:	movs	r3, #1
    5e34:	str	r3, [sp, #40]	; 0x28
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5e36:	cmp	r6, #0
    5e38:	beq.n	5ef8 <MTPD::WriteDescriptor()+0x194>
      write_length_ += len;
    5e3a:	ldr	r3, [r4, #12]
    5e3c:	movw	r2, #54274	; 0xd402
    5e40:	adds	r3, #4
    5e42:	str	r3, [r4, #12]
    5e44:	strh.w	r2, [sp, #18]
    5e48:	adds	r3, #2
    5e4a:	movs	r2, #0
    5e4c:	str	r3, [r4, #12]
    5e4e:	str	r2, [sp, #36]	; 0x24
    5e50:	adds	r3, #4
    5e52:	movs	r2, #2
    5e54:	str	r3, [r4, #12]
    5e56:	str	r2, [sp, #32]
    5e58:	adds	r3, #4
    5e5a:	mov.w	r2, #12288	; 0x3000
    5e5e:	str	r3, [r4, #12]
    5e60:	strh.w	r2, [sp, #16]
    5e64:	adds	r3, #2
    5e66:	movw	r2, #12289	; 0x3001
    5e6a:	str	r3, [r4, #12]
    5e6c:	strh.w	r2, [sp, #14]
    5e70:	adds	r3, #2
    5e72:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    5e74:	ldr	r1, [pc, #340]	; (5fcc <MTPD::WriteDescriptor()+0x268>)
    5e76:	mov	r0, r4
    5e78:	bl	5c00 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    5e7c:	ldr	r1, [pc, #336]	; (5fd0 <MTPD::WriteDescriptor()+0x26c>)
    5e7e:	mov	r0, r4
    5e80:	bl	5c00 <MTPD::writestring(char const*)>
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    5e84:	vldr	s0, [pc, #332]	; 5fd4 <MTPD::WriteDescriptor()+0x270>
    5e88:	add	r2, sp, #44	; 0x2c
    5e8a:	movs	r1, #2
    5e8c:	movs	r0, #3
    5e8e:	bl	e2b4 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    5e92:	movs	r2, #20
    5e94:	ldr	r1, [pc, #320]	; (5fd8 <MTPD::WriteDescriptor()+0x274>)
    5e96:	add	r0, sp, #44	; 0x2c
    5e98:	bl	1164c <strlcat>
    writestring( buf );    
    5e9c:	mov	r0, r4
    5e9e:	add	r1, sp, #44	; 0x2c
    5ea0:	bl	5c00 <MTPD::writestring(char const*)>
    5ea4:	ldr	r2, [pc, #308]	; (5fdc <MTPD::WriteDescriptor()+0x278>)
    5ea6:	add	r3, sp, #44	; 0x2c
    5ea8:	add.w	r0, sp, #54	; 0x36
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    5eac:	ldrh.w	r1, [r2, #2]!
    5eb0:	strb.w	r1, [r3], #1
    5eb4:	cmp	r3, r0
    5eb6:	bne.n	5eac <MTPD::WriteDescriptor()+0x148>
    #pragma GCC diagnostic pop
    writestring(buf);    
    5eb8:	add	r1, sp, #44	; 0x2c
    5eba:	mov	r0, r4
    5ebc:	bl	5c00 <MTPD::writestring(char const*)>
  }
    5ec0:	add	sp, #68	; 0x44
    5ec2:	pop	{r4, r5, r6, r7, pc}
    5ec4:	movs	r2, #2
    5ec6:	add	r1, sp, #8
    5ec8:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5ecc:	ldrb	r3, [r4, #8]
    5ece:	movs	r2, #6
    5ed0:	str	r2, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5ed2:	cmp	r3, #0
    5ed4:	bne.n	5f9e <MTPD::WriteDescriptor()+0x23a>
    5ed6:	movs	r2, #4
    5ed8:	add	r1, sp, #24
    5eda:	mov	r0, r4
    5edc:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5ee0:	ldrb	r3, [r4, #8]
    5ee2:	strh.w	r5, [sp, #6]
    5ee6:	cmp	r3, #0
    5ee8:	bne.n	5fa2 <MTPD::WriteDescriptor()+0x23e>
    5eea:	movs	r2, #2
    5eec:	add.w	r1, sp, #6
    5ef0:	mov	r0, r4
    5ef2:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5ef6:	b.n	5d90 <MTPD::WriteDescriptor()+0x2c>
    5ef8:	movs	r2, #4
    5efa:	add	r1, sp, #40	; 0x28
    5efc:	mov	r0, r4
    5efe:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5f02:	ldrb	r3, [r4, #8]
    5f04:	movw	r2, #54274	; 0xd402
    5f08:	strh.w	r2, [sp, #18]
    5f0c:	cmp	r3, #0
    5f0e:	bne.n	5fa6 <MTPD::WriteDescriptor()+0x242>
    5f10:	movs	r2, #2
    5f12:	add.w	r1, sp, #18
    5f16:	mov	r0, r4
    5f18:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5f1c:	ldrb	r3, [r4, #8]
    5f1e:	str	r6, [sp, #36]	; 0x24
    5f20:	cmp	r3, #0
    5f22:	bne.n	5faa <MTPD::WriteDescriptor()+0x246>
    5f24:	movs	r2, #4
    5f26:	add	r1, sp, #36	; 0x24
    5f28:	mov	r0, r4
    5f2a:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5f2e:	ldrb	r3, [r4, #8]
    5f30:	movs	r5, #2
    5f32:	str	r5, [sp, #32]
    5f34:	cmp	r3, #0
    5f36:	bne.n	5fae <MTPD::WriteDescriptor()+0x24a>
    5f38:	movs	r2, #4
    5f3a:	add	r1, sp, #32
    5f3c:	mov	r0, r4
    5f3e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5f42:	ldrb	r3, [r4, #8]
    5f44:	mov.w	r2, #12288	; 0x3000
    5f48:	strh.w	r2, [sp, #16]
    5f4c:	cbnz	r3, 5fb2 <MTPD::WriteDescriptor()+0x24e>
    5f4e:	mov	r2, r5
    5f50:	add	r1, sp, #16
    5f52:	mov	r0, r4
    5f54:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5f58:	ldrb	r3, [r4, #8]
    5f5a:	movw	r2, #12289	; 0x3001
    5f5e:	strh.w	r2, [sp, #14]
    5f62:	cbnz	r3, 5fb6 <MTPD::WriteDescriptor()+0x252>
    5f64:	mov	r2, r5
    5f66:	add.w	r1, sp, #14
    5f6a:	mov	r0, r4
    5f6c:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5f70:	b.n	5e74 <MTPD::WriteDescriptor()+0x110>
    5f72:	add	r1, sp, #28
    5f74:	mov	r0, r4
    5f76:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5f7a:	ldrb	r6, [r4, #8]
    5f7c:	b.n	5dfc <MTPD::WriteDescriptor()+0x98>
    5f7e:	movs	r2, #2
    5f80:	add	r1, sp, #4
    5f82:	mov	r0, r4
    5f84:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5f88:	ldrb	r3, [r4, #8]
    5f8a:	movs	r2, #20
    5f8c:	str	r2, [sp, #20]
    5f8e:	cbnz	r3, 5fba <MTPD::WriteDescriptor()+0x256>
    5f90:	movs	r2, #4
    5f92:	add	r1, sp, #20
    5f94:	mov	r0, r4
    5f96:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    5f9a:	ldrb	r6, [r4, #8]
    5f9c:	b.n	5db6 <MTPD::WriteDescriptor()+0x52>
    5f9e:	ldr	r3, [r4, #12]
    5fa0:	b.n	5d82 <MTPD::WriteDescriptor()+0x1e>
    5fa2:	ldr	r3, [r4, #12]
    5fa4:	b.n	5d8c <MTPD::WriteDescriptor()+0x28>
    5fa6:	ldr	r3, [r4, #12]
    5fa8:	b.n	5e48 <MTPD::WriteDescriptor()+0xe4>
    5faa:	ldr	r3, [r4, #12]
    5fac:	b.n	5e50 <MTPD::WriteDescriptor()+0xec>
    5fae:	ldr	r3, [r4, #12]
    5fb0:	b.n	5e58 <MTPD::WriteDescriptor()+0xf4>
    5fb2:	ldr	r3, [r4, #12]
    5fb4:	b.n	5e64 <MTPD::WriteDescriptor()+0x100>
    5fb6:	ldr	r3, [r4, #12]
    5fb8:	b.n	5e70 <MTPD::WriteDescriptor()+0x10c>
    5fba:	ldr	r3, [r4, #12]
    5fbc:	b.n	5db0 <MTPD::WriteDescriptor()+0x4c>
    5fbe:	nop
    5fc0:	.word	0x00014f3c
    5fc4:	.word	0x00014efc
    5fc8:	.word	0x00014f80
    5fcc:	.word	0x00014f50
    5fd0:	.word	0x00014f34
    5fd4:	.word	0x3fc51eb8
    5fd8:	.word	0x00014f58
    5fdc:	.word	0x1fff0c38

00005fe0 <MTPD::WriteStorageIDs()>:
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5fe0:	push	{r4, r5, r6, lr}
    5fe2:	mov	r5, r0
    uint32_t num=storage_->get_FSCount();
    5fe4:	ldr	r0, [r0, #0]
    5fe6:	ldr	r2, [pc, #92]	; (6044 <MTPD::WriteStorageIDs()+0x64>)
    5fe8:	ldr	r3, [r0, #0]
    5fea:	ldr	r3, [r3, #4]
    5fec:	cmp	r3, r2
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    5fee:	sub	sp, #8
    5ff0:	bne.n	603c <MTPD::WriteStorageIDs()+0x5c>
    {
      for(int ii=0; ii<fsCount;ii++) if(!strcmp(name,sd_name[ii])) return ii;
      return 0xFFFFFFFFUL;
    }

    uint32_t sd_getFSCount(void) {return fsCount;}
    5ff2:	ldr	r6, [r0, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    5ff4:	ldrb	r3, [r5, #8]
    5ff6:	str	r6, [sp, #0]
    5ff8:	cbz	r3, 6030 <MTPD::WriteStorageIDs()+0x50>
      write_length_ += len;
    5ffa:	ldr	r3, [r5, #12]
    5ffc:	adds	r3, #4
    5ffe:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    6000:	cbz	r6, 602c <MTPD::WriteStorageIDs()+0x4c>
    6002:	movs	r4, #0
    6004:	b.n	6012 <MTPD::WriteStorageIDs()+0x32>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    6006:	ldr	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    6008:	cmp	r6, r4
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    600a:	add.w	r3, r3, #4
    600e:	str	r3, [r5, #12]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    6010:	beq.n	602c <MTPD::WriteStorageIDs()+0x4c>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6012:	ldrb	r3, [r5, #8]
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    6014:	adds	r4, #1
    6016:	str	r4, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6018:	cmp	r3, #0
    601a:	bne.n	6006 <MTPD::WriteStorageIDs()+0x26>
    601c:	movs	r2, #4
    601e:	add.w	r1, sp, r2
    6022:	mov	r0, r5
    6024:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    6028:	cmp	r6, r4
    602a:	bne.n	6012 <MTPD::WriteStorageIDs()+0x32>
  }
    602c:	add	sp, #8
    602e:	pop	{r4, r5, r6, pc}
    6030:	movs	r2, #4
    6032:	mov	r1, sp
    6034:	mov	r0, r5
    6036:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    603a:	b.n	6000 <MTPD::WriteStorageIDs()+0x20>
    #pragma GCC diagnostic pop
    writestring(buf);    
  }

  void MTPD::WriteStorageIDs() {
    uint32_t num=storage_->get_FSCount();
    603c:	blx	r3
    603e:	mov	r6, r0
    6040:	b.n	5ff4 <MTPD::WriteStorageIDs()+0x14>
    6042:	nop
    6044:	.word	0x00001e8d

00006048 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    6048:	push	{r4, r5, r6, lr}
    if (write_get_length_) {
    604a:	ldrb	r3, [r0, #8]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    604c:	sub	sp, #8
    604e:	mov	r4, r0
    if (write_get_length_) {
    6050:	cbnz	r3, 609c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x54>
    6052:	mov	r5, r1
    6054:	mov	r6, r2
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
    6056:	bl	5b5c <MTPD::GetNumObjects(unsigned long, unsigned long)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    605a:	ldrb	r3, [r4, #8]
    605c:	str	r0, [sp, #0]
    605e:	cbz	r3, 60aa <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x62>
      write_length_ += len;
    6060:	ldr	r3, [r4, #12]
    6062:	adds	r3, #4
    6064:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    6066:	ldr	r0, [r4, #0]
    6068:	ldr	r3, [r0, #0]
    while (storage_->GetNextObjectHandle(store)) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    606a:	subs	r5, #1
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
    606c:	mov	r2, r6
    606e:	ldr	r3, [r3, #28]
    6070:	mov	r1, r5
    6072:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    6074:	ldr	r0, [r4, #0]
    6076:	ldr	r3, [r0, #0]
    6078:	mov	r1, r5
    607a:	ldr	r3, [r3, #32]
    607c:	blx	r3
    607e:	cbz	r0, 60a6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5e>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6080:	ldrb	r3, [r4, #8]
    6082:	str	r0, [sp, #4]
    6084:	cbz	r3, 608e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x46>
      write_length_ += len;
    6086:	ldr	r3, [r4, #12]
    6088:	adds	r3, #4
    608a:	str	r3, [r4, #12]
    608c:	b.n	6074 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
    608e:	movs	r2, #4
    6090:	add.w	r1, sp, r2
    6094:	mov	r0, r4
    6096:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    609a:	b.n	6074 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2c>
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
    609c:	bl	5b5c <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
      write_length_ *= 4;
    60a0:	adds	r0, #1
    60a2:	lsls	r0, r0, #2
    60a4:	str	r0, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(store, parent);
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    }
  }
    60a6:	add	sp, #8
    60a8:	pop	{r4, r5, r6, pc}
    60aa:	movs	r2, #4
    60ac:	mov	r1, sp
    60ae:	mov	r0, r4
    60b0:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    60b4:	b.n	6066 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
    60b6:	nop

000060b8 <MTPD::GetObjectInfo(unsigned long)>:
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    60b8:	push	{r4, r5, r6, r7, lr}
    60ba:	mov	r4, r0
    60bc:	sub	sp, #332	; 0x14c
    char filename[MAX_FILENAME_LEN];
    uint32_t size, parent;
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    60be:	ldr	r0, [r0, #0]
    60c0:	add.w	r6, sp, #10
    60c4:	add	r5, sp, #24
    60c6:	ldr	r3, [r0, #0]
    60c8:	stmia.w	sp, {r5, r6}
    60cc:	add	r2, sp, #72	; 0x48
    60ce:	ldr	r7, [r3, #36]	; 0x24
    60d0:	add	r3, sp, #20
    60d2:	blx	r7
    60d4:	ldrh	r3, [r6, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    60d6:	ldrb	r2, [r4, #8]
    60d8:	adds	r3, #1
    60da:	str	r3, [sp, #28]
    60dc:	cmp	r2, #0
    60de:	beq.n	6194 <MTPD::GetObjectInfo(unsigned long)+0xdc>
      write_length_ += len;
    60e0:	ldr	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    60e2:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    60e4:	adds	r3, #4
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    60e6:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    60e8:	str	r3, [r4, #12]
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    60ea:	beq.w	62c4 <MTPD::GetObjectInfo(unsigned long)+0x20c>
    60ee:	movs	r2, #0
    60f0:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    60f4:	adds	r3, #2
    60f6:	movs	r2, #0
    60f8:	str	r3, [r4, #12]
    60fa:	strh.w	r2, [sp, #14]
    60fe:	adds	r3, #2
    6100:	ldr	r2, [sp, #20]
    6102:	str	r3, [r4, #12]
    6104:	str	r2, [sp, #60]	; 0x3c
    6106:	adds	r3, #4
    6108:	movs	r2, #0
    610a:	str	r3, [r4, #12]
    610c:	strh.w	r2, [sp, #12]
    6110:	adds	r3, #2
    6112:	movs	r2, #0
    6114:	str	r3, [r4, #12]
    6116:	str	r2, [sp, #56]	; 0x38
    6118:	adds	r3, #4
    611a:	movs	r2, #0
    611c:	str	r3, [r4, #12]
    611e:	str	r2, [sp, #52]	; 0x34
    6120:	adds	r3, #4
    6122:	movs	r2, #0
    6124:	str	r3, [r4, #12]
    6126:	str	r2, [sp, #48]	; 0x30
    6128:	adds	r3, #4
    612a:	movs	r2, #0
    612c:	str	r3, [r4, #12]
    612e:	str	r2, [sp, #44]	; 0x2c
    6130:	adds	r3, #4
    6132:	movs	r2, #0
    6134:	str	r3, [r4, #12]
    6136:	str	r2, [sp, #40]	; 0x28
    6138:	adds	r3, #4
    613a:	movs	r2, #0
    613c:	str	r3, [r4, #12]
    613e:	str	r2, [sp, #36]	; 0x24
    6140:	adds	r3, #4
    6142:	ldr	r2, [r5, #0]
    6144:	str	r3, [r4, #12]
    6146:	str	r2, [sp, #32]
    6148:	ldr	r2, [sp, #20]
    614a:	sub.w	r2, r2, #4294967295
    614e:	clz	r2, r2
    6152:	lsrs	r2, r2, #5
    6154:	adds	r3, #4
    6156:	str	r3, [r4, #12]
    6158:	strh.w	r2, [sp, #18]
    615c:	adds	r3, #2
    615e:	movs	r2, #0
    6160:	str	r3, [r4, #12]
    6162:	str	r2, [sp, #68]	; 0x44
    6164:	adds	r3, #4
    6166:	movs	r2, #0
    6168:	str	r3, [r4, #12]
    616a:	str	r2, [sp, #64]	; 0x40
    616c:	adds	r3, #4
    616e:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    6170:	add	r1, sp, #72	; 0x48
    6172:	mov	r0, r4
    6174:	bl	5c00 <MTPD::writestring(char const*)>
    writestring("");  // date created
    6178:	mov	r0, r4
    617a:	ldr	r1, [pc, #396]	; (6308 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    617c:	bl	5c00 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    6180:	mov	r0, r4
    6182:	ldr	r1, [pc, #388]	; (6308 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    6184:	bl	5c00 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    6188:	mov	r0, r4
    618a:	ldr	r1, [pc, #380]	; (6308 <MTPD::GetObjectInfo(unsigned long)+0x250>)
    618c:	bl	5c00 <MTPD::writestring(char const*)>
  }
    6190:	add	sp, #332	; 0x14c
    6192:	pop	{r4, r5, r6, r7, pc}
    6194:	add	r1, sp, #28
    6196:	movs	r2, #4
    6198:	mov	r0, r4
    619a:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    uint16_t store;
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    619e:	ldr	r3, [sp, #20]
    61a0:	ldrb	r6, [r4, #8]
    61a2:	adds	r3, #1
    61a4:	movw	r3, #12289	; 0x3001
    61a8:	it	ne
    61aa:	movne	r3, #0
    61ac:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    61b0:	cmp	r6, #0
    61b2:	bne.w	62d6 <MTPD::GetObjectInfo(unsigned long)+0x21e>
    61b6:	add	r1, sp, #16
    61b8:	movs	r2, #2
    61ba:	mov	r0, r4
    61bc:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    61c0:	ldrb	r3, [r4, #8]
    61c2:	strh.w	r6, [sp, #14]
    61c6:	cmp	r3, #0
    61c8:	bne.w	62da <MTPD::GetObjectInfo(unsigned long)+0x222>
    61cc:	movs	r2, #2
    61ce:	add.w	r1, sp, #14
    61d2:	mov	r0, r4
    61d4:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    61d8:	ldrb	r3, [r4, #8]
    61da:	ldr	r2, [sp, #20]
    61dc:	str	r2, [sp, #60]	; 0x3c
    61de:	cmp	r3, #0
    61e0:	bne.n	62de <MTPD::GetObjectInfo(unsigned long)+0x226>
    61e2:	add	r1, sp, #60	; 0x3c
    61e4:	movs	r2, #4
    61e6:	mov	r0, r4
    61e8:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    61ec:	ldrb	r3, [r4, #8]
    61ee:	strh.w	r6, [sp, #12]
    61f2:	cmp	r3, #0
    61f4:	bne.n	62e2 <MTPD::GetObjectInfo(unsigned long)+0x22a>
    61f6:	add	r1, sp, #12
    61f8:	movs	r2, #2
    61fa:	mov	r0, r4
    61fc:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6200:	ldrb	r3, [r4, #8]
    6202:	str	r6, [sp, #56]	; 0x38
    6204:	cmp	r3, #0
    6206:	bne.n	62e6 <MTPD::GetObjectInfo(unsigned long)+0x22e>
    6208:	add	r1, sp, #56	; 0x38
    620a:	movs	r2, #4
    620c:	mov	r0, r4
    620e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6212:	ldrb	r3, [r4, #8]
    6214:	str	r6, [sp, #52]	; 0x34
    6216:	cmp	r3, #0
    6218:	bne.n	62ea <MTPD::GetObjectInfo(unsigned long)+0x232>
    621a:	add	r1, sp, #52	; 0x34
    621c:	movs	r2, #4
    621e:	mov	r0, r4
    6220:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6224:	ldrb	r3, [r4, #8]
    6226:	str	r6, [sp, #48]	; 0x30
    6228:	cmp	r3, #0
    622a:	bne.n	62ee <MTPD::GetObjectInfo(unsigned long)+0x236>
    622c:	add	r1, sp, #48	; 0x30
    622e:	movs	r2, #4
    6230:	mov	r0, r4
    6232:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6236:	ldrb	r3, [r4, #8]
    6238:	str	r6, [sp, #44]	; 0x2c
    623a:	cmp	r3, #0
    623c:	bne.n	62f2 <MTPD::GetObjectInfo(unsigned long)+0x23a>
    623e:	add	r1, sp, #44	; 0x2c
    6240:	movs	r2, #4
    6242:	mov	r0, r4
    6244:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6248:	ldrb	r3, [r4, #8]
    624a:	str	r6, [sp, #40]	; 0x28
    624c:	cmp	r3, #0
    624e:	bne.n	62f6 <MTPD::GetObjectInfo(unsigned long)+0x23e>
    6250:	add	r1, sp, #40	; 0x28
    6252:	movs	r2, #4
    6254:	mov	r0, r4
    6256:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    625a:	ldrb	r3, [r4, #8]
    625c:	str	r6, [sp, #36]	; 0x24
    625e:	cmp	r3, #0
    6260:	bne.n	62fa <MTPD::GetObjectInfo(unsigned long)+0x242>
    6262:	movs	r2, #4
    6264:	add	r1, sp, #36	; 0x24
    6266:	mov	r0, r4
    6268:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    626c:	ldrb	r3, [r4, #8]
    626e:	ldr	r2, [r5, #0]
    6270:	str	r2, [sp, #32]
    6272:	cmp	r3, #0
    6274:	bne.n	62fe <MTPD::GetObjectInfo(unsigned long)+0x246>
    6276:	add	r1, sp, #32
    6278:	movs	r2, #4
    627a:	mov	r0, r4
    627c:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6280:	ldr	r3, [sp, #20]
    6282:	ldrb	r6, [r4, #8]
    6284:	sub.w	r3, r3, #4294967295
    6288:	clz	r3, r3
    628c:	lsrs	r3, r3, #5
    628e:	strh.w	r3, [sp, #18]
    6292:	cmp	r6, #0
    6294:	bne.n	6302 <MTPD::GetObjectInfo(unsigned long)+0x24a>
    6296:	add.w	r1, sp, #18
    629a:	movs	r2, #2
    629c:	mov	r0, r4
    629e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    62a2:	ldrb	r5, [r4, #8]
    62a4:	str	r6, [sp, #68]	; 0x44
    62a6:	cbnz	r5, 62d2 <MTPD::GetObjectInfo(unsigned long)+0x21a>
    62a8:	add	r1, sp, #68	; 0x44
    62aa:	movs	r2, #4
    62ac:	mov	r0, r4
    62ae:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    62b2:	ldrb	r3, [r4, #8]
    62b4:	str	r5, [sp, #64]	; 0x40
    62b6:	cbnz	r3, 62ce <MTPD::GetObjectInfo(unsigned long)+0x216>
    62b8:	add	r1, sp, #64	; 0x40
    62ba:	movs	r2, #4
    62bc:	mov	r0, r4
    62be:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    62c2:	b.n	6170 <MTPD::GetObjectInfo(unsigned long)+0xb8>
    62c4:	movw	r2, #12289	; 0x3001
    62c8:	strh.w	r2, [sp, #16]
    62cc:	b.n	60f4 <MTPD::GetObjectInfo(unsigned long)+0x3c>
    62ce:	ldr	r3, [r4, #12]
    62d0:	b.n	616c <MTPD::GetObjectInfo(unsigned long)+0xb4>
    62d2:	ldr	r3, [r4, #12]
    62d4:	b.n	6164 <MTPD::GetObjectInfo(unsigned long)+0xac>
    62d6:	ldr	r3, [r4, #12]
    62d8:	b.n	60f4 <MTPD::GetObjectInfo(unsigned long)+0x3c>
    62da:	ldr	r3, [r4, #12]
    62dc:	b.n	60fe <MTPD::GetObjectInfo(unsigned long)+0x46>
    62de:	ldr	r3, [r4, #12]
    62e0:	b.n	6106 <MTPD::GetObjectInfo(unsigned long)+0x4e>
    62e2:	ldr	r3, [r4, #12]
    62e4:	b.n	6110 <MTPD::GetObjectInfo(unsigned long)+0x58>
    62e6:	ldr	r3, [r4, #12]
    62e8:	b.n	6118 <MTPD::GetObjectInfo(unsigned long)+0x60>
    62ea:	ldr	r3, [r4, #12]
    62ec:	b.n	6120 <MTPD::GetObjectInfo(unsigned long)+0x68>
    62ee:	ldr	r3, [r4, #12]
    62f0:	b.n	6128 <MTPD::GetObjectInfo(unsigned long)+0x70>
    62f2:	ldr	r3, [r4, #12]
    62f4:	b.n	6130 <MTPD::GetObjectInfo(unsigned long)+0x78>
    62f6:	ldr	r3, [r4, #12]
    62f8:	b.n	6138 <MTPD::GetObjectInfo(unsigned long)+0x80>
    62fa:	ldr	r3, [r4, #12]
    62fc:	b.n	6140 <MTPD::GetObjectInfo(unsigned long)+0x88>
    62fe:	ldr	r3, [r4, #12]
    6300:	b.n	6148 <MTPD::GetObjectInfo(unsigned long)+0x90>
    6302:	ldr	r3, [r4, #12]
    6304:	b.n	615c <MTPD::GetObjectInfo(unsigned long)+0xa4>
    6306:	nop
    6308:	.word	0x00014d98

0000630c <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    630c:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    630e:	ldr	r7, [pc, #96]	; (6370 <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6310:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    6312:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    6314:	sub	sp, #12
    6316:	mov	r4, r0
    6318:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    631a:	cbz	r2, 6362 <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    631c:	ldr	r2, [r0, #12]
    631e:	adds	r2, #4
    6320:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6322:	cbz	r3, 635e <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    6324:	ldr	r6, [pc, #76]	; (6374 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    6326:	movw	r3, #56321	; 0xdc01
    632a:	movs	r5, #0
    632c:	b.n	6340 <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    632e:	ldr	r3, [r4, #12]
    6330:	adds	r3, #2
    6332:	str	r3, [r4, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6334:	ldr	r3, [r7, #0]
    6336:	adds	r5, #1
    6338:	cmp	r3, r5
    633a:	bls.n	635e <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    633c:	ldrh.w	r3, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6340:	ldrb	r2, [r4, #8]
    6342:	strh.w	r3, [sp, #2]
    6346:	cmp	r2, #0
    6348:	bne.n	632e <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    634a:	movs	r2, #2
    634c:	add.w	r1, sp, r2
    6350:	mov	r0, r4
    6352:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6356:	ldr	r3, [r7, #0]
    6358:	adds	r5, #1
    635a:	cmp	r3, r5
    635c:	bhi.n	633c <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    635e:	add	sp, #12
    6360:	pop	{r4, r5, r6, r7, pc}
    6362:	movs	r2, #4
    6364:	add.w	r1, sp, r2
    6368:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    636c:	ldr	r3, [r7, #0]
    636e:	b.n	6322 <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    6370:	.word	0x1fff0990
    6374:	.word	0x00014f24

00006378 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6378:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    637c:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    637e:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6380:	sub	sp, #316	; 0x13c
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6382:	ldr	r3, [r0, #0]
    6384:	add.w	r6, sp, #10
    6388:	add	r7, sp, #20
    638a:	str	r6, [sp, #4]
    638c:	str	r7, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    638e:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    6390:	ldr.w	r8, [r3, #36]	; 0x24
    6394:	add	r2, sp, #56	; 0x38
    6396:	add	r3, sp, #16
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[MAX_FILENAME_LEN];
    6398:	mov	r9, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    639a:	blx	r8
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
      switch(p2)
    639c:	sub.w	r2, r4, #56320	; 0xdc00
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    63a0:	ldrh	r3, [r6, #0]
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
    63a2:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
      switch(p2)
    63a4:	subs	r2, #1
      uint32_t size;
      uint32_t parent;
      uint16_t store;
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
      dir = size == 0xFFFFFFFFUL;
      uint32_t storage = Store2Storage(store);
    63a6:	adds	r4, r3, #1
      switch(p2)
    63a8:	cmp	r2, #67	; 0x43
    63aa:	bhi.n	6410 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    63ac:	tbb	[pc, r2]
    63b0:	.word	0x776a4b41
    63b4:	.word	0x333a3030
    63b8:	.word	0x305c3033
    63bc:	.word	0x30303030
    63c0:	.word	0x30303030
    63c4:	.word	0x30303030
    63c8:	.word	0x30303030
    63cc:	.word	0x30303030
    63d0:	.word	0x30303030
    63d4:	.word	0x30303030
    63d8:	.word	0x30303030
    63dc:	.word	0x30303030
    63e0:	.word	0x30303030
    63e4:	.word	0x30303030
    63e8:	.word	0x30303030
    63ec:	.word	0x30303030
    63f0:	.word	0x3a303022
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    63f4:	ldrb	r3, [r5, #8]
    63f6:	str.w	r9, [sp, #52]	; 0x34
    63fa:	cmp	r3, #0
    63fc:	beq.n	64ae <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x136>
      write_length_ += len;
    63fe:	ldr	r3, [r5, #12]
    6400:	adds	r3, #4
    6402:	str	r3, [r5, #12]
    6404:	adds	r3, #4
    6406:	str	r3, [r5, #12]
    6408:	adds	r3, #4
    640a:	str	r3, [r5, #12]
    640c:	adds	r3, #4
    640e:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6410:	add	sp, #316	; 0x13c
    6412:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    6416:	mov	r0, r5
    6418:	ldr	r1, [pc, #276]	; (6530 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b8>)
    641a:	bl	5c00 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    641e:	add	sp, #316	; 0x13c
    6420:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(parent);
          write32(storage);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    6424:	add	r1, sp, #56	; 0x38
    6426:	mov	r0, r5
    6428:	bl	5c00 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    642c:	add	sp, #316	; 0x13c
    642e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6432:	ldrb	r3, [r5, #8]
    6434:	str	r4, [sp, #24]
    6436:	cmp	r3, #0
    6438:	beq.n	64fa <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x182>
      write_length_ += len;
    643a:	ldr	r3, [r5, #12]
    643c:	adds	r3, #4
    643e:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6440:	add	sp, #316	; 0x13c
    6442:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    6446:	adds	r1, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6448:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    644a:	movw	r3, #12289	; 0x3001
    644e:	it	ne
    6450:	movne.w	r3, #12288	; 0x3000
    6454:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6458:	cmp	r2, #0
    645a:	beq.n	64ee <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x176>
      write_length_ += len;
    645c:	ldr	r3, [r5, #12]
    645e:	adds	r3, #2
    6460:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6462:	add	sp, #316	; 0x13c
    6464:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    6468:	ldr	r2, [r7, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    646a:	ldrb	r1, [r5, #8]
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
          break;
        case MTP_PROPERTY_PARENT_OBJECT:      //0xDC0B:
          write32((store==parent)? 0: parent);
    646c:	cmp	r3, r2
    646e:	it	eq
    6470:	moveq	r2, #0
    6472:	str	r2, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6474:	cmp	r1, #0
    6476:	bne.n	643a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc2>
    6478:	add	r1, sp, #36	; 0x24
    647a:	mov	r0, r5
    647c:	movs	r2, #4
    647e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6482:	b.n	6410 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6484:	ldrb	r3, [r5, #8]
    6486:	movs	r2, #0
    6488:	strh.w	r2, [sp, #14]
    648c:	cmp	r3, #0
    648e:	bne.n	645c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe4>
    6490:	add.w	r1, sp, #14
    6494:	mov	r0, r5
    6496:	movs	r2, #2
    6498:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    649c:	b.n	6410 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    649e:	ldrb	r4, [r5, #8]
    64a0:	str	r1, [sp, #32]
    64a2:	cmp	r4, #0
    64a4:	beq.n	6506 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18e>
      write_length_ += len;
    64a6:	ldr	r3, [r5, #12]
    64a8:	adds	r3, #4
    64aa:	str	r3, [r5, #12]
    64ac:	b.n	640c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    64ae:	movs	r2, #4
    64b0:	add	r1, sp, #52	; 0x34
    64b2:	mov	r0, r5
    64b4:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    64b8:	ldrb	r3, [r5, #8]
    64ba:	ldr	r2, [r7, #0]
    64bc:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    64be:	cmp	r3, #0
    64c0:	bne.n	652a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b2>
    64c2:	add	r1, sp, #48	; 0x30
    64c4:	movs	r2, #4
    64c6:	mov	r0, r5
    64c8:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    64cc:	ldrb	r6, [r5, #8]
    64ce:	str	r4, [sp, #44]	; 0x2c
    64d0:	cbnz	r6, 6526 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ae>
    64d2:	add	r1, sp, #44	; 0x2c
    64d4:	movs	r2, #4
    64d6:	mov	r0, r5
    64d8:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    64dc:	ldrb	r3, [r5, #8]
    64de:	str	r6, [sp, #40]	; 0x28
    64e0:	cbnz	r3, 6522 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1aa>
    64e2:	add	r1, sp, #40	; 0x28
    64e4:	mov	r0, r5
    64e6:	movs	r2, #4
    64e8:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    64ec:	b.n	6410 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64ee:	add	r1, sp, #12
    64f0:	mov	r0, r5
    64f2:	movs	r2, #2
    64f4:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    64f8:	b.n	6410 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    64fa:	add	r1, sp, #24
    64fc:	mov	r0, r5
    64fe:	movs	r2, #4
    6500:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6504:	b.n	6410 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6506:	add	r1, sp, #32
    6508:	movs	r2, #4
    650a:	mov	r0, r5
    650c:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6510:	ldrb	r3, [r5, #8]
    6512:	str	r4, [sp, #28]
    6514:	cbnz	r3, 6522 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1aa>
    6516:	add	r1, sp, #28
    6518:	mov	r0, r5
    651a:	movs	r2, #4
    651c:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6520:	b.n	6410 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
    6522:	ldr	r3, [r5, #12]
    6524:	b.n	640c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
    6526:	ldr	r3, [r5, #12]
    6528:	b.n	6408 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90>
    652a:	ldr	r3, [r5, #12]
    652c:	b.n	6404 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8c>
    652e:	nop
    6530:	.word	0x00014d98

00006534 <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    6534:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6538:	mov	r4, r0
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    653a:	ldr	r0, [r0, #0]
    653c:	ldr	r3, [r0, #0]
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    653e:	subs	r5, r1, #1
    uint32_t num=storage_->get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    6540:	sub	sp, #36	; 0x24
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    6542:	ldr	r3, [r3, #20]
    6544:	mov	r1, r5
    6546:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6548:	ldrb	r3, [r4, #8]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    654a:	cmp	r0, #0
    654c:	ite	eq
    654e:	moveq	r2, #4
    6550:	movne	r2, #1
    6552:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6556:	cmp	r3, #0
    6558:	beq.n	65f4 <MTPD::GetStorageInfo(unsigned long)+0xc0>
      write_length_ += len;
    655a:	ldr	r3, [r4, #12]
    655c:	adds	r3, #2
    655e:	str	r3, [r4, #12]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    6560:	ldr	r0, [r4, #0]
    6562:	ldr	r3, [r0, #0]
    6564:	mov	r1, r5
    6566:	ldr	r3, [r3, #24]
    6568:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    656a:	ldrb	r6, [r4, #8]
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    656c:	cmp	r0, #0
    656e:	ite	eq
    6570:	moveq	r3, #1
    6572:	movne	r3, #2
    6574:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6578:	cmp	r6, #0
    657a:	beq.n	663c <MTPD::GetStorageInfo(unsigned long)+0x108>
      write_length_ += len;
    657c:	ldr	r3, [r4, #12]
    657e:	movs	r2, #0
    6580:	adds	r3, #2
    6582:	str	r3, [r4, #12]
    6584:	strh.w	r2, [sp, #8]
    6588:	adds	r3, #2
    658a:	str	r3, [r4, #12]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    658c:	ldr	r0, [r4, #0]
    658e:	ldr	r3, [r0, #0]
    6590:	mov	r1, r5
    6592:	ldr	r3, [r3, #12]
    6594:	blx	r3
    6596:	mov	r6, r0
    uint64_t nused = storage_->usedSize(store) ; 
    6598:	ldr	r0, [r4, #0]
    659a:	ldr	r3, [r0, #0]
    uint32_t store = Storage2Store(storage);
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    659c:	mov	r7, r1
    uint64_t nused = storage_->usedSize(store) ; 
    659e:	ldr	r3, [r3, #16]
    65a0:	mov	r1, r5
    65a2:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    65a4:	ldrb	r3, [r4, #8]
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)

    uint64_t ntotal = storage_->totalSize(store) ; 
    uint64_t nused = storage_->usedSize(store) ; 
    65a6:	mov	r8, r0
    65a8:	mov	r9, r1
    65aa:	strd	r6, r7, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    65ae:	cbz	r3, 6602 <MTPD::GetStorageInfo(unsigned long)+0xce>
    65b0:	subs	r6, r6, r0
      write_length_ += len;
    65b2:	ldr	r3, [r4, #12]
    65b4:	sbc.w	r7, r7, r1
    65b8:	strd	r6, r7, [sp, #16]
    65bc:	adds	r3, #8
    65be:	str	r3, [r4, #12]
    65c0:	adds	r3, #8
    65c2:	mov.w	r2, #4294967295
    65c6:	str	r3, [r4, #12]
    65c8:	str	r2, [sp, #12]
    65ca:	adds	r3, #4
    65cc:	str	r3, [r4, #12]

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    65ce:	ldr	r0, [r4, #0]
    65d0:	ldr	r2, [pc, #156]	; (6670 <MTPD::GetStorageInfo(unsigned long)+0x13c>)
    65d2:	ldr	r3, [r0, #0]
    65d4:	ldr	r3, [r3, #8]
    65d6:	cmp	r3, r2
    65d8:	bne.n	665c <MTPD::GetStorageInfo(unsigned long)+0x128>
    const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    65da:	add.w	r0, r0, r5, lsl #2
    65de:	ldr	r1, [r0, #8]
    writestring(name);  // storage descriptor
    65e0:	mov	r0, r4
    65e2:	bl	5c00 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    65e6:	mov	r0, r4
    65e8:	ldr	r1, [pc, #136]	; (6674 <MTPD::GetStorageInfo(unsigned long)+0x140>)
    65ea:	bl	5c00 <MTPD::writestring(char const*)>

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    65ee:	add	sp, #36	; 0x24
    65f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    65f4:	movs	r2, #2
    65f6:	add.w	r1, sp, #6
    65fa:	mov	r0, r4
    65fc:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6600:	b.n	6560 <MTPD::GetStorageInfo(unsigned long)+0x2c>
    6602:	movs	r2, #8
    6604:	add	r1, sp, #24
    6606:	mov	r0, r4
    6608:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    660c:	subs.w	r6, r6, r8
    6610:	ldrb	r3, [r4, #8]
    6612:	sbc.w	r7, r7, r9
    6616:	strd	r6, r7, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    661a:	cbnz	r3, 6668 <MTPD::GetStorageInfo(unsigned long)+0x134>
    661c:	movs	r2, #8
    661e:	add	r1, sp, #16
    6620:	mov	r0, r4
    6622:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6626:	ldrb	r3, [r4, #8]
    6628:	mov.w	r2, #4294967295
    662c:	str	r2, [sp, #12]
    662e:	cbnz	r3, 6664 <MTPD::GetStorageInfo(unsigned long)+0x130>
    6630:	movs	r2, #4
    6632:	add	r1, sp, #12
    6634:	mov	r0, r4
    6636:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    663a:	b.n	65ce <MTPD::GetStorageInfo(unsigned long)+0x9a>
    663c:	movs	r2, #2
    663e:	add.w	r1, sp, #10
    6642:	mov	r0, r4
    6644:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6648:	ldrb	r3, [r4, #8]
    664a:	strh.w	r6, [sp, #8]
    664e:	cbnz	r3, 666c <MTPD::GetStorageInfo(unsigned long)+0x138>
    6650:	movs	r2, #2
    6652:	add	r1, sp, #8
    6654:	mov	r0, r4
    6656:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    665a:	b.n	658c <MTPD::GetStorageInfo(unsigned long)+0x58>

    write64(ntotal);  // max capacity
    write64((ntotal-nused));  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    const char *name = storage_->get_FSName(store);
    665c:	mov	r1, r5
    665e:	blx	r3
    6660:	mov	r1, r0
    6662:	b.n	65e0 <MTPD::GetStorageInfo(unsigned long)+0xac>
    6664:	ldr	r3, [r4, #12]
    6666:	b.n	65ca <MTPD::GetStorageInfo(unsigned long)+0x96>
    6668:	ldr	r3, [r4, #12]
    666a:	b.n	65c0 <MTPD::GetStorageInfo(unsigned long)+0x8c>
    666c:	ldr	r3, [r4, #12]
    666e:	b.n	6588 <MTPD::GetStorageInfo(unsigned long)+0x54>
    6670:	.word	0x00001e91
    6674:	.word	0x00014d98

00006678 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    6678:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    667c:	sub.w	r1, r1, #56320	; 0xdc00
    6680:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    6682:	sub	sp, #148	; 0x94
    6684:	mov	r4, r0
      switch(p1)
    6686:	cmp	r1, #67	; 0x43
    6688:	bhi.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    668a:	tbh	[pc, r1, lsl #1]
    668e:	.short	0x005c
    6690:	.word	0x0080006e
    6694:	.word	0x005900c6
    6698:	.word	0x00d80059
    669c:	.word	0x01690121
    66a0:	.word	0x01b10059
    66a4:	.word	0x00590059
    66a8:	.word	0x00590059
    66ac:	.word	0x00590059
    66b0:	.word	0x00590059
    66b4:	.word	0x00590059
    66b8:	.word	0x00590059
    66bc:	.word	0x00590059
    66c0:	.word	0x00590059
    66c4:	.word	0x00590059
    66c8:	.word	0x00590059
    66cc:	.word	0x00590059
    66d0:	.word	0x00590059
    66d4:	.word	0x00590059
    66d8:	.word	0x00590059
    66dc:	.word	0x00590059
    66e0:	.word	0x00590059
    66e4:	.word	0x00590059
    66e8:	.word	0x00590059
    66ec:	.word	0x00590059
    66f0:	.word	0x00590059
    66f4:	.word	0x00590059
    66f8:	.word	0x00590059
    66fc:	.word	0x00590059
    6700:	.word	0x00590059
    6704:	.word	0x00590059
    6708:	.word	0x00590059
    670c:	.word	0x01f70059
    6710:	.word	0x00590059
    6714:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6716:	ldrb	r3, [r0, #8]
    6718:	movw	r2, #56388	; 0xdc44
    671c:	strh.w	r2, [sp, #70]	; 0x46
    6720:	cmp	r3, #0
    6722:	beq.w	6ba0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    6726:	ldr	r3, [r4, #12]
    6728:	adds	r3, #2
    672a:	str	r3, [r4, #12]
    672c:	adds	r3, #2
    672e:	str	r3, [r4, #12]
    6730:	adds	r3, #1
    6732:	str	r3, [r4, #12]
    6734:	adds	r3, #1
    6736:	str	r3, [r4, #12]
    6738:	adds	r3, #4
    673a:	str	r3, [r4, #12]
    673c:	adds	r3, #1
    673e:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    6740:	add	sp, #148	; 0x94
    6742:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6746:	ldrb	r3, [r0, #8]
    6748:	movw	r2, #56321	; 0xdc01
    674c:	strh.w	r2, [sp, #30]
    6750:	cmp	r3, #0
    6752:	beq.w	6cb4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    6756:	ldr	r3, [r4, #12]
    6758:	adds	r3, #2
    675a:	str	r3, [r4, #12]
    675c:	adds	r3, #2
    675e:	str	r3, [r4, #12]
    6760:	adds	r3, #1
    6762:	str	r3, [r4, #12]
    6764:	adds	r3, #4
    6766:	str	r3, [r4, #12]
    6768:	b.n	6738 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    676a:	ldrb	r3, [r0, #8]
    676c:	movw	r2, #56322	; 0xdc02
    6770:	strh.w	r2, [sp, #36]	; 0x24
    6774:	cmp	r3, #0
    6776:	beq.w	6b22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    677a:	ldr	r3, [r4, #12]
    677c:	adds	r3, #2
    677e:	str	r3, [r4, #12]
    6780:	adds	r3, #2
    6782:	str	r3, [r4, #12]
    6784:	adds	r3, #1
    6786:	str	r3, [r4, #12]
    6788:	adds	r3, #2
    678a:	str	r3, [r4, #12]
    678c:	b.n	6738 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    678e:	ldrb	r3, [r0, #8]
    6790:	movw	r2, #56323	; 0xdc03
    6794:	strh.w	r2, [sp, #42]	; 0x2a
    6798:	cmp	r3, #0
    679a:	bne.n	677a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    679c:	movs	r2, #2
    679e:	add.w	r1, sp, #42	; 0x2a
    67a2:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    67a6:	ldrb	r7, [r4, #8]
    67a8:	movs	r6, #4
    67aa:	strh.w	r6, [sp, #40]	; 0x28
    67ae:	cmp	r7, #0
    67b0:	bne.w	6d4a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    67b4:	movs	r2, #2
    67b6:	add	r1, sp, #40	; 0x28
    67b8:	mov	r0, r4
    67ba:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    67be:	ldrb	r5, [r4, #8]
    67c0:	strb.w	r7, [sp, #9]
    67c4:	cmp	r5, #0
    67c6:	bne.w	6d46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    67ca:	movs	r2, #1
    67cc:	add.w	r1, sp, #9
    67d0:	mov	r0, r4
    67d2:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    67d6:	ldrb	r7, [r4, #8]
    67d8:	strh.w	r5, [sp, #38]	; 0x26
    67dc:	cmp	r7, #0
    67de:	bne.w	6d42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    67e2:	movs	r2, #2
    67e4:	add.w	r1, sp, #38	; 0x26
    67e8:	mov	r0, r4
    67ea:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    67ee:	ldrb	r5, [r4, #8]
    67f0:	str	r7, [sp, #84]	; 0x54
    67f2:	cmp	r5, #0
    67f4:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    67f8:	mov	r2, r6
    67fa:	add	r1, sp, #84	; 0x54
    67fc:	mov	r0, r4
    67fe:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6802:	ldrb	r3, [r4, #8]
    6804:	strb.w	r5, [sp, #8]
    6808:	cmp	r3, #0
    680a:	bne.w	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    680e:	mov	r0, r4
    6810:	movs	r2, #1
    6812:	add	r1, sp, #8
    6814:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6818:	b.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    681a:	ldrb	r3, [r0, #8]
    681c:	movw	r2, #56324	; 0xdc04
    6820:	strh.w	r2, [sp, #46]	; 0x2e
    6824:	cmp	r3, #0
    6826:	beq.w	6aa0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    682a:	ldr	r3, [r0, #12]
    682c:	adds	r3, #2
    682e:	str	r3, [r0, #12]
    6830:	adds	r3, #2
    6832:	str	r3, [r4, #12]
    6834:	adds	r3, #1
    6836:	str	r3, [r4, #12]
    6838:	adds	r3, #8
    683a:	str	r3, [r4, #12]
    683c:	b.n	6738 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    683e:	ldrb	r3, [r0, #8]
    6840:	movw	r2, #56327	; 0xdc07
    6844:	strh.w	r2, [sp, #50]	; 0x32
    6848:	cmp	r3, #0
    684a:	bne.w	6726 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    684e:	movs	r2, #2
    6850:	add.w	r1, sp, #50	; 0x32
    6854:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6858:	ldrb	r3, [r4, #8]
    685a:	movw	r2, #65535	; 0xffff
    685e:	strh.w	r2, [sp, #48]	; 0x30
    6862:	cmp	r3, #0
    6864:	bne.w	6d32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6868:	movs	r2, #2
    686a:	add	r1, sp, #48	; 0x30
    686c:	mov	r0, r4
    686e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6872:	ldrb	r6, [r4, #8]
    6874:	movs	r5, #1
    6876:	strb.w	r5, [sp, #14]
    687a:	cmp	r6, #0
    687c:	bne.w	6d2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6880:	mov	r2, r5
    6882:	add.w	r1, sp, #14
    6886:	mov	r0, r4
    6888:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    688c:	ldrb	r7, [r4, #8]
    688e:	strb.w	r6, [sp, #13]
    6892:	cmp	r7, #0
    6894:	bne.w	6d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6898:	mov	r2, r5
    689a:	add.w	r1, sp, #13
    689e:	mov	r0, r4
    68a0:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    68a4:	ldrb	r6, [r4, #8]
    68a6:	str	r7, [sp, #92]	; 0x5c
    68a8:	cmp	r6, #0
    68aa:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    68ae:	movs	r2, #4
    68b0:	add	r1, sp, #92	; 0x5c
    68b2:	mov	r0, r4
    68b4:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    68b8:	ldrb	r3, [r4, #8]
    68ba:	strb.w	r6, [sp, #12]
    68be:	cmp	r3, #0
    68c0:	bne.w	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    68c4:	mov	r2, r5
    68c6:	mov	r0, r4
    68c8:	add	r1, sp, #12
    68ca:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    68ce:	b.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    68d0:	ldrb	r3, [r0, #8]
    68d2:	movw	r2, #56328	; 0xdc08
    68d6:	strh.w	r2, [sp, #54]	; 0x36
    68da:	cmp	r3, #0
    68dc:	bne.w	6726 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    68e0:	movs	r2, #2
    68e2:	add.w	r1, sp, #54	; 0x36
    68e6:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    68ea:	ldrb	r6, [r4, #8]
    68ec:	movw	r3, #65535	; 0xffff
    68f0:	strh.w	r3, [sp, #52]	; 0x34
    68f4:	cmp	r6, #0
    68f6:	bne.w	6d32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    68fa:	movs	r2, #2
    68fc:	add	r1, sp, #52	; 0x34
    68fe:	mov	r0, r4
    6900:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6904:	ldrb	r5, [r4, #8]
    6906:	strb.w	r6, [sp, #17]
    690a:	cmp	r5, #0
    690c:	bne.w	6d2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6910:	movs	r2, #1
    6912:	add.w	r1, sp, #17
    6916:	mov	r0, r4
    6918:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    691c:	ldrb	r6, [r4, #8]
    691e:	strb.w	r5, [sp, #16]
    6922:	cmp	r6, #0
    6924:	bne.w	6d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6928:	movs	r2, #1
    692a:	add	r1, sp, #16
    692c:	mov	r0, r4
    692e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6932:	ldrb	r5, [r4, #8]
    6934:	str	r6, [sp, #96]	; 0x60
    6936:	cmp	r5, #0
    6938:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    693c:	movs	r2, #4
    693e:	add	r1, sp, #96	; 0x60
    6940:	mov	r0, r4
    6942:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6946:	ldrb	r3, [r4, #8]
    6948:	strb.w	r5, [sp, #15]
    694c:	cmp	r3, #0
    694e:	bne.w	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6952:	mov	r0, r4
    6954:	movs	r2, #1
    6956:	add.w	r1, sp, #15
    695a:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    695e:	b.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6960:	ldrb	r3, [r0, #8]
    6962:	movw	r2, #56329	; 0xdc09
    6966:	strh.w	r2, [sp, #58]	; 0x3a
    696a:	cmp	r3, #0
    696c:	bne.w	6726 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    6970:	movs	r2, #2
    6972:	add.w	r1, sp, #58	; 0x3a
    6976:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    697a:	ldrb	r6, [r4, #8]
    697c:	movw	r3, #65535	; 0xffff
    6980:	strh.w	r3, [sp, #56]	; 0x38
    6984:	cmp	r6, #0
    6986:	bne.w	6d32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    698a:	movs	r2, #2
    698c:	add	r1, sp, #56	; 0x38
    698e:	mov	r0, r4
    6990:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6994:	ldrb	r5, [r4, #8]
    6996:	strb.w	r6, [sp, #20]
    699a:	cmp	r5, #0
    699c:	bne.w	6d2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    69a0:	movs	r2, #1
    69a2:	add	r1, sp, #20
    69a4:	mov	r0, r4
    69a6:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    69aa:	ldrb	r6, [r4, #8]
    69ac:	strb.w	r5, [sp, #19]
    69b0:	cmp	r6, #0
    69b2:	bne.w	6d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    69b6:	movs	r2, #1
    69b8:	add.w	r1, sp, #19
    69bc:	mov	r0, r4
    69be:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    69c2:	ldrb	r5, [r4, #8]
    69c4:	str	r6, [sp, #100]	; 0x64
    69c6:	cmp	r5, #0
    69c8:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    69cc:	movs	r2, #4
    69ce:	add	r1, sp, #100	; 0x64
    69d0:	mov	r0, r4
    69d2:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    69d6:	ldrb	r3, [r4, #8]
    69d8:	strb.w	r5, [sp, #18]
    69dc:	cmp	r3, #0
    69de:	bne.w	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    69e2:	mov	r0, r4
    69e4:	movs	r2, #1
    69e6:	add.w	r1, sp, #18
    69ea:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    69ee:	b.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    69f0:	ldrb	r3, [r0, #8]
    69f2:	movw	r2, #56331	; 0xdc0b
    69f6:	strh.w	r2, [sp, #62]	; 0x3e
    69fa:	cmp	r3, #0
    69fc:	bne.w	6756 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    6a00:	movs	r2, #2
    6a02:	add.w	r1, sp, #62	; 0x3e
    6a06:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6a0a:	ldrb	r6, [r4, #8]
    6a0c:	movs	r3, #6
    6a0e:	strh.w	r3, [sp, #60]	; 0x3c
    6a12:	cmp	r6, #0
    6a14:	bne.w	6d2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    6a18:	movs	r2, #2
    6a1a:	add	r1, sp, #60	; 0x3c
    6a1c:	mov	r0, r4
    6a1e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6a22:	ldrb	r5, [r4, #8]
    6a24:	strb.w	r6, [sp, #22]
    6a28:	cmp	r5, #0
    6a2a:	bne.w	6d26 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    6a2e:	movs	r2, #1
    6a30:	add.w	r1, sp, #22
    6a34:	mov	r0, r4
    6a36:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6a3a:	ldrb	r6, [r4, #8]
    6a3c:	str	r5, [sp, #108]	; 0x6c
    6a3e:	cmp	r6, #0
    6a40:	bne.w	6d22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    6a44:	movs	r2, #4
    6a46:	add	r1, sp, #108	; 0x6c
    6a48:	mov	r0, r4
    6a4a:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6a4e:	ldrb	r5, [r4, #8]
    6a50:	str	r6, [sp, #104]	; 0x68
    6a52:	cmp	r5, #0
    6a54:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6a58:	movs	r2, #4
    6a5a:	add	r1, sp, #104	; 0x68
    6a5c:	mov	r0, r4
    6a5e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6a62:	ldrb	r3, [r4, #8]
    6a64:	strb.w	r5, [sp, #21]
    6a68:	cmp	r3, #0
    6a6a:	bne.w	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6a6e:	mov	r0, r4
    6a70:	movs	r2, #1
    6a72:	add.w	r1, sp, #21
    6a76:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6a7a:	b.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6a7c:	ldrb	r3, [r0, #8]
    6a7e:	movw	r2, #56385	; 0xdc41
    6a82:	strh.w	r2, [sp, #66]	; 0x42
    6a86:	cmp	r3, #0
    6a88:	beq.w	6c22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    6a8c:	ldr	r3, [r0, #12]
    6a8e:	adds	r3, #2
    6a90:	str	r3, [r0, #12]
    6a92:	adds	r3, #2
    6a94:	str	r3, [r4, #12]
    6a96:	adds	r3, #1
    6a98:	str	r3, [r4, #12]
    6a9a:	adds	r3, #8
    6a9c:	str	r3, [r4, #12]
    6a9e:	b.n	6838 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    6aa0:	movs	r2, #2
    6aa2:	add.w	r1, sp, #46	; 0x2e
    6aa6:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6aaa:	ldrb	r6, [r4, #8]
    6aac:	movs	r5, #8
    6aae:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6ab2:	cmp	r6, #0
    6ab4:	bne.w	6d3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    6ab8:	movs	r2, #2
    6aba:	add	r1, sp, #44	; 0x2c
    6abc:	mov	r0, r4
    6abe:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6ac2:	ldrb	r3, [r4, #8]
    6ac4:	strb.w	r6, [sp, #11]
    6ac8:	cmp	r3, #0
    6aca:	bne.w	6d36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    6ace:	movs	r2, #1
    6ad0:	add.w	r1, sp, #11
    6ad4:	mov	r0, r4
    6ad6:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6ada:	ldrb	r6, [r4, #8]
    6adc:	movs	r2, #0
    6ade:	movs	r3, #0
    6ae0:	strd	r2, r3, [sp, #120]	; 0x78
    6ae4:	cmp	r6, #0
    6ae6:	bne.w	6d4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    6aea:	mov	r2, r5
    6aec:	add	r1, sp, #120	; 0x78
    6aee:	mov	r0, r4
    6af0:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6af4:	ldrb	r5, [r4, #8]
    6af6:	str	r6, [sp, #88]	; 0x58
    6af8:	cmp	r5, #0
    6afa:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6afe:	movs	r2, #4
    6b00:	add	r1, sp, #88	; 0x58
    6b02:	mov	r0, r4
    6b04:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6b08:	ldrb	r3, [r4, #8]
    6b0a:	strb.w	r5, [sp, #10]
    6b0e:	cmp	r3, #0
    6b10:	bne.w	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6b14:	mov	r0, r4
    6b16:	movs	r2, #1
    6b18:	add.w	r1, sp, #10
    6b1c:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6b20:	b.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6b22:	movs	r2, #2
    6b24:	add	r1, sp, #36	; 0x24
    6b26:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6b2a:	ldrb	r7, [r4, #8]
    6b2c:	movs	r6, #4
    6b2e:	strh.w	r6, [sp, #34]	; 0x22
    6b32:	cmp	r7, #0
    6b34:	bne.w	6d4a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    6b38:	movs	r2, #2
    6b3a:	add.w	r1, sp, #34	; 0x22
    6b3e:	mov	r0, r4
    6b40:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6b44:	ldrb	r5, [r4, #8]
    6b46:	strb.w	r7, [sp, #7]
    6b4a:	cmp	r5, #0
    6b4c:	bne.w	6d46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    6b50:	movs	r2, #1
    6b52:	add.w	r1, sp, #7
    6b56:	mov	r0, r4
    6b58:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6b5c:	ldrb	r7, [r4, #8]
    6b5e:	strh.w	r5, [sp, #32]
    6b62:	cmp	r7, #0
    6b64:	bne.w	6d42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    6b68:	movs	r2, #2
    6b6a:	add	r1, sp, #32
    6b6c:	mov	r0, r4
    6b6e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6b72:	ldrb	r5, [r4, #8]
    6b74:	str	r7, [sp, #80]	; 0x50
    6b76:	cmp	r5, #0
    6b78:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6b7c:	mov	r2, r6
    6b7e:	add	r1, sp, #80	; 0x50
    6b80:	mov	r0, r4
    6b82:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6b86:	ldrb	r3, [r4, #8]
    6b88:	strb.w	r5, [sp, #6]
    6b8c:	cmp	r3, #0
    6b8e:	bne.w	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6b92:	mov	r0, r4
    6b94:	movs	r2, #1
    6b96:	add.w	r1, sp, #6
    6b9a:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6b9e:	b.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6ba0:	movs	r2, #2
    6ba2:	add.w	r1, sp, #70	; 0x46
    6ba6:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6baa:	ldrb	r6, [r4, #8]
    6bac:	movw	r3, #65535	; 0xffff
    6bb0:	strh.w	r3, [sp, #68]	; 0x44
    6bb4:	cmp	r6, #0
    6bb6:	bne.w	6d32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    6bba:	movs	r2, #2
    6bbc:	add	r1, sp, #68	; 0x44
    6bbe:	mov	r0, r4
    6bc0:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6bc4:	ldrb	r5, [r4, #8]
    6bc6:	strb.w	r6, [sp, #27]
    6bca:	cmp	r5, #0
    6bcc:	bne.w	6d2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    6bd0:	movs	r2, #1
    6bd2:	add.w	r1, sp, #27
    6bd6:	mov	r0, r4
    6bd8:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6bdc:	ldrb	r6, [r4, #8]
    6bde:	strb.w	r5, [sp, #26]
    6be2:	cmp	r6, #0
    6be4:	bne.w	6d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    6be8:	movs	r2, #1
    6bea:	add.w	r1, sp, #26
    6bee:	mov	r0, r4
    6bf0:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6bf4:	ldrb	r5, [r4, #8]
    6bf6:	str	r6, [sp, #116]	; 0x74
    6bf8:	cmp	r5, #0
    6bfa:	bne.w	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6bfe:	movs	r2, #4
    6c00:	add	r1, sp, #116	; 0x74
    6c02:	mov	r0, r4
    6c04:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6c08:	ldrb	r3, [r4, #8]
    6c0a:	strb.w	r5, [sp, #25]
    6c0e:	cmp	r3, #0
    6c10:	bne.w	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6c14:	mov	r0, r4
    6c16:	movs	r2, #1
    6c18:	add.w	r1, sp, #25
    6c1c:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6c20:	b.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6c22:	movs	r2, #2
    6c24:	add.w	r1, sp, #66	; 0x42
    6c28:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6c2c:	ldrb	r5, [r4, #8]
    6c2e:	movs	r3, #10
    6c30:	strh.w	r3, [sp, #64]	; 0x40
    6c34:	cmp	r5, #0
    6c36:	bne.w	6d5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    6c3a:	movs	r2, #2
    6c3c:	add	r1, sp, #64	; 0x40
    6c3e:	mov	r0, r4
    6c40:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6c44:	ldrb	r3, [r4, #8]
    6c46:	strb.w	r5, [sp, #24]
    6c4a:	cmp	r3, #0
    6c4c:	bne.w	6d56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    6c50:	movs	r2, #1
    6c52:	add	r1, sp, #24
    6c54:	mov	r0, r4
    6c56:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6c5a:	ldrb	r3, [r4, #8]
    6c5c:	mov.w	r8, #0
    6c60:	mov.w	r9, #0
    6c64:	strd	r8, r9, [sp, #136]	; 0x88
    6c68:	cmp	r3, #0
    6c6a:	bne.n	6d52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    6c6c:	movs	r2, #8
    6c6e:	add	r1, sp, #136	; 0x88
    6c70:	mov	r0, r4
    6c72:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6c76:	ldrb	r6, [r4, #8]
    6c78:	strd	r8, r9, [sp, #128]	; 0x80
    6c7c:	cmp	r6, #0
    6c7e:	bne.n	6d4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    6c80:	movs	r2, #8
    6c82:	add	r1, sp, #128	; 0x80
    6c84:	mov	r0, r4
    6c86:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6c8a:	ldrb	r5, [r4, #8]
    6c8c:	str	r6, [sp, #112]	; 0x70
    6c8e:	cmp	r5, #0
    6c90:	bne.n	6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6c92:	movs	r2, #4
    6c94:	add	r1, sp, #112	; 0x70
    6c96:	mov	r0, r4
    6c98:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6c9c:	ldrb	r3, [r4, #8]
    6c9e:	strb.w	r5, [sp, #23]
    6ca2:	cmp	r3, #0
    6ca4:	bne.n	6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6ca6:	mov	r0, r4
    6ca8:	movs	r2, #1
    6caa:	add.w	r1, sp, #23
    6cae:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6cb2:	b.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6cb4:	movs	r2, #2
    6cb6:	add.w	r1, sp, #30
    6cba:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6cbe:	ldrb	r6, [r4, #8]
    6cc0:	movs	r3, #6
    6cc2:	strh.w	r3, [sp, #28]
    6cc6:	cbnz	r6, 6d2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    6cc8:	movs	r2, #2
    6cca:	add	r1, sp, #28
    6ccc:	mov	r0, r4
    6cce:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6cd2:	ldrb	r5, [r4, #8]
    6cd4:	strb.w	r6, [sp, #5]
    6cd8:	cbnz	r5, 6d26 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    6cda:	movs	r2, #1
    6cdc:	add.w	r1, sp, #5
    6ce0:	mov	r0, r4
    6ce2:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6ce6:	ldrb	r6, [r4, #8]
    6ce8:	str	r5, [sp, #76]	; 0x4c
    6cea:	cbnz	r6, 6d22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    6cec:	movs	r2, #4
    6cee:	add	r1, sp, #76	; 0x4c
    6cf0:	mov	r0, r4
    6cf2:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6cf6:	ldrb	r5, [r4, #8]
    6cf8:	str	r6, [sp, #72]	; 0x48
    6cfa:	cbnz	r5, 6d1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    6cfc:	movs	r2, #4
    6cfe:	add	r1, sp, #72	; 0x48
    6d00:	mov	r0, r4
    6d02:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6d06:	ldrb	r3, [r4, #8]
    6d08:	strb.w	r5, [sp, #4]
    6d0c:	cbnz	r3, 6d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    6d0e:	mov	r0, r4
    6d10:	movs	r2, #1
    6d12:	add	r1, sp, #4
    6d14:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    6d18:	b.n	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    6d1a:	ldr	r3, [r4, #12]
    6d1c:	b.n	673c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    6d1e:	ldr	r3, [r4, #12]
    6d20:	b.n	6738 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    6d22:	ldr	r3, [r4, #12]
    6d24:	b.n	6764 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    6d26:	ldr	r3, [r4, #12]
    6d28:	b.n	6760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    6d2a:	ldr	r3, [r4, #12]
    6d2c:	b.n	675c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    6d2e:	ldr	r3, [r4, #12]
    6d30:	b.n	6730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    6d32:	ldr	r3, [r4, #12]
    6d34:	b.n	672c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    6d36:	ldr	r3, [r4, #12]
    6d38:	b.n	6834 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    6d3a:	ldr	r3, [r4, #12]
    6d3c:	b.n	6830 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    6d3e:	ldr	r3, [r4, #12]
    6d40:	b.n	6734 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    6d42:	ldr	r3, [r4, #12]
    6d44:	b.n	6788 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    6d46:	ldr	r3, [r4, #12]
    6d48:	b.n	6784 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    6d4a:	ldr	r3, [r4, #12]
    6d4c:	b.n	6780 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    6d4e:	ldr	r3, [r4, #12]
    6d50:	b.n	6838 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    6d52:	ldr	r3, [r4, #12]
    6d54:	b.n	6a9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    6d56:	ldr	r3, [r4, #12]
    6d58:	b.n	6a96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    6d5a:	ldr	r3, [r4, #12]
    6d5c:	b.n	6a92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    6d5e:	nop

00006d60 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    6d60:	push	{r4, lr}
    6d62:	mov	r4, r0
    6d64:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    6d66:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    6d68:	cbnz	r3, 6d72 <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    6d6a:	bl	e9f4 <usb_rx>
    6d6e:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    6d70:	cbz	r0, 6d74 <MTPD::receive_buffer()+0x14>
    6d72:	pop	{r4, pc}
    6d74:	bl	216c <mtp_yield()>
    6d78:	b.n	6d64 <MTPD::receive_buffer()+0x4>
    6d7a:	nop

00006d7c <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d80:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    6d82:	ldr	r0, [r0, #0]
    6d84:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d86:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    6d88:	ldr	r3, [r3, #40]	; 0x28
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    6d8a:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    6d8c:	blx	r3
    if (write_get_length_) {
    6d8e:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    6d90:	mov	r7, r0
    if (write_get_length_) {
    6d92:	cbnz	r5, 6dec <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6d94:	cbz	r0, 6de6 <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6d96:	mov	r9, r5
    6d98:	b.n	6d9e <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6d9a:	cmp	r7, r5
    6d9c:	bls.n	6de6 <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    6d9e:	mov	r0, r6
    6da0:	bl	5b84 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    6da4:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    6da8:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    6dac:	ldr	r1, [r0, #0]
    6dae:	subs	r4, r7, r5
    6db0:	rsb	lr, r2, #64	; 0x40
    6db4:	cmp	r4, lr
    6db6:	it	cs
    6db8:	movcs	r4, lr
    6dba:	str	r4, [sp, #0]
    6dbc:	add	r3, r2
    6dbe:	ldr.w	sl, [r1, #48]	; 0x30
    6dc2:	mov	r2, r5
    6dc4:	mov	r1, r8
    6dc6:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    6dc8:	ldr	r1, [r6, #4]
    6dca:	ldrh	r3, [r1, #0]
    6dcc:	add	r3, r4
    6dce:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6dd0:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    6dd2:	add	r5, r4
        data_buffer_->len += to_copy;
    6dd4:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6dd6:	bne.n	6d9a <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    6dd8:	movs	r0, #4
    6dda:	bl	eae0 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6dde:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6de0:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    6de4:	bhi.n	6d9e <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    6de6:	add	sp, #8
    6de8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    6dec:	ldr	r3, [r6, #12]
    6dee:	add	r7, r3
    6df0:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    6df2:	add	sp, #8
    6df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006df8 <MTPD::read(char*, unsigned long)>:
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6df8:	cbz	r2, 6e64 <MTPD::read(char*, unsigned long)+0x6c>
      if(CONTAINER->len>20) printf(" %x", CONTAINER->params[2]); \
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    6dfa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dfe:	mov	r6, r0
    6e00:	mov	r5, r1
    while (size) {
    6e02:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    6e04:	movs	r7, #0
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    6e06:	mov	r0, r6
    6e08:	bl	6d60 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    6e0c:	ldr	r3, [r6, #4]
    6e0e:	ldrh.w	lr, [r3, #2]
    6e12:	ldrh.w	ip, [r3]
    6e16:	rsb	r4, lr, ip
    6e1a:	cmp	r4, r8
    6e1c:	it	cs
    6e1e:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    6e20:	add.w	r1, r3, #8
    6e24:	add	r1, lr
    6e26:	mov	r0, r5
    6e28:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    6e2a:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    6e2e:	cbz	r5, 6e40 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    6e30:	bl	db90 <memcpy>
    6e34:	ldr	r3, [r6, #4]
    6e36:	ldrh.w	lr, [r3, #2]
    6e3a:	ldrh.w	ip, [r3]
        data += to_copy;
    6e3e:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    6e40:	add	r4, lr
    6e42:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    6e44:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    6e46:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    6e48:	beq.n	6e54 <MTPD::read(char*, unsigned long)+0x5c>
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6e4a:	cmp.w	r8, #0
    6e4e:	bne.n	6e06 <MTPD::read(char*, unsigned long)+0xe>
    6e50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    6e54:	mov	r0, r3
    6e56:	bl	e9a8 <usb_free>
        data_buffer_ = NULL;
    6e5a:	str	r7, [r6, #4]
      printf("\n"); \
    }

  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    6e5c:	cmp.w	r8, #0
    6e60:	bne.n	6e06 <MTPD::read(char*, unsigned long)+0xe>
    6e62:	b.n	6e50 <MTPD::read(char*, unsigned long)+0x58>
    6e64:	bx	lr
    6e66:	nop

00006e68 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e68:	push	{r4, r5, r6, lr}
    6e6a:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e6c:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e6e:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e70:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    6e74:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6e76:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6e7a:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    6e7e:	cbz	r4, 6ea0 <MTPD::readstring(char*)+0x38>
    6e80:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6e82:	cbz	r2, 6e9c <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6e84:	movs	r2, #2
    6e86:	add.w	r1, sp, #6
    6e8a:	mov	r0, r6
    6e8c:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6e90:	ldrh.w	r3, [sp, #6]
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        int16_t c2;
        *(buffer++) = c2 = read16();
    6e94:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    6e98:	cmp	r5, r4
    6e9a:	bne.n	6e84 <MTPD::readstring(char*)+0x1c>
        int16_t c2;
        *(buffer++) = c2 = read16();
      }
    }
  }
    6e9c:	add	sp, #8
    6e9e:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    6ea0:	lsls	r2, r2, #1
    6ea2:	mov	r1, r4
    6ea4:	mov	r0, r6
    6ea6:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6eaa:	b.n	6e9c <MTPD::readstring(char*)+0x34>

00006eac <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
    }
    storage_->close();
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    6eac:	push	{r4, r5, lr}
    6eae:	sub	sp, #260	; 0x104
    6eb0:	mov	r4, r0
    6eb2:	mov	r5, r1
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6eb4:	movs	r2, #12
    6eb6:	mov	r1, sp
    6eb8:	bl	6df8 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[MAX_FILENAME_LEN];
        ReadMTPHeader();
        readstring(filename);
    6ebc:	mov	r1, sp
    6ebe:	mov	r0, r4
    6ec0:	bl	6e68 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    6ec4:	ldr	r0, [r4, #0]
    6ec6:	ldr	r3, [r0, #0]
    6ec8:	mov	r2, sp
    6eca:	mov	r1, r5
    6ecc:	ldr	r3, [r3, #72]	; 0x48
    6ece:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    6ed0:	movw	r0, #8193	; 0x2001
    6ed4:	add	sp, #260	; 0x104
    6ed6:	pop	{r4, r5, pc}

00006ed8 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6ed8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6edc:	sub	sp, #276	; 0x114
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6ede:	add	r7, sp, #16
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6ee0:	mov	r9, r1
    6ee2:	mov	fp, r2
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6ee4:	mov	r1, r7
    6ee6:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    6ee8:	mov	r5, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    6eea:	bl	6df8 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    6eee:	ldrh	r3, [r7, #4]
    6ef0:	cmp	r3, #2
    6ef2:	it	eq
    6ef4:	ldreq	r4, [r7, #0]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6ef6:	mov.w	r2, #4
    6efa:	mov	r1, r7
    6efc:	mov	r0, r5
    6efe:	ite	eq
    6f00:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    6f02:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f06:	bl	6df8 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f0a:	movs	r2, #2
    6f0c:	mov	r1, r7
    6f0e:	mov	r0, r5
    6f10:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6f14:	ldrh.w	sl, [r7]
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6f18:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f1c:	movs	r2, #2
    6f1e:	mov	r1, r7
    6f20:	mov	r0, r5
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6f22:	rsb	sl, r3, sl
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f26:	bl	6df8 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f2a:	movs	r2, #4
    6f2c:	mov	r1, r7
    6f2e:	mov	r0, r5
    6f30:	bl	6df8 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f34:	movs	r2, #2
    6f36:	mov	r1, r7
    6f38:	mov	r0, r5
    6f3a:	bl	6df8 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f3e:	movs	r2, #4
    6f40:	mov	r1, r7
    6f42:	mov	r0, r5
    6f44:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6f48:	movs	r2, #4
    6f4a:	mov	r1, r7
    6f4c:	mov	r0, r5
    6f4e:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6f52:	movs	r2, #4
    6f54:	mov	r1, r7
    6f56:	mov	r0, r5
    6f58:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6f5c:	movs	r2, #4
    6f5e:	mov	r1, r7
    6f60:	mov	r0, r5
    6f62:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6f66:	movs	r2, #4
    6f68:	mov	r1, r7
    6f6a:	mov	r0, r5
    6f6c:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6f70:	movs	r2, #4
    6f72:	mov	r1, r7
    6f74:	mov	r0, r5
    6f76:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6f7a:	movs	r2, #4
    6f7c:	mov	r1, r7
    6f7e:	mov	r0, r5
    6f80:	bl	6df8 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f84:	movs	r2, #2
    6f86:	mov	r1, r7
    6f88:	mov	r0, r5
    6f8a:	bl	6df8 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6f8e:	movs	r2, #4
    6f90:	mov	r1, r7
    6f92:	mov	r0, r5
    6f94:	bl	6df8 <MTPD::read(char*, unsigned long)>
    6f98:	movs	r2, #4
    6f9a:	mov	r1, r7
    6f9c:	mov	r0, r5
    6f9e:	bl	6df8 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    6fa2:	mov	r1, r7
    6fa4:	mov	r0, r5
    6fa6:	bl	6e68 <MTPD::readstring(char*)>
    6faa:	mov	r0, r7
    6fac:	bl	11700 <strlen>
    6fb0:	adds	r0, #1
    6fb2:	sub.w	r4, r4, r0, lsl #1
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6fb6:	clz	sl, sl
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6fba:	cmp	r4, #3
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    6fbc:	mov.w	sl, sl, lsr #5

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[MAX_FILENAME_LEN];

    uint32_t store = Storage2Store(storage);
    6fc0:	add.w	r9, r9, #4294967295
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6fc4:	bls.n	6fe0 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x108>
    6fc6:	mov	r6, r4
    6fc8:	add.w	r8, sp, #12
    6fcc:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    6fce:	movs	r2, #4
    6fd0:	mov	r1, r8
    6fd2:	mov	r0, r5
    6fd4:	bl	6df8 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    6fd8:	cmp	r6, #3
    6fda:	bhi.n	6fcc <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xf4>
    6fdc:	and.w	r4, r4, #3
    6fe0:	add.w	r8, sp, #12
    while(len) {read8(); len--;}
    6fe4:	cbz	r4, 6ff4 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x11c>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    6fe6:	movs	r2, #1
    6fe8:	mov	r1, r8
    6fea:	mov	r0, r5
    6fec:	bl	6df8 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    6ff0:	subs	r4, #1
    6ff2:	bne.n	6fe6 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10e>
    
    return storage_->Create(store, parent, dir, filename);
    6ff4:	ldr	r0, [r5, #0]
    6ff6:	ldr	r4, [r0, #0]
    6ff8:	str	r7, [sp, #0]
    6ffa:	mov	r3, sl
    6ffc:	mov	r2, fp
    6ffe:	mov	r1, r9
    7000:	ldr	r4, [r4, #44]	; 0x2c
    7002:	blx	r4
  }
    7004:	add	sp, #276	; 0x114
    7006:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    700a:	nop

0000700c <MTPD::SendObject()>:

  bool MTPD::SendObject() {
    700c:	push	{r4, r5, r6, r7, lr}
    700e:	sub	sp, #20
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    7010:	movs	r2, #12
    7012:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    7014:	mov	r6, r0
  }

  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    7016:	bl	6df8 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    701a:	ldrh.w	r3, [sp, #8]
    701e:	cmp	r3, #2
    7020:	beq.n	7030 <MTPD::SendObject()+0x24>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    7022:	ldr	r0, [r6, #0]
    7024:	ldr	r3, [r0, #0]
    7026:	ldr	r3, [r3, #56]	; 0x38
    7028:	blx	r3
    return true;
    702a:	movs	r0, #1
  }
    702c:	add	sp, #20
    702e:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    7030:	ldr	r7, [sp, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    7032:	subs	r7, #12
    7034:	beq.n	7022 <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    7036:	movs	r5, #0

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    7038:	mov	r0, r6
    703a:	bl	6d60 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    703e:	ldmia.w	r6, {r0, r1}
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    7042:	ldrh	r2, [r1, #2]
    7044:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    7048:	ldr	r3, [r0, #0]
  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    704a:	subs	r4, r4, r2
    704c:	cmp	r4, r7
    704e:	it	cs
    7050:	movcs	r4, r7
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    7052:	add	r1, r2
    7054:	ldr	r3, [r3, #52]	; 0x34
    7056:	mov	r2, r4
    7058:	blx	r3
      data_buffer_->index += to_copy;
      len -= to_copy;
    705a:	subs	r7, r7, r4
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
    705c:	cmp	r0, #0
    705e:	beq.n	702c <MTPD::SendObject()+0x20>
      data_buffer_->index += to_copy;
    7060:	ldr	r0, [r6, #4]
    7062:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    7064:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    7066:	add	r4, r3
    7068:	uxth	r4, r4
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    706a:	cmp	r2, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
    706c:	strh	r4, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    706e:	beq.n	7076 <MTPD::SendObject()+0x6a>
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    7070:	cmp	r7, #0
    7072:	bne.n	7038 <MTPD::SendObject()+0x2c>
    7074:	b.n	7022 <MTPD::SendObject()+0x16>
      if(!storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy)) return false;
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    7076:	bl	e9a8 <usb_free>
        data_buffer_ = NULL;
    707a:	str	r5, [r6, #4]
    return storage_->Create(store, parent, dir, filename);
  }

  bool MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    707c:	cmp	r7, #0
    707e:	bne.n	7038 <MTPD::SendObject()+0x2c>
    7080:	b.n	7022 <MTPD::SendObject()+0x16>
    7082:	nop

00007084 <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    7084:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7088:	mov	r5, r0
    708a:	sub	sp, #36	; 0x24
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    708c:	movs	r0, #5
    708e:	bl	e9f4 <usb_rx>
    7092:	cmp	r0, #0
    7094:	beq.n	70fa <MTPD::loop()+0x76>
      printContainer();
    7096:	ldr	r1, [r0, #16]
    7098:	ldr	r3, [r0, #8]
    709a:	ldrh	r2, [r0, #14]
    709c:	str	r1, [sp, #4]
    709e:	ldrh	r1, [r0, #12]
    70a0:	str	r1, [sp, #0]
    70a2:	mov	r4, r0
    70a4:	ldr	r1, [pc, #764]	; (73a4 <MTPD::loop()+0x320>)
    70a6:	ldr	r0, [pc, #768]	; (73a8 <MTPD::loop()+0x324>)
    70a8:	bl	f7e8 <Print::printf(char const*, ...)>
    70ac:	ldr	r3, [r4, #8]
    70ae:	cmp	r3, #12
    70b0:	bhi.n	7142 <MTPD::loop()+0xbe>
    70b2:	ldr	r1, [pc, #760]	; (73ac <MTPD::loop()+0x328>)
    70b4:	ldr	r0, [pc, #752]	; (73a8 <MTPD::loop()+0x324>)
    70b6:	bl	f7e8 <Print::printf(char const*, ...)>
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    70ba:	ldrh	r2, [r4, #0]
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    70bc:	ldr	r6, [r4, #16]
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
    70be:	ldrh	r0, [r4, #14]
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    70c0:	ldr	r7, [r4, #8]
        int typ= CONTAINER->type;
    70c2:	ldrh	r1, [r4, #12]
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    70c4:	add.w	r3, r4, #20
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    70c8:	cmp	r2, #11
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    70ca:	ldmia.w	r3, {r3, r9, fp}
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    70ce:	str	r6, [r5, #16]

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
    70d0:	bls.n	713a <MTPD::loop()+0xb6>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    70d2:	mov.w	sl, #12
        
        if (typ == 1) { // command
    70d6:	cmp	r1, #1
        TID=id;

      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    70d8:	strh.w	sl, [r4]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    70dc:	mov	r8, r3
      uint32_t return_code = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
    70de:	beq.n	719a <MTPD::loop()+0x116>
    70e0:	mov.w	r0, #8192	; 0x2000
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    70e4:	movs	r3, #3
        CONTAINER->len=len;
        CONTAINER->op=return_code;
    70e6:	strh	r0, [r4, #14]
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
        CONTAINER->len=len;
    70e8:	str	r7, [r4, #8]
        CONTAINER->op=return_code;
        CONTAINER->transaction_id=id;
    70ea:	str	r6, [r4, #16]
        CONTAINER->params[0]=p1;
    70ec:	str.w	r8, [r4, #20]
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type=3;
    70f0:	strh	r3, [r4, #12]
        CONTAINER->params[0]=p1;
        #if DEBUG>1
          printContainer();
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    70f2:	mov	r1, r4
    70f4:	movs	r0, #4
    70f6:	bl	eae0 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    70fa:	movs	r0, #6
    70fc:	bl	e9f4 <usb_rx>
    7100:	mov	r4, r0
    7102:	cbz	r0, 7134 <MTPD::loop()+0xb0>
      printf("Event: "); printContainer();
    7104:	ldr	r1, [pc, #680]	; (73b0 <MTPD::loop()+0x32c>)
    7106:	ldr	r0, [pc, #672]	; (73a8 <MTPD::loop()+0x324>)
    7108:	bl	f7e8 <Print::printf(char const*, ...)>
    710c:	ldr	r1, [r4, #16]
    710e:	ldr	r3, [r4, #8]
    7110:	ldrh	r2, [r4, #14]
    7112:	str	r1, [sp, #4]
    7114:	ldrh	r1, [r4, #12]
    7116:	str	r1, [sp, #0]
    7118:	ldr	r0, [pc, #652]	; (73a8 <MTPD::loop()+0x324>)
    711a:	ldr	r1, [pc, #648]	; (73a4 <MTPD::loop()+0x320>)
    711c:	bl	f7e8 <Print::printf(char const*, ...)>
    7120:	ldr	r3, [r4, #8]
    7122:	cmp	r3, #12
    7124:	bhi.n	716e <MTPD::loop()+0xea>
    7126:	ldr	r1, [pc, #644]	; (73ac <MTPD::loop()+0x328>)
    7128:	ldr	r0, [pc, #636]	; (73a8 <MTPD::loop()+0x324>)
    712a:	bl	f7e8 <Print::printf(char const*, ...)>
      usb_free(receive_buffer);
    712e:	mov	r0, r4
    7130:	bl	e9a8 <usb_free>
    }
  }
    7134:	add	sp, #36	; 0x24
    7136:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        #endif

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    713a:	mov	r0, r4
    713c:	bl	e9a8 <usb_free>
    7140:	b.n	70fa <MTPD::loop()+0x76>

  void MTPD::loop(void) 
  {
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
    7142:	ldr	r2, [r4, #20]
    7144:	ldr	r1, [pc, #620]	; (73b4 <MTPD::loop()+0x330>)
    7146:	ldr	r0, [pc, #608]	; (73a8 <MTPD::loop()+0x324>)
    7148:	bl	f7e8 <Print::printf(char const*, ...)>
    714c:	ldr	r3, [r4, #8]
    714e:	cmp	r3, #16
    7150:	bls.n	70b2 <MTPD::loop()+0x2e>
    7152:	ldr	r2, [r4, #24]
    7154:	ldr	r1, [pc, #604]	; (73b4 <MTPD::loop()+0x330>)
    7156:	ldr	r0, [pc, #592]	; (73a8 <MTPD::loop()+0x324>)
    7158:	bl	f7e8 <Print::printf(char const*, ...)>
    715c:	ldr	r3, [r4, #8]
    715e:	cmp	r3, #20
    7160:	bls.n	70b2 <MTPD::loop()+0x2e>
    7162:	ldr	r2, [r4, #28]
    7164:	ldr	r1, [pc, #588]	; (73b4 <MTPD::loop()+0x330>)
    7166:	ldr	r0, [pc, #576]	; (73a8 <MTPD::loop()+0x324>)
    7168:	bl	f7e8 <Print::printf(char const*, ...)>
    716c:	b.n	70b2 <MTPD::loop()+0x2e>
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
      printf("Event: "); printContainer();
    716e:	ldr	r2, [r4, #20]
    7170:	ldr	r1, [pc, #576]	; (73b4 <MTPD::loop()+0x330>)
    7172:	ldr	r0, [pc, #564]	; (73a8 <MTPD::loop()+0x324>)
    7174:	bl	f7e8 <Print::printf(char const*, ...)>
    7178:	ldr	r3, [r4, #8]
    717a:	cmp	r3, #16
    717c:	bls.n	7126 <MTPD::loop()+0xa2>
    717e:	ldr	r2, [r4, #24]
    7180:	ldr	r1, [pc, #560]	; (73b4 <MTPD::loop()+0x330>)
    7182:	ldr	r0, [pc, #548]	; (73a8 <MTPD::loop()+0x324>)
    7184:	bl	f7e8 <Print::printf(char const*, ...)>
    7188:	ldr	r3, [r4, #8]
    718a:	cmp	r3, #20
    718c:	bls.n	7126 <MTPD::loop()+0xa2>
    718e:	ldr	r2, [r4, #28]
    7190:	ldr	r1, [pc, #544]	; (73b4 <MTPD::loop()+0x330>)
    7192:	ldr	r0, [pc, #532]	; (73a8 <MTPD::loop()+0x324>)
    7194:	bl	f7e8 <Print::printf(char const*, ...)>
    7198:	b.n	7126 <MTPD::loop()+0xa2>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    719a:	movw	r2, #4108	; 0x100c
    719e:	cmp	r0, r2
    71a0:	beq.w	74de <MTPD::loop()+0x45a>
    71a4:	bhi.n	71e2 <MTPD::loop()+0x15e>
    71a6:	movw	r2, #4101	; 0x1005
    71aa:	cmp	r0, r2
    71ac:	beq.w	75e4 <MTPD::loop()+0x560>
    71b0:	bls.n	726c <MTPD::loop()+0x1e8>
    71b2:	movw	r2, #4104	; 0x1008
    71b6:	cmp	r0, r2
    71b8:	beq.w	75a4 <MTPD::loop()+0x520>
    71bc:	bhi.w	7338 <MTPD::loop()+0x2b4>
    71c0:	movw	r2, #4102	; 0x1006
    71c4:	cmp	r0, r2
    71c6:	beq.w	7424 <MTPD::loop()+0x3a0>
    71ca:	movw	r2, #4103	; 0x1007
    71ce:	cmp	r0, r2
    71d0:	bne.w	7332 <MTPD::loop()+0x2ae>
              } else {
                p1 = GetNumObjects(p1, p3);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (p2) {
    71d4:	cmp.w	r9, #0
    71d8:	beq.w	7648 <MTPD::loop()+0x5c4>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    71dc:	movw	r0, #8212	; 0x2014
    71e0:	b.n	70e4 <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    71e2:	movw	r2, #4121	; 0x1019
    71e6:	cmp	r0, r2
    71e8:	beq.w	757c <MTPD::loop()+0x4f8>
    71ec:	bls.n	72c8 <MTPD::loop()+0x244>
    71ee:	movw	r2, #38914	; 0x9802
    71f2:	cmp	r0, r2
    71f4:	beq.w	74f8 <MTPD::loop()+0x474>
    71f8:	bhi.w	736e <MTPD::loop()+0x2ea>
    71fc:	movw	r2, #4122	; 0x101a
    7200:	cmp	r0, r2
    7202:	beq.w	7624 <MTPD::loop()+0x5a0>
    7206:	movw	r2, #38913	; 0x9801
    720a:	cmp	r0, r2
    720c:	bne.w	7332 <MTPD::loop()+0x2ae>
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
              else {p1 = return_code; return_code=0x2001;}
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    7210:	movs	r2, #1
    7212:	mov.w	r9, #0
    7216:	mov	r1, r3
    7218:	strb	r2, [r5, #8]
    721a:	mov	r0, r5
    721c:	str.w	r9, [r5, #12]
    7220:	str	r3, [sp, #12]
    7222:	bl	630c <MTPD::getObjectPropsSupported(unsigned long)>
    7226:	ldr	r2, [r5, #12]
    7228:	strb.w	r9, [r5, #8]
    722c:	adds	r2, #12
    722e:	movs	r1, #2
    7230:	strh.w	r1, [sp, #24]
    7234:	str	r2, [sp, #20]
    7236:	ldrh	r2, [r4, #14]
    7238:	strh.w	r2, [sp, #26]
    723c:	ldr	r2, [r4, #16]
    723e:	str	r2, [sp, #28]
    7240:	add	r1, sp, #20
    7242:	mov	r0, r5
    7244:	movs	r2, #12
    7246:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    724a:	ldr	r3, [sp, #12]
    724c:	mov	r0, r5
    724e:	mov	r1, r3
    7250:	bl	630c <MTPD::getObjectPropsSupported(unsigned long)>
    7254:	mov	r0, r5
    7256:	bl	5b84 <MTPD::get_buffer()>
    725a:	ldr	r1, [r5, #4]
    725c:	movs	r0, #4
    725e:	bl	eae0 <usb_tx>
    7262:	str.w	r9, [r5, #4]
              break;
    7266:	movw	r0, #8193	; 0x2001
    726a:	b.n	70e4 <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    726c:	movw	r3, #4098	; 0x1002
    7270:	cmp	r0, r3
    7272:	beq.w	7410 <MTPD::loop()+0x38c>
    7276:	bls.w	73cc <MTPD::loop()+0x348>
    727a:	movw	r3, #4099	; 0x1003
    727e:	cmp	r0, r3
    7280:	beq.n	7266 <MTPD::loop()+0x1e2>
    7282:	movw	r3, #4100	; 0x1004
    7286:	cmp	r0, r3
    7288:	bne.n	7332 <MTPD::loop()+0x2ae>
              openSession(p1);
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    728a:	mov.w	r9, #0
    728e:	movs	r3, #1
    7290:	strb	r3, [r5, #8]
    7292:	mov	r0, r5
    7294:	str.w	r9, [r5, #12]
    7298:	bl	5fe0 <MTPD::WriteStorageIDs()>
    729c:	ldr	r3, [r5, #12]
    729e:	strb.w	r9, [r5, #8]
    72a2:	adds	r3, #12
    72a4:	movs	r2, #2
    72a6:	strh.w	r2, [sp, #24]
    72aa:	str	r3, [sp, #20]
    72ac:	ldrh	r3, [r4, #14]
    72ae:	strh.w	r3, [sp, #26]
    72b2:	ldr	r3, [r4, #16]
    72b4:	str	r3, [sp, #28]
    72b6:	mov	r0, r5
    72b8:	movs	r2, #12
    72ba:	add	r1, sp, #20
    72bc:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    72c0:	mov	r0, r5
    72c2:	bl	5fe0 <MTPD::WriteStorageIDs()>
    72c6:	b.n	7254 <MTPD::loop()+0x1d0>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    72c8:	movw	r2, #4112	; 0x1010
    72cc:	cmp	r0, r2
    72ce:	beq.n	7332 <MTPD::loop()+0x2ae>
    72d0:	bls.n	73b8 <MTPD::loop()+0x334>
    72d2:	movw	r2, #4116	; 0x1014
    72d6:	cmp	r0, r2
    72d8:	beq.w	743e <MTPD::loop()+0x3ba>
    72dc:	movw	r2, #4117	; 0x1015
    72e0:	cmp	r0, r2
    72e2:	bne.n	7332 <MTPD::loop()+0x2ae>
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    72e4:	movw	r2, #54274	; 0xd402
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    72e8:	mov.w	r9, #0
    72ec:	movs	r1, #1
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    72ee:	cmp	r3, r2
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    72f0:	str.w	r9, [r5, #12]
    72f4:	strb	r1, [r5, #8]
      }
    }
  }

  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    72f6:	beq.w	768e <MTPD::loop()+0x60a>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    72fa:	movs	r3, #2
    72fc:	movs	r2, #12
    72fe:	strb.w	r9, [r5, #8]
    7302:	str	r2, [sp, #20]
    7304:	strh.w	r3, [sp, #24]
    7308:	ldrh	r3, [r4, #14]
    730a:	strh.w	r3, [sp, #26]
    730e:	ldr	r3, [r4, #16]
    7310:	str	r3, [sp, #28]
    7312:	add	r1, sp, #20
    7314:	mov	r0, r5
    7316:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    731a:	mov	r0, r5
    731c:	bl	5b84 <MTPD::get_buffer()>
    7320:	movs	r0, #4
    7322:	ldr	r1, [r5, #4]
    7324:	bl	eae0 <usb_tx>
    7328:	movs	r3, #0
    732a:	str	r3, [r5, #4]
              break;
    732c:	movw	r0, #8193	; 0x2001
    7330:	b.n	70e4 <MTPD::loop()+0x60>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    7332:	movw	r0, #8197	; 0x2005
    7336:	b.n	70e4 <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    7338:	movw	r2, #4105	; 0x1009
    733c:	cmp	r0, r2
    733e:	beq.w	753c <MTPD::loop()+0x4b8>
    7342:	movw	r2, #4107	; 0x100b
    7346:	cmp	r0, r2
    7348:	bne.n	7332 <MTPD::loop()+0x2ae>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
              break;
            case 0x100B:  // DeleteObject
              if (p2) {
    734a:	cmp.w	r9, #0
    734e:	bne.w	71dc <MTPD::loop()+0x158>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(p1)) {
    7352:	ldr	r0, [r5, #0]
    7354:	ldr	r2, [r0, #0]
    7356:	mov	r1, r3
    7358:	ldr	r3, [r2, #60]	; 0x3c
    735a:	blx	r3
    735c:	movw	r3, #8210	; 0x2012
    7360:	movw	r2, #8193	; 0x2001
    7364:	cmp	r0, #0
    7366:	ite	eq
    7368:	moveq	r0, r3
    736a:	movne	r0, r2
    736c:	b.n	70e4 <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    736e:	movw	r2, #38915	; 0x9803
    7372:	cmp	r0, r2
    7374:	beq.w	7488 <MTPD::loop()+0x404>
    7378:	movw	r2, #38916	; 0x9804
    737c:	cmp	r0, r2
    737e:	bne.n	7332 <MTPD::loop()+0x2ae>
    return true;
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    7380:	mov	r0, r5
    7382:	str	r3, [sp, #12]
    7384:	bl	6d60 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    7388:	movw	r2, #56327	; 0xdc07
    738c:	cmp	r9, r2
    738e:	ldr	r3, [sp, #12]
    7390:	bne.n	7332 <MTPD::loop()+0x2ae>
    7392:	mov	r1, r3
    7394:	mov	r0, r5
    7396:	bl	6eac <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    739a:	cmp	r0, #0
    739c:	beq.w	713a <MTPD::loop()+0xb6>
    73a0:	uxth	r0, r0
    73a2:	b.n	70e4 <MTPD::loop()+0x60>
    73a4:	.word	0x00014f64
    73a8:	.word	0x1fff0c58
    73ac:	.word	0x00014dd0
    73b0:	.word	0x00014f78
    73b4:	.word	0x00014f74
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    73b8:	movw	r3, #4109	; 0x100d
    73bc:	cmp	r0, r3
    73be:	bne.n	7332 <MTPD::loop()+0x2ae>
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    73c0:	mov	r0, r5
    73c2:	bl	700c <MTPD::SendObject()>
              break;
    73c6:	movw	r0, #8193	; 0x2001
    73ca:	b.n	70e4 <MTPD::loop()+0x60>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (typ == 1) { // command
          switch (op) {
    73cc:	movw	r3, #4097	; 0x1001
    73d0:	cmp	r0, r3
    73d2:	bne.n	7332 <MTPD::loop()+0x2ae>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    73d4:	mov.w	r9, #0
    73d8:	strb	r1, [r5, #8]
    73da:	mov	r0, r5
    73dc:	str.w	r9, [r5, #12]
    73e0:	bl	5d64 <MTPD::WriteDescriptor()>
    73e4:	ldr	r3, [r5, #12]
    73e6:	strb.w	r9, [r5, #8]
    73ea:	adds	r3, #12
    73ec:	movs	r2, #2
    73ee:	strh.w	r2, [sp, #24]
    73f2:	str	r3, [sp, #20]
    73f4:	ldrh	r3, [r4, #14]
    73f6:	strh.w	r3, [sp, #26]
    73fa:	ldr	r3, [r4, #16]
    73fc:	str	r3, [sp, #28]
    73fe:	mov	r0, r5
    7400:	mov	r2, sl
    7402:	add	r1, sp, #20
    7404:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    7408:	mov	r0, r5
    740a:	bl	5d64 <MTPD::WriteDescriptor()>
    740e:	b.n	7254 <MTPD::loop()+0x1d0>
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
      storage_->ResetIndex();
    7410:	ldr	r0, [r5, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    7412:	ldr	r2, [pc, #736]	; (76f4 <MTPD::loop()+0x670>)
      storage_->ResetIndex();
    7414:	ldr	r3, [r0, #0]
      return storage_->copy(handle,store1,newHandle);
    }
    
    void MTPD::openSession(uint32_t id)
    {
      sessionID_ = id;
    7416:	str.w	r8, [r2]
      storage_->ResetIndex();
    741a:	ldr	r3, [r3, #68]	; 0x44
    741c:	blx	r3
    741e:	movw	r0, #8193	; 0x2001
    7422:	b.n	70e4 <MTPD::loop()+0x60>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
              break;
            case 0x1006:  // GetNumObjects
              if (p2) {
    7424:	cmp.w	r9, #0
    7428:	bne.w	71dc <MTPD::loop()+0x158>
                return_code = 0x2014; // spec by format unsupported
              } else {
                p1 = GetNumObjects(p1, p3);
    742c:	mov	r2, fp
    742e:	mov	r1, r3
    7430:	mov	r0, r5
    7432:	bl	5b5c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    7436:	mov	r8, r0
    7438:	movw	r0, #8193	; 0x2001
    743c:	b.n	70e4 <MTPD::loop()+0x60>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    743e:	movw	r2, #54274	; 0xd402
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7442:	movs	r0, #0
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7444:	cmp	r3, r2
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7446:	strb	r1, [r5, #8]
    7448:	str	r0, [r5, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    744a:	beq.w	76c4 <MTPD::loop()+0x640>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    744e:	movs	r2, #12
    7450:	movs	r0, #0
    7452:	movs	r1, #2
    7454:	strb	r0, [r5, #8]
    7456:	str	r2, [sp, #20]
    7458:	strh.w	r1, [sp, #24]
    745c:	ldrh	r1, [r4, #14]
    745e:	strh.w	r1, [sp, #26]
    7462:	ldr	r1, [r4, #16]
    7464:	str	r1, [sp, #28]
    7466:	mov	r0, r5
    7468:	add	r1, sp, #20
    746a:	str	r3, [sp, #12]
    746c:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7470:	ldr	r3, [sp, #12]
    7472:	movw	r2, #54274	; 0xd402
    7476:	cmp	r3, r2
    7478:	bne.w	731a <MTPD::loop()+0x296>
    747c:	movw	r1, #54274	; 0xd402
    7480:	mov	r0, r5
    7482:	bl	5ca8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    7486:	b.n	731a <MTPD::loop()+0x296>
          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            TRANSMIT(getObjectPropValue(p1,p2));
    7488:	mov.w	fp, #0
    748c:	strb	r1, [r5, #8]
    748e:	mov	r2, r9
    7490:	mov	r1, r3
    7492:	mov	r0, r5
    7494:	str.w	fp, [r5, #12]
    7498:	bl	6378 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    749c:	ldr	r3, [r5, #12]
    749e:	strb.w	fp, [r5, #8]
    74a2:	adds	r3, #12
    74a4:	movs	r2, #2
    74a6:	strh.w	r2, [sp, #24]
    74aa:	str	r3, [sp, #20]
    74ac:	ldrh	r3, [r4, #14]
    74ae:	strh.w	r3, [sp, #26]
    74b2:	mov	r2, sl
    74b4:	ldr	r3, [r4, #16]
    74b6:	str	r3, [sp, #28]
    74b8:	add	r1, sp, #20
    74ba:	mov	r0, r5
    74bc:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    74c0:	mov	r2, r9
    74c2:	mov	r1, r8
    74c4:	mov	r0, r5
    74c6:	bl	6378 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    74ca:	mov	r0, r5
    74cc:	bl	5b84 <MTPD::get_buffer()>
    74d0:	ldr	r1, [r5, #4]
    74d2:	movs	r0, #4
    74d4:	bl	eae0 <usb_tx>
    74d8:	str.w	fp, [r5, #4]
    74dc:	b.n	7266 <MTPD::loop()+0x1e2>
                  return_code = 0x2012; // partial deletion
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
    74de:	mov	r0, r5
    74e0:	mov	r2, r9
    74e2:	mov	r1, r3
    74e4:	bl	6ed8 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                   p2); // parent
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
    74e8:	movs	r7, #24
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
                                   p2); // parent
              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
    74ea:	str	r0, [r4, #28]
              }
              break;
            case 0x100C:  // SendObjectInfo
              p3 =  SendObjectInfo(p1, // storage
                                   p2); // parent
              CONTAINER->params[1]=p2;
    74ec:	str.w	r9, [r4, #24]
              CONTAINER->params[2]=p3;
              len = receive_buffer->len = 12 + 3 * 4;
    74f0:	strh	r7, [r4, #0]
              break;
    74f2:	movw	r0, #8193	; 0x2001
    74f6:	b.n	70e4 <MTPD::loop()+0x60>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            TRANSMIT(getObjectPropDesc(p1,p2));
    74f8:	mov.w	fp, #0
    74fc:	strb	r1, [r5, #8]
    74fe:	mov	r2, r9
    7500:	mov	r1, r3
    7502:	mov	r0, r5
    7504:	str.w	fp, [r5, #12]
    7508:	bl	6678 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    750c:	ldr	r3, [r5, #12]
    750e:	strb.w	fp, [r5, #8]
    7512:	adds	r3, #12
    7514:	movs	r2, #2
    7516:	strh.w	r2, [sp, #24]
    751a:	str	r3, [sp, #20]
    751c:	ldrh	r3, [r4, #14]
    751e:	strh.w	r3, [sp, #26]
    7522:	mov	r2, sl
    7524:	ldr	r3, [r4, #16]
    7526:	str	r3, [sp, #28]
    7528:	add	r1, sp, #20
    752a:	mov	r0, r5
    752c:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    7530:	mov	r2, r9
    7532:	mov	r1, r8
    7534:	mov	r0, r5
    7536:	bl	6678 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    753a:	b.n	74ca <MTPD::loop()+0x446>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(p1));
    753c:	mov.w	r9, #0
    7540:	strb	r1, [r5, #8]
    7542:	mov	r0, r5
    7544:	mov	r1, r3
    7546:	str.w	r9, [r5, #12]
    754a:	bl	6d7c <MTPD::GetObject(unsigned long)>
    754e:	ldr	r3, [r5, #12]
    7550:	strb.w	r9, [r5, #8]
    7554:	adds	r3, #12
    7556:	movs	r2, #2
    7558:	strh.w	r2, [sp, #24]
    755c:	str	r3, [sp, #20]
    755e:	ldrh	r3, [r4, #14]
    7560:	strh.w	r3, [sp, #26]
    7564:	ldr	r3, [r4, #16]
    7566:	str	r3, [sp, #28]
    7568:	add	r1, sp, #20
    756a:	mov	r0, r5
    756c:	mov	r2, sl
    756e:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    7572:	mov	r1, r8
    7574:	mov	r0, r5
    7576:	bl	6d7c <MTPD::GetObject(unsigned long)>
    757a:	b.n	7254 <MTPD::loop()+0x1d0>
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    757c:	ldr	r0, [r5, #0]
    757e:	ldr	r1, [r0, #0]
    7580:	mov	r3, fp
    7582:	add.w	r2, r9, #4294967295
    7586:	ldr	r5, [r1, #76]	; 0x4c
    7588:	mov	r1, r8
    758a:	blx	r5
    758c:	movw	r3, #8197	; 0x2005
    7590:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
    7594:	strh.w	sl, [r4]
              break;
    7598:	mov	r7, sl
        return 0x2001;
    }

    uint32_t MTPD::moveObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    759a:	cmp	r0, #0
    759c:	ite	eq
    759e:	moveq	r0, r3
    75a0:	movne	r0, r2
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p2,p3);
              len  = receive_buffer->len = 12;
              break;
    75a2:	b.n	70e4 <MTPD::loop()+0x60>
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(p1));
    75a4:	mov.w	r9, #0
    75a8:	strb	r1, [r5, #8]
    75aa:	mov	r0, r5
    75ac:	mov	r1, r3
    75ae:	str.w	r9, [r5, #12]
    75b2:	bl	60b8 <MTPD::GetObjectInfo(unsigned long)>
    75b6:	ldr	r3, [r5, #12]
    75b8:	strb.w	r9, [r5, #8]
    75bc:	adds	r3, #12
    75be:	movs	r2, #2
    75c0:	strh.w	r2, [sp, #24]
    75c4:	str	r3, [sp, #20]
    75c6:	ldrh	r3, [r4, #14]
    75c8:	strh.w	r3, [sp, #26]
    75cc:	ldr	r3, [r4, #16]
    75ce:	str	r3, [sp, #28]
    75d0:	add	r1, sp, #20
    75d2:	mov	r0, r5
    75d4:	mov	r2, sl
    75d6:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    75da:	mov	r1, r8
    75dc:	mov	r0, r5
    75de:	bl	60b8 <MTPD::GetObjectInfo(unsigned long)>
    75e2:	b.n	7254 <MTPD::loop()+0x1d0>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(p1));
    75e4:	mov.w	r9, #0
    75e8:	strb	r1, [r5, #8]
    75ea:	mov	r0, r5
    75ec:	mov	r1, r3
    75ee:	str.w	r9, [r5, #12]
    75f2:	bl	6534 <MTPD::GetStorageInfo(unsigned long)>
    75f6:	ldr	r3, [r5, #12]
    75f8:	strb.w	r9, [r5, #8]
    75fc:	adds	r3, #12
    75fe:	movs	r2, #2
    7600:	strh.w	r2, [sp, #24]
    7604:	str	r3, [sp, #20]
    7606:	ldrh	r3, [r4, #14]
    7608:	strh.w	r3, [sp, #26]
    760c:	ldr	r3, [r4, #16]
    760e:	str	r3, [sp, #28]
    7610:	add	r1, sp, #20
    7612:	mov	r0, r5
    7614:	mov	r2, sl
    7616:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    761a:	mov	r1, r8
    761c:	mov	r0, r5
    761e:	bl	6534 <MTPD::GetStorageInfo(unsigned long)>
    7622:	b.n	7254 <MTPD::loop()+0x1d0>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    }
    
    uint32_t MTPD::copyObject(uint32_t handle, uint32_t newStorage, uint32_t newHandle)
    { uint32_t store1=Storage2Store(newStorage);
      return storage_->copy(handle,store1,newHandle);
    7624:	ldr	r0, [r5, #0]
    7626:	ldr	r1, [r0, #0]
    7628:	mov	r3, fp
    762a:	ldr	r5, [r1, #80]	; 0x50
    762c:	add.w	r2, r9, #4294967295
    7630:	mov	r1, r8
    7632:	blx	r5
              len  = receive_buffer->len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = copyObject(p1,p2,p3);
              if(! return_code) { len  = receive_buffer->len = 12; return_code = 0x2005; }
    7634:	cbnz	r0, 7640 <MTPD::loop()+0x5bc>
    7636:	movs	r7, #12
    7638:	strh	r7, [r4, #0]
    763a:	movw	r0, #8197	; 0x2005
    763e:	b.n	70e4 <MTPD::loop()+0x60>
              else {p1 = return_code; return_code=0x2001;}
    7640:	mov	r8, r0
    7642:	movw	r0, #8193	; 0x2001
    7646:	b.n	70e4 <MTPD::loop()+0x60>
              break;
            case 0x1007:  // GetObjectHandles
              if (p2) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(p1, p3));
    7648:	movs	r2, #1
    764a:	mov	r1, r3
    764c:	strb	r2, [r5, #8]
    764e:	mov	r0, r5
    7650:	mov	r2, fp
    7652:	str.w	r9, [r5, #12]
    7656:	str	r3, [sp, #12]
    7658:	bl	6048 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    765c:	ldr	r2, [r5, #12]
    765e:	strb.w	r9, [r5, #8]
    7662:	adds	r2, #12
    7664:	movs	r1, #2
    7666:	strh.w	r1, [sp, #24]
    766a:	str	r2, [sp, #20]
    766c:	ldrh	r2, [r4, #14]
    766e:	strh.w	r2, [sp, #26]
    7672:	ldr	r2, [r4, #16]
    7674:	str	r2, [sp, #28]
    7676:	add	r1, sp, #20
    7678:	mov	r0, r5
    767a:	movs	r2, #12
    767c:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    7680:	ldr	r3, [sp, #12]
    7682:	mov	r2, fp
    7684:	mov	r1, r3
    7686:	mov	r0, r5
    7688:	bl	6048 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    768c:	b.n	7254 <MTPD::loop()+0x1d0>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    768e:	mov	r0, r5
    7690:	ldr	r1, [pc, #100]	; (76f8 <MTPD::loop()+0x674>)
    7692:	bl	5c00 <MTPD::writestring(char const*)>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7696:	ldr	r3, [r5, #12]
    7698:	strb.w	r9, [r5, #8]
    769c:	adds	r3, #12
    769e:	movs	r2, #2
    76a0:	strh.w	r2, [sp, #24]
    76a4:	str	r3, [sp, #20]
    76a6:	ldrh	r3, [r4, #14]
    76a8:	strh.w	r3, [sp, #26]
    76ac:	ldr	r3, [r4, #16]
    76ae:	str	r3, [sp, #28]
    76b0:	add	r1, sp, #20
    76b2:	mov	r0, r5
    76b4:	movs	r2, #12
    76b6:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    76ba:	ldr	r1, [pc, #60]	; (76f8 <MTPD::loop()+0x674>)
    76bc:	mov	r0, r5
    76be:	bl	5c00 <MTPD::writestring(char const*)>
    76c2:	b.n	731a <MTPD::loop()+0x296>
    76c4:	mov	r1, r2
    76c6:	mov	r0, r5
    76c8:	bl	5ca8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    76cc:	ldr	r3, [r5, #12]
    76ce:	movs	r1, #0
    76d0:	adds	r3, #12
    76d2:	movs	r2, #2
    76d4:	strb	r1, [r5, #8]
    76d6:	strh.w	r2, [sp, #24]
    76da:	str	r3, [sp, #20]
    76dc:	ldrh	r3, [r4, #14]
    76de:	strh.w	r3, [sp, #26]
    76e2:	ldr	r3, [r4, #16]
    76e4:	str	r3, [sp, #28]
    76e6:	movs	r2, #12
    76e8:	add	r1, sp, #20
    76ea:	mov	r0, r5
    76ec:	bl	5b9c <MTPD::write(char const*, int) [clone .part.2]>
    76f0:	b.n	747c <MTPD::loop()+0x3f8>
    76f2:	nop
    76f4:	.word	0x20006a3c
    76f8:	.word	0x00014f34

000076fc <usb_init_events>:
  extern "C"
  {
    usb_packet_t *tx_event_packet=NULL;

    int usb_init_events(void)
    {
    76fc:	push	{r3, lr}
      tx_event_packet = usb_malloc();
    76fe:	bl	e968 <usb_malloc>
    7702:	ldr	r2, [pc, #12]	; (7710 <usb_init_events+0x14>)
    7704:	mov	r3, r0
      if(tx_event_packet) return 1; else return 0; 
    }
    7706:	adds	r0, #0
    7708:	it	ne
    770a:	movne	r0, #1
  {
    usb_packet_t *tx_event_packet=NULL;

    int usb_init_events(void)
    {
      tx_event_packet = usb_malloc();
    770c:	str	r3, [r2, #0]
      if(tx_event_packet) return 1; else return 0; 
    }
    770e:	pop	{r3, pc}
    7710:	.word	0x20006a40

00007714 <usb_mtp_sendEvent>:


    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
    7714:	push	{r3, r4, r5, lr}
      if (!usb_configuration) return -1;
    7716:	ldr	r3, [pc, #44]	; (7744 <usb_mtp_sendEvent+0x30>)
    7718:	ldrb	r3, [r3, #0]
    771a:	cbz	r3, 773c <usb_mtp_sendEvent+0x28>
      memcpy(tx_event_packet->buf, buffer, len);
    771c:	ldr	r3, [pc, #40]	; (7748 <usb_mtp_sendEvent+0x34>)
    771e:	ldr	r5, [r3, #0]
    7720:	mov	r4, r1
    7722:	mov	r2, r4
    7724:	mov	r1, r0
    7726:	add.w	r0, r5, #8
    772a:	bl	db90 <memcpy>
      tx_event_packet->len = len;
    772e:	strh	r4, [r5, #0]
      usb_tx(MTP_EVENT_ENDPOINT, tx_event_packet);
    7730:	mov	r1, r5
    7732:	movs	r0, #6
    7734:	bl	eae0 <usb_tx>
      return len;
    7738:	mov	r0, r4
    773a:	pop	{r3, r4, r5, pc}
    }


    int usb_mtp_sendEvent(const void *buffer, uint32_t len, uint32_t timeout)
    {
      if (!usb_configuration) return -1;
    773c:	mov.w	r0, #4294967295
      memcpy(tx_event_packet->buf, buffer, len);
      tx_event_packet->len = len;
      usb_tx(MTP_EVENT_ENDPOINT, tx_event_packet);
      return len;
    }
    7740:	pop	{r3, r4, r5, pc}
    7742:	nop
    7744:	.word	0x20007120
    7748:	.word	0x20006a40

0000774c <MTPD::send_Event(unsigned short)>:

  #endif
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    774c:	push	{r4, r5, lr}
    774e:	sub	sp, #36	; 0x24
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    7750:	ldr	r3, [r0, #16]

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    7752:	strh.w	r1, [sp, #6]
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    7756:	movs	r4, #12
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    7758:	str	r3, [sp, #8]
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    775a:	mov	r1, r4
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    event.transaction_id=TID;
    event.params[0]=0;
    775c:	movs	r3, #0
  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    775e:	movs	r5, #4
    event.transaction_id=TID;
    event.params[0]=0;
    event.params[1]=0;
    event.params[2]=0;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7760:	movs	r2, #60	; 0x3c
    7762:	mov	r0, sp
  const uint32_t EVENT_TIMEOUT=60;

  int MTPD::send_Event(uint16_t eventCode)
  {
    MTPContainer event;
    event.len = 12;
    7764:	str	r4, [sp, #0]
    event.op =eventCode ;
    event.type = MTP_CONTAINER_TYPE_EVENT; 
    7766:	strh.w	r5, [sp, #4]
    event.transaction_id=TID;
    event.params[0]=0;
    776a:	str	r3, [sp, #12]
    event.params[1]=0;
    776c:	str	r3, [sp, #16]
    event.params[2]=0;
    776e:	str	r3, [sp, #20]
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
    7770:	bl	7714 <usb_mtp_sendEvent>
  }
    7774:	add	sp, #36	; 0x24
    7776:	pop	{r4, r5, pc}

00007778 <MTPD::send_DeviceResetEvent()>:
    event.params[2]=p3;
    return usb_mtp_sendEvent((const void *) &event, event.len, EVENT_TIMEOUT);
  }

  int MTPD::send_DeviceResetEvent(void) 
  { return send_Event(MTP_EVENT_DEVICE_RESET); } 
    7778:	movw	r1, #16395	; 0x400b
    777c:	b.w	774c <MTPD::send_Event(unsigned short)>

00007780 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    7780:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7782:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7784:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7786:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7788:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    778a:	beq.n	7794 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    778c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7790:	b.w	f68c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7794:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    7796:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    779a:	bx	r3

0000779c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    779c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77a0:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    77a2:	ldr	r5, [r4, #12]
    77a4:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    77a8:	ldr	r5, [pc, #484]	; (7990 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    77aa:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    77ac:	bne.n	7854 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    77ae:	lsls	r7, r3, #31
    77b0:	bpl.w	791a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    77b4:	cmp	r1, #0
    77b6:	beq.w	7980 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    77ba:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    77bc:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    77be:	it	ne
    77c0:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    77c4:	str	r5, [r4, #52]	; 0x34
    77c6:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    77c8:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    77cc:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    77d0:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    77d4:	cmp.w	ip, #0
    77d8:	beq.w	792c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    77dc:	cbz	r1, 77e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    77de:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    77e0:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    77e4:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    77e8:	ldr	r5, [r0, #4]
    77ea:	ldrb	r6, [r5, #8]
			if (count == 2)
    77ec:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    77f0:	add.w	r6, r6, #4294967295
    77f4:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    77f8:	ite	eq
    77fa:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    77fe:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7802:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    7804:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    7806:	sub.w	ip, ip, #2
    780a:	b.n	781e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    780c:	cbz	r2, 7812 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    780e:	strb	r4, [r2, #0]
    7810:	adds	r2, #1
						} 
						count_read--;
    7812:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7814:	and.w	r5, r5, #61440	; 0xf000
    7818:	cmp	r5, r6
    781a:	bls.n	784a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    781c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    781e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    7820:	tst.w	r5, #240	; 0xf0
    7824:	beq.n	7814 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    7826:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    7828:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    782c:	mov	r7, r2
    782e:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    7832:	bne.n	780c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    7834:	cbz	r2, 783e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    7836:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    783a:	strb	r4, [r2, #1]
    783c:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    783e:	and.w	r5, r5, #61440	; 0xf000
    7842:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    7844:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    7848:	bhi.n	781c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    784a:	cmp.w	ip, #0
    784e:	beq.n	792c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    7850:	ldr	r4, [r0, #0]
    7852:	b.n	77dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    7854:	lsls	r5, r3, #31
    7856:	bpl.n	78f2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    7858:	cmp	r1, #0
    785a:	beq.w	7970 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    785e:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    7860:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7862:	it	ne
    7864:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    7868:	str	r5, [r4, #52]	; 0x34
    786a:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    786c:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    7870:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    7874:	cmp.w	lr, #0
    7878:	beq.n	78fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    787a:	cbz	r1, 7888 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    787c:	ldrb.w	ip, [r1, #1]
    7880:	ldrb	r5, [r1, #0]
    7882:	adds	r1, #2
    7884:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7888:	ldr	r5, [r0, #4]
    788a:	ldrb	r6, [r5, #8]
			if (count == 2)
    788c:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    7890:	add.w	r6, r6, #4294967295
    7894:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    7898:	ite	eq
    789a:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    789e:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    78a2:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    78a4:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    78a6:	sub.w	lr, lr, #2
    78aa:	b.n	78be <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    78ac:	cbz	r2, 78b2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    78ae:	strb	r4, [r2, #0]
    78b0:	adds	r2, #1
						} 
						count_read--;
    78b2:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    78b4:	and.w	r5, r5, #61440	; 0xf000
    78b8:	cmp	r5, r6
    78ba:	bls.n	78e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    78bc:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    78be:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    78c0:	tst.w	r5, #240	; 0xf0
    78c4:	beq.n	78b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    78c6:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    78ca:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    78cc:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    78ce:	bne.n	78ac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    78d0:	cbz	r2, 78dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    78d2:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    78d6:	asrs	r4, r4, #8
    78d8:	strb	r4, [r2, #1]
    78da:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    78dc:	and.w	r5, r5, #61440	; 0xf000
    78e0:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    78e2:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    78e6:	bhi.n	78bc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    78e8:	cmp.w	lr, #0
    78ec:	beq.n	78fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    78ee:	ldr	r4, [r0, #0]
    78f0:	b.n	787a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    78f2:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    78f4:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    78f8:	cmp.w	lr, #0
    78fc:	bne.n	787a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    78fe:	cbz	r3, 7948 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    7900:	ldr	r4, [r0, #0]
			sr = port().SR;
    7902:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    7904:	tst.w	r1, #240	; 0xf0
    7908:	beq.n	7902 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    790a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    790c:	lsls	r4, r3, #31
    790e:	bpl.n	794c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    7910:	cbz	r2, 7916 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    7912:	strb	r1, [r2, #0]
    7914:	adds	r2, #1
					count_read--;
    7916:	subs	r3, #1
    7918:	b.n	78fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    791a:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    791e:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    7920:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    7924:	cmp.w	ip, #0
    7928:	bne.w	77dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    792c:	cbz	r3, 7948 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    792e:	ldr	r4, [r0, #0]
			sr = port().SR;
    7930:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    7932:	tst.w	r1, #240	; 0xf0
    7936:	beq.n	7930 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    7938:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    793a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    793c:	bpl.n	795e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    793e:	cbz	r2, 7944 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    7940:	strb	r1, [r2, #0]
    7942:	adds	r2, #1
					count_read--;
    7944:	subs	r3, #1
    7946:	b.n	792c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    7948:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    794c:	cbz	r2, 795a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    794e:	mov	r4, r2
						*p_read++ = w >> 8;
    7950:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    7952:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    7956:	strb	r5, [r2, #1]
    7958:	mov	r2, r4
					}
					count_read -= 2;
    795a:	subs	r3, #2
    795c:	b.n	78fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    795e:	cbz	r2, 796c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    7960:	mov	r4, r2
    7962:	asrs	r5, r1, #8
    7964:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    7968:	strb	r1, [r2, #1]
    796a:	mov	r2, r4
					}
					count_read -= 2;
    796c:	subs	r3, #2
    796e:	b.n	792c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7970:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    7974:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7976:	it	ne
    7978:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    797c:	str	r5, [r4, #52]	; 0x34
    797e:	b.n	786c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7980:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    7984:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    7986:	it	ne
    7988:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    798c:	str	r5, [r4, #52]	; 0x34
    798e:	b.n	77c8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    7990:	.word	0x801f0400

00007994 <_spi_dma_rxISR1()>:
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7994:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7996:	ldr	r3, [pc, #280]	; (7ab0 <_spi_dma_rxISR1()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7998:	ldr	r2, [pc, #280]	; (7ab4 <_spi_dma_rxISR1()+0x120>)
    799a:	ldr	r0, [r3, #56]	; 0x38
    799c:	ldr	r4, [r3, #52]	; 0x34
    799e:	ldrb	r1, [r0, #4]
    79a0:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    79a2:	ldr	r1, [pc, #276]	; (7ab8 <_spi_dma_rxISR1()+0x124>)
    79a4:	ldrb	r2, [r4, #4]
    79a6:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    79a8:	ldr	r2, [r3, #48]	; 0x30
    79aa:	ldrb	r0, [r0, #4]
    79ac:	strb	r0, [r1, #0]
    79ae:	cmp	r2, #0
    79b0:	beq.n	7a40 <_spi_dma_rxISR1()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    79b2:	ldr	r1, [r3, #4]
    79b4:	ldr	r1, [r1, #12]
    79b6:	cmp	r2, r1
    79b8:	bhi.n	7a38 <_spi_dma_rxISR1()+0xa4>
    79ba:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    79bc:	ldrh	r4, [r1, #30]
    79be:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    79c0:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    79c4:	bmi.n	7a92 <_spi_dma_rxISR1()+0xfe>
		tcd->BITER = len & 0x7fff;
    79c6:	ubfx	r0, r0, #0, #15
    79ca:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79cc:	ldrh	r0, [r1, #30]
    79ce:	uxth	r0, r0
    79d0:	strh	r0, [r1, #22]
    79d2:	ldr	r1, [r3, #56]	; 0x38
    79d4:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    79d6:	ldrh	r0, [r1, #30]
    79d8:	lsls	r0, r0, #16
    79da:	bmi.n	7a82 <_spi_dma_rxISR1()+0xee>
		tcd->BITER = len & 0x7fff;
    79dc:	ubfx	r0, r2, #0, #15
    79e0:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79e2:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    79e4:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79e6:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    79e8:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    79ec:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    79ee:	it	ne
    79f0:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    79f2:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    79f4:	ldr	r1, [r3, #52]	; 0x34
    79f6:	ldr	r0, [pc, #184]	; (7ab0 <_spi_dma_rxISR1()+0x11c>)
    79f8:	ldr	r1, [r1, #0]
    79fa:	ldr	r5, [r1, #0]
    79fc:	add.w	r4, r0, #44	; 0x2c
    7a00:	cmp	r5, r4
    7a02:	beq.n	7a72 <_spi_dma_rxISR1()+0xde>
    7a04:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7a06:	ldr	r4, [r0, #12]
    7a08:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    7a0c:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    7a0e:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    7a10:	itete	ne
    7a12:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    7a14:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    7a16:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    7a18:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a1a:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    7a1e:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a20:	str	r4, [r0, #52]	; 0x34
    7a22:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    7a24:	ldr	r3, [pc, #148]	; (7abc <_spi_dma_rxISR1()+0x128>)
    7a26:	ldrb	r1, [r1, #4]
    7a28:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    7a2a:	ldr	r1, [pc, #132]	; (7ab0 <_spi_dma_rxISR1()+0x11c>)
		if (should_reenable_tx)
    7a2c:	cbz	r2, 7a34 <_spi_dma_rxISR1()+0xa0>
    7a2e:	ldr	r2, [r1, #52]	; 0x34
    7a30:	ldrb	r2, [r2, #4]
    7a32:	strb	r2, [r3, #0]
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7a34:	pop	{r4, r5, r6, r7}
    7a36:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    7a38:	subs	r2, r2, r1
    7a3a:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7a3c:	movs	r2, #1
    7a3e:	b.n	79f4 <_spi_dma_rxISR1()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a40:	ldr	r0, [r3, #60]	; 0x3c
    7a42:	ldr	r1, [r3, #0]
    7a44:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7a46:	ldr	r4, [pc, #120]	; (7ac0 <_spi_dma_rxISR1()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    7a48:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7a4a:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7a4c:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7a4e:	ldr	r5, [r5, #0]
    7a50:	ldr	r6, [pc, #112]	; (7ac4 <_spi_dma_rxISR1()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7a52:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7a56:	movs	r7, #3
    7a58:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7a5a:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7a5c:	strb.w	r7, [r3, #45]	; 0x2d
    7a60:	bne.n	7aa2 <_spi_dma_rxISR1()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7a62:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7a64:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7a66:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7a68:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7a6a:	beq.n	7aaa <_spi_dma_rxISR1()+0x116>
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7a6c:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7a6e:	b.w	f68c <EventResponder::triggerEventNotImmediate()>
    7a72:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a74:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7a78:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7a7a:	orr.w	r0, r0, #2147483648	; 0x80000000
    7a7e:	str	r0, [r1, #52]	; 0x34
    7a80:	b.n	7a22 <_spi_dma_rxISR1()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7a82:	ldrh	r4, [r1, #30]
    7a84:	ubfx	r0, r2, #0, #9
    7a88:	and.w	r4, r4, #65024	; 0xfe00
    7a8c:	orrs	r0, r4
    7a8e:	strh	r0, [r1, #30]
    7a90:	b.n	79e2 <_spi_dma_rxISR1()+0x4e>
    7a92:	ldrh	r4, [r1, #30]
    7a94:	ubfx	r0, r0, #0, #9
    7a98:	and.w	r4, r4, #65024	; 0xfe00
    7a9c:	orrs	r0, r4
    7a9e:	strh	r0, [r1, #30]
    7aa0:	b.n	79cc <_spi_dma_rxISR1()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7aa2:	mov	r3, r5
    7aa4:	mov	r1, r2
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7aa6:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7aa8:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7aaa:	ldr	r3, [r0, #8]
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    7aac:	pop	{r4, r5, r6, r7}
    7aae:	bx	r3
    7ab0:	.word	0x1fff09d4
    7ab4:	.word	0x4000801f
    7ab8:	.word	0x4000801c
    7abc:	.word	0x4000801b
    7ac0:	.word	0xff0f0000
    7ac4:	.word	0x00007781

00007ac8 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7ac8:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7aca:	ldr	r3, [pc, #280]	; (7be4 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7acc:	ldr	r2, [pc, #280]	; (7be8 <_spi_dma_rxISR0()+0x120>)
    7ace:	ldr	r0, [r3, #56]	; 0x38
    7ad0:	ldr	r4, [r3, #52]	; 0x34
    7ad2:	ldrb	r1, [r0, #4]
    7ad4:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7ad6:	ldr	r1, [pc, #276]	; (7bec <_spi_dma_rxISR0()+0x124>)
    7ad8:	ldrb	r2, [r4, #4]
    7ada:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    7adc:	ldr	r2, [r3, #48]	; 0x30
    7ade:	ldrb	r0, [r0, #4]
    7ae0:	strb	r0, [r1, #0]
    7ae2:	cmp	r2, #0
    7ae4:	beq.n	7b74 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    7ae6:	ldr	r1, [r3, #4]
    7ae8:	ldr	r1, [r1, #12]
    7aea:	cmp	r2, r1
    7aec:	bhi.n	7b6c <_spi_dma_rxISR0()+0xa4>
    7aee:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7af0:	ldrh	r4, [r1, #30]
    7af2:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    7af4:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7af8:	bmi.n	7bc6 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    7afa:	ubfx	r0, r0, #0, #15
    7afe:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7b00:	ldrh	r0, [r1, #30]
    7b02:	uxth	r0, r0
    7b04:	strh	r0, [r1, #22]
    7b06:	ldr	r1, [r3, #56]	; 0x38
    7b08:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7b0a:	ldrh	r0, [r1, #30]
    7b0c:	lsls	r0, r0, #16
    7b0e:	bmi.n	7bb6 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    7b10:	ubfx	r0, r2, #0, #15
    7b14:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7b16:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    7b18:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7b1a:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7b1c:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7b20:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7b22:	it	ne
    7b24:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    7b26:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    7b28:	ldr	r1, [r3, #52]	; 0x34
    7b2a:	ldr	r0, [pc, #184]	; (7be4 <_spi_dma_rxISR0()+0x11c>)
    7b2c:	ldr	r1, [r1, #0]
    7b2e:	ldr	r5, [r1, #0]
    7b30:	add.w	r4, r0, #44	; 0x2c
    7b34:	cmp	r5, r4
    7b36:	beq.n	7ba6 <_spi_dma_rxISR0()+0xde>
    7b38:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7b3a:	ldr	r4, [r0, #12]
    7b3c:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    7b40:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    7b42:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    7b44:	itete	ne
    7b46:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    7b48:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    7b4a:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    7b4c:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7b4e:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    7b52:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7b54:	str	r4, [r0, #52]	; 0x34
    7b56:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    7b58:	ldr	r3, [pc, #148]	; (7bf0 <_spi_dma_rxISR0()+0x128>)
    7b5a:	ldrb	r1, [r1, #4]
    7b5c:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    7b5e:	ldr	r1, [pc, #132]	; (7be4 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    7b60:	cbz	r2, 7b68 <_spi_dma_rxISR0()+0xa0>
    7b62:	ldr	r2, [r1, #52]	; 0x34
    7b64:	ldrb	r2, [r2, #4]
    7b66:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7b68:	pop	{r4, r5, r6, r7}
    7b6a:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    7b6c:	subs	r2, r2, r1
    7b6e:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7b70:	movs	r2, #1
    7b72:	b.n	7b28 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7b74:	ldr	r0, [r3, #60]	; 0x3c
    7b76:	ldr	r1, [r3, #0]
    7b78:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7b7a:	ldr	r4, [pc, #120]	; (7bf4 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    7b7c:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    7b7e:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7b80:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7b82:	ldr	r5, [r5, #0]
    7b84:	ldr	r6, [pc, #112]	; (7bf8 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7b86:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7b8a:	movs	r7, #3
    7b8c:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7b8e:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7b90:	strb.w	r7, [r3, #45]	; 0x2d
    7b94:	bne.n	7bd6 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7b96:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7b98:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7b9a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7b9c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7b9e:	beq.n	7bde <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7ba0:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7ba2:	b.w	f68c <EventResponder::triggerEventNotImmediate()>
    7ba6:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7ba8:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7bac:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7bae:	orr.w	r0, r0, #2147483648	; 0x80000000
    7bb2:	str	r0, [r1, #52]	; 0x34
    7bb4:	b.n	7b56 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7bb6:	ldrh	r4, [r1, #30]
    7bb8:	ubfx	r0, r2, #0, #9
    7bbc:	and.w	r4, r4, #65024	; 0xfe00
    7bc0:	orrs	r0, r4
    7bc2:	strh	r0, [r1, #30]
    7bc4:	b.n	7b16 <_spi_dma_rxISR0()+0x4e>
    7bc6:	ldrh	r4, [r1, #30]
    7bc8:	ubfx	r0, r0, #0, #9
    7bcc:	and.w	r4, r4, #65024	; 0xfe00
    7bd0:	orrs	r0, r4
    7bd2:	strh	r0, [r1, #30]
    7bd4:	b.n	7b00 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7bd6:	mov	r3, r5
    7bd8:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7bda:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7bdc:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7bde:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7be0:	pop	{r4, r5, r6, r7}
    7be2:	bx	r3
    7be4:	.word	0x1fff0994
    7be8:	.word	0x4000801f
    7bec:	.word	0x4000801c
    7bf0:	.word	0x4000801b
    7bf4:	.word	0xff0f0000
    7bf8:	.word	0x00007781

00007bfc <SPIClass::begin()>:
    7bfc:	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    7c00:	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7c02:	ldr	r4, [r3, #0]
    7c04:	ldr	r1, [r3, #4]
    7c06:	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    7c08:	ldr	r7, [pc, #88]	; (7c64 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7c0a:	ldr	r6, [pc, #92]	; (7c68 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7c0c:	orrs	r1, r5
    7c0e:	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7c10:	ldr	r5, [pc, #88]	; (7c6c <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    7c12:	ldr	r1, [pc, #92]	; (7c70 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    7c14:	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7c16:	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    7c18:	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    7c1a:	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7c1c:	ldrb	r1, [r0, #9]
    7c1e:	ldr	r2, [pc, #84]	; (7c74 <SPIClass::begin()+0x78>)
    7c20:	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    7c22:	adds	r1, #12
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7c24:	ldrb.w	r4, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    7c28:	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7c2c:	add.w	r1, r2, r4, lsl #3
    7c30:	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    7c32:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7c34:	ldrb	r1, [r0, #8]
    7c36:	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    7c38:	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7c3c:	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    7c3e:	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7c40:	add.w	r1, r2, r4, lsl #3
    7c44:	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    7c46:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7c48:	ldrb	r1, [r0, #10]
    7c4a:	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    7c4c:	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7c50:	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    7c54:	ldr	r1, [r3, #68]	; 0x44
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7c56:	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    7c5a:	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7c5c:	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    7c5e:	str	r1, [r3, #0]
}
    7c60:	bx	lr
    7c62:	nop
    7c64:	.word	0x001f4001
    7c68:	.word	0x38001001
    7c6c:	.word	0x78001001
    7c70:	.word	0x801f0000
    7c74:	.word	0x00015310

00007c78 <SPIClass::setMOSI(unsigned char)>:
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    7c78:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7c7a:	ldr	r3, [pc, #148]	; (7d10 <SPIClass::setMOSI(unsigned char)+0x98>)
    7c7c:	ldr	r5, [r0, #4]
    7c7e:	cmp	r3, r5
    7c80:	beq.n	7ca6 <SPIClass::setMOSI(unsigned char)+0x2e>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    7c82:	ldrb	r3, [r0, #9]
    7c84:	add	r3, r5
    7c86:	ldrb.w	r6, [r3, #44]	; 0x2c
    7c8a:	cmp	r1, r6
    7c8c:	beq.n	7ca2 <SPIClass::setMOSI(unsigned char)+0x2a>
    7c8e:	add.w	r2, r5, #43	; 0x2b
    7c92:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    7c94:	ldrb.w	r4, [r2, #1]!
    7c98:	cmp	r4, r1
    7c9a:	beq.n	7cd2 <SPIClass::setMOSI(unsigned char)+0x5a>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    7c9c:	adds	r3, #1
    7c9e:	cmp	r3, #4
    7ca0:	bne.n	7c94 <SPIClass::setMOSI(unsigned char)+0x1c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    7ca2:	pop	{r4, r5, r6, r7}
    7ca4:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    7ca6:	cmp	r1, #11
    7ca8:	beq.n	7d04 <SPIClass::setMOSI(unsigned char)+0x8c>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    7caa:	cmp	r1, #7
    7cac:	beq.n	7cc2 <SPIClass::setMOSI(unsigned char)+0x4a>
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    7cae:	cmp	r1, #28
    7cb0:	bne.n	7c82 <SPIClass::setMOSI(unsigned char)+0xa>
    7cb2:	ldr	r2, [pc, #96]	; (7d14 <SPIClass::setMOSI(unsigned char)+0x9c>)
    7cb4:	ldrb	r3, [r2, #0]
    7cb6:	bic.w	r3, r3, #3
    7cba:	orr.w	r3, r3, #2
    7cbe:	strb	r3, [r2, #0]
    7cc0:	b.n	7c82 <SPIClass::setMOSI(unsigned char)+0xa>
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    7cc2:	ldr	r2, [pc, #80]	; (7d14 <SPIClass::setMOSI(unsigned char)+0x9c>)
    7cc4:	ldrb	r3, [r2, #0]
    7cc6:	bic.w	r3, r3, #3
    7cca:	orr.w	r3, r3, #1
    7cce:	strb	r3, [r2, #0]
    7cd0:	b.n	7c82 <SPIClass::setMOSI(unsigned char)+0xa>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7cd2:	ldmia.w	r5, {r1, r2}
    7cd6:	ldr	r1, [r1, #0]
    7cd8:	tst	r1, r2
    7cda:	beq.n	7cfe <SPIClass::setMOSI(unsigned char)+0x86>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7cdc:	ldr	r2, [pc, #56]	; (7d18 <SPIClass::setMOSI(unsigned char)+0xa0>)
    7cde:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
    7ce2:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    7ce4:	ldr	r4, [r6, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7ce6:	adds	r1, r5, r3
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    7ce8:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7cea:	ldrb.w	r1, [r1, #44]	; 0x2c
    7cee:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().mosi_mux[i];
    7cf2:	add.w	r1, r3, #12
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    7cf6:	ldr	r4, [r2, #4]
					*reg = hardware().mosi_mux[i];
    7cf8:	ldr.w	r2, [r5, r1, lsl #2]
    7cfc:	str	r2, [r4, #0]
				}	
				mosi_pin_index = i;
    7cfe:	strb	r3, [r0, #9]
				return;
			}
		}
	}
}
    7d00:	pop	{r4, r5, r6, r7}
    7d02:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    7d04:	ldr	r2, [pc, #12]	; (7d14 <SPIClass::setMOSI(unsigned char)+0x9c>)
    7d06:	ldrb	r3, [r2, #0]
    7d08:	bic.w	r3, r3, #3
    7d0c:	strb	r3, [r2, #0]
    7d0e:	b.n	7c82 <SPIClass::setMOSI(unsigned char)+0xa>
    7d10:	.word	0x0001504c
    7d14:	.word	0x20007141
    7d18:	.word	0x00015310

00007d1c <SPIClass::setMISO(unsigned char)>:

void SPIClass::setMISO(uint8_t pin)
{
    7d1c:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7d1e:	ldr	r3, [pc, #144]	; (7db0 <SPIClass::setMISO(unsigned char)+0x94>)
    7d20:	ldr	r5, [r0, #4]
    7d22:	cmp	r3, r5
    7d24:	beq.n	7d48 <SPIClass::setMISO(unsigned char)+0x2c>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    7d26:	ldrb	r3, [r0, #8]
    7d28:	add	r3, r5
    7d2a:	ldrb	r6, [r3, #24]
    7d2c:	cmp	r1, r6
    7d2e:	beq.n	7d44 <SPIClass::setMISO(unsigned char)+0x28>
    7d30:	add.w	r2, r5, #23
    7d34:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    7d36:	ldrb.w	r4, [r2, #1]!
    7d3a:	cmp	r4, r1
    7d3c:	beq.n	7d74 <SPIClass::setMISO(unsigned char)+0x58>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    7d3e:	adds	r3, #1
    7d40:	cmp	r3, #4
    7d42:	bne.n	7d36 <SPIClass::setMISO(unsigned char)+0x1a>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    7d44:	pop	{r4, r5, r6, r7}
    7d46:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    7d48:	cmp	r1, #12
    7d4a:	beq.n	7da2 <SPIClass::setMISO(unsigned char)+0x86>
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    7d4c:	cmp	r1, #8
    7d4e:	beq.n	7d64 <SPIClass::setMISO(unsigned char)+0x48>
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    7d50:	cmp	r1, #39	; 0x27
    7d52:	bne.n	7d26 <SPIClass::setMISO(unsigned char)+0xa>
    7d54:	ldr	r2, [pc, #92]	; (7db4 <SPIClass::setMISO(unsigned char)+0x98>)
    7d56:	ldrb	r3, [r2, #0]
    7d58:	bic.w	r3, r3, #12
    7d5c:	orr.w	r3, r3, #8
    7d60:	strb	r3, [r2, #0]
    7d62:	b.n	7d26 <SPIClass::setMISO(unsigned char)+0xa>
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    7d64:	ldr	r2, [pc, #76]	; (7db4 <SPIClass::setMISO(unsigned char)+0x98>)
    7d66:	ldrb	r3, [r2, #0]
    7d68:	bic.w	r3, r3, #12
    7d6c:	orr.w	r3, r3, #4
    7d70:	strb	r3, [r2, #0]
    7d72:	b.n	7d26 <SPIClass::setMISO(unsigned char)+0xa>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7d74:	ldmia.w	r5, {r1, r2}
    7d78:	ldr	r1, [r1, #0]
    7d7a:	tst	r1, r2
    7d7c:	beq.n	7d9c <SPIClass::setMISO(unsigned char)+0x80>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7d7e:	ldr	r2, [pc, #56]	; (7db8 <SPIClass::setMISO(unsigned char)+0x9c>)
    7d80:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7d84:	adds	r1, r5, r3
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    7d86:	ldr	r4, [r6, #4]
					*reg = 0;
    7d88:	movs	r7, #0
    7d8a:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    7d8c:	ldrb	r1, [r1, #24]
    7d8e:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().miso_mux[i];
    7d92:	add.w	r5, r5, r3, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    7d96:	ldr	r2, [r2, #4]
					*reg = hardware().miso_mux[i];
    7d98:	ldr	r1, [r5, #28]
    7d9a:	str	r1, [r2, #0]
				}	
				miso_pin_index = i;
    7d9c:	strb	r3, [r0, #8]
				return;
			}
		}
	}
}
    7d9e:	pop	{r4, r5, r6, r7}
    7da0:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    7da2:	ldr	r2, [pc, #16]	; (7db4 <SPIClass::setMISO(unsigned char)+0x98>)
    7da4:	ldrb	r3, [r2, #0]
    7da6:	bic.w	r3, r3, #12
    7daa:	strb	r3, [r2, #0]
    7dac:	b.n	7d26 <SPIClass::setMISO(unsigned char)+0xa>
    7dae:	nop
    7db0:	.word	0x0001504c
    7db4:	.word	0x20007141
    7db8:	.word	0x00015310

00007dbc <SPIClass::setSCK(unsigned char)>:

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7dbc:	ldr	r2, [pc, #160]	; (7e60 <SPIClass::setSCK(unsigned char)+0xa4>)
    7dbe:	ldr	r3, [r0, #4]
    7dc0:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    7dc2:	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    7dc4:	beq.n	7df2 <SPIClass::setSCK(unsigned char)+0x36>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    7dc6:	ldrb	r2, [r0, #10]
    7dc8:	add	r2, r3
    7dca:	ldrb.w	r2, [r2, #64]	; 0x40
    7dce:	cmp	r1, r2
    7dd0:	beq.n	7dee <SPIClass::setSCK(unsigned char)+0x32>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    7dd2:	ldrb.w	r4, [r3, #64]	; 0x40
    7dd6:	cmp	r4, r1
    7dd8:	beq.n	7e5a <SPIClass::setSCK(unsigned char)+0x9e>
    7dda:	ldrb.w	r4, [r3, #65]	; 0x41
    7dde:	cmp	r4, r1
    7de0:	beq.n	7e1e <SPIClass::setSCK(unsigned char)+0x62>
    7de2:	ldrb.w	r4, [r3, #66]	; 0x42
    7de6:	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    7de8:	it	eq
    7dea:	moveq	r1, #2
			if  (pin == hardware().sck_pin[i]) {
    7dec:	beq.n	7e20 <SPIClass::setSCK(unsigned char)+0x64>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    7dee:	pop	{r4, r5, r6}
    7df0:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    7df2:	cmp	r1, #13
    7df4:	beq.n	7e4e <SPIClass::setSCK(unsigned char)+0x92>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    7df6:	cmp	r1, #14
    7df8:	beq.n	7e0e <SPIClass::setSCK(unsigned char)+0x52>
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    7dfa:	cmp	r1, #27
    7dfc:	bne.n	7dc6 <SPIClass::setSCK(unsigned char)+0xa>
    7dfe:	ldr	r4, [pc, #100]	; (7e64 <SPIClass::setSCK(unsigned char)+0xa8>)
    7e00:	ldrb	r2, [r4, #0]
    7e02:	bic.w	r2, r2, #48	; 0x30
    7e06:	orr.w	r2, r2, #32
    7e0a:	strb	r2, [r4, #0]
    7e0c:	b.n	7dc6 <SPIClass::setSCK(unsigned char)+0xa>
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    7e0e:	ldr	r4, [pc, #84]	; (7e64 <SPIClass::setSCK(unsigned char)+0xa8>)
    7e10:	ldrb	r2, [r4, #0]
    7e12:	bic.w	r2, r2, #48	; 0x30
    7e16:	orr.w	r2, r2, #16
    7e1a:	strb	r2, [r4, #0]
    7e1c:	b.n	7dc6 <SPIClass::setSCK(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    7e1e:	movs	r1, #1
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    7e20:	ldr	r5, [r3, #0]
    7e22:	ldr	r4, [r3, #4]
    7e24:	ldr	r5, [r5, #0]
    7e26:	tst	r5, r4
    7e28:	beq.n	7e4a <SPIClass::setSCK(unsigned char)+0x8e>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7e2a:	ldr	r4, [pc, #60]	; (7e68 <SPIClass::setSCK(unsigned char)+0xac>)
    7e2c:	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    7e30:	movs	r6, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    7e32:	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    7e34:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    7e36:	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    7e38:	ldrb.w	r2, [r2, #64]	; 0x40
    7e3c:	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    7e40:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    7e44:	ldr	r2, [r4, #4]
					*reg = hardware().sck_mux[i];
    7e46:	ldr	r3, [r3, #68]	; 0x44
    7e48:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    7e4a:	strb	r1, [r0, #10]
				return;
    7e4c:	b.n	7dee <SPIClass::setSCK(unsigned char)+0x32>
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    7e4e:	ldr	r4, [pc, #20]	; (7e64 <SPIClass::setSCK(unsigned char)+0xa8>)
    7e50:	ldrb	r2, [r4, #0]
    7e52:	bic.w	r2, r2, #48	; 0x30
    7e56:	strb	r2, [r4, #0]
    7e58:	b.n	7dc6 <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    7e5a:	movs	r1, #0
    7e5c:	b.n	7e20 <SPIClass::setSCK(unsigned char)+0x64>
    7e5e:	nop
    7e60:	.word	0x0001504c
    7e64:	.word	0x20007141
    7e68:	.word	0x00015310

00007e6c <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    7e6c:	cbz	r3, 7e72 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    7e6e:	b.w	779c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    7e72:	bx	lr

00007e74 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7e74:	ldr	r2, [pc, #400]	; (8008 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7e76:	ldr	r3, [pc, #404]	; (800c <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    7e78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e7c:	ldr	r6, [pc, #400]	; (8010 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e7e:	ldr.w	sl, [pc, #416]	; 8020 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e82:	ldr	r4, [pc, #400]	; (8014 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7e84:	ldr.w	r9, [pc, #400]	; 8018 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7e88:	umull	r5, r2, r2, r0
    7e8c:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e90:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7e94:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e98:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e9c:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7ea0:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ea2:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7ea4:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ea8:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7eac:	rsb	r6, fp, r7
    7eb0:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7eb4:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7eb6:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7eb8:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7eba:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7ebe:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ec2:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7ec6:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7eca:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7ecc:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ed0:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7ed4:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7ed8:	adds	r6, #1
    7eda:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7edc:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7ede:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7ee0:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7ee2:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    7ee4:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7ee6:	movw	fp, #365	; 0x16d
    7eea:	mov.w	r8, #100	; 0x64
    7eee:	mov.w	sl, #400	; 0x190
    7ef2:	b.n	7f12 <breakTime(long, tmElements_t&)+0x9e>
    7ef4:	rsb	r5, r6, r5, asr #7
    7ef8:	mls	r5, sl, r5, r3
    7efc:	cbnz	r0, 7f5c <breakTime(long, tmElements_t&)+0xe8>
    7efe:	cmp	r5, #0
    7f00:	ite	ne
    7f02:	movne	r0, fp
    7f04:	moveq.w	r0, #366	; 0x16e
    7f08:	add	r2, r0
    7f0a:	cmp	ip, r2
    7f0c:	add.w	r4, r4, #1
    7f10:	bcc.n	7f3a <breakTime(long, tmElements_t&)+0xc6>
    7f12:	uxtb	r7, r4
    7f14:	addw	r3, r7, #1970	; 0x7b2
    7f18:	smull	r0, r5, r9, r3
    7f1c:	asrs	r6, r3, #31
    7f1e:	rsb	r0, r6, r5, asr #5
    7f22:	ands.w	lr, r3, #3
    7f26:	mls	r0, r8, r0, r3
    7f2a:	beq.n	7ef4 <breakTime(long, tmElements_t&)+0x80>
    7f2c:	movw	r0, #365	; 0x16d
    7f30:	add	r2, r0
    7f32:	cmp	ip, r2
    7f34:	add.w	r4, r4, #1
    7f38:	bcs.n	7f12 <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    7f3a:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7f3c:	cmp.w	lr, #0
    7f40:	bne.n	7f62 <breakTime(long, tmElements_t&)+0xee>
    7f42:	ldr	r0, [pc, #212]	; (8018 <breakTime(long, tmElements_t&)+0x1a4>)
    7f44:	asrs	r6, r3, #31
    7f46:	smull	r4, r0, r0, r3
    7f4a:	rsb	r4, r6, r0, asr #5
    7f4e:	movs	r5, #100	; 0x64
    7f50:	mls	r4, r5, r4, r3
    7f54:	cbz	r4, 7fc6 <breakTime(long, tmElements_t&)+0x152>
    7f56:	mov.w	r4, #366	; 0x16e
    7f5a:	b.n	7f68 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7f5c:	mov.w	r0, #366	; 0x16e
    7f60:	b.n	7f08 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7f62:	movw	r4, #365	; 0x16d
    7f66:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f68:	ldr	r0, [pc, #172]	; (8018 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    7f6a:	ldr	r5, [pc, #176]	; (801c <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f6c:	smull	r7, r0, r0, r3
    7f70:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7f74:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f76:	rsb	r6, r6, r0, asr #7
    7f7a:	movs	r4, #100	; 0x64
    7f7c:	mov.w	r0, #400	; 0x190
    7f80:	mls	r6, r0, r6, r3
    7f84:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7f88:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f8c:	movs	r0, #1
    7f8e:	movs	r3, #0
    7f90:	b.n	7f98 <breakTime(long, tmElements_t&)+0x124>
    7f92:	adds	r0, #1
    7f94:	uxtb	r0, r0
    7f96:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    7f98:	cmp	r3, #1
    7f9a:	uxtb	r7, r3
    7f9c:	beq.n	7fe0 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7f9e:	ldrb	r4, [r3, r5]
    7fa0:	cmp	r4, r2
    7fa2:	bhi.n	7fb8 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7fa4:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    7fa6:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7faa:	bne.n	7f92 <breakTime(long, tmElements_t&)+0x11e>
    7fac:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7fae:	adds	r2, #1
    7fb0:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    7fb2:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    7fb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fb8:	adds	r7, #1
    7fba:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7fbc:	adds	r2, #1
    7fbe:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    7fc0:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    7fc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7fc6:	mov.w	r4, #400	; 0x190
    7fca:	rsb	r0, r6, r0, asr #7
    7fce:	mls	r0, r4, r0, r3
    7fd2:	cmp	r0, #0
    7fd4:	movw	r4, #365	; 0x16d
    7fd8:	it	eq
    7fda:	moveq.w	r4, #366	; 0x16e
    7fde:	b.n	7f68 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7fe0:	cmp.w	lr, #0
    7fe4:	bne.n	7ffc <breakTime(long, tmElements_t&)+0x188>
    7fe6:	cmp.w	r8, #0
    7fea:	bne.n	8004 <breakTime(long, tmElements_t&)+0x190>
    7fec:	cmp	r6, #0
    7fee:	ite	ne
    7ff0:	movne	r4, #28
    7ff2:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7ff4:	cmp	r2, r4
    7ff6:	bcc.n	8000 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    7ff8:	subs	r2, r2, r4
    7ffa:	b.n	7f92 <breakTime(long, tmElements_t&)+0x11e>
    7ffc:	movs	r4, #28
    7ffe:	b.n	7ff4 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    8000:	movs	r7, #2
    8002:	b.n	7fae <breakTime(long, tmElements_t&)+0x13a>
    8004:	movs	r4, #29
    8006:	b.n	7ff4 <breakTime(long, tmElements_t&)+0x180>
    8008:	.word	0xc22e4507
    800c:	.word	0x88888889
    8010:	.word	0x91a2b3c5
    8014:	.word	0xaaaaaaab
    8018:	.word	0x51eb851f
    801c:	.word	0x0001513c
    8020:	.word	0x24924925

00008024 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    8024:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    8026:	ldr	r1, [pc, #12]	; (8034 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    8028:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    802a:	bl	7e74 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    802e:	ldr	r3, [pc, #8]	; (8038 <refreshCache(long) [clone .part.0]+0x14>)
    8030:	str	r4, [r3, #0]
    8032:	pop	{r4, pc}
    8034:	.word	0x20006a48
    8038:	.word	0x20006a44

0000803c <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    803c:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    803e:	ldr	r4, [pc, #128]	; (80c0 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8040:	ldr	r6, [pc, #128]	; (80c4 <now()+0x88>)
    8042:	ldr	r3, [r4, #0]
    8044:	ldr	r2, [r6, #0]
    8046:	ldr	r5, [pc, #128]	; (80c8 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    8048:	sub	sp, #12
    804a:	ldr	r0, [r5, #0]
    804c:	str	r3, [sp, #0]
	return ret;
    804e:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8050:	subs	r3, r3, r2
    8052:	cmp.w	r3, #1000	; 0x3e8
    8056:	bcc.n	8078 <now()+0x3c>
    8058:	adds	r0, #1
    805a:	b.n	805e <now()+0x22>
    805c:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    805e:	ldr	r3, [r4, #0]
    8060:	str	r3, [sp, #0]
	return ret;
    8062:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    8064:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8068:	subs	r3, r3, r2
    806a:	cmp.w	r3, #1000	; 0x3e8
    806e:	add.w	r1, r0, #1
    8072:	bcs.n	805c <now()+0x20>
    8074:	str	r0, [r5, #0]
    8076:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    8078:	ldr	r7, [pc, #80]	; (80cc <now()+0x90>)
    807a:	ldr	r3, [r7, #0]
    807c:	cmp	r0, r3
    807e:	bcc.n	80a0 <now()+0x64>
    if (getTimePtr != 0) {
    8080:	ldr	r3, [pc, #76]	; (80d0 <now()+0x94>)
    8082:	ldr	r3, [r3, #0]
    8084:	cbz	r3, 80a0 <now()+0x64>
      time_t t = getTimePtr();
    8086:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    8088:	ldr	r3, [pc, #72]	; (80d4 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    808a:	cbnz	r0, 80a4 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    808c:	ldr	r1, [pc, #72]	; (80d8 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    808e:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8090:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    8092:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8094:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    8096:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8098:	it	ne
    809a:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    809c:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    809e:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    80a0:	add	sp, #12
    80a2:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    80a4:	ldr	r2, [r4, #0]
    80a6:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    80a8:	ldr	r3, [r3, #0]
  Status = timeSet;
    80aa:	ldr	r2, [pc, #44]	; (80d8 <now()+0x9c>)
	return ret;
    80ac:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    80ae:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    80b0:	add	r3, r0
  Status = timeSet;
    80b2:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    80b4:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    80b6:	str	r3, [r7, #0]
  Status = timeSet;
    80b8:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    80ba:	add	sp, #12
    80bc:	pop	{r4, r5, r6, r7, pc}
    80be:	nop
    80c0:	.word	0x2000701c
    80c4:	.word	0x20006a5c
    80c8:	.word	0x20006a50
    80cc:	.word	0x20006a60
    80d0:	.word	0x20006a58
    80d4:	.word	0x1fff0a14
    80d8:	.word	0x20006a54

000080dc <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    80dc:	push	{r3, lr}
  return hour(now()); 
    80de:	bl	803c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    80e2:	ldr	r3, [pc, #16]	; (80f4 <hour()+0x18>)
    80e4:	ldr	r3, [r3, #0]
    80e6:	cmp	r0, r3
    80e8:	beq.n	80ee <hour()+0x12>
    80ea:	bl	8024 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    80ee:	ldr	r3, [pc, #8]	; (80f8 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    80f0:	ldrb	r0, [r3, #2]
    80f2:	pop	{r3, pc}
    80f4:	.word	0x20006a44
    80f8:	.word	0x20006a48

000080fc <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    80fc:	push	{r3, lr}
  return minute(now()); 
    80fe:	bl	803c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8102:	ldr	r3, [pc, #16]	; (8114 <minute()+0x18>)
    8104:	ldr	r3, [r3, #0]
    8106:	cmp	r0, r3
    8108:	beq.n	810e <minute()+0x12>
    810a:	bl	8024 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    810e:	ldr	r3, [pc, #8]	; (8118 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    8110:	ldrb	r0, [r3, #1]
    8112:	pop	{r3, pc}
    8114:	.word	0x20006a44
    8118:	.word	0x20006a48

0000811c <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    811c:	push	{r3, lr}
  return second(now()); 
    811e:	bl	803c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8122:	ldr	r3, [pc, #16]	; (8134 <second()+0x18>)
    8124:	ldr	r3, [r3, #0]
    8126:	cmp	r0, r3
    8128:	beq.n	812e <second()+0x12>
    812a:	bl	8024 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    812e:	ldr	r3, [pc, #8]	; (8138 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    8130:	ldrb	r0, [r3, #0]
    8132:	pop	{r3, pc}
    8134:	.word	0x20006a44
    8138:	.word	0x20006a48

0000813c <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    813c:	push	{r3, lr}
  return(day(now())); 
    813e:	bl	803c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8142:	ldr	r3, [pc, #16]	; (8154 <day()+0x18>)
    8144:	ldr	r3, [r3, #0]
    8146:	cmp	r0, r3
    8148:	beq.n	814e <day()+0x12>
    814a:	bl	8024 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    814e:	ldr	r3, [pc, #8]	; (8158 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    8150:	ldrb	r0, [r3, #4]
    8152:	pop	{r3, pc}
    8154:	.word	0x20006a44
    8158:	.word	0x20006a48

0000815c <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    815c:	push	{r3, lr}
  return month(now()); 
    815e:	bl	803c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8162:	ldr	r3, [pc, #16]	; (8174 <month()+0x18>)
    8164:	ldr	r3, [r3, #0]
    8166:	cmp	r0, r3
    8168:	beq.n	816e <month()+0x12>
    816a:	bl	8024 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    816e:	ldr	r3, [pc, #8]	; (8178 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    8170:	ldrb	r0, [r3, #5]
    8172:	pop	{r3, pc}
    8174:	.word	0x20006a44
    8178:	.word	0x20006a48

0000817c <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    817c:	push	{r3, lr}
  return year(now()); 
    817e:	bl	803c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8182:	ldr	r3, [pc, #20]	; (8198 <year()+0x1c>)
    8184:	ldr	r3, [r3, #0]
    8186:	cmp	r0, r3
    8188:	beq.n	818e <year()+0x12>
    818a:	bl	8024 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    818e:	ldr	r3, [pc, #12]	; (819c <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    8190:	ldrb	r0, [r3, #6]
}
    8192:	addw	r0, r0, #1970	; 0x7b2
    8196:	pop	{r3, pc}
    8198:	.word	0x20006a44
    819c:	.word	0x20006a48

000081a0 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    81a0:	ldr	r1, [pc, #12]	; (81b0 <setSyncProvider(long (*)())+0x10>)
    81a2:	ldr	r2, [pc, #16]	; (81b4 <setSyncProvider(long (*)())+0x14>)
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    81a4:	ldr	r3, [pc, #16]	; (81b8 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    81a6:	ldr	r1, [r1, #0]
    81a8:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    81aa:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    81ac:	b.w	803c <now()>
    81b0:	.word	0x20006a50
    81b4:	.word	0x20006a60
    81b8:	.word	0x20006a58

000081bc <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
audio_block_t * AudioOutputPWM::block_2nd = NULL;
uint32_t  AudioOutputPWM::block_offset = 0;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    81bc:	ldr	r2, [pc, #8]	; (81c8 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0xc>)
    81be:	ldr	r1, [pc, #12]	; (81cc <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x10>)
    81c0:	ldr	r0, [pc, #12]	; (81d0 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x14>)
    81c2:	b.w	fb40 <__aeabi_atexit>
    81c6:	nop
    81c8:	.word	0x1fff0970
    81cc:	.word	0x00000789
    81d0:	.word	0x20006a64

000081d4 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    81d4:	ldr	r2, [pc, #8]	; (81e0 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    81d6:	ldr	r1, [pc, #12]	; (81e4 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    81d8:	ldr	r0, [pc, #12]	; (81e8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    81da:	b.w	fb40 <__aeabi_atexit>
    81de:	nop
    81e0:	.word	0x1fff0970
    81e4:	.word	0x00000789
    81e8:	.word	0x20006a6c

000081ec <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    81ec:	ldr	r2, [pc, #8]	; (81f8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    81ee:	ldr	r1, [pc, #12]	; (81fc <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    81f0:	ldr	r0, [pc, #12]	; (8200 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    81f2:	b.w	fb40 <__aeabi_atexit>
    81f6:	nop
    81f8:	.word	0x1fff0970
    81fc:	.word	0x00000789
    8200:	.word	0x20006a74

00008204 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM __attribute__((aligned(32))) static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    8204:	ldr	r2, [pc, #8]	; (8210 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    8206:	ldr	r1, [pc, #12]	; (8214 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    8208:	ldr	r0, [pc, #12]	; (8218 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    820a:	b.w	fb40 <__aeabi_atexit>
    820e:	nop
    8210:	.word	0x1fff0970
    8214:	.word	0x00000789
    8218:	.word	0x20006a7c

0000821c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    821c:	ldr	r2, [pc, #8]	; (8228 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    821e:	ldr	r1, [pc, #12]	; (822c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    8220:	ldr	r0, [pc, #12]	; (8230 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    8222:	b.w	fb40 <__aeabi_atexit>
    8226:	nop
    8228:	.word	0x1fff0970
    822c:	.word	0x00000789
    8230:	.word	0x20006a84

00008234 <AudioControlSGTL5000::disable()>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
    8234:	movs	r0, #0
    8236:	bx	lr

00008238 <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
    8238:	movs	r0, #0
    823a:	bx	lr

0000823c <AudioControlSGTL5000::read(unsigned int)>:
	return true;
}


unsigned int AudioControlSGTL5000::read(unsigned int reg)
{
    823c:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    823e:	ldr	r4, [pc, #124]	; (82bc <AudioControlSGTL5000::read(unsigned int)+0x80>)
    8240:	ldrb	r2, [r0, #8]
    8242:	mov	r6, r1
    8244:	lsls	r2, r2, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    8246:	ubfx	r1, r1, #8, #8
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    824a:	movs	r5, #1
    824c:	mov	r7, r0
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    824e:	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    8250:	strb.w	r2, [r4, #59]	; 0x3b
		transmitting = 1;
    8254:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    8258:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    825c:	bl	8830 <TwoWire::write(unsigned char)>
    8260:	uxtb	r1, r6
    8262:	mov	r0, r4
    8264:	bl	8830 <TwoWire::write(unsigned char)>
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
    8268:	mov	r0, r4
    826a:	movs	r1, #0
    826c:	bl	8b08 <TwoWire::endTransmission(unsigned char)>
    8270:	cbz	r0, 8276 <AudioControlSGTL5000::read(unsigned int)+0x3a>
    8272:	movs	r0, #0
    8274:	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    8276:	mov	r3, r5
    8278:	ldrb	r1, [r7, #8]
    827a:	movs	r2, #2
    827c:	mov	r0, r4
    827e:	bl	8c1c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    8282:	cmp	r0, #1
    8284:	bls.n	8272 <AudioControlSGTL5000::read(unsigned int)+0x36>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    8286:	ldrb.w	r1, [r4, #56]	; 0x38
    828a:	ldrb.w	r5, [r4, #57]	; 0x39
    828e:	cmp	r1, r5
    8290:	bcs.n	82b4 <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    8292:	adds	r3, r4, r1
    8294:	adds	r2, r1, #1
    8296:	uxtb	r2, r2
	val = Wire.read() << 8;
    8298:	ldrb	r0, [r3, #24]
    829a:	strb.w	r2, [r4, #56]	; 0x38
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    829e:	cmp	r5, r2
    82a0:	mov.w	r3, r0, lsl #8
    82a4:	bls.n	82b4 <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    82a6:	add	r2, r4
    82a8:	adds	r1, #2
    82aa:	ldrb	r0, [r2, #24]
    82ac:	strb.w	r1, [r4, #56]	; 0x38
    82b0:	orrs	r0, r3
    82b2:	pop	{r3, r4, r5, r6, r7, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    82b4:	mov.w	r0, #4294967295
	val |= Wire.read();
	return val;
}
    82b8:	pop	{r3, r4, r5, r6, r7, pc}
    82ba:	nop
    82bc:	.word	0x1fff0a84

000082c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    82c0:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    82c2:	ldr	r4, [pc, #80]	; (8314 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x54>)
    82c4:	ldrb	r3, [r0, #8]
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    82c6:	cmp	r1, #36	; 0x24
    82c8:	it	eq
    82ca:	strheq	r2, [r0, #6]
    82cc:	lsls	r3, r3, #1
		transmitting = 1;
    82ce:	movs	r5, #1
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    82d0:	mov	r6, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    82d2:	mov	r0, r4
    82d4:	ubfx	r1, r1, #8, #8
    82d8:	mov	r7, r2
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    82da:	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    82de:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    82e2:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    82e6:	bl	8830 <TwoWire::write(unsigned char)>
    82ea:	uxtb	r1, r6
    82ec:	mov	r0, r4
    82ee:	bl	8830 <TwoWire::write(unsigned char)>
    82f2:	ubfx	r1, r7, #8, #8
    82f6:	mov	r0, r4
    82f8:	bl	8830 <TwoWire::write(unsigned char)>
    82fc:	uxtb	r1, r7
    82fe:	mov	r0, r4
    8300:	bl	8830 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    8304:	mov	r1, r5
    8306:	mov	r0, r4
    8308:	bl	8b08 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    830c:	clz	r0, r0
    8310:	lsrs	r0, r0, #5
    8312:	pop	{r3, r4, r5, r6, r7, pc}
    8314:	.word	0x1fff0a84

00008318 <AudioControlSGTL5000::micGain(unsigned int)>:

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    8318:	cmp	r1, #39	; 0x27
	unsigned short m=((0x7F-calcVol(right,0x7F))<<8)|(0x7F-calcVol(left,0x7F));
	return write(CHIP_ANA_HP_CTRL, m);
}

bool AudioControlSGTL5000::micGain(unsigned int dB)
{
    831a:	push	{r3, r4, r5, lr}
    831c:	mov	r4, r1
    831e:	mov	r5, r0
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
    8320:	bls.n	8336 <AudioControlSGTL5000::micGain(unsigned int)+0x1e>
		preamp_gain = 3;
		dB -= 40;
    8322:	sub.w	r4, r1, #40	; 0x28
    8326:	movw	r2, #371	; 0x173
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    832a:	movs	r1, #42	; 0x2a
    832c:	mov	r0, r5
    832e:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    8332:	cbnz	r0, 834e <AudioControlSGTL5000::micGain(unsigned int)+0x36>
}
    8334:	pop	{r3, r4, r5, pc}
	unsigned int preamp_gain, input_gain;

	if (dB >= 40) {
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
    8336:	cmp	r1, #29
    8338:	bls.n	836e <AudioControlSGTL5000::micGain(unsigned int)+0x56>
		preamp_gain = 2;
		dB -= 30;
    833a:	sub.w	r4, r1, #30
    833e:	mov.w	r2, #370	; 0x172
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
    8342:	movs	r1, #42	; 0x2a
    8344:	mov	r0, r5
    8346:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    834a:	cmp	r0, #0
    834c:	beq.n	8334 <AudioControlSGTL5000::micGain(unsigned int)+0x1c>
		preamp_gain = 1;
		dB -= 20;
	} else {
		preamp_gain = 0;
	}
	input_gain = (dB * 2) / 3;
    834e:	ldr	r2, [pc, #48]	; (8380 <AudioControlSGTL5000::micGain(unsigned int)+0x68>)
    8350:	lsls	r4, r4, #1
    8352:	umull	r3, r2, r2, r4
    8356:	lsrs	r2, r2, #1
    8358:	cmp	r2, #15
    835a:	it	cs
    835c:	movcs	r2, #15
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    835e:	mov	r0, r5
    8360:	orr.w	r2, r2, r2, lsl #4
    8364:	movs	r1, #32
}
    8366:	ldmia.w	sp!, {r3, r4, r5, lr}
	}
	input_gain = (dB * 2) / 3;
	if (input_gain > 15) input_gain = 15;

	return write(CHIP_MIC_CTRL, 0x0170 | preamp_gain)
	    && write(CHIP_ANA_ADC_CTRL, (input_gain << 4) | input_gain);
    836a:	b.w	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		preamp_gain = 3;
		dB -= 40;
	} else if (dB >= 30) {
		preamp_gain = 2;
		dB -= 30;
	} else if (dB >= 20) {
    836e:	cmp	r1, #19
		preamp_gain = 1;
		dB -= 20;
    8370:	itte	hi
    8372:	subhi.w	r4, r1, #20
    8376:	movwhi	r2, #369	; 0x171
    837a:	movls.w	r2, #368	; 0x170
    837e:	b.n	832a <AudioControlSGTL5000::micGain(unsigned int)+0x12>
    8380:	.word	0xaaaaaaab

00008384 <AudioControlSGTL5000::enable(unsigned int, unsigned long)>:
	return enable(0);
#endif	
}

bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
{
    8384:	push	{r3, r4, r5, r6, r7, lr}
    8386:	mov	r4, r0

	Wire.begin();
    8388:	ldr	r0, [pc, #492]	; (8578 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1f4>)
	return enable(0);
#endif	
}

bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
{
    838a:	mov	r5, r1
    838c:	mov	r6, r2

	Wire.begin();
    838e:	bl	8858 <TwoWire::begin()>
	delay(5);
    8392:	movs	r0, #5
    8394:	bl	e75c <delay>
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
    8398:	mov	r0, r4
    839a:	movs	r1, #6
    839c:	bl	823c <AudioControlSGTL5000::read(unsigned int)>
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
    83a0:	cmp	r5, #0
    83a2:	beq.w	84d0 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x14c>
    83a6:	cmp	r0, #176	; 0xb0
    83a8:	beq.w	856c <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1e8>
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

        muted = true;
    83ac:	movs	r7, #1
    83ae:	strb	r7, [r4, #4]

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    83b0:	movw	r2, #16480	; 0x4060
    83b4:	movs	r1, #48	; 0x30
    83b6:	mov	r0, r4
    83b8:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    83bc:	cbnz	r0, 83c2 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x3e>
    83be:	movs	r0, #0
    83c0:	pop	{r3, r4, r5, r6, r7, pc}
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    83c2:	movs	r2, #108	; 0x6c
    83c4:	movs	r1, #38	; 0x26
    83c6:	mov	r0, r4
    83c8:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    83cc:	mov.w	r2, #498	; 0x1f2
    83d0:	movs	r1, #40	; 0x28
    83d2:	mov	r0, r4
    83d4:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    83d8:	movw	r2, #3874	; 0xf22
    83dc:	movs	r1, #44	; 0x2c
    83de:	mov	r0, r4
    83e0:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    83e4:	movw	r2, #17478	; 0x4446
    83e8:	movs	r1, #60	; 0x3c
    83ea:	mov	r0, r4
    83ec:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    83f0:	movw	r2, #311	; 0x137
    83f4:	movs	r1, #36	; 0x24
    83f6:	mov	r0, r4
    83f8:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		
	if (extMCLK > 0) {
		//SGTL is I2S Master
		//Datasheet Pg. 14: Using the PLL - Asynchronous SYS_MCLK input
		if (extMCLK > 17000000) {
    83fc:	ldr	r3, [pc, #380]	; (857c <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1f8>)
    83fe:	cmp	r5, r3
    8400:	bhi.w	8560 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1dc>
			write(CHIP_CLK_TOP_CTRL, 1);
		} else {
			write(CHIP_CLK_TOP_CTRL, 0);
    8404:	movs	r2, #0
    8406:	movs	r1, #52	; 0x34
    8408:	mov	r0, r4
    840a:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		}

		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    840e:	udiv	r2, r6, r5
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    8412:	vmov	s15, r6
    8416:	vcvt.f32.u32	s13, s15
    841a:	vmov	s15, r5
    841e:	vcvt.f32.u32	s15, s15
			write(CHIP_CLK_TOP_CTRL, 1);
		} else {
			write(CHIP_CLK_TOP_CTRL, 0);
		}

		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    8422:	and.w	r2, r2, #31
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    8426:	vdiv.f32	s14, s13, s15
    842a:	movs	r1, #50	; 0x32
    842c:	mov	r0, r4
    842e:	vmov	s15, r2
    8432:	vcvt.f32.s32	s15, s15
    8436:	vldr	s13, [pc, #328]	; 8580 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1fc>
    843a:	vsub.f32	s15, s14, s15
    843e:	vmul.f32	s15, s15, s13
    8442:	vcvt.u32.f32	s15, s15
    8446:	vmov	r3, s15
    844a:	ubfx	r3, r3, #0, #11
    844e:	orr.w	r2, r3, r2, lsl #11
    8452:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
    8456:	movw	r2, #17919	; 0x45ff
    845a:	movs	r1, #48	; 0x30
    845c:	mov	r0, r4
    845e:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	} else {
		//SGTL is I2S Slave
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
	}

	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    8462:	movs	r2, #115	; 0x73
    8464:	movs	r1, #2
    8466:	mov	r0, r4
    8468:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    846c:	mov.w	r0, #400	; 0x190
    8470:	bl	e75c <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    8474:	movw	r2, #7453	; 0x1d1d
    8478:	movs	r1, #46	; 0x2e
    847a:	mov	r0, r4
    847c:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	
	if (extMCLK > 0) { 
		//SGTL is I2S Master
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
    8480:	movs	r2, #7
    8482:	movs	r1, #4
    8484:	mov	r0, r4
    8486:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
    848a:	movs	r2, #176	; 0xb0
    848c:	movs	r1, #6
    848e:	mov	r0, r4
    8490:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
	}

	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    8494:	movs	r2, #16
    8496:	movs	r1, #10
    8498:	mov	r0, r4
    849a:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    849e:	movs	r2, #0
    84a0:	movs	r1, #14
    84a2:	mov	r0, r4
    84a4:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    84a8:	movw	r2, #15420	; 0x3c3c
    84ac:	movs	r1, #16
    84ae:	mov	r0, r4
    84b0:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    84b4:	movw	r2, #32639	; 0x7f7f
    84b8:	movs	r1, #34	; 0x22
    84ba:	mov	r0, r4
    84bc:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    84c0:	movs	r2, #54	; 0x36
    84c2:	movs	r1, #36	; 0x24
    84c4:	mov	r0, r4
    84c6:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

	semi_automated = true;
    84ca:	movs	r0, #1
    84cc:	strb	r0, [r4, #9]
    84ce:	pop	{r3, r4, r5, r6, r7, pc}
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

        muted = true;
    84d0:	movs	r3, #1
    84d2:	strb	r3, [r4, #4]

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    84d4:	movw	r2, #16480	; 0x4060
    84d8:	movs	r1, #48	; 0x30
    84da:	mov	r0, r4
    84dc:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    84e0:	cmp	r0, #0
    84e2:	beq.w	83be <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x3a>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    84e6:	movs	r2, #108	; 0x6c
    84e8:	movs	r1, #38	; 0x26
    84ea:	mov	r0, r4
    84ec:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    84f0:	mov.w	r2, #498	; 0x1f2
    84f4:	movs	r1, #40	; 0x28
    84f6:	mov	r0, r4
    84f8:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    84fc:	movw	r2, #3874	; 0xf22
    8500:	movs	r1, #44	; 0x2c
    8502:	mov	r0, r4
    8504:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    8508:	movw	r2, #17478	; 0x4446
    850c:	movs	r1, #60	; 0x3c
    850e:	mov	r0, r4
    8510:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    8514:	movw	r2, #311	; 0x137
    8518:	movs	r1, #36	; 0x24
    851a:	mov	r0, r4
    851c:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
	} else {
		//SGTL is I2S Slave
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    8520:	movw	r2, #16639	; 0x40ff
    8524:	movs	r1, #48	; 0x30
    8526:	mov	r0, r4
    8528:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	}

	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    852c:	movs	r2, #115	; 0x73
    852e:	movs	r1, #2
    8530:	mov	r0, r4
    8532:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    8536:	mov.w	r0, #400	; 0x190
    853a:	bl	e75c <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    853e:	movw	r2, #7453	; 0x1d1d
    8542:	movs	r1, #46	; 0x2e
    8544:	mov	r0, r4
    8546:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		//SGTL is I2S Master
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
	} else {
		//SGTL is I2S Slave
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    854a:	movs	r2, #4
    854c:	mov	r1, r2
    854e:	mov	r0, r4
    8550:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    8554:	movs	r2, #48	; 0x30
    8556:	movs	r1, #6
    8558:	mov	r0, r4
    855a:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    855e:	b.n	8494 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x110>
		
	if (extMCLK > 0) {
		//SGTL is I2S Master
		//Datasheet Pg. 14: Using the PLL - Asynchronous SYS_MCLK input
		if (extMCLK > 17000000) {
			write(CHIP_CLK_TOP_CTRL, 1);
    8560:	mov	r2, r7
    8562:	movs	r1, #52	; 0x34
    8564:	mov	r0, r4
    8566:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    856a:	b.n	840e <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x8a>
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
		//Yes. Do not initialize.
		muted = false;
    856c:	movs	r3, #0
		semi_automated = true;
    856e:	movs	r0, #1
	
	//Check if we are in Master Mode and if the Teensy had a reset:
	unsigned int n = read(CHIP_I2S_CTRL);
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
		//Yes. Do not initialize.
		muted = false;
    8570:	strb	r3, [r4, #4]
		semi_automated = true;
    8572:	strb	r0, [r4, #9]
		return true;
    8574:	pop	{r3, r4, r5, r6, r7, pc}
    8576:	nop
    8578:	.word	0x1fff0a84
    857c:	.word	0x01036640
    8580:	.word	0x45000000

00008584 <AudioControlSGTL5000::enable()>:

bool AudioControlSGTL5000::enable(void) {
#if defined(KINETISL)
	return enable(16000000); // SGTL as Master with 16MHz MCLK from Teensy LC
#else	
	return enable(0);
    8584:	ldr	r2, [pc, #4]	; (858c <AudioControlSGTL5000::enable()+0x8>)
    8586:	movs	r1, #0
    8588:	b.w	8384 <AudioControlSGTL5000::enable(unsigned int, unsigned long)>
    858c:	.word	0x0ac55a60

00008590 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    8590:	push	{r4, lr}
    8592:	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    8594:	cbz	r1, 859e <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    8596:	cmp	r1, #1
    8598:	beq.n	85be <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    859a:	movs	r0, #0
    859c:	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    859e:	movs	r2, #85	; 0x55
    85a0:	movs	r1, #32
    85a2:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    85a6:	cmp	r0, #0
    85a8:	beq.n	859a <AudioControlSGTL5000::inputSelect(int)+0xa>
    85aa:	ldrh	r2, [r4, #6]
    85ac:	orr.w	r2, r2, #4
    85b0:	mov	r0, r4
    85b2:	uxth	r2, r2
    85b4:	movs	r1, #36	; 0x24
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    85b6:	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    85ba:	b.w	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    85be:	movw	r2, #371	; 0x173
    85c2:	movs	r1, #42	; 0x2a
    85c4:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    85c8:	cmp	r0, #0
    85ca:	beq.n	859a <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    85cc:	movs	r2, #136	; 0x88
    85ce:	movs	r1, #32
    85d0:	mov	r0, r4
    85d2:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    85d6:	cmp	r0, #0
    85d8:	beq.n	859a <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    85da:	ldrh	r2, [r4, #6]
    85dc:	mov	r0, r4
    85de:	bic.w	r2, r2, #4
    85e2:	movs	r1, #36	; 0x24
		} else {
			return false;
		}
	}
    85e4:	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    85e8:	b.w	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

000085ec <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    85ec:	push	{r3, r4, r5, lr}
    85ee:	mov	r5, r0
	if (n == 0) {
    85f0:	cbz	r1, 8630 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x44>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    85f2:	cmp	r1, #128	; 0x80
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    85f4:	ldrb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    85f6:	itte	ls
    85f8:	rsbls	r4, r1, #128	; 0x80
    85fc:	orrls.w	r4, r4, r4, lsl #8
    8600:	movhi	r4, #0
	}
	if (muted) {
    8602:	cbnz	r3, 8612 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x26>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    8604:	mov	r2, r4
    8606:	mov	r0, r5
    8608:	movs	r1, #34	; 0x22
}
    860a:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    860e:	b.w	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    8612:	ldrh	r2, [r0, #6]
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
		muted = false;
    8614:	movs	r3, #0
    8616:	bic.w	r2, r2, #16
    861a:	strb	r3, [r0, #4]
    861c:	movs	r1, #36	; 0x24
    861e:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    8622:	mov	r2, r4
    8624:	mov	r0, r5
    8626:	movs	r1, #34	; 0x22
}
    8628:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    862c:	b.w	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    8630:	movs	r3, #1
    8632:	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    8634:	movw	r2, #32639	; 0x7f7f
    8638:	movs	r1, #34	; 0x22
    863a:	bl	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    863e:	ldrh	r2, [r5, #6]
    8640:	orr.w	r2, r2, #16
    8644:	mov	r0, r5
    8646:	uxth	r2, r2
    8648:	movs	r1, #36	; 0x24
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
    864a:	ldmia.w	sp!, {r3, r4, r5, lr}
    864e:	b.w	82c0 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    8652:	nop

00008654 <AudioControlSGTL5000::volume(float)>:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    8654:	vldr	s14, [pc, #20]	; 866c <AudioControlSGTL5000::volume(float)+0x18>
    8658:	vldr	s15, [pc, #20]	; 8670 <AudioControlSGTL5000::volume(float)+0x1c>
    865c:	vfma.f32	s15, s0, s14
    8660:	vcvt.u32.f32	s15, s15
    8664:	vmov	r1, s15
    8668:	b.w	85ec <AudioControlSGTL5000::volumeInteger(unsigned int)>
    866c:	.word	0x43010000
    8670:	.word	0x3eff7cee

00008674 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM __attribute__((aligned(32))) static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    8674:	ldr	r2, [pc, #8]	; (8680 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    8676:	ldr	r1, [pc, #12]	; (8684 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    8678:	ldr	r0, [pc, #12]	; (8688 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    867a:	b.w	fb40 <__aeabi_atexit>
    867e:	nop
    8680:	.word	0x1fff0970
    8684:	.word	0x00000789
    8688:	.word	0x20006a8c

0000868c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    868c:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    868e:	ldr	r5, [pc, #28]	; (86ac <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    8690:	ldr	r4, [pc, #28]	; (86b0 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    8692:	ldr	r0, [pc, #32]	; (86b4 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    8694:	mov	r2, r5
    8696:	mov	r1, r4
    8698:	bl	fb40 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    869c:	mov	r2, r5
    869e:	mov	r1, r4
    86a0:	ldr	r0, [pc, #20]	; (86b8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    86a2:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    86a6:	b.w	fb40 <__aeabi_atexit>
    86aa:	nop
    86ac:	.word	0x1fff0970
    86b0:	.word	0x00000789
    86b4:	.word	0x20006a94
    86b8:	.word	0x20006a9c

000086bc <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    86bc:	ldr	r2, [pc, #8]	; (86c8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    86be:	ldr	r1, [pc, #12]	; (86cc <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    86c0:	ldr	r0, [pc, #12]	; (86d0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    86c2:	b.w	fb40 <__aeabi_atexit>
    86c6:	nop
    86c8:	.word	0x1fff0970
    86cc:	.word	0x00000789
    86d0:	.word	0x20006aa4

000086d4 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    86d4:	ldr	r2, [pc, #8]	; (86e0 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    86d6:	ldr	r1, [pc, #12]	; (86e4 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    86d8:	ldr	r0, [pc, #12]	; (86e8 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    86da:	b.w	fb40 <__aeabi_atexit>
    86de:	nop
    86e0:	.word	0x1fff0970
    86e4:	.word	0x00000789
    86e8:	.word	0x20006aac

000086ec <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    86ec:	ldr	r2, [pc, #8]	; (86f8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    86ee:	ldr	r1, [pc, #12]	; (86fc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    86f0:	ldr	r0, [pc, #12]	; (8700 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    86f2:	b.w	fb40 <__aeabi_atexit>
    86f6:	nop
    86f8:	.word	0x1fff0970
    86fc:	.word	0x00000789
    8700:	.word	0x20006ab4

00008704 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    8704:	ldr	r2, [pc, #8]	; (8710 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    8706:	ldr	r1, [pc, #12]	; (8714 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    8708:	ldr	r0, [pc, #12]	; (8718 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    870a:	b.w	fb40 <__aeabi_atexit>
    870e:	nop
    8710:	.word	0x1fff0970
    8714:	.word	0x00000789
    8718:	.word	0x20006abc

0000871c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    871c:	ldr	r2, [pc, #8]	; (8728 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    871e:	ldr	r1, [pc, #12]	; (872c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    8720:	ldr	r0, [pc, #12]	; (8730 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    8722:	b.w	fb40 <__aeabi_atexit>
    8726:	nop
    8728:	.word	0x1fff0970
    872c:	.word	0x00000789
    8730:	.word	0x20006ac4

00008734 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    8734:	ldr	r2, [pc, #8]	; (8740 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    8736:	ldr	r1, [pc, #12]	; (8744 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    8738:	ldr	r0, [pc, #12]	; (8748 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    873a:	b.w	fb40 <__aeabi_atexit>
    873e:	nop
    8740:	.word	0x1fff0970
    8744:	.word	0x00000789
    8748:	.word	0x20006acc

0000874c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    874c:	ldr	r2, [pc, #8]	; (8758 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    874e:	ldr	r1, [pc, #12]	; (875c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    8750:	ldr	r0, [pc, #12]	; (8760 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    8752:	b.w	fb40 <__aeabi_atexit>
    8756:	nop
    8758:	.word	0x1fff0970
    875c:	.word	0x00000789
    8760:	.word	0x20006ad4

00008764 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    8764:	ldr	r2, [pc, #8]	; (8770 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    8766:	ldr	r1, [pc, #12]	; (8774 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    8768:	ldr	r0, [pc, #12]	; (8778 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    876a:	b.w	fb40 <__aeabi_atexit>
    876e:	nop
    8770:	.word	0x1fff0970
    8774:	.word	0x00000789
    8778:	.word	0x20006adc

0000877c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    877c:	ldr	r2, [pc, #8]	; (8788 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    877e:	ldr	r1, [pc, #12]	; (878c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    8780:	ldr	r0, [pc, #12]	; (8790 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    8782:	b.w	fb40 <__aeabi_atexit>
    8786:	nop
    8788:	.word	0x1fff0970
    878c:	.word	0x00000789
    8790:	.word	0x20006ae4

00008794 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    8794:	ldr	r2, [pc, #8]	; (87a0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    8796:	ldr	r1, [pc, #12]	; (87a4 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    8798:	ldr	r0, [pc, #12]	; (87a8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    879a:	b.w	fb40 <__aeabi_atexit>
    879e:	nop
    87a0:	.word	0x1fff0970
    87a4:	.word	0x00000789
    87a8:	.word	0x20006aec

000087ac <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    87ac:	ldrb.w	r2, [r0, #57]	; 0x39
    87b0:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    87b4:	subs	r0, r2, r0
    87b6:	bx	lr

000087b8 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    87b8:	ldrb.w	r3, [r0, #56]	; 0x38
    87bc:	ldrb.w	r2, [r0, #57]	; 0x39
    87c0:	cmp	r2, r3
    87c2:	bls.n	87d0 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    87c4:	adds	r2, r3, #1
    87c6:	add	r3, r0
    87c8:	strb.w	r2, [r0, #56]	; 0x38
    87cc:	ldrb	r0, [r3, #24]
    87ce:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    87d0:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    87d4:	bx	lr
    87d6:	nop

000087d8 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    87d8:	ldrb.w	r3, [r0, #56]	; 0x38
    87dc:	ldrb.w	r2, [r0, #57]	; 0x39
    87e0:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    87e2:	itte	hi
    87e4:	addhi	r3, r3, r0
    87e6:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    87e8:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    87ec:	bx	lr
    87ee:	nop

000087f0 <TwoWire::flush()>:
	virtual void flush(void) {
    87f0:	bx	lr
    87f2:	nop

000087f4 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    87f4:	push	{r3, r4, r5, lr}
    87f6:	mov	r5, r0
	if (transmitting || slave_mode) {
    87f8:	ldrh.w	r0, [r0, #94]	; 0x5e
    87fc:	cbz	r0, 8824 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    87fe:	ldrb.w	r3, [r5, #93]	; 0x5d
    8802:	mov	r4, r2
    8804:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    8808:	cmp	r4, r2
    880a:	bhi.n	8826 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    880c:	add.w	r0, r5, #59	; 0x3b
    8810:	add	r0, r3
    8812:	mov	r2, r4
    8814:	bl	db90 <memcpy>
		txBufferLength += quantity;
    8818:	ldrb.w	r3, [r5, #93]	; 0x5d
    881c:	add	r3, r4
    881e:	strb.w	r3, [r5, #93]	; 0x5d
    8822:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    8824:	pop	{r3, r4, r5, pc}
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    8826:	movs	r0, #1
    8828:	mov	r4, r2
    882a:	strb	r0, [r5, #4]
    882c:	b.n	880c <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    882e:	nop

00008830 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    8830:	ldrh.w	r3, [r0, #94]	; 0x5e
    8834:	cbz	r3, 8852 <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    8836:	ldrb.w	r3, [r0, #93]	; 0x5d
    883a:	cmp	r3, #32
    883c:	bhi.n	884e <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    883e:	adds	r2, r0, r3
    8840:	adds	r3, #1
    8842:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    8846:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    8848:	strb.w	r1, [r2, #59]	; 0x3b
    884c:	bx	lr
    884e:	movs	r3, #1
    8850:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    8852:	movs	r0, #0
    8854:	bx	lr
    8856:	nop

00008858 <TwoWire::begin()>:
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    8858:	movs	r3, #0
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    885a:	ldr	r2, [r0, #20]
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    885c:	strb.w	r3, [r0, #56]	; 0x38
	rxBufferLength = 0;
    8860:	strb.w	r3, [r0, #57]	; 0x39
	txBufferIndex = 0;
    8864:	strb.w	r3, [r0, #92]	; 0x5c
	txBufferLength = 0;
    8868:	strb.w	r3, [r0, #93]	; 0x5d
	transmitting = 0;
    886c:	strb.w	r3, [r0, #94]	; 0x5e
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
    8870:	strb.w	r3, [r0, #95]	; 0x5f
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    8874:	ldmia	r2, {r1, r2}

void sda_rising_isr0(void);
void sda_rising_isr1(void);

void TwoWire::begin(void)
{
    8876:	push	{r4, r5}
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    8878:	ldr	r5, [r1, #0]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    887a:	ldr	r4, [r0, #16]
	rxBufferIndex = 0;
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
    887c:	str	r3, [r0, #100]	; 0x64
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    887e:	orrs	r2, r5
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
    8880:	str	r3, [r0, #104]	; 0x68
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    8882:	str	r2, [r1, #0]
	port().C1 = 0;
    8884:	strb	r3, [r4, #2]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8886:	ldr	r2, [r0, #20]
    8888:	ldrb.w	r3, [r0, #97]	; 0x61
    888c:	ldr	r1, [pc, #88]	; (88e8 <TwoWire::begin()+0x90>)
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    888e:	ldr	r4, [r2, #0]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8890:	add	r3, r2
    8892:	ldrb	r5, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8894:	ldrb	r3, [r3, #13]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8896:	add.w	r5, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    889a:	lsls	r3, r3, #8
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    889c:	ldr	r5, [r5, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    889e:	and.w	r3, r3, #1792	; 0x700
    88a2:	orr.w	r3, r3, #100	; 0x64
    88a6:	str	r3, [r5, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    88a8:	ldrb.w	r3, [r0, #98]	; 0x62
    88ac:	add	r3, r2
    88ae:	ldrb	r5, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    88b0:	ldrb	r3, [r3, #23]
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    88b2:	add.w	r1, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    88b6:	lsls	r3, r3, #8
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    88b8:	ldr	r1, [r1, #4]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    88ba:	and.w	r3, r3, #1792	; 0x700
    88be:	orr.w	r3, r3, #100	; 0x64
    88c2:	str	r3, [r1, #0]
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    88c4:	ldr	r1, [r4, #0]
    88c6:	ldr	r3, [r2, #4]
    88c8:	tst	r1, r3
    88ca:	beq.n	88d8 <TwoWire::begin()+0x80>
    88cc:	ldr	r3, [r0, #16]
		port().F = 0x12; // 938 kHz
	}
	port().FLT = 4;
#elif F_BUS == 56000000
	if (frequency < 400000) {
		port().F = 0x2B;	// 109 kHz
    88ce:	movs	r2, #43	; 0x2b
    88d0:	strb	r2, [r3, #1]
    88d2:	ldr	r3, [r0, #16]
	} else if (frequency < 1000000) {
		port().F = 0x1C; // 389 kHz
	} else {
		port().F = 0x0E; // 1 MHz
	}
	port().FLT = 4;
    88d4:	movs	r2, #4
    88d6:	strb	r2, [r3, #6]
    88d8:	ldr	r3, [r0, #16]
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	setClock(100000);
	port().C2 = I2C_C2_HDRS;
    88da:	movs	r2, #32
    88dc:	strb	r2, [r3, #5]
    88de:	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
    88e0:	movs	r2, #128	; 0x80
    88e2:	strb	r2, [r3, #2]
	//pinMode(3, OUTPUT);
	//pinMode(4, OUTPUT);
}
    88e4:	pop	{r4, r5}
    88e6:	bx	lr
    88e8:	.word	0x00015310

000088ec <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    88ec:	push	{r3, r4, r5, lr}
    88ee:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    88f0:	ldrb	r4, [r2, #3]
    88f2:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    88f4:	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    88f6:	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    88f8:	bpl.n	8944 <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    88fa:	movs	r3, #16
    88fc:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    88fe:	lsls	r3, r4, #25
    8900:	bpl.n	8942 <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    8902:	and.w	r4, r4, #4
    8906:	and.w	r3, r4, #255	; 0xff
    890a:	cmp	r4, #0
    890c:	beq.n	89c4 <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    890e:	ldr	r1, [pc, #264]	; (8a18 <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    8910:	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    8912:	movs	r3, #0
    8914:	strb	r3, [r1, #0]
			txBufferLength = 0;
    8916:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    891a:	cmp	r2, #0
    891c:	beq.n	89ec <TwoWire::isr()+0x100>
				user_onRequest();
    891e:	blx	r2
			}
			if (txBufferLength == 0) {
    8920:	ldrb.w	r3, [r5, #93]	; 0x5d
    8924:	cmp	r3, #0
    8926:	beq.n	89ec <TwoWire::isr()+0x100>
    8928:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    892a:	movs	r2, #208	; 0xd0
    892c:	strb	r2, [r3, #2]
    892e:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    8930:	ldrb.w	r2, [r5, #59]	; 0x3b
    8934:	strb	r2, [r3, #4]
    8936:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    8938:	movs	r2, #1
    893a:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    893e:	movs	r2, #2
    8940:	strb	r2, [r3, #3]
    8942:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    8944:	and.w	r3, r4, #64	; 0x40
    8948:	and.w	r0, r3, #255	; 0xff
    894c:	cmp	r3, #0
    894e:	bne.n	8902 <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    8950:	ldrb	r3, [r2, #6]
    8952:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    8954:	and.w	r1, r3, #96	; 0x60
    8958:	cmp	r1, #96	; 0x60
    895a:	beq.n	89fa <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    895c:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    895e:	and.w	r3, r3, #16
    8962:	and.w	r1, r3, #255	; 0xff
    8966:	cbz	r3, 8996 <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    8968:	ands.w	r4, r4, #1
    896c:	bne.n	89de <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    896e:	ldrb.w	r3, [r5, #92]	; 0x5c
    8972:	ldrb.w	r1, [r5, #93]	; 0x5d
    8976:	cmp	r1, r3
    8978:	bls.n	8a12 <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    897a:	adds	r1, r3, #1
    897c:	add	r3, r5
    897e:	strb.w	r1, [r5, #92]	; 0x5c
    8982:	ldrb.w	r3, [r3, #59]	; 0x3b
    8986:	strb	r3, [r2, #4]
    8988:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    898a:	movs	r2, #208	; 0xd0
    898c:	strb	r2, [r3, #2]
    898e:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    8990:	movs	r2, #2
    8992:	strb	r2, [r3, #3]
    8994:	b.n	8942 <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    8996:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    899a:	ldrb	r3, [r2, #6]
    899c:	orr.w	r3, r3, #32
    89a0:	strb	r3, [r2, #6]
    89a2:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    89a4:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    89a8:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    89aa:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    89ac:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    89ae:	bhi.n	893e <TwoWire::isr()+0x52>
    89b0:	ldr	r0, [pc, #100]	; (8a18 <TwoWire::isr()+0x12c>)
    89b2:	ldrb	r0, [r0, #0]
    89b4:	cmp	r0, #0
    89b6:	beq.n	893e <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    89b8:	adds	r0, r5, r1
    89ba:	adds	r1, #1
    89bc:	strb.w	r1, [r5, #57]	; 0x39
    89c0:	strb	r2, [r0, #24]
    89c2:	b.n	893e <TwoWire::isr()+0x52>
    89c4:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    89c6:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    89ca:	movs	r3, #192	; 0xc0
    89cc:	strb	r3, [r2, #2]
    89ce:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    89d0:	ldr	r2, [pc, #68]	; (8a18 <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    89d2:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    89d4:	movs	r1, #1
    89d6:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    89d8:	movs	r2, #2
    89da:	strb	r2, [r3, #3]
    89dc:	b.n	8942 <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    89de:	movs	r3, #192	; 0xc0
    89e0:	strb	r3, [r2, #2]
    89e2:	ldr	r3, [r5, #16]
			data = port().D;
    89e4:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    89e6:	movs	r2, #2
    89e8:	strb	r2, [r3, #3]
    89ea:	b.n	8942 <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    89ec:	movs	r2, #1
				txBuffer[0] = 0;
    89ee:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    89f0:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    89f4:	strb.w	r3, [r5, #59]	; 0x3b
    89f8:	b.n	8928 <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    89fa:	and.w	r3, r3, #223	; 0xdf
    89fe:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    8a00:	ldr	r3, [r5, #104]	; 0x68
    8a02:	cbz	r3, 8a0e <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    8a04:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    8a08:	ldrb.w	r0, [r5, #57]	; 0x39
    8a0c:	blx	r3
    8a0e:	ldr	r2, [r5, #16]
    8a10:	b.n	895c <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    8a12:	strb	r4, [r2, #4]
    8a14:	b.n	8988 <TwoWire::isr()+0x9c>
    8a16:	nop
    8a18:	.word	0x20006af4

00008a1c <TwoWire::wait_idle()>:
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    8a1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8a20:	ldr	r7, [pc, #220]	; (8b00 <L_1438_delayMicroseconds+0x18>)
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8a22:	ldr.w	r9, [pc, #224]	; 8b04 <L_1438_delayMicroseconds+0x1c>
    8a26:	ldr	r3, [r7, #0]
    8a28:	ldr	r2, [r0, #16]
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    8a2a:	sub	sp, #8
    8a2c:	mov	r6, r0
    8a2e:	str	r3, [sp, #0]
	return ret;
    8a30:	ldr.w	r8, [sp]
	bool reset=false;
    8a34:	movs	r1, #0
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    8a36:	mov.w	r5, #280	; 0x118
	uint8_t i2c_status(void) {
		return port().S;
    8a3a:	ldrb	r3, [r2, #3]
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    8a3c:	lsls	r3, r3, #26
    8a3e:	bpl.n	8af8 <L_1438_delayMicroseconds+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8a40:	ldr	r3, [r7, #0]
    8a42:	str	r3, [sp, #4]
	return ret;
    8a44:	ldr	r3, [sp, #4]
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
    8a46:	rsb	r3, r8, r3
#if 1
		if (waited > 15 && !reset) {
    8a4a:	cmp	r3, #15
    8a4c:	bls.n	8a3a <TwoWire::wait_idle()+0x1e>
    8a4e:	cbz	r1, 8a64 <TwoWire::wait_idle()+0x48>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
    8a50:	cmp	r3, #16
    8a52:	beq.n	8a3a <TwoWire::wait_idle()+0x1e>
			// bus stuck busy too long
			port().C1 = 0;
    8a54:	movs	r0, #0
    8a56:	strb	r0, [r2, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8a58:	ldr	r3, [r6, #16]
			port().C1 = I2C_C1_IICEN;
    8a5a:	movs	r2, #128	; 0x80
    8a5c:	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
    8a5e:	add	sp, #8
    8a60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
    8a64:	ldr	r2, [r6, #20]
    8a66:	ldrb.w	r3, [r6, #97]	; 0x61
    8a6a:	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
    8a6c:	movs	r1, #5
    8a6e:	ldrb	r0, [r3, #8]
    8a70:	bl	e708 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    8a74:	ldr	r2, [r6, #20]
    8a76:	ldrb.w	r3, [r6, #97]	; 0x61
    8a7a:	add	r3, r2
			pinMode(scl_pin, OUTPUT);
    8a7c:	movs	r1, #1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    8a7e:	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
    8a82:	mov	r0, sl
    8a84:	bl	e708 <pinMode>
    8a88:	movs	r4, #9
			for (int i=0; i < 9; i++) {
				digitalWrite(scl_pin, LOW);
    8a8a:	movs	r1, #0
    8a8c:	mov	r0, sl
    8a8e:	bl	e6fc <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    8a92:	mov	r3, r5

00008a94 <L_1373_delayMicroseconds>:
    8a94:	subs	r3, #1
    8a96:	bne.n	8a94 <L_1373_delayMicroseconds>
				delayMicroseconds(5);
				digitalWrite(scl_pin, HIGH);
    8a98:	movs	r1, #1
    8a9a:	mov	r0, sl
    8a9c:	bl	e6fc <digitalWrite>
    8aa0:	mov	r3, r5

00008aa2 <L_1387_delayMicroseconds>:
    8aa2:	subs	r3, #1
    8aa4:	bne.n	8aa2 <L_1387_delayMicroseconds>
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
			pinMode(scl_pin, OUTPUT);
			for (int i=0; i < 9; i++) {
    8aa6:	subs	r4, #1
    8aa8:	bne.n	8a8a <TwoWire::wait_idle()+0x6e>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8aaa:	ldr	r0, [r6, #20]
    8aac:	ldrb.w	r1, [r6, #97]	; 0x61
    8ab0:	add	r1, r0
    8ab2:	mov.w	r2, #560	; 0x230
    8ab6:	ldrb	r4, [r1, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8ab8:	ldrb	r3, [r1, #13]
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8aba:	add.w	r1, r9, r4, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8abe:	lsls	r3, r3, #8
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8ac0:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8ac2:	and.w	r3, r3, #1792	; 0x700
    8ac6:	orr.w	r3, r3, #100	; 0x64
    8aca:	str	r3, [r1, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8acc:	ldrb.w	r3, [r6, #98]	; 0x62
    8ad0:	add	r3, r0
    8ad2:	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8ad4:	ldrb	r3, [r3, #23]
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8ad6:	add.w	r1, r9, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8ada:	lsls	r3, r3, #8
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8adc:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8ade:	and.w	r3, r3, #1792	; 0x700
    8ae2:	orr.w	r3, r3, #100	; 0x64
    8ae6:	str	r3, [r1, #0]

00008ae8 <L_1438_delayMicroseconds>:
    8ae8:	subs	r2, #1
    8aea:	bne.n	8ae8 <L_1438_delayMicroseconds>
    8aec:	ldr	r2, [r6, #16]
	uint8_t i2c_status(void) {
		return port().S;
    8aee:	ldrb	r3, [r2, #3]
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    8af0:	lsls	r3, r3, #26
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
    8af2:	mov.w	r1, #1
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    8af6:	bmi.n	8a40 <TwoWire::wait_idle()+0x24>
			//Serial.println("abort");
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
    8af8:	movs	r0, #1
}
    8afa:	add	sp, #8
    8afc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b00:	.word	0x2000701c
    8b04:	.word	0x00015310

00008b08 <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    8b08:	push	{r4, r5, r6, r7, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8b0a:	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    8b0c:	movs	r2, #18
    8b0e:	strb	r2, [r3, #3]
    8b10:	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8b12:	ldrb	r3, [r2, #2]
    8b14:	and.w	r3, r3, #32
	}
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    8b18:	sub	sp, #20
    8b1a:	mov	r4, r0
    8b1c:	mov	r5, r1
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8b1e:	cmp	r3, #0
    8b20:	beq.n	8be0 <TwoWire::endTransmission(unsigned char)+0xd8>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    8b22:	movs	r3, #180	; 0xb4
    8b24:	strb	r3, [r2, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8b26:	ldr	r1, [pc, #240]	; (8c18 <TwoWire::endTransmission(unsigned char)+0x110>)
    8b28:	ldr	r2, [r4, #16]
    8b2a:	ldr	r3, [r1, #0]
    8b2c:	str	r3, [sp, #0]
	return ret;
    8b2e:	ldr	r6, [sp, #0]
    8b30:	b.n	8b3e <TwoWire::endTransmission(unsigned char)+0x36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8b32:	ldr	r3, [r1, #0]
    8b34:	str	r3, [sp, #4]
	return ret;
    8b36:	ldr	r3, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
    8b38:	subs	r3, r3, r6
    8b3a:	cmp	r3, #4
    8b3c:	bhi.n	8bc4 <TwoWire::endTransmission(unsigned char)+0xbc>
	uint8_t i2c_status(void) {
		return port().S;
    8b3e:	ldrb	r3, [r2, #3]
	}
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    8b40:	and.w	r3, r3, #32
    8b44:	and.w	r0, r3, #255	; 0xff
    8b48:	cmp	r3, #0
    8b4a:	beq.n	8b32 <TwoWire::endTransmission(unsigned char)+0x2a>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    8b4c:	ldrb.w	r3, [r4, #93]	; 0x5d
    8b50:	cmp	r3, #0
    8b52:	beq.n	8bb8 <TwoWire::endTransmission(unsigned char)+0xb0>
    8b54:	mov.w	lr, #0
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    8b58:	mov.w	ip, #2
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
		port().D = txBuffer[i];
    8b5c:	add.w	r3, r4, lr
    8b60:	ldrb.w	r3, [r3, #59]	; 0x3b
    8b64:	strb	r3, [r2, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8b66:	ldr	r3, [r1, #0]
    8b68:	str	r3, [sp, #12]
	return ret;
    8b6a:	ldr	r7, [sp, #12]
    8b6c:	ldr	r0, [r4, #16]
    8b6e:	b.n	8b80 <TwoWire::endTransmission(unsigned char)+0x78>
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
    8b70:	lsls	r3, r3, #26
    8b72:	bpl.n	8b90 <TwoWire::endTransmission(unsigned char)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8b74:	ldr	r3, [r1, #0]
    8b76:	str	r3, [sp, #8]
	return ret;
    8b78:	ldr	r3, [sp, #8]
			if (millis() - wait_begin > 5) {
    8b7a:	subs	r3, r3, r7
    8b7c:	cmp	r3, #5
    8b7e:	bhi.n	8bd2 <TwoWire::endTransmission(unsigned char)+0xca>
    8b80:	ldrb	r3, [r0, #3]
    8b82:	uxtb	r3, r3
		port().D = txBuffer[i];
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
    8b84:	and.w	r2, r3, #2
    8b88:	and.w	r6, r2, #255	; 0xff
    8b8c:	cmp	r2, #0
    8b8e:	beq.n	8b70 <TwoWire::endTransmission(unsigned char)+0x68>
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    8b90:	strb.w	ip, [r0, #3]
    8b94:	ldr	r6, [r4, #16]
    8b96:	ldrb	r3, [r6, #3]
    8b98:	uxtb	r3, r3
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
    8b9a:	lsls	r7, r3, #27
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8b9c:	mov	r2, r6
    8b9e:	bmi.n	8bfc <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
    8ba0:	lsls	r7, r3, #26
    8ba2:	bpl.n	8bfc <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
    8ba4:	lsls	r3, r3, #31
    8ba6:	bmi.n	8c0c <TwoWire::endTransmission(unsigned char)+0x104>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    8ba8:	add.w	lr, lr, #1
    8bac:	ldrb.w	r3, [r4, #93]	; 0x5d
    8bb0:	uxtb.w	lr, lr
    8bb4:	cmp	r3, lr
    8bb6:	bhi.n	8b5c <TwoWire::endTransmission(unsigned char)+0x54>
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	uint8_t i, status, ret=0;
    8bb8:	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
    8bba:	cbnz	r5, 8c04 <TwoWire::endTransmission(unsigned char)+0xfc>
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
    8bbc:	movs	r3, #0
    8bbe:	strb.w	r3, [r4, #94]	; 0x5e
    8bc2:	b.n	8bce <TwoWire::endTransmission(unsigned char)+0xc6>
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    8bc4:	strb	r0, [r2, #2]
    8bc6:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    8bc8:	movs	r2, #128	; 0x80
    8bca:	strb	r2, [r3, #2]
			//Serial.println("abort2");
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
    8bcc:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8bce:	add	sp, #20
    8bd0:	pop	{r4, r5, r6, r7, pc}
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    8bd2:	strb	r6, [r0, #2]
    8bd4:	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
    8bd6:	movs	r2, #128	; 0x80
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
    8bd8:	movs	r0, #4
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
				port().C1 = I2C_C1_IICEN;
    8bda:	strb	r2, [r3, #2]
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8bdc:	add	sp, #20
    8bde:	pop	{r4, r5, r6, r7, pc}
    8be0:	and.w	r6, r3, #255	; 0xff
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    8be4:	bl	8a1c <TwoWire::wait_idle()>
    8be8:	cbnz	r0, 8bf0 <TwoWire::endTransmission(unsigned char)+0xe8>
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
    8bea:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8bec:	add	sp, #20
    8bee:	pop	{r4, r5, r6, r7, pc}
    8bf0:	ldr	r3, [r4, #16]
		if (!wait_idle()) {
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    8bf2:	strb.w	r6, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8bf6:	movs	r2, #176	; 0xb0
    8bf8:	strb	r2, [r3, #2]
    8bfa:	b.n	8b26 <TwoWire::endTransmission(unsigned char)+0x1e>
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
			// suddenly lost control of the bus!
			port().C1 = I2C_C1_IICEN;
    8bfc:	movs	r3, #128	; 0x80
    8bfe:	strb	r3, [r6, #2]
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
    8c00:	movs	r0, #4
    8c02:	b.n	8bba <TwoWire::endTransmission(unsigned char)+0xb2>
    8c04:	ldr	r6, [r4, #16]
			break;
		}
	}
	if (sendStop) {
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
    8c06:	movs	r3, #128	; 0x80
    8c08:	strb	r3, [r6, #2]
    8c0a:	b.n	8bbc <TwoWire::endTransmission(unsigned char)+0xb4>
			if (i == 0) {
				//Serial.printf("endTransmission err6\n");
				ret = 2; // 2:received NACK on transmit of address
			} else {
				//Serial.printf("endTransmission err7\n");
				ret = 3; // 3:received NACK on transmit of data 
    8c0c:	cmp.w	lr, #0
    8c10:	ite	eq
    8c12:	moveq	r0, #2
    8c14:	movne	r0, #3
    8c16:	b.n	8c06 <TwoWire::endTransmission(unsigned char)+0xfe>
    8c18:	.word	0x2000701c

00008c1c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    8c1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c20:	ldr	r6, [r0, #16]
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    8c22:	movs	r5, #0
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    8c24:	movs	r7, #18
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    8c26:	strb.w	r5, [r0, #56]	; 0x38
	rxBufferLength = 0;
    8c2a:	strb.w	r5, [r0, #57]	; 0x39
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    8c2e:	strb	r7, [r6, #3]
    8c30:	ldr.w	ip, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8c34:	ldrb.w	lr, [ip, #2]
    8c38:	and.w	lr, lr, #32
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    8c3c:	sub	sp, #32
    8c3e:	mov	r4, r0
    8c40:	mov	r8, r1
    8c42:	mov	r5, r2
    8c44:	mov	r6, r3
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    8c46:	cmp.w	lr, #0
    8c4a:	beq.n	8ce0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc4>
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    8c4c:	movs	r3, #180	; 0xb4
    8c4e:	strb.w	r3, [ip, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c52:	ldr	r3, [pc, #488]	; (8e3c <L_2952_delayMicroseconds+0x1e>)
    8c54:	ldr	r1, [r4, #16]
    8c56:	ldr	r2, [r3, #0]
    8c58:	str	r2, [sp, #0]
	return ret;
    8c5a:	ldr.w	lr, [sp]
    8c5e:	b.n	8c6e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x52>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c60:	ldr	r2, [r3, #0]
    8c62:	str	r2, [sp, #4]
	return ret;
    8c64:	ldr	r0, [sp, #4]
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
    8c66:	rsb	r0, lr, r0
    8c6a:	cmp	r0, #4
    8c6c:	bhi.n	8cd0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
	uint8_t i2c_status(void) {
		return port().S;
    8c6e:	ldrb	r0, [r1, #3]
    8c70:	and.w	r0, r0, #32

	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    8c74:	and.w	r7, r0, #255	; 0xff
    8c78:	cmp	r0, #0
    8c7a:	beq.n	8c60 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
			//Serial.printf("requestFrom err2\n");
			return 0; // error generating start condition
		}
	}
	// send the address
	port().D = (address << 1) | 1;
    8c7c:	mov.w	r2, r8, lsl #1
    8c80:	orr.w	r2, r2, #1
    8c84:	uxtb	r2, r2
    8c86:	strb	r2, [r1, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c88:	ldr	r2, [r3, #0]
    8c8a:	str	r2, [sp, #8]
	return ret;
    8c8c:	ldr.w	lr, [sp, #8]
    8c90:	ldr	r0, [r4, #16]
    8c92:	b.n	8ca2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c94:	ldr	r2, [r3, #0]
    8c96:	str	r2, [sp, #12]
	return ret;
    8c98:	ldr	r1, [sp, #12]
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
    8c9a:	rsb	r1, lr, r1
    8c9e:	cmp	r1, #5
    8ca0:	bhi.n	8cf8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xdc>
		}
	}
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    8ca2:	ldrb	r1, [r0, #3]
    8ca4:	and.w	r1, r1, #2
    8ca8:	and.w	r7, r1, #255	; 0xff
    8cac:	cmp	r1, #0
    8cae:	beq.n	8c94 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("requestFrom err3\n");
			return 0; // clock stretch too long (during address)
		}
	}
	port().S = I2C_S_IICIF;
    8cb0:	mov.w	ip, #2
    8cb4:	strb.w	ip, [r0, #3]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8cb8:	ldr	r2, [r4, #16]
	uint8_t i2c_status(void) {
		return port().S;
    8cba:	ldrb	r1, [r2, #3]
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
    8cbc:	ands.w	r7, r1, #17
    8cc0:	bne.n	8d08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
		//Serial.printf("requestFrom err4\n");
		return 0;
	}
	if (length == 0) {
    8cc2:	cbnz	r5, 8d10 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf4>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
    8cc4:	cmp	r6, #0
    8cc6:	ite	eq
    8cc8:	moveq	r3, #160	; 0xa0
    8cca:	movne	r3, #128	; 0x80
    8ccc:	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err5\n");
		return 0;
    8cce:	b.n	8cd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    8cd0:	strb	r7, [r1, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8cd2:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    8cd4:	movs	r2, #128	; 0x80
    8cd6:	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    8cd8:	mov	r0, r7
    8cda:	add	sp, #32
    8cdc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ce0:	and.w	r7, lr, #255	; 0xff
	if (port().C1 & I2C_C1_MST) {
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    8ce4:	bl	8a1c <TwoWire::wait_idle()>
    8ce8:	cmp	r0, #0
    8cea:	beq.n	8cd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    8cec:	ldr	r3, [r4, #16]
			//Serial.printf("requestFrom err1\n");
			return 0; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    8cee:	strb.w	r7, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8cf2:	movs	r2, #176	; 0xb0
    8cf4:	strb	r2, [r3, #2]
    8cf6:	b.n	8c52 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x36>
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
    8cf8:	strb	r7, [r0, #2]
    8cfa:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    8cfc:	movs	r2, #128	; 0x80
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    8cfe:	mov	r0, r7
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
    8d00:	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    8d02:	add	sp, #32
    8d04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	port().S = I2C_S_IICIF;
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
		// the slave device did not acknowledge
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
    8d08:	movs	r3, #128	; 0x80
    8d0a:	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err4\n");
		return 0;
    8d0c:	movs	r7, #0
    8d0e:	b.n	8cd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
    8d10:	cmp	r5, #1
    8d12:	beq.n	8e06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1ea>
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
    8d14:	movs	r1, #160	; 0xa0
    8d16:	strb	r1, [r2, #2]
    8d18:	ldr	r1, [r4, #16]
	}
	tmp = port().D; // initiate the first receive
    8d1a:	ldrb	r2, [r1, #4]
    8d1c:	mov	lr, r7
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
    8d1e:	mov	r7, ip
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8d20:	mov.w	ip, #168	; 0xa8
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8d24:	ldr	r2, [r3, #0]
    8d26:	str	r2, [sp, #16]
	return ret;
    8d28:	ldr	r0, [sp, #16]
    8d2a:	b.n	8d38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8d2c:	ldr	r2, [r3, #0]
    8d2e:	str	r2, [sp, #20]
	return ret;
    8d30:	ldr	r2, [sp, #20]
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
    8d32:	subs	r2, r2, r0
    8d34:	cmp	r2, #5
    8d36:	bhi.n	8dd4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b8>
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
    8d38:	ldrb	r2, [r1, #3]
    8d3a:	and.w	r2, r2, #2
    8d3e:	and.w	r8, r2, #255	; 0xff
    8d42:	cmp	r2, #0
    8d44:	beq.n	8d2c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
    8d46:	strb	r7, [r1, #3]
    8d48:	ldr	r1, [r4, #16]
		status = port().S;
    8d4a:	ldrb	r2, [r1, #3]
    8d4c:	uxtb	r2, r2
		if ((status & I2C_S_ARBL)) {
    8d4e:	tst.w	r2, #16
    8d52:	mov	r0, r1
    8d54:	bne.n	8e12 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f6>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7a\n");
			return count;
		}
		if (!(status & I2C_S_BUSY)) {
    8d56:	lsls	r2, r2, #26
    8d58:	bpl.n	8e12 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f6>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
    8d5a:	subs	r5, #1
    8d5c:	uxtb	r5, r5
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8d5e:	cmp	r5, #1
    8d60:	beq.n	8dfc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1e0>
		if (count < BUFFER_LENGTH) {
    8d62:	cmp.w	lr, #31
    8d66:	bls.n	8de6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1ca>
			rxBuffer[count++] = port().D;
		} else {
			tmp = port().D;
    8d68:	ldrb	r2, [r1, #4]
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
    8d6a:	cmp	r5, #1
    8d6c:	bne.n	8d24 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x108>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8d6e:	ldr	r2, [r3, #0]
    8d70:	str	r2, [sp, #24]
	return ret;
    8d72:	ldr	r5, [sp, #24]
    8d74:	b.n	8d82 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x166>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8d76:	ldr	r2, [r3, #0]
    8d78:	str	r2, [sp, #28]
	return ret;
    8d7a:	ldr	r2, [sp, #28]
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
    8d7c:	subs	r2, r2, r5
    8d7e:	cmp	r2, #5
    8d80:	bhi.n	8e30 <L_2952_delayMicroseconds+0x12>
		} else {
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    8d82:	ldrb	r2, [r0, #3]
    8d84:	and.w	r2, r2, #2
    8d88:	and.w	r1, r2, #255	; 0xff
    8d8c:	cmp	r2, #0
    8d8e:	beq.n	8d76 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15a>
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
		}
	}
	port().S = I2C_S_IICIF;
    8d90:	movs	r3, #2
    8d92:	strb	r3, [r0, #3]
    8d94:	ldr	r2, [r4, #16]
	status = port().S;
    8d96:	ldrb	r3, [r2, #3]
    8d98:	uxtb	r3, r3
	if ((status & I2C_S_ARBL)) {
    8d9a:	lsls	r1, r3, #27
    8d9c:	bmi.n	8e16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1fa>
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
		//Serial.printf("requestFrom err9a\n");
		return count;
	}
	if (!(status & I2C_S_BUSY)) {
    8d9e:	lsls	r3, r3, #26
    8da0:	bpl.n	8e12 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f6>
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8da2:	movs	r3, #176	; 0xb0
	if (count < BUFFER_LENGTH) {
    8da4:	cmp.w	lr, #31
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8da8:	strb	r3, [r2, #2]
	if (count < BUFFER_LENGTH) {
    8daa:	bhi.n	8e34 <L_2952_delayMicroseconds+0x16>
    8dac:	ldr	r2, [r4, #16]
		rxBuffer[count++] = port().D;
    8dae:	add.w	r3, r4, lr
    8db2:	ldrb	r2, [r2, #4]
    8db4:	strb	r2, [r3, #24]
    8db6:	add.w	lr, lr, #1
    8dba:	uxtb.w	lr, lr
	} else {
		tmp = port().D;
	}
#if F_CPU > 120000000
	__asm__("nop");
    8dbe:	nop
	__asm__("nop");
    8dc0:	nop
	__asm__("nop");
    8dc2:	nop
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
    8dc4:	cbz	r6, 8dcc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b0>
    8dc6:	ldr	r3, [r4, #16]
    8dc8:	movs	r2, #128	; 0x80
    8dca:	strb	r2, [r3, #2]
	rxBufferLength = count;
    8dcc:	strb.w	lr, [r4, #57]	; 0x39
	return count;
    8dd0:	mov	r7, lr
    8dd2:	b.n	8cd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    8dd4:	strb.w	r8, [r1, #2]
    8dd8:	ldr	r3, [r4, #16]
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
    8dda:	movs	r2, #128	; 0x80
    8ddc:	strb	r2, [r3, #2]
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
    8dde:	mov	r7, lr
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
			rxBufferLength = count;
    8de0:	strb.w	lr, [r4, #57]	; 0x39
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
    8de4:	b.n	8cd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
		if (count < BUFFER_LENGTH) {
			rxBuffer[count++] = port().D;
    8de6:	add.w	r2, r4, lr
    8dea:	ldrb.w	r8, [r1, #4]
    8dee:	strb.w	r8, [r2, #24]
    8df2:	add.w	lr, lr, #1
    8df6:	uxtb.w	lr, lr
    8dfa:	b.n	8d6a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x14e>
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8dfc:	strb.w	ip, [r1, #2]
    8e00:	ldr	r1, [r4, #16]
    8e02:	mov	r0, r1
    8e04:	b.n	8d62 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x146>
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    8e06:	movs	r1, #168	; 0xa8
    8e08:	strb	r1, [r2, #2]
    8e0a:	ldr	r0, [r4, #16]


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
    8e0c:	mov	lr, r7
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
    8e0e:	ldrb	r2, [r0, #4]
    8e10:	b.n	8d6e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x152>
    8e12:	mov	r7, lr
    8e14:	b.n	8cd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	if ((status & I2C_S_ARBL)) {
		// we lost bus arbitration to another master
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
    8e16:	movs	r1, #16
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    8e18:	mov.w	r3, #280	; 0x118
    8e1c:	strb	r1, [r2, #3]

00008e1e <L_2952_delayMicroseconds>:
    8e1e:	subs	r3, #1
    8e20:	bne.n	8e1e <L_2952_delayMicroseconds>
    8e22:	ldr	r2, [r4, #16]
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
    8e24:	ldrb	r3, [r2, #2]
    8e26:	and.w	r3, r3, #247	; 0xf7
		//Serial.printf("requestFrom err9a\n");
		return count;
    8e2a:	mov	r7, lr
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
    8e2c:	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err9a\n");
		return count;
    8e2e:	b.n	8cd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
    8e30:	strb	r1, [r0, #2]
    8e32:	b.n	8dd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1bc>
    8e34:	ldr	r3, [r4, #16]
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
	if (count < BUFFER_LENGTH) {
		rxBuffer[count++] = port().D;
	} else {
		tmp = port().D;
    8e36:	ldrb	r3, [r3, #4]
    8e38:	b.n	8dbe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1a2>
    8e3a:	nop
    8e3c:	.word	0x2000701c

00008e40 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    8e40:	ldr	r0, [pc, #4]	; (8e48 <i2c0_isr+0x8>)
    8e42:	b.w	88ec <TwoWire::isr()>
    8e46:	nop
    8e48:	.word	0x1fff0a84

00008e4c <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    8e4c:	ldr	r0, [pc, #4]	; (8e54 <i2c1_isr+0x8>)
    8e4e:	b.w	88ec <TwoWire::isr()>
    8e52:	nop
    8e54:	.word	0x1fff0af0

00008e58 <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    8e58:	ldr	r0, [pc, #4]	; (8e60 <i2c2_isr+0x8>)
    8e5a:	b.w	88ec <TwoWire::isr()>
    8e5e:	nop
    8e60:	.word	0x1fff0a18

00008e64 <FsCache::sync() [clone .part.0]>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    8e64:	push	{r3, r4, r5, r6, r7, lr}
    8e66:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    8e68:	add.w	r6, r0, #16
    8e6c:	ldr	r0, [r0, #4]
    8e6e:	ldr	r1, [r4, #12]
    8e70:	ldr	r3, [r0, #0]
    8e72:	mov	r2, r6
    8e74:	ldr	r3, [r3, #28]
    8e76:	blx	r3
    8e78:	cbz	r0, 8e8c <FsCache::sync() [clone .part.0]+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    8e7a:	ldrb	r3, [r4, #0]
    8e7c:	lsls	r2, r3, #30
    8e7e:	mov	r5, r0
    8e80:	bmi.n	8e92 <FsCache::sync() [clone .part.0]+0x2e>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    8e82:	bic.w	r3, r3, #1
    8e86:	strb	r3, [r4, #0]
  }
  return true;

 fail:
  return false;
}
    8e88:	mov	r0, r5
    8e8a:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    8e8c:	movs	r5, #0
}
    8e8e:	mov	r0, r5
    8e90:	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    8e92:	ldr	r0, [r4, #4]
    8e94:	ldr	r1, [r4, #12]
    8e96:	ldr	r2, [r0, #0]
    8e98:	ldr	r3, [r4, #8]
    8e9a:	ldr	r7, [r2, #28]
    8e9c:	add	r1, r3
    8e9e:	mov	r2, r6
    8ea0:	blx	r7
    8ea2:	cmp	r0, #0
    8ea4:	beq.n	8e8c <FsCache::sync() [clone .part.0]+0x28>
    8ea6:	ldrb	r3, [r4, #0]
    8ea8:	b.n	8e82 <FsCache::sync() [clone .part.0]+0x1e>
    8eaa:	nop

00008eac <FsCache::get(unsigned long, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    8eac:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    8eae:	ldr	r5, [r0, #4]
    8eb0:	cbz	r5, 8ef2 <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    8eb2:	ldr	r3, [r0, #12]
    8eb4:	cmp	r3, r1
    8eb6:	mov	r4, r0
    8eb8:	mov	r7, r2
    8eba:	mov	r6, r1
    8ebc:	beq.n	8edc <FsCache::get(unsigned long, unsigned char)+0x30>
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8ebe:	ldrb	r3, [r0, #0]
    8ec0:	lsls	r2, r3, #31
    8ec2:	bmi.n	8eea <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    8ec4:	lsls	r3, r7, #29
    8ec6:	bpl.n	8ef6 <FsCache::get(unsigned long, unsigned char)+0x4a>
    8ec8:	add.w	r5, r4, #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8ecc:	and.w	r2, r7, #3
    8ed0:	movs	r3, #0
    8ed2:	orrs	r3, r2
    8ed4:	strb	r3, [r4, #0]
    8ed6:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    8ed8:	str	r6, [r4, #12]
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
}
    8eda:	pop	{r3, r4, r5, r6, r7, pc}
    8edc:	ldrsb.w	r3, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    8ee0:	and.w	r2, r7, #3
    8ee4:	orrs	r3, r2
    8ee6:	strb	r3, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    8ee8:	pop	{r3, r4, r5, r6, r7, pc}
    8eea:	bl	8e64 <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    8eee:	cmp	r0, #0
    8ef0:	bne.n	8ec4 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    8ef2:	movs	r0, #0
    8ef4:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    8ef6:	ldr	r0, [r4, #4]
    8ef8:	ldr	r3, [r0, #0]
    8efa:	add.w	r5, r4, #16
    8efe:	ldr	r3, [r3, #12]
    8f00:	mov	r2, r5
    8f02:	mov	r1, r6
    8f04:	blx	r3
    8f06:	cmp	r0, #0
    8f08:	bne.n	8ecc <FsCache::get(unsigned long, unsigned char)+0x20>
    8f0a:	b.n	8ef2 <FsCache::get(unsigned long, unsigned char)+0x46>

00008f0c <FsCache::sync()>:
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    8f0c:	ldrb	r3, [r0, #0]
    8f0e:	lsls	r3, r3, #31
    8f10:	bmi.n	8f16 <FsCache::sync()+0xa>
  }
  return true;

 fail:
  return false;
}
    8f12:	movs	r0, #1
    8f14:	bx	lr
    8f16:	b.w	8e64 <FsCache::sync() [clone .part.0]>
    8f1a:	nop

00008f1c <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    8f1c:	push	{r4, lr}
    8f1e:	mov	r4, r0
  bool rtn = sync();
    8f20:	bl	a110 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    8f24:	movs	r3, #0
    8f26:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    8f2a:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    8f2e:	pop	{r4, pc}

00008f30 <ExFatFile::getName(char*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8f30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8f34:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8f38:	mov	r9, r0
    8f3a:	mov	r7, r1
    8f3c:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8f3e:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
    8f42:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    8f44:	ldrb.w	r3, [r9, #49]	; 0x31
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t* name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    8f48:	add	r6, sp, #4
    8f4a:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    8f4e:	cmp	r3, #0
    8f50:	beq.n	8fd0 <ExFatFile::getName(char*, unsigned int)+0xa0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8f52:	ldrb.w	r3, [r9, #48]	; 0x30
    8f56:	cmp	r3, #1
    8f58:	bls.n	8fda <ExFatFile::getName(char*, unsigned int)+0xaa>
    8f5a:	mov.w	r8, #1
    8f5e:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    8f60:	cmp.w	r8, #1
    8f64:	ite	ne
    8f66:	movne	r2, #32
    8f68:	moveq	r2, #64	; 0x40
    8f6a:	mov	r1, r6
    8f6c:	ldr.w	r0, [r9, #32]
    8f70:	bl	9afc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    8f74:	cmp	r0, #1
    8f76:	bne.n	8fd0 <ExFatFile::getName(char*, unsigned int)+0xa0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    8f78:	movs	r2, #0
    8f7a:	mov	r1, r6
    8f7c:	ldr.w	r0, [r9, #32]
    8f80:	bl	9ac8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    8f84:	cbz	r0, 8fd0 <ExFatFile::getName(char*, unsigned int)+0xa0>
    8f86:	ldrb	r3, [r0, #0]
    8f88:	cmp	r3, #193	; 0xc1
    8f8a:	bne.n	8fd0 <ExFatFile::getName(char*, unsigned int)+0xa0>
    8f8c:	adds	r1, r7, r4
    8f8e:	add.w	lr, r4, #15
    8f92:	b.n	8f96 <ExFatFile::getName(char*, unsigned int)+0x66>
    8f94:	mov	r4, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    8f96:	ldrh.w	r3, [r0, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
    8f9a:	adds	r2, r4, #1
    8f9c:	cbz	r3, 8fc4 <ExFatFile::getName(char*, unsigned int)+0x94>
    8f9e:	cmp	r2, r5
    8fa0:	bcs.n	8fc4 <ExFatFile::getName(char*, unsigned int)+0x94>
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    8fa2:	cmp	r3, #126	; 0x7e
    8fa4:	ite	ls
    8fa6:	uxtbls	r3, r3
    8fa8:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    8faa:	cmp	r2, lr
      uint16_t c = getLe16(dn->unicode + 2*in);
      if (c == 0 || (n + 1) >= length) {
        goto done;
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    8fac:	strb.w	r3, [r1], #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    8fb0:	bne.n	8f94 <ExFatFile::getName(char*, unsigned int)+0x64>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8fb2:	add.w	r8, r8, #1
    8fb6:	ldrb.w	r3, [r9, #48]	; 0x30
    8fba:	uxtb.w	r8, r8
    8fbe:	cmp	r3, r8
    8fc0:	mov	r4, r2
    8fc2:	bhi.n	8f60 <ExFatFile::getName(char*, unsigned int)+0x30>
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    8fc4:	movs	r3, #0
  return n;
    8fc6:	mov	r0, r4
      }
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    8fc8:	strb	r3, [r7, r4]
  return n;

 fail:
  *name = 0;
  return 0;
}
    8fca:	add	sp, #20
    8fcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    8fd0:	movs	r0, #0
    8fd2:	strb	r0, [r7, #0]
  return 0;
}
    8fd4:	add	sp, #20
    8fd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    8fda:	movs	r4, #0
    8fdc:	b.n	8fc4 <ExFatFile::getName(char*, unsigned int)+0x94>
    8fde:	nop

00008fe0 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    8fe0:	ldrb.w	r2, [r0, #49]	; 0x31
    8fe4:	cbz	r2, 8fea <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    8fe6:	movs	r0, #0
    8fe8:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    8fea:	push	{r3, r4, r5, lr}
    8fec:	mov	r4, r0
    8fee:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    8ff0:	mov	r1, r2
    8ff2:	movs	r2, #56	; 0x38
    8ff4:	bl	1109c <memset>
  m_attributes = FILE_ATTR_ROOT;
    8ff8:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    8ffa:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    8ffc:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    9000:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    9004:	str	r5, [r4, #32]
    9006:	pop	{r3, r4, r5, pc}

00009008 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    9008:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    900a:	ldrb	r0, [r1, #0]
    900c:	cmp	r0, #32
    900e:	bne.n	9018 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    9010:	ldrb.w	r0, [r1, #1]!
    9014:	cmp	r0, #32
    9016:	beq.n	9010 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    9018:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    901a:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    901c:	cmp	r0, #0
    901e:	beq.n	90c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    9020:	cmp	r0, #47	; 0x2f
    9022:	beq.n	907c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    9024:	cmp	r0, #92	; 0x5c
    9026:	beq.n	906a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    9028:	sub.w	r4, r0, #34	; 0x22
    902c:	uxtb	r4, r4
    902e:	cmp	r4, #29
    9030:	bls.n	906e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    9032:	ldr.w	lr, [pc, #148]	; 90c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    9036:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    9038:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    903a:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    903c:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    9040:	mov	r7, r6
    9042:	beq.n	906a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    9044:	cmp	r5, #94	; 0x5e
    9046:	bhi.n	906a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    9048:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    904c:	sub.w	r5, r0, #34	; 0x22
    9050:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    9052:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    9054:	cbz	r0, 90b6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    9056:	cmp	r0, #47	; 0x2f
    9058:	beq.n	907e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    905a:	cmp	r0, #92	; 0x5c
    905c:	lsr.w	r7, lr, r5
    9060:	beq.n	906a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    9062:	cmp	r5, #29
    9064:	bhi.n	903a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    9066:	lsls	r5, r7, #31
    9068:	bpl.n	903a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    906a:	movs	r0, #0
    906c:	pop	{r4, r5, r6, r7, pc}
    906e:	ldr	r5, [pc, #88]	; (90c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    9070:	lsr.w	r4, r5, r4
    9074:	lsls	r6, r4, #31
    9076:	bpl.n	9032 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    9078:	movs	r0, #0
    907a:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    907c:	movs	r4, #0
    907e:	adds	r7, r1, r4
    9080:	mov	r6, r7
    9082:	mov	r5, r4
    9084:	movs	r0, #47	; 0x2f
    9086:	b.n	908e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    9088:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    908c:	adds	r5, #1
    908e:	cmp	r0, #32
    9090:	beq.n	9088 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    9092:	cmp	r0, #47	; 0x2f
    9094:	beq.n	9088 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    9096:	add	r1, r5
    9098:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    909a:	cbz	r4, 90ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    909c:	mov	r1, r7
    c = path[len - 1];
    909e:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    90a2:	cmp	r3, #46	; 0x2e
    90a4:	beq.n	90aa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    90a6:	cmp	r3, #32
    90a8:	bne.n	90bc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    90aa:	subs	r4, #1
    90ac:	bne.n	909e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    90ae:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    90b0:	str	r0, [r2, #0]
  return true;
    90b2:	movs	r0, #1
    90b4:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    90b6:	str	r7, [r3, #0]
    90b8:	adds	r7, r1, r4
    90ba:	b.n	909c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    90bc:	cmp	r4, #255	; 0xff
    90be:	ble.n	90ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    90c0:	movs	r0, #0
    90c2:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    90c4:	str	r1, [r3, #0]
    90c6:	b.n	90b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    90c8:	.word	0x35000101

000090cc <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    90cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90d0:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    90d4:	lsls	r6, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    90d6:	sub	sp, #12
    90d8:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    90da:	bpl.n	9192 <ExFatFile::read(void*, unsigned int)+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    90dc:	lsls	r5, r3, #25
    90de:	mov	r6, r1
    90e0:	mov	fp, r2
    90e2:	bpl.w	9256 <ExFatFile::read(void*, unsigned int)+0x18a>
    if ((m_curPosition + count) > m_validLength) {
    90e6:	ldrd	r0, r1, [r4]
    90ea:	ldrd	r2, r3, [r4, #16]
    90ee:	adds.w	r8, r0, fp
    90f2:	adc.w	r9, r1, #0
    90f6:	cmp	r3, r9
    90f8:	it	eq
    90fa:	cmpeq	r2, r8
    90fc:	bcc.w	9262 <ExFatFile::read(void*, unsigned int)+0x196>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    9100:	cmp.w	fp, #0
    9104:	beq.n	91e4 <ExFatFile::read(void*, unsigned int)+0x118>
    9106:	mov	r9, r4
    9108:	ldrd	r0, r1, [r9], #24
    910c:	mov	r5, fp
    clusterOffset = m_curPosition & m_vol->clusterMask();
    910e:	ldr	r7, [r4, #32]
    9110:	ldr.w	r3, [r7, #1080]	; 0x438
    9114:	ands	r3, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    9116:	ubfx	sl, r3, #0, #9
    if (clusterOffset == 0) {
    911a:	cmp	r3, #0
    911c:	bne.n	91f0 <ExFatFile::read(void*, unsigned int)+0x124>
      if (m_curPosition == 0) {
    911e:	orrs.w	r2, r0, r1
    9122:	bne.n	9210 <ExFatFile::read(void*, unsigned int)+0x144>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    9124:	ldrb.w	r2, [r4, #49]	; 0x31
    9128:	lsls	r1, r2, #25
    912a:	ite	mi
    912c:	ldrmi.w	r2, [r7, #1076]	; 0x434
    9130:	ldrpl	r2, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    9132:	str	r2, [r4, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    9134:	ldr.w	r0, [r7, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    9138:	ldrb.w	lr, [r7, #1093]	; 0x445
    913c:	lsrs	r3, r3, #9
    913e:	subs	r2, #2
    9140:	adds	r1, r3, r0
    9142:	lsl.w	r2, r2, lr
    9146:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    9148:	cmp.w	sl, #0
    914c:	bne.n	91a8 <ExFatFile::read(void*, unsigned int)+0xdc>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    914e:	cmp.w	r5, #512	; 0x200
    9152:	bcc.n	91a8 <ExFatFile::read(void*, unsigned int)+0xdc>
    9154:	ldr.w	r2, [r7, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    9158:	cmp	r1, r2
    915a:	beq.n	91a8 <ExFatFile::read(void*, unsigned int)+0xdc>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    915c:	cmp.w	r5, #1024	; 0x400
    9160:	bcc.n	921e <ExFatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    9162:	mov.w	r8, #1
    9166:	lsl.w	r8, r8, lr
    916a:	rsb	r3, r3, r8
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    916e:	mov.w	r8, r5, lsr #9
    9172:	cmp	r8, r3
    9174:	it	cs
    9176:	movcs	r8, r3
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    9178:	cmp	r1, r2
    917a:	bhi.n	91f4 <ExFatFile::read(void*, unsigned int)+0x128>
    917c:	add.w	r3, r8, r1
    9180:	cmp	r2, r3
    9182:	bcs.n	91f4 <ExFatFile::read(void*, unsigned int)+0x128>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    9184:	add.w	r0, r7, #528	; 0x210
    9188:	str	r1, [sp, #4]
    918a:	bl	8f0c <FsCache::sync()>
    918e:	ldr	r1, [sp, #4]
    9190:	cbnz	r0, 91f4 <ExFatFile::read(void*, unsigned int)+0x128>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    9192:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    9196:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    919a:	orr.w	r3, r3, #2
    919e:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    91a2:	add	sp, #12
    91a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    91a8:	add.w	r0, r7, #528	; 0x210
    91ac:	movs	r2, #0
    91ae:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    91b2:	cmp	r0, #0
    91b4:	beq.n	9192 <ExFatFile::read(void*, unsigned int)+0xc6>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    91b6:	rsb	r8, sl, #512	; 0x200
    91ba:	cmp	r8, r5
    91bc:	it	cs
    91be:	movcs	r8, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    91c0:	add.w	r1, r0, sl
    91c4:	mov	r2, r8
    91c6:	mov	r0, r6
    91c8:	bl	db90 <memcpy>
    91cc:	mov	r2, r8
    91ce:	movs	r3, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    91d0:	ldrd	r0, r1, [r4]
    91d4:	adds	r0, r0, r2
    91d6:	adcs	r1, r3
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    91d8:	subs.w	r5, r5, r8
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    91dc:	add	r6, r8
    m_curPosition += n;
    91de:	strd	r0, r1, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    91e2:	bne.n	910e <ExFatFile::read(void*, unsigned int)+0x42>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    91e4:	movs	r5, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    91e6:	rsb	r0, r5, fp

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    91ea:	add	sp, #12
    91ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91f0:	ldr	r2, [r4, #24]
    91f2:	b.n	9134 <ExFatFile::read(void*, unsigned int)+0x68>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    91f4:	ldr.w	r0, [r7, #532]	; 0x214
    91f8:	ldr	r3, [r0, #0]
    91fa:	mov	r2, r6
    91fc:	ldr	r7, [r3, #16]
    91fe:	mov	r3, r8
    9200:	blx	r7
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    9202:	cmp	r0, #0
    9204:	beq.n	9192 <ExFatFile::read(void*, unsigned int)+0xc6>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    9206:	mov.w	r8, r8, lsl #9
    920a:	mov	r2, r8
    920c:	movs	r3, #0
    920e:	b.n	91d0 <ExFatFile::read(void*, unsigned int)+0x104>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    9210:	ldrb.w	r2, [r4, #51]	; 0x33
    9214:	lsls	r2, r2, #25
    9216:	bpl.n	923a <ExFatFile::read(void*, unsigned int)+0x16e>
        m_curCluster++;
    9218:	ldr	r2, [r4, #24]
    921a:	adds	r2, #1
    921c:	b.n	9132 <ExFatFile::read(void*, unsigned int)+0x66>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    921e:	ldr.w	r0, [r7, #532]	; 0x214
    9222:	ldr	r3, [r0, #0]
    9224:	mov	r2, r6
    9226:	ldr	r3, [r3, #12]
    9228:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    922a:	cmp	r0, #0
    922c:	beq.n	9192 <ExFatFile::read(void*, unsigned int)+0xc6>
    922e:	mov.w	r2, #512	; 0x200
    9232:	movs	r3, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    9234:	mov.w	r8, #512	; 0x200
    9238:	b.n	91d0 <ExFatFile::read(void*, unsigned int)+0x104>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    923a:	mov	r0, r7
    923c:	mov	r2, r9
    923e:	ldr	r1, [r4, #24]
    9240:	str	r3, [sp, #4]
    9242:	bl	9b54 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    9246:	sxtb	r0, r0
        if (fg < 0) {
    9248:	cmp	r0, #0
    924a:	blt.n	9192 <ExFatFile::read(void*, unsigned int)+0xc6>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    924c:	beq.n	9268 <ExFatFile::read(void*, unsigned int)+0x19c>
    924e:	ldr	r7, [r4, #32]
    9250:	ldr	r2, [r4, #24]
    9252:	ldr	r3, [sp, #4]
    9254:	b.n	9134 <ExFatFile::read(void*, unsigned int)+0x68>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    9256:	ldrb.w	r3, [r0, #49]	; 0x31
    925a:	lsls	r0, r3, #28
    925c:	bmi.w	90e6 <ExFatFile::read(void*, unsigned int)+0x1a>
    9260:	b.n	9100 <ExFatFile::read(void*, unsigned int)+0x34>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    9262:	rsb	fp, r0, r2
    9266:	b.n	9100 <ExFatFile::read(void*, unsigned int)+0x34>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    9268:	ldrb.w	r3, [r4, #49]	; 0x31
    926c:	tst.w	r3, #80	; 0x50
    9270:	bne.n	91e6 <ExFatFile::read(void*, unsigned int)+0x11a>
    9272:	b.n	9192 <ExFatFile::read(void*, unsigned int)+0xc6>

00009274 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    9274:	push	{r4, r5, r6, r7, lr}
    9276:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    9278:	movs	r2, #1
    927a:	add.w	r1, sp, #7
    927e:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    9280:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    9284:	ldr	r5, [r0, #24]
    9286:	bl	90cc <ExFatFile::read(void*, unsigned int)>
    928a:	cmp	r0, #1
    928c:	it	eq
    928e:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    9292:	str	r5, [r4, #24]
    9294:	it	ne
    9296:	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    929a:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    929e:	add	sp, #12
    92a0:	pop	{r4, r5, r6, r7, pc}
    92a2:	nop

000092a4 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    92a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92a8:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    92ac:	ldr	r5, [r0, #24]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    92ae:	sub	sp, #12
    92b0:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    92b2:	cmp.w	lr, #0
    92b6:	beq.n	92f0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    92b8:	ldrd	r0, r1, [r0]
    92bc:	cmp	r1, r3
    92be:	it	eq
    92c0:	cmpeq	r0, r2
    92c2:	mov	r6, r2
    92c4:	mov	r7, r3
    92c6:	beq.n	9340 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    92c8:	orrs.w	r3, r6, r7
    92cc:	bne.n	92de <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    92ce:	movs	r3, #0
    92d0:	str	r3, [r4, #24]
    }
  }

 done:
  m_curPosition = pos;
  return true;
    92d2:	movs	r0, #1
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    92d4:	strd	r6, r7, [r4]
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    92d8:	add	sp, #12
    92da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    92de:	tst.w	lr, #8
    92e2:	beq.n	92fa <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    92e4:	ldrd	r2, r3, [r4, #16]
    92e8:	cmp	r3, r7
    92ea:	it	eq
    92ec:	cmpeq	r2, r6
    92ee:	bcs.n	92fa <ExFatFile::seekSet(unsigned long long)+0x56>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    92f0:	str	r5, [r4, #24]
  return false;
    92f2:	movs	r0, #0
}
    92f4:	add	sp, #12
    92f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    92fa:	ldr	r3, [r4, #32]
    92fc:	str	r3, [sp, #4]
    92fe:	ldrb.w	ip, [r3, #1093]	; 0x445
  if (isContiguous()) {
    9302:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    9306:	add.w	ip, ip, #9
    930a:	uxtb.w	ip, ip
    930e:	adds.w	r2, r6, #4294967295
    9312:	adc.w	r3, r7, #4294967295
    9316:	rsb	r8, ip, #32
    931a:	lsl.w	fp, r3, r8
    931e:	lsr.w	r2, r2, ip
    9322:	orr.w	r2, r2, fp
    9326:	sub.w	fp, ip, #32
    932a:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    932e:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    9332:	orr.w	r2, r2, r3
  if (isContiguous()) {
    9336:	beq.n	9344 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    9338:	ldr	r3, [r4, #28]
    933a:	add	r2, r3
    933c:	str	r2, [r4, #24]
    goto done;
    933e:	b.n	92d2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    9340:	movs	r0, #1
    9342:	b.n	92f4 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    9344:	adds.w	r9, r0, #4294967295
    9348:	adc.w	sl, r1, #4294967295
    934c:	lsr.w	ip, r9, ip
    9350:	lsl.w	r8, sl, r8
    9354:	orr.w	ip, ip, r8
    9358:	lsr.w	fp, sl, fp
    935c:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    9360:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    9362:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    9364:	bcs.n	9396 <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    9366:	tst.w	lr, #64	; 0x40
    936a:	itet	ne
    936c:	ldrne	r3, [sp, #4]
    936e:	ldreq	r3, [r4, #28]
    9370:	ldrne.w	r3, [r3, #1076]	; 0x434
    9374:	str	r3, [r4, #24]
    9376:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    9378:	add.w	r9, r4, #24
    937c:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    937e:	cmp.w	r8, #0
    9382:	beq.n	92d2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    9384:	ldr	r1, [r4, #24]
    9386:	ldr	r0, [r4, #32]
    9388:	bl	9b54 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    938c:	add.w	r8, r8, #4294967295
    9390:	cmp	r0, #0
    9392:	bne.n	937c <ExFatFile::seekSet(unsigned long long)+0xd8>
    9394:	b.n	92f0 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    9396:	orrs.w	r3, r0, r1
    939a:	beq.n	9366 <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    939c:	rsb	r2, ip, r2
    93a0:	b.n	9376 <ExFatFile::seekSet(unsigned long long)+0xd2>
    93a2:	nop

000093a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    93a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93a8:	mov	r6, r1
    93aa:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    93ac:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    93b0:	str	r2, [sp, #0]
    93b2:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    93b4:	cbnz	r1, 93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    93b6:	mov	sl, r3
    93b8:	ldrb.w	r3, [r6, #49]	; 0x31
    93bc:	tst.w	r3, #80	; 0x50
    93c0:	bne.n	93d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    93c2:	movs	r0, #0
    93c4:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    93c8:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    93cc:	add	sp, #76	; 0x4c
    93ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    93d2:	ldr	r3, [sp, #112]	; 0x70
    93d4:	and.w	r3, r3, #3
    93d8:	cmp	r3, #1
    93da:	beq.n	93ea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    93dc:	cmp	r3, #2
    93de:	beq.w	95f4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    93e2:	cmp	r3, #0
    93e4:	bne.n	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    93e6:	movs	r3, #1
    93e8:	b.n	93ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    93ea:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    93ec:	ldr	r2, [sp, #112]	; 0x70
    93ee:	and.w	r2, r2, #8
    93f2:	orrs	r3, r2
    93f4:	str	r3, [sp, #4]
  if (name) {
    93f6:	ldr	r3, [sp, #0]
    93f8:	cmp	r3, #0
    93fa:	beq.w	95f8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    93fe:	mov	r0, r3
    9400:	movs	r2, #0
    9402:	mov	r1, sl
    9404:	bl	9dd0 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    9408:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    940c:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    940e:	cbz	r3, 9424 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    9410:	ldrd	r2, r3, [r6]
    9414:	orrs	r3, r2
    9416:	beq.n	9424 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    9418:	movs	r2, #0
    941a:	movs	r3, #0
    941c:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    9420:	movs	r1, #0
    9422:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    9424:	ldr	r2, [pc, #736]	; (9708 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    9426:	add.w	r3, sl, #14
    942a:	smull	r1, r2, r2, r3
    942e:	add	r2, r3
    9430:	asrs	r3, r3, #31
    9432:	rsb	r3, r3, r2, asr #3
    9436:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    9438:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    943c:	str	r3, [sp, #12]
    943e:	adds	r3, #2
    9440:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    9444:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    9446:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    9448:	movs	r2, #32
    944a:	add	r1, sp, #40	; 0x28
    944c:	mov	r0, r6
    944e:	bl	90cc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    9452:	cmp	r0, #0
    9454:	beq.n	94d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    9456:	cmp	r0, #32
    9458:	bne.n	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    945a:	ldrb.w	r3, [sp, #40]	; 0x28
    945e:	lsls	r2, r3, #24
    9460:	bmi.n	9530 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    9462:	cmp	r4, #0
    9464:	bne.n	952a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    9466:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    9468:	ldr	r1, [r6, #24]
    946a:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    946c:	subs	r2, #32
    946e:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    9470:	adds	r4, #1
    9472:	uxtb	r4, r4
      }
      if (!buf[0]) {
    9474:	cbz	r3, 94d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    9476:	cmp	r3, #192	; 0xc0
    9478:	beq.w	95a2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    947c:	cmp	r3, #193	; 0xc1
    947e:	beq.n	9546 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    9480:	cmp	r3, #133	; 0x85
    9482:	bne.n	9448 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    9484:	movs	r2, #56	; 0x38
    9486:	movs	r1, #0
    9488:	mov	r0, r5
    948a:	bl	1109c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    948e:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    9492:	ldrb.w	r2, [sp, #41]	; 0x29
    9496:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    949a:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    949c:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    94a0:	it	pl
    94a2:	orrpl.w	r2, r2, #8
    94a6:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    94aa:	ldr	r3, [r6, #0]
    94ac:	ldr	r1, [r6, #32]
    94ae:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    94b0:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    94b2:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    94b4:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    94b6:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    94b8:	ldrb.w	r3, [r6, #51]	; 0x33
    94bc:	ubfx	r3, r3, #6, #1
    94c0:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    94c4:	movs	r2, #32
    94c6:	add	r1, sp, #40	; 0x28
    94c8:	mov	r0, r6
    94ca:	bl	90cc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    94ce:	cmp	r0, #0
    94d0:	bne.n	9456 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    94d2:	ldr	r3, [sp, #112]	; 0x70
    94d4:	lsls	r1, r3, #22
    94d6:	bpl.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    94da:	ldr	r3, [sp, #4]
    94dc:	lsls	r2, r3, #30
    94de:	bpl.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    94e2:	ldr	r3, [sp, #0]
    94e4:	cmp	r3, #0
    94e6:	beq.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    94ea:	cmp	r4, fp
    94ec:	bcc.n	9508 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    94ee:	b.n	95fe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    94f0:	cmp	r0, #32
    94f2:	bne.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    94f6:	cbnz	r4, 9502 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    94f8:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    94fa:	ldr	r1, [r6, #24]
    94fc:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    94fe:	subs	r2, #32
    9500:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    9502:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    9504:	cmp	fp, r4
    9506:	bls.n	95fe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    9508:	movs	r2, #32
    950a:	add	r1, sp, #40	; 0x28
    950c:	mov	r0, r6
    950e:	bl	90cc <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    9512:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    9514:	cmp	r0, #0
    9516:	bne.n	94f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    9518:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    951a:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    951c:	bl	a170 <ExFatFile::addDirCluster()>
    9520:	cmp	r0, #0
    9522:	beq.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    9526:	str	r7, [r6, #24]
      continue;
    9528:	b.n	9504 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    952a:	cmp	r4, fp
    952c:	bcs.n	9474 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    952e:	b.n	9470 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    9530:	cmp.w	r9, #0
    9534:	bne.n	9476 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    9536:	cmp	r4, fp
    9538:	it	cc
    953a:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    953c:	cmp	r3, #133	; 0x85
    953e:	bne.n	9448 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    9540:	mov.w	r9, #1
    9544:	b.n	9484 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    9546:	rsb	r8, r7, sl
    954a:	uxtb.w	r8, r8
    954e:	cmp.w	r8, #15
    9552:	it	cs
    9554:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    9558:	mov	r3, r8
    955a:	mov	r2, r7
    955c:	ldr	r1, [sp, #0]
    955e:	add	r0, sp, #40	; 0x28
    9560:	bl	9d78 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    9564:	cmp	r0, #0
    9566:	beq.n	95e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    9568:	add	r7, r8
    956a:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    956c:	cmp	sl, r7
    956e:	bne.w	9448 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    9572:	ldr	r3, [sp, #112]	; 0x70
    9574:	lsls	r3, r3, #20
    9576:	bmi.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    957a:	ldr	r3, [sp, #112]	; 0x70
    957c:	tst.w	r3, #17408	; 0x4400
    9580:	bne.w	96c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    9584:	ldrb.w	r3, [r5, #51]	; 0x33
    9588:	lsls	r7, r3, #30
    958a:	bmi.w	96c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    958e:	ldr	r3, [sp, #112]	; 0x70
    9590:	lsls	r3, r3, #21
    9592:	bmi.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    9596:	ldr	r3, [sp, #112]	; 0x70
    9598:	lsls	r0, r3, #17
    959a:	bmi.w	970c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    959e:	movs	r0, #1
    95a0:	b.n	93cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    95a2:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    95a6:	ldr	r2, [sp, #4]
    95a8:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    95ac:	lsls	r1, r3, #30
    95ae:	bpl.n	95b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    95b0:	orr.w	r3, r2, #64	; 0x40
    95b4:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    95b8:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    95bc:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    95c0:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    95c4:	ldr	r3, [sp, #60]	; 0x3c
    95c6:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    95c8:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    95ca:	strd	r0, r1, [r5, #8]
        if (!name) {
    95ce:	cmp	r3, #0
    95d0:	beq.n	9572 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    95d2:	ldrb.w	r3, [sp, #43]	; 0x2b
    95d6:	cmp	r3, sl
    95d8:	beq.n	95e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    95da:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    95de:	mov	r7, r9
    95e0:	b.n	9448 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    95e2:	mov	r9, r0
    95e4:	b.n	9448 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    95e6:	ldrh.w	r3, [sp, #44]	; 0x2c
    95ea:	ldr	r2, [sp, #8]
    95ec:	cmp	r3, r2
    95ee:	bne.n	95da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    95f0:	movs	r7, #0
    95f2:	b.n	9448 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    95f4:	movs	r3, #3
    95f6:	b.n	93ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    95f8:	ldr	r3, [sp, #0]
    95fa:	str	r3, [sp, #8]
    95fc:	b.n	9424 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    95fe:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    9602:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    9604:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    9608:	movs	r1, #0
    960a:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    960c:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    9610:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    9614:	bl	1109c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    9618:	ldr	r4, [sp, #12]
    961a:	ldr	r3, [r6, #32]
    961c:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    9620:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    9624:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    9628:	movs	r4, #8
    962a:	strb.w	r4, [r5, #49]	; 0x31
    962e:	add.w	r7, sl, #30
  m_dirPos = freePos;
    9632:	add.w	r4, r5, #36	; 0x24
    9636:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    963a:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    963c:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    9640:	stmia.w	r4, {r0, r1, r2}
    9644:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    9646:	movs	r6, #0
    9648:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    964a:	movs	r2, #1
    964c:	mov	r1, r8
    964e:	bl	9ac8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    9652:	mov	r4, r0
    9654:	cmp	r0, #0
    9656:	beq.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    965a:	ldrsb.w	r3, [r0]
    965e:	cmp	r3, #0
    9660:	blt.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    9664:	movs	r2, #32
    9666:	movs	r1, #0
    9668:	bl	1109c <memset>
    if (i == 0) {
    966c:	cmp	r6, #0
    966e:	beq.n	973e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    9670:	cmp	r6, #1
    9672:	beq.n	971e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    9674:	rsb	r3, r6, r6, lsl #4
    9678:	cmp	r7, #15
    967a:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    967e:	mov.w	r2, #193	; 0xc1
    9682:	mov	r1, r7
    9684:	it	cs
    9686:	movcs	r1, #15
    9688:	uxtb	r3, r3
    968a:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    968c:	cbz	r1, 96a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    968e:	adds	r4, #2
    9690:	sxth	r1, r1
    9692:	add.w	r1, r4, r1, lsl #1
    9696:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    9698:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    969c:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    96a0:	cmp	r1, r4
    96a2:	bne.n	9698 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    96a4:	adds	r6, #1
    96a6:	uxtb	r6, r6
    96a8:	cmp	fp, r6
    96aa:	bls.n	9700 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    96ac:	movs	r2, #32
    96ae:	mov	r1, r8
    96b0:	ldr	r0, [r5, #32]
    96b2:	bl	9afc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    96b6:	cmp	r0, #1
    96b8:	bne.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    96bc:	subs	r7, #15
    96be:	uxtb	r7, r7
    96c0:	ldr	r0, [r5, #32]
    96c2:	b.n	964a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    96c4:	ldrb.w	r3, [r5, #49]	; 0x31
    96c8:	tst.w	r3, #17
    96cc:	bne.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    96d0:	ldr	r3, [sp, #112]	; 0x70
    96d2:	lsls	r6, r3, #21
    96d4:	bpl.w	9596 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    96d8:	ldrb.w	r3, [r5, #51]	; 0x33
    96dc:	lsls	r4, r3, #30
    96de:	bpl.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    96e2:	movs	r2, #0
    96e4:	movs	r3, #0
    96e6:	mov	r0, r5
    96e8:	bl	92a4 <ExFatFile::seekSet(unsigned long long)>
    96ec:	cmp	r0, #0
    96ee:	beq.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    96f2:	mov	r0, r5
    96f4:	bl	a438 <ExFatFile::truncate()>
    96f8:	cmp	r0, #0
    96fa:	beq.w	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    96fe:	b.n	959e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    9700:	mov	r0, r5
    9702:	bl	a110 <ExFatFile::sync()>
    9706:	b.n	93cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    9708:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    970c:	ldrd	r2, r3, [r5, #16]
    9710:	mov	r0, r5
    9712:	bl	92a4 <ExFatFile::seekSet(unsigned long long)>
    9716:	cmp	r0, #0
    9718:	bne.w	959e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    971c:	b.n	93c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    971e:	movs	r3, #192	; 0xc0
    9720:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    9722:	ldr	r3, [sp, #4]
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    9724:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    9726:	orn	r3, r3, #63	; 0x3f
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    972a:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    972c:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    9730:	ldrb.w	r3, [sp, #12]
    9734:	strb	r3, [r4, #3]
    9736:	ldrh.w	r3, [sp, #8]
    973a:	strh	r3, [r4, #4]
    973c:	b.n	96a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    973e:	movs	r3, #133	; 0x85
    9740:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    9742:	ldr	r3, [pc, #56]	; (977c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d8>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    9744:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    9748:	strb.w	r9, [r4, #1]

      if (FsDateTime::callback) {
    974c:	ldr	r3, [r3, #0]
    974e:	cbz	r3, 9770 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3cc>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    9750:	add.w	r2, sp, #23
    9754:	add.w	r1, sp, #26
    9758:	add	r0, sp, #24
    975a:	blx	r3
    975c:	ldrh.w	r1, [sp, #24]
    9760:	ldrh.w	r2, [sp, #26]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    9764:	ldrb.w	r3, [sp, #23]
    9768:	strh	r1, [r4, #10]
    976a:	strh	r2, [r4, #8]
    976c:	strb	r3, [r4, #20]
    976e:	b.n	96a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    9770:	movw	r3, #21025	; 0x5221
    9774:	strh	r3, [r4, #10]
    9776:	strh	r3, [r4, #14]
    9778:	strh	r3, [r4, #18]
    977a:	b.n	96a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    977c:	.word	0x20006af8

00009780 <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    9780:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9784:	mov	r6, r0
    9786:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    9788:	ldrb.w	r4, [r6, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    978c:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    978e:	movs	r0, #0
    9790:	strb.w	r0, [sp, #73]	; 0x49
    9794:	strb.w	r0, [sp, #74]	; 0x4a
    9798:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    979c:	cbnz	r4, 97ac <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    979e:	mov	r9, r3
    97a0:	ldrb.w	r3, [r1, #49]	; 0x31
    97a4:	tst.w	r3, #80	; 0x50
    97a8:	mov	r5, r1
    97aa:	bne.n	97b4 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    97ac:	movs	r0, #0
}
    97ae:	add	sp, #84	; 0x54
    97b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    97b4:	ldrb	r3, [r2, #0]
    97b6:	cmp	r3, #47	; 0x2f
    97b8:	mov	r4, r2
    97ba:	beq.n	9822 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    97bc:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    97c0:	mov	r1, r4
    97c2:	add	r3, sp, #12
    97c4:	add	r2, sp, #16
    97c6:	mov	r0, r6
    97c8:	bl	9008 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    97cc:	cmp	r0, #0
    97ce:	beq.n	97ac <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    97d0:	ldr	r3, [sp, #12]
    97d2:	ldrb	r3, [r3, #0]
    97d4:	cmp	r3, #0
    97d6:	beq.n	984c <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    97d8:	ldrb.w	r3, [sp, #16]
    97dc:	ldr	r2, [sp, #20]
    97de:	str.w	r8, [sp]
    97e2:	mov	r1, r5
    97e4:	mov	r0, r6
    97e6:	bl	93a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    97ea:	cmp	r0, #0
    97ec:	beq.n	97ac <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    97ee:	mov	r4, r6
    97f0:	add	r7, sp, #24
    97f2:	add.w	lr, r6, #48	; 0x30
    97f6:	ldr	r0, [r4, #0]
    97f8:	ldr	r1, [r4, #4]
    97fa:	ldr	r2, [r4, #8]
    97fc:	ldr	r3, [r4, #12]
    97fe:	mov	r5, r7
    9800:	stmia	r5!, {r0, r1, r2, r3}
    9802:	adds	r4, #16
    9804:	cmp	r4, lr
    9806:	mov	r7, r5
    9808:	bne.n	97f6 <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    980a:	ldr	r0, [r4, #0]
    980c:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    980e:	mov	r0, r6
    9810:	bl	a110 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    9814:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    9816:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    981a:	strb.w	r8, [r6, #51]	; 0x33
    981e:	ldr	r4, [sp, #12]
    9820:	b.n	97c0 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    9822:	adds	r4, #1
    9824:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    9826:	ldrb	r1, [r4, #0]
    9828:	cmp	r1, #47	; 0x2f
    982a:	beq.n	9822 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    982c:	cbz	r1, 9864 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    982e:	movs	r2, #56	; 0x38
    9830:	add	r0, sp, #24
    9832:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    9834:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    9836:	bl	1109c <memset>
  m_attributes = FILE_ATTR_ROOT;
    983a:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    983c:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    983e:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    9840:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    9842:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    9846:	strb.w	r3, [sp, #75]	; 0x4b
    984a:	b.n	97bc <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    984c:	ldrb.w	r3, [sp, #16]
    9850:	ldr	r2, [sp, #20]
    9852:	str.w	r9, [sp]
    9856:	mov	r1, r5
    9858:	mov	r0, r6
    985a:	bl	93a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
}
    985e:	add	sp, #84	; 0x54
    9860:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    9864:	movs	r2, #56	; 0x38
    9866:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    9868:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    986a:	bl	1109c <memset>
  m_attributes = FILE_ATTR_ROOT;
    986e:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    9870:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    9872:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    9874:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    9878:	strb.w	r0, [r6, #51]	; 0x33
    987c:	b.n	97ae <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    987e:	nop

00009880 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    9880:	cbz	r1, 988a <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    9882:	add.w	r1, r1, #1096	; 0x448
    9886:	b.w	9780 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    988a:	mov	r0, r1
    988c:	bx	lr
    988e:	nop

00009890 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    9890:	ldrb.w	r3, [r0, #49]	; 0x31
    9894:	cbnz	r3, 98ac <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    9896:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    9898:	ldrb.w	r4, [r1, #49]	; 0x31
    989c:	ands.w	r4, r4, #80	; 0x50
    DBG_FAIL_MACRO;
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    98a0:	sub	sp, #12
    98a2:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    98a4:	bne.n	98b0 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    98a6:	mov	r0, r4
}
    98a8:	add	sp, #12
    98aa:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    98ac:	movs	r0, #0
}
    98ae:	bx	lr
  }
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    98b0:	ldrd	r4, r5, [r5]
    98b4:	movs	r5, #0
    98b6:	and.w	r4, r4, #31
    98ba:	orrs	r4, r5
    98bc:	beq.n	98c4 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    98be:	mov	r0, r3
}
    98c0:	add	sp, #12
    98c2:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    98c4:	str	r2, [sp, #0]
    98c6:	mov	r2, r3
    98c8:	bl	93a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    98cc:	add	sp, #12
    98ce:	pop	{r4, r5, pc}

000098d0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//------------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    98d0:	push	{r3, r4, r5, lr}
    98d2:	mov	r4, r1
    98d4:	ldr.w	r1, [r0, #1060]	; 0x424
    98d8:	mov	r5, r2
    98da:	add.w	r1, r1, r4, lsr #7
    98de:	add.w	r0, r0, #528	; 0x210
    98e2:	movs	r2, #0
    98e4:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    98e8:	cbz	r0, 98fc <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    98ea:	lsls	r4, r4, #2
    98ec:	ubfx	r4, r4, #0, #9
    98f0:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    98f2:	adds	r2, r3, #1
    98f4:	beq.n	9900 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    98f6:	str	r3, [r5, #0]
  return 1;
    98f8:	movs	r0, #1
    98fa:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    98fc:	movs	r0, #255	; 0xff
    98fe:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    9900:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    9902:	pop	{r3, r4, r5, pc}

00009904 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9904:	push	{r3, r4, r5, lr}
    9906:	mov	r4, r1
    9908:	ldr.w	r1, [r0, #1060]	; 0x424
    990c:	mov	r5, r2
    990e:	add.w	r1, r1, r4, lsr #7
    9912:	add.w	r0, r0, #528	; 0x210
    9916:	movs	r2, #1
    9918:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    991c:	mov	r3, r0
    991e:	cbz	r0, 992c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    9920:	lsls	r4, r4, #2
    9922:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    9926:	movs	r0, #1
    9928:	str	r5, [r3, r4]
    992a:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    992c:	pop	{r3, r4, r5, pc}
    992e:	nop

00009930 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    9930:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9934:	mov	r8, r0
    9936:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    9938:	mov	fp, r1
    993a:	cmp	r1, #0
    993c:	beq.n	99c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    993e:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    9940:	ldr.w	r3, [r8, #1072]	; 0x430
    9944:	cmp	r7, r3
    9946:	bcs.n	99c0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    9948:	and.w	r5, r7, #7
    994c:	movs	r3, #1
    994e:	lsl.w	r5, r3, r5
    9952:	uxtb	r5, r5
    9954:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    9958:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    995a:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    995c:	ldr.w	r1, [r8, #1068]	; 0x42c
    9960:	movs	r2, #0
    9962:	add.w	r1, r1, r4, lsr #12
    9966:	mov	r0, r8
    9968:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    996c:	cbz	r0, 99a0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    996e:	ldrb.w	r1, [r0, sl]
    9972:	b.n	998a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    9974:	cmp	r2, r9
    9976:	beq.n	99ce <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    9978:	cmp	r7, r4
    997a:	beq.n	999e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    997c:	ldr.w	r2, [r8, #1072]	; 0x430
    9980:	cmp	r4, r2
    9982:	bcs.n	99b4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    9984:	ands.w	r5, r3, #255	; 0xff
    9988:	beq.n	99a4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    998a:	adds	r4, #1
        if (!(mask & cache[i])) {
    998c:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    998e:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    9992:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    9996:	beq.n	9974 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    9998:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    999a:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    999c:	bne.n	997c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    999e:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    99a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99a4:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    99a8:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    99ac:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    99b0:	bne.n	996e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    99b2:	b.n	99b8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    99b4:	movs	r6, #0
    99b6:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    99b8:	mov.w	sl, #0
    99bc:	movs	r5, #1
    99be:	b.n	995c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    99c0:	movs	r7, #0
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    99c2:	mov	sl, r7
    99c4:	movs	r5, #1
    99c6:	b.n	9958 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    99c8:	ldr.w	r7, [r0, #1056]	; 0x420
    99cc:	b.n	9940 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    99ce:	cmp.w	fp, #0
    99d2:	bne.n	99de <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    99d4:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    99d8:	it	eq
    99da:	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    99de:	adds	r0, r6, #2
    99e0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000099e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    99e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    99e8:	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    99ea:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    99ec:	ldr.w	r0, [r0, #1072]	; 0x430
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    99f0:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    99f2:	adds	r2, r1, r2
    99f4:	cmp	r2, r0
    99f6:	bhi.n	9a6a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    99f8:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    99fa:	ldr.w	r3, [r8, #1056]	; 0x420
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    99fe:	cmp.w	sl, #0
    9a02:	bne.n	9a70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    9a04:	cmp	r1, r3
      m_bitmapStart = start;
    9a06:	it	cc
    9a08:	strcc.w	r1, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    9a0c:	and.w	r4, r1, #7
    9a10:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    9a12:	ldr.w	r3, [r8, #1068]	; 0x42c
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    9a16:	lsl.w	r4, r2, r4
    9a1a:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    9a1c:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    9a20:	ubfx	r6, r1, #3, #9
    9a24:	movs	r2, #1
    9a26:	mov	r1, r9
    9a28:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    9a2a:	add	r9, r2
    9a2c:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    9a30:	cbz	r0, 9a6a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    9a32:	adds	r7, r0, r6
    9a34:	add.w	r0, r0, #512	; 0x200
    9a38:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    9a3c:	tst	r2, r4
    9a3e:	ite	ne
    9a40:	movne	r6, #1
    9a42:	moveq	r6, #0
    9a44:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    9a46:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    9a4a:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    9a4e:	beq.n	9a6a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    9a50:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    9a52:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    9a56:	beq.n	9a84 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    9a58:	ands.w	r4, r4, #255	; 0xff
    9a5c:	bne.n	9a3c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    9a5e:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    9a60:	mov	r6, r4
    9a62:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    9a66:	bne.n	9a38 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    9a68:	b.n	9a24 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    9a6a:	movs	r0, #0
    9a6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    9a70:	cmp	r1, r3
    9a72:	bhi.n	9a0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    9a74:	cmp	r2, r3
    9a76:	bls.n	9a0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    9a78:	cmp	r2, r0
    9a7a:	it	cs
    9a7c:	movcs	r2, #0
    9a7e:	str.w	r2, [r8, #1056]	; 0x420
    9a82:	b.n	9a0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    9a84:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    9a86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a8a:	nop

00009a8c <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    9a8c:	push	{r4, r5, r6, lr}
    9a8e:	sub	sp, #8
    9a90:	add	r6, sp, #8
    9a92:	mov	r5, r0
    9a94:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    9a98:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9a9a:	ldr.w	r3, [r5, #1072]	; 0x430
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    9a9e:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9aa0:	adds	r3, #1
    9aa2:	cmp	r1, r3
    9aa4:	bls.n	9aac <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    9aa6:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    9aa8:	add	sp, #8
    9aaa:	pop	{r4, r5, r6, pc}
    9aac:	mov	r2, r6
    9aae:	mov	r0, r5
    9ab0:	bl	98d0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    9ab4:	sxtb	r0, r0
    if (status < 0) return 0;
    9ab6:	cmp	r0, #0
    9ab8:	blt.n	9aa6 <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    9aba:	add.w	r4, r4, #1
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    9abe:	bne.n	9a9a <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    9ac0:	mov	r0, r4
  } while (status);
  return n;
}
    9ac2:	add	sp, #8
    9ac4:	pop	{r4, r5, r6, pc}
    9ac6:	nop

00009ac8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    9ac8:	push	{r3, r4, r5, r6, r7, lr}
    9aca:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    9acc:	ldmia.w	r6, {r3, r5}
    9ad0:	ldr.w	r1, [r0, #1080]	; 0x438
    9ad4:	ldr.w	r4, [r0, #1068]	; 0x42c
    9ad8:	ldrb.w	r7, [r0, #1093]	; 0x445
    9adc:	ands	r1, r5
    9ade:	subs	r3, #2
    9ae0:	add.w	r1, r4, r1, lsr #9
    9ae4:	lsls	r3, r7
    9ae6:	add	r1, r3
    9ae8:	add.w	r0, r0, #528	; 0x210
    9aec:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    9af0:	cbz	r0, 9afa <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    9af2:	ldr	r3, [r6, #4]
    9af4:	ubfx	r3, r3, #0, #9
    9af8:	add	r0, r3
}
    9afa:	pop	{r3, r4, r5, r6, r7, pc}

00009afc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9afc:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9afe:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9b00:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    9b02:	adds	r3, r4, r2
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9b04:	ldr.w	r1, [r0, #1080]	; 0x438
  pos->position += offset;
    9b08:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    9b0a:	ldrb.w	r3, [r0, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9b0e:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    9b10:	adds	r3, #9
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    9b12:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    9b14:	uxtb	r3, r3
    9b16:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    9b1a:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    9b1c:	cbz	r4, 9b2e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    9b1e:	ldrb	r3, [r5, #8]
    9b20:	cbz	r3, 9b32 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    9b22:	ldr	r3, [r5, #0]
    9b24:	adds	r3, #1
    9b26:	str	r3, [r5, #0]
    9b28:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    9b2a:	cmp	r4, #0
    9b2c:	bne.n	9b1e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    9b2e:	movs	r0, #1
    9b30:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9b32:	ldr.w	r3, [r6, #1072]	; 0x430
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9b36:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9b38:	adds	r3, #1
    9b3a:	cmp	r1, r3
    9b3c:	bls.n	9b44 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9b3e:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    9b42:	pop	{r4, r5, r6, pc}
    9b44:	mov	r2, r5
    9b46:	mov	r0, r6
    9b48:	bl	98d0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    9b4c:	sxtb	r0, r0
      if (status != 1) {
    9b4e:	cmp	r0, #1
    9b50:	beq.n	9b28 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    9b52:	pop	{r4, r5, r6, pc}

00009b54 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9b54:	ldr.w	r3, [r0, #1072]	; 0x430
    9b58:	adds	r3, #1
    9b5a:	cmp	r3, r1
    9b5c:	bcs.n	9b62 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    9b5e:	movs	r0, #255	; 0xff
    9b60:	bx	lr
    9b62:	b.w	98d0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    9b66:	nop

00009b68 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9b68:	cmp	r1, #1
    9b6a:	bls.n	9b88 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    9b6c:	ldr.w	r3, [r0, #1072]	; 0x430
    9b70:	adds	r3, #1
    9b72:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9b74:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9b76:	bls.n	9b80 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    9b78:	movs	r0, #0
    9b7a:	ldr.w	r4, [sp], #4
    9b7e:	bx	lr
    9b80:	ldr.w	r4, [sp], #4
    9b84:	b.w	9904 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    9b88:	movs	r0, #0
    9b8a:	bx	lr

00009b8c <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    9b8c:	push	{r4, r5, r6, r7, lr}
    9b8e:	mov	r4, r1
    9b90:	sub	sp, #12
    9b92:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    9b94:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    9b96:	ldr.w	r3, [r5, #1072]	; 0x430
    9b9a:	adds	r3, #1
    9b9c:	cmp	r4, r3
    9b9e:	bls.n	9ba6 <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    9ba0:	movs	r0, #0
}
    9ba2:	add	sp, #12
    9ba4:	pop	{r4, r5, r6, r7, pc}
    9ba6:	add	r2, sp, #4
    9ba8:	mov	r1, r4
    9baa:	mov	r0, r5
    9bac:	bl	98d0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    9bb0:	sxtb	r7, r0
    if (status < 0) {
    9bb2:	cmp	r7, #0
    9bb4:	blt.n	9ba0 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    9bb6:	cmp	r4, #1
    9bb8:	bls.n	9ba0 <ExFatPartition::freeChain(unsigned long)+0x14>
    9bba:	ldr.w	r3, [r5, #1072]	; 0x430
    9bbe:	adds	r3, #1
    9bc0:	cmp	r4, r3
    9bc2:	bhi.n	9ba0 <ExFatPartition::freeChain(unsigned long)+0x14>
    9bc4:	movs	r2, #0
    9bc6:	mov	r1, r4
    9bc8:	mov	r0, r5
    9bca:	bl	9904 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    9bce:	cmp	r0, #0
    9bd0:	beq.n	9ba0 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    9bd2:	ldr	r3, [sp, #4]
    9bd4:	adds	r4, #1
    9bd6:	cmp	r4, r3
    9bd8:	bne.n	9bf2 <ExFatPartition::freeChain(unsigned long)+0x66>
    9bda:	cmp	r7, #0
    9bdc:	bne.n	9b96 <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9bde:	mov	r3, r7
    9be0:	subs	r2, r4, r6
    9be2:	mov	r1, r6
    9be4:	mov	r0, r5
    9be6:	bl	99e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9bea:	cmp	r0, #0
    9bec:	beq.n	9ba0 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    9bee:	add	sp, #12
    9bf0:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    9bf2:	subs	r2, r4, r6
    9bf4:	mov	r1, r6
    9bf6:	movs	r3, #0
    9bf8:	mov	r0, r5
    9bfa:	bl	99e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9bfe:	cmp	r0, #0
    9c00:	beq.n	9ba0 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    9c02:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    9c04:	cmp	r7, #0
    9c06:	beq.n	9ba2 <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    9c08:	mov	r6, r4
    9c0a:	b.n	9b96 <ExFatPartition::freeChain(unsigned long)+0xa>

00009c0c <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    9c0c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    9c10:	movs	r4, #0
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    9c12:	ldr.w	r6, [r0, #1068]	; 0x42c

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    9c16:	mov	r8, r0
    9c18:	add.w	r7, r0, #528	; 0x210
  uint32_t nc = 0;
    9c1c:	mov	r5, r4
    9c1e:	mov	r1, r6
    9c20:	movs	r2, #0
    9c22:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    9c24:	adds	r6, #1
    9c26:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    9c2a:	cbz	r0, 9c7a <ExFatPartition::freeClusterCount()+0x6e>
    9c2c:	add.w	lr, r0, #4294967295
    9c30:	ldr.w	ip, [r8, #1072]	; 0x430
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    9c34:	ldrb.w	r0, [lr, #1]!
    9c38:	cmp	r0, #255	; 0xff
    9c3a:	add.w	r9, r5, #4096	; 0x1000
    9c3e:	beq.n	9c68 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    9c40:	cbz	r0, 9c56 <ExFatPartition::freeClusterCount()+0x4a>
    9c42:	movs	r2, #8
    9c44:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    9c46:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    9c48:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    9c4c:	it	ne
    9c4e:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    9c50:	subs	r2, #1
    9c52:	uxtb	r3, r1
    9c54:	bne.n	9c46 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    9c56:	adds	r5, #8
      if (nc >= m_clusterCount) {
    9c58:	cmp	ip, r5
    9c5a:	bls.n	9c72 <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    9c5c:	cmp	r5, r9
    9c5e:	beq.n	9c1e <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    9c60:	ldrb.w	r0, [lr, #1]!
    9c64:	cmp	r0, #255	; 0xff
    9c66:	bne.n	9c40 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    9c68:	adds	r5, #8
      if (nc >= m_clusterCount) {
    9c6a:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    9c6c:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    9c70:	bhi.n	9c5c <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    9c72:	rsb	r0, r4, ip
    9c76:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    9c7a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9c7e:	nop

00009c80 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    9c80:	push	{r3, r4, r5, r6, r7, lr}
    9c82:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    9c84:	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    9c86:	mov.w	r6, #4294967295
    9c8a:	add.w	r7, r0, #528	; 0x210
  m_blockDev = dev;
    9c8e:	str.w	r1, [r0, #1088]	; 0x440
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    9c92:	str	r1, [r0, #4]
    9c94:	str.w	r1, [r0, #532]	; 0x214
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    9c98:	mov	r5, r2
    9c9a:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    9c9c:	strb.w	r3, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    9ca0:	strb	r3, [r4, #0]
    9ca2:	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    9ca6:	str	r6, [r4, #12]
    9ca8:	str.w	r6, [r4, #540]	; 0x21c
    9cac:	mov	r2, r3
    9cae:	mov	r1, r3
    9cb0:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    9cb4:	cmp	r5, #4
    9cb6:	bhi.n	9cd2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    9cb8:	mov	r6, r0
    9cba:	cbz	r0, 9cd2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    9cbc:	cbnz	r5, 9cd6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    9cbe:	movs	r2, #5
    9cc0:	ldr	r1, [pc, #152]	; (9d5c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    9cc2:	adds	r0, r6, #3
    9cc4:	bl	117dc <strncmp>
    9cc8:	cbnz	r0, 9cd2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    9cca:	ldrb.w	r3, [r6, #108]	; 0x6c
    9cce:	cmp	r3, #9
    9cd0:	beq.n	9d06 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    9cd2:	movs	r0, #0
    9cd4:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    9cd6:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    9cd8:	add.w	r3, r0, r3, lsl #4
    9cdc:	ldrb.w	r2, [r3, #446]	; 0x1be
    9ce0:	ands.w	r2, r2, #127	; 0x7f
    9ce4:	bne.n	9cd2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    9ce6:	ldrb.w	r3, [r3, #450]	; 0x1c2
    9cea:	cmp	r3, #0
    9cec:	beq.n	9cd2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    9cee:	add.w	r5, r0, r5, lsl #4
    9cf2:	mov	r0, r7
    9cf4:	ldr.w	r5, [r5, #438]	; 0x1b6
    9cf8:	mov	r1, r5
    9cfa:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    9cfe:	mov	r6, r0
    9d00:	cmp	r0, #0
    9d02:	bne.n	9cbe <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    9d04:	b.n	9cd2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    9d06:	ldr	r3, [r6, #80]	; 0x50
    9d08:	add	r3, r5
    9d0a:	str.w	r3, [r4, #1060]	; 0x424
    9d0e:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    9d10:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    9d14:	ldr	r3, [r6, #88]	; 0x58
    9d16:	add	r5, r3
    9d18:	str.w	r5, [r4, #1068]	; 0x42c
    9d1c:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    9d1e:	str.w	r3, [r4, #1072]	; 0x430
    9d22:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    9d24:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    9d28:	ldrb.w	r3, [r6, #109]	; 0x6d
    9d2c:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9d30:	movs	r5, #1
    9d32:	adds	r3, #9
    9d34:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    9d38:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    9d3a:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    9d3e:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    9d40:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    9d44:	str.w	r2, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    9d48:	mov	r0, r4
    9d4a:	mov	r2, r5
    9d4c:	bl	9930 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    9d50:	movs	r3, #64	; 0x40
    9d52:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    9d56:	mov	r0, r5

 fail:
  return false;
}
    9d58:	pop	{r3, r4, r5, r6, r7, pc}
    9d5a:	nop
    9d5c:	.word	0x000151e8

00009d60 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    9d60:	push	{r4, lr}
    9d62:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    9d64:	ldr.w	r1, [r0, #1076]	; 0x434
    9d68:	bl	9a8c <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    9d6c:	ldrb.w	r3, [r4, #1093]	; 0x445
    9d70:	adds	r3, #9
    9d72:	uxtb	r3, r3
}
    9d74:	lsls	r0, r3
    9d76:	pop	{r4, pc}

00009d78 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    9d78:	cbz	r3, 9dcc <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return true;
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    9d7a:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    9d7c:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9d7e:	cmp	r4, #126	; 0x7e
    9d80:	bhi.n	9dc0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    9d82:	add	r3, r2
    9d84:	adds	r5, r1, r3
    9d86:	add	r2, r1
    9d88:	adds	r0, #2
    9d8a:	ldrb.w	r3, [r2], #1
    9d8e:	uxtb	r4, r4
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    9d90:	sub.w	r1, r3, #97	; 0x61
    9d94:	cmp	r1, #25
    9d96:	sub.w	r1, r4, #97	; 0x61
    9d9a:	ite	ls
    9d9c:	movls	r6, #32
    9d9e:	movhi	r6, #0
    9da0:	cmp	r1, #25
    9da2:	ite	ls
    9da4:	movls	r1, #32
    9da6:	movhi	r1, #0
    9da8:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9daa:	subs	r4, r4, r1
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    9dac:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9dae:	uxtb	r4, r4
    9db0:	cmp	r4, r3
    9db2:	bne.n	9dc0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    9db4:	cmp	r2, r5
    9db6:	beq.n	9dc6 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    9db8:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    9dbc:	cmp	r4, #126	; 0x7e
    9dbe:	bls.n	9d8a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    9dc0:	movs	r0, #0
    }
  }
  return true;
}
    9dc2:	pop	{r4, r5, r6}
    9dc4:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    9dc6:	movs	r0, #1
}
    9dc8:	pop	{r4, r5, r6}
    9dca:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    9dcc:	movs	r0, #1
}
    9dce:	bx	lr

00009dd0 <exFatHashName(char const*, unsigned int, unsigned short)>:
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9dd0:	cbz	r1, 9e06 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
    hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    9dd2:	push	{r4}
    9dd4:	add	r1, r0
    9dd6:	lsls	r3, r2, #15
    9dd8:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    9ddc:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    9de0:	sub.w	r4, r2, #97	; 0x61
    9de4:	cmp	r4, #25
      c -= 'a' - 'A';
    9de6:	itt	ls
    9de8:	subls	r2, #32
    9dea:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    9dec:	uxtah	r2, r2, r3
    9df0:	uxth	r2, r2
    9df2:	lsls	r3, r2, #15
    9df4:	orr.w	r2, r3, r2, lsr #1
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    9df8:	cmp	r1, r0
    9dfa:	uxth	r2, r2
    9dfc:	bne.n	9dd6 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    9dfe:	mov	r0, r2
    9e00:	ldr.w	r4, [sp], #4
    9e04:	bx	lr
    9e06:	mov	r0, r2
    9e08:	bx	lr
    9e0a:	nop

00009e0c <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9e0c:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    9e0e:	push	{r3, r4, r5, r6, r7, lr}
    9e10:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9e12:	ldr	r0, [r0, #32]
    9e14:	cbz	r1, 9e18 <ExFatFile::addCluster()+0xc>
    9e16:	adds	r1, #1
    9e18:	movs	r2, #1
    9e1a:	bl	9930 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    9e1e:	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    9e20:	mov	r6, r0
  if (find < 2) {
    9e22:	bls.n	9e84 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    9e24:	movs	r3, #1
    9e26:	mov	r1, r0
    9e28:	mov	r2, r3
    9e2a:	ldr	r0, [r4, #32]
    9e2c:	bl	99e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9e30:	mov	r7, r0
    9e32:	cbz	r0, 9e84 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    9e34:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    9e36:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    9e3a:	cbz	r0, 9e8a <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    9e3c:	lsls	r2, r3, #25
    9e3e:	bpl.n	9e68 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    9e40:	adds	r2, r0, #1
    9e42:	cmp	r6, r2
    9e44:	beq.n	9e92 <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    9e46:	bic.w	r2, r3, #64	; 0x40
    9e4a:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9e4e:	ldr	r3, [r4, #28]
    9e50:	b.n	9e5e <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    9e52:	ldr	r0, [r4, #32]
    9e54:	bl	9b68 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9e58:	cbz	r0, 9e84 <ExFatFile::addCluster()+0x78>
    9e5a:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9e5c:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    9e5e:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9e60:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    9e62:	mov	r1, r3
    9e64:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    9e66:	bcc.n	9e52 <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    9e68:	mov.w	r2, #4294967295
    9e6c:	mov	r1, r6
    9e6e:	ldr	r0, [r4, #32]
    9e70:	bl	9b68 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9e74:	cbz	r0, 9e84 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    9e76:	ldr	r1, [r4, #24]
    9e78:	cbz	r1, 9e92 <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    9e7a:	mov	r2, r6
    9e7c:	ldr	r0, [r4, #32]
    9e7e:	bl	9b68 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    9e82:	cbnz	r0, 9e92 <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    9e84:	movs	r7, #0
}
    9e86:	mov	r0, r7
    9e88:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    9e8a:	orr.w	r3, r3, #64	; 0x40
    9e8e:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    9e92:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    9e94:	mov	r0, r7
    9e96:	pop	{r3, r4, r5, r6, r7, pc}

00009e98 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9e98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    9e9c:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9ea0:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    9ea2:	ldmia.w	r3, {r0, r1, r2}

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    9ea6:	sub	sp, #20
    9ea8:	ldrb.w	r3, [r5, #51]	; 0x33
  DirPos_t pos = m_dirPos;
    9eac:	add	r6, sp, #4
    9eae:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    9eb2:	lsls	r2, r3, #30
    9eb4:	bpl.n	9eee <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    9eb6:	ldr	r1, [r5, #28]
    9eb8:	cbnz	r1, 9ef6 <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    9eba:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    9ebc:	movs	r2, #1
    9ebe:	mov	r1, r6
    9ec0:	ldr	r0, [r5, #32]
    9ec2:	bl	9ac8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    9ec6:	adds	r4, #1
    9ec8:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    9eca:	cbz	r0, 9eee <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    9ecc:	ldrb	r3, [r0, #0]
    9ece:	and.w	r3, r3, #127	; 0x7f
    9ed2:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    9ed4:	ldrb.w	r3, [r5, #48]	; 0x30
    9ed8:	cmp	r3, r4
    9eda:	bcc.n	9f40 <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    9edc:	cmp	r4, #0
    9ede:	beq.n	9ebc <ExFatFile::remove()+0x24>
    9ee0:	movs	r2, #32
    9ee2:	mov	r1, r6
    9ee4:	ldr	r0, [r5, #32]
    9ee6:	bl	9afc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    9eea:	cmp	r0, #1
    9eec:	beq.n	9ebc <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    9eee:	movs	r0, #0
}
    9ef0:	add	sp, #20
    9ef2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    9ef6:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    9ef8:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    9efa:	bpl.n	9f36 <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    9efc:	ldrd	r2, r3, [r5, #8]
    9f00:	ldrb.w	r4, [r0, #1093]	; 0x445
    9f04:	adds	r4, #9
    9f06:	uxtb	r4, r4
    9f08:	adds.w	r8, r2, #4294967295
    9f0c:	adc.w	r9, r3, #4294967295
    9f10:	rsb	r7, r4, #32
    9f14:	lsl.w	r7, r9, r7
    9f18:	lsr.w	r2, r8, r4
    9f1c:	sub.w	r3, r4, #32
    9f20:	lsr.w	r3, r9, r3
    9f24:	orrs	r2, r7
    9f26:	orrs	r2, r3
    9f28:	adds	r2, #1
    9f2a:	movs	r3, #0
    9f2c:	bl	99e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    9f30:	cmp	r0, #0
    9f32:	bne.n	9eba <ExFatFile::remove()+0x22>
    9f34:	b.n	9eee <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    9f36:	bl	9b8c <ExFatPartition::freeChain(unsigned long)>
    9f3a:	cmp	r0, #0
    9f3c:	bne.n	9eba <ExFatFile::remove()+0x22>
    9f3e:	b.n	9eee <ExFatFile::remove()+0x56>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    9f40:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    9f42:	movs	r3, #0
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    9f44:	mov	r0, r4
    9f46:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    9f4a:	strb.w	r3, [r5, #51]	; 0x33
    9f4e:	bl	8f0c <FsCache::sync()>
    9f52:	cmp	r0, #0
    9f54:	beq.n	9eee <ExFatFile::remove()+0x56>
    9f56:	add.w	r0, r4, #528	; 0x210
    9f5a:	bl	8f0c <FsCache::sync()>
    9f5e:	cmp	r0, #0
    9f60:	beq.n	9eee <ExFatFile::remove()+0x56>
    9f62:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    9f66:	ldr	r3, [r0, #0]
    9f68:	ldr	r3, [r3, #24]
    9f6a:	blx	r3
    9f6c:	b.n	9ef0 <ExFatFile::remove()+0x58>
    9f6e:	nop

00009f70 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    9f70:	ldrb.w	r3, [r0, #49]	; 0x31
    9f74:	lsls	r1, r3, #27
    9f76:	bmi.n	9f7c <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    9f78:	movs	r0, #0
}
    9f7a:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    9f7c:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    9f7e:	movs	r2, #0
    9f80:	sub	sp, #32
    9f82:	movs	r3, #0
    9f84:	mov	r4, r0
    9f86:	bl	92a4 <ExFatFile::seekSet(unsigned long long)>
    9f8a:	b.n	9f9a <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    9f8c:	cmp	r0, #32
    9f8e:	bne.n	9fc4 <ExFatFile::rmdir()+0x54>
    9f90:	ldrb.w	r3, [sp]
    9f94:	lsls	r2, r3, #24
    9f96:	bmi.n	9fc4 <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    9f98:	cbz	r3, 9fa8 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    9f9a:	movs	r2, #32
    9f9c:	mov	r1, sp
    9f9e:	mov	r0, r4
    9fa0:	bl	90cc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    9fa4:	cmp	r0, #0
    9fa6:	bne.n	9f8c <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    9fa8:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9fac:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    9fae:	orr.w	r3, r3, #2
    9fb2:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    9fb6:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    9fba:	mov	r0, r4
    9fbc:	bl	9e98 <ExFatFile::remove()>

 fail:
  return false;
}
    9fc0:	add	sp, #32
    9fc2:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    9fc4:	movs	r0, #0
}
    9fc6:	add	sp, #32
    9fc8:	pop	{r4, pc}
    9fca:	nop

00009fcc <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9fcc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9fd0:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9fd4:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9fd6:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    9fda:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    9fdc:	add.w	r8, sp, #12
    9fe0:	stmia.w	r8, {r0, r1, r2}
    9fe4:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    9fe6:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    9fe8:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    9fea:	movs	r2, #0
    9fec:	mov	r1, r8
    9fee:	ldr	r0, [r6, #32]
    9ff0:	bl	9ac8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    9ff4:	uxtb.w	r9, r7
    if (!cache) {
    9ff8:	mov	r5, r0
    9ffa:	cbz	r0, a00a <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    9ffc:	ldrb	r3, [r0, #0]
    9ffe:	cmp	r3, #192	; 0xc0
    a000:	beq.n	a0a6 <ExFatFile::syncDir()+0xda>
    a002:	cmp	r3, #193	; 0xc1
    a004:	beq.n	a0a2 <ExFatFile::syncDir()+0xd6>
    a006:	cmp	r3, #133	; 0x85
    a008:	beq.n	a01e <ExFatFile::syncDir()+0x52>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    a00a:	ldrb.w	r3, [r6, #50]	; 0x32
    a00e:	orr.w	r3, r3, #1
    a012:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    a016:	movs	r0, #0
}
    a018:	add	sp, #28
    a01a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    a01e:	ldr	r3, [pc, #236]	; (a10c <ExFatFile::syncDir()+0x140>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    a020:	ldrb.w	r2, [r6, #49]	; 0x31
    a024:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    a026:	ldrb.w	sl, [r0, #1]
    a02a:	and.w	r2, r2, #55	; 0x37
    a02e:	strh	r2, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    a030:	cbz	r3, a054 <ExFatFile::syncDir()+0x88>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    a032:	add.w	r2, sp, #7
    a036:	add.w	r1, sp, #10
    a03a:	add	r0, sp, #8
    a03c:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    a03e:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    a042:	ldrh.w	r3, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    a046:	ldrb.w	r1, [sp, #7]
    a04a:	strb	r1, [r5, #21]
    a04c:	strh	r2, [r5, #12]
    a04e:	strh	r2, [r5, #16]
    a050:	strh	r3, [r5, #14]
    a052:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    a054:	ldr	r2, [r6, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    a056:	ldrb.w	r3, [r2, #528]	; 0x210
    a05a:	orr.w	r3, r3, #1
    a05e:	strb.w	r3, [r2, #528]	; 0x210
    a062:	ldrb	r0, [r5, #0]
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    a064:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    a066:	ldrb	r2, [r5, r1]
    a068:	lsls	r3, r4, #15
    a06a:	orr.w	r4, r3, r4, lsr #1
    a06e:	uxtah	r4, r2, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    a072:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    a074:	uxth	r4, r4
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    a076:	add.w	r1, r1, #1
    a07a:	beq.n	a098 <ExFatFile::syncDir()+0xcc>
    a07c:	cmp	r1, #31
    a07e:	bls.n	a066 <ExFatFile::syncDir()+0x9a>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    a080:	cmp	sl, r9
    a082:	beq.n	a0d2 <ExFatFile::syncDir()+0x106>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    a084:	movs	r2, #32
    a086:	mov	r1, r8
    a088:	ldr	r0, [r6, #32]
    a08a:	bl	9afc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    a08e:	cmp	r0, #1
    a090:	add.w	r7, r7, #1
    a094:	beq.n	9fea <ExFatFile::syncDir()+0x1e>
    a096:	b.n	a00a <ExFatFile::syncDir()+0x3e>
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    a098:	cmp	r0, #133	; 0x85
    a09a:	ite	eq
    a09c:	moveq	r1, #4
    a09e:	movne	r1, #2
    a0a0:	b.n	a066 <ExFatFile::syncDir()+0x9a>
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    a0a2:	mov	r0, r3
    a0a4:	b.n	a064 <ExFatFile::syncDir()+0x98>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    a0a6:	ldrb.w	r3, [r6, #51]	; 0x33
    a0aa:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    a0ae:	ldrb	r3, [r0, #1]
    a0b0:	ite	ne
    a0b2:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    a0b6:	biceq.w	r3, r3, #2
    a0ba:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    a0bc:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    a0c0:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    a0c4:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    a0c8:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    a0ca:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    a0cc:	strd	r2, r3, [r0, #24]
    a0d0:	b.n	a054 <ExFatFile::syncDir()+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    a0d2:	mov	r1, fp
    a0d4:	movs	r2, #1
    a0d6:	ldr	r0, [r6, #32]
    a0d8:	bl	9ac8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    a0dc:	cmp	r0, #0
    a0de:	beq.n	a00a <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    a0e0:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    a0e2:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    a0e4:	mov	r0, r5
    a0e6:	bl	8f0c <FsCache::sync()>
    a0ea:	cmp	r0, #0
    a0ec:	beq.n	a00a <ExFatFile::syncDir()+0x3e>
    a0ee:	add.w	r0, r5, #528	; 0x210
    a0f2:	bl	8f0c <FsCache::sync()>
    a0f6:	cmp	r0, #0
    a0f8:	beq.n	a00a <ExFatFile::syncDir()+0x3e>
    a0fa:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a0fe:	ldr	r3, [r0, #0]
    a100:	ldr	r3, [r3, #24]
    a102:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    a104:	cmp	r0, #0
    a106:	beq.n	a00a <ExFatFile::syncDir()+0x3e>
    a108:	b.n	a018 <ExFatFile::syncDir()+0x4c>
    a10a:	nop
    a10c:	.word	0x20006af8

0000a110 <ExFatFile::sync()>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    a110:	ldrb.w	r2, [r0, #49]	; 0x31
    a114:	cbz	r2, a13c <ExFatFile::sync()+0x2c>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    a116:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a118:	ldrb.w	r2, [r0, #51]	; 0x33
    a11c:	lsls	r1, r2, #24
    a11e:	bmi.n	a140 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    a120:	ldr	r5, [r0, #32]
    a122:	mov	r4, r0
    a124:	mov	r0, r5
    a126:	bl	8f0c <FsCache::sync()>
    a12a:	cbnz	r0, a150 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    a12c:	ldrb.w	r3, [r4, #50]	; 0x32
    a130:	orr.w	r3, r3, #1
    a134:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    a138:	movs	r0, #0
}
    a13a:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    a13c:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    a13e:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    a140:	and.w	r2, r2, #127	; 0x7f
    a144:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    a148:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    a14c:	b.w	9fcc <ExFatFile::syncDir()>
    a150:	add.w	r0, r5, #528	; 0x210
    a154:	bl	8f0c <FsCache::sync()>
    a158:	cmp	r0, #0
    a15a:	beq.n	a12c <ExFatFile::sync()+0x1c>
    a15c:	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a160:	ldr	r3, [r0, #0]
    a162:	ldr	r3, [r3, #24]
    a164:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    a166:	cmp	r0, #0
    a168:	beq.n	a12c <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    a16a:	movs	r0, #1
    a16c:	pop	{r3, r4, r5, pc}
    a16e:	nop

0000a170 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    a170:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    a174:	ldrb.w	r3, [r0, #49]	; 0x31
    a178:	lsls	r1, r3, #25

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    a17a:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    a17c:	bmi.n	a240 <ExFatFile::addDirCluster()+0xd0>
    a17e:	ldr	r0, [r0, #8]
    a180:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    a182:	ldr.w	r3, [r3, #1084]	; 0x43c
    a186:	add	r0, r3
    a188:	cmp.w	r0, #67108864	; 0x4000000
    a18c:	bcc.n	a194 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    a18e:	movs	r0, #0
    a190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    a194:	mov	r0, r4
    a196:	bl	9e0c <ExFatFile::addCluster()>
    a19a:	cmp	r0, #0
    a19c:	beq.n	a18e <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    a19e:	ldr	r6, [r4, #32]
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    a1a0:	ldrb.w	r3, [r6, #528]	; 0x210
    a1a4:	lsls	r2, r3, #31
    a1a6:	bmi.n	a248 <ExFatFile::addDirCluster()+0xd8>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a1a8:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a1ac:	movs	r5, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    a1ae:	add.w	r8, r6, #544	; 0x220
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a1b2:	str.w	r3, [r6, #540]	; 0x21c
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a1b6:	strb.w	r5, [r6, #528]	; 0x210
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    a1ba:	mov	r1, r5
    a1bc:	mov.w	r2, #512	; 0x200
    a1c0:	mov	r0, r8
    a1c2:	bl	1109c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    a1c6:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    a1c8:	ldr	r3, [r4, #24]
    a1ca:	ldrb.w	r0, [r2, #1093]	; 0x445
    a1ce:	ldr.w	r1, [r2, #1068]	; 0x42c
    a1d2:	subs	r3, #2
    a1d4:	lsls	r3, r0
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    a1d6:	movs	r6, #1
    a1d8:	adds	r7, r3, r1
    a1da:	lsls.w	r3, r6, r0
    a1de:	beq.n	a202 <ExFatFile::addDirCluster()+0x92>
    a1e0:	ldr.w	r0, [r2, #1088]	; 0x440
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    a1e4:	ldr	r3, [r0, #0]
    a1e6:	adds	r1, r7, r5
    a1e8:	ldr	r3, [r3, #28]
    a1ea:	mov	r2, r8
    a1ec:	blx	r3
    a1ee:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    a1f0:	cmp	r0, #0
    a1f2:	beq.n	a18e <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    a1f4:	ldr	r2, [r4, #32]
    a1f6:	ldrb.w	r3, [r2, #1093]	; 0x445
    a1fa:	lsl.w	r3, r6, r3
    a1fe:	cmp	r3, r5
    a200:	bhi.n	a1e0 <ExFatFile::addDirCluster()+0x70>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    a202:	ldrb.w	r3, [r4, #49]	; 0x31
    a206:	lsls	r3, r3, #25
    a208:	bmi.n	a236 <ExFatFile::addDirCluster()+0xc6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a20a:	ldrb.w	r3, [r4, #51]	; 0x33
    a20e:	orn	r3, r3, #127	; 0x7f
    a212:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    a216:	ldr.w	r6, [r2, #1084]	; 0x43c
    a21a:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    a21e:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    a222:	adds	r2, r2, r6
    a224:	mov.w	r7, #0
    a228:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    a22a:	adds	r0, r0, r6
    a22c:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    a22e:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    a232:	strd	r0, r1, [r4, #16]
  }
  return sync();
    a236:	mov	r0, r4

 fail:
  return false;
}
    a238:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    a23c:	b.w	a110 <ExFatFile::sync()>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    a240:	ldr	r0, [r0, #32]
    a242:	bl	9d60 <ExFatPartition::rootLength()>
    a246:	b.n	a180 <ExFatFile::addDirCluster()+0x10>
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    a248:	add.w	r0, r6, #528	; 0x210
    a24c:	bl	8f0c <FsCache::sync()>
    a250:	cmp	r0, #0
    a252:	bne.n	a1a8 <ExFatFile::addDirCluster()+0x38>
    a254:	b.n	a18e <ExFatFile::addDirCluster()+0x1e>
    a256:	nop

0000a258 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    a258:	ldrb.w	r3, [r1, #49]	; 0x31
    a25c:	tst.w	r3, #80	; 0x50
    a260:	bne.n	a266 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a262:	movs	r0, #0
    a264:	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    a266:	push	{r4, r5, lr}
    a268:	sub	sp, #12
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    a26a:	movw	r5, #2562	; 0xa02
    a26e:	ldrb	r3, [r2, #0]
    a270:	ldr	r2, [r2, #4]
    a272:	str	r5, [sp, #0]
    a274:	mov	r4, r0
    a276:	bl	93a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    a27a:	cbnz	r0, a282 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a27c:	movs	r0, #0
    a27e:	add	sp, #12
    a280:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    a282:	movs	r3, #16
    a284:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    a288:	mov	r0, r4
    a28a:	bl	a170 <ExFatFile::addDirCluster()>
    a28e:	cmp	r0, #0
    a290:	beq.n	a27c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    a292:	ldr	r3, [r4, #24]
    a294:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    a296:	movs	r2, #0
    a298:	movs	r3, #0
    a29a:	mov	r0, r4
    a29c:	bl	92a4 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    a2a0:	movs	r3, #193	; 0xc1
  return sync();
    a2a2:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    a2a4:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

 fail:
  return false;
}
    a2a8:	add	sp, #12
    a2aa:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    a2ae:	b.w	a110 <ExFatFile::sync()>
    a2b2:	nop

0000a2b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    a2b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a2b8:	mov	r6, r0
    a2ba:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a2bc:	ldrb.w	r5, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    a2c0:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a2c2:	movs	r0, #0
    a2c4:	strb.w	r0, [sp, #73]	; 0x49
    a2c8:	strb.w	r0, [sp, #74]	; 0x4a
    a2cc:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    a2d0:	cbnz	r5, a2e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a2d2:	mov	r9, r3
    a2d4:	ldrb.w	r3, [r1, #49]	; 0x31
    a2d8:	tst.w	r3, #80	; 0x50
    a2dc:	mov	r4, r1
    a2de:	bne.n	a2e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    a2e0:	movs	r0, #0
}
    a2e2:	add	sp, #84	; 0x54
    a2e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    a2e8:	ldrb	r3, [r2, #0]
    a2ea:	cmp	r3, #47	; 0x2f
    a2ec:	mov	r1, r2
    a2ee:	beq.n	a35e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    a2f0:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    a2f4:	add	r3, sp, #12
    a2f6:	add	r2, sp, #16
    a2f8:	mov	r0, r6
    a2fa:	bl	9008 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    a2fe:	cmp	r0, #0
    a300:	beq.n	a2e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    a302:	ldr	r3, [sp, #12]
    a304:	ldrb	r3, [r3, #0]
    a306:	cmp	r3, #0
    a308:	beq.n	a37a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc6>
    a30a:	ldrb.w	r3, [sp, #16]
    a30e:	ldr	r2, [sp, #20]
    a310:	str.w	r8, [sp]
    a314:	mov	r1, r4
    a316:	mov	r0, r6
    a318:	bl	93a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    a31c:	cbnz	r0, a332 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    a31e:	cmp.w	r9, #0
    a322:	beq.n	a2e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a324:	mov	r1, r4
    a326:	add	r2, sp, #16
    a328:	mov	r0, r6
    a32a:	bl	a258 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    a32e:	cmp	r0, #0
    a330:	beq.n	a2e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    a332:	mov	r4, r6
    a334:	add	r7, sp, #24
    a336:	add.w	lr, r6, #48	; 0x30
    a33a:	ldr	r0, [r4, #0]
    a33c:	ldr	r1, [r4, #4]
    a33e:	ldr	r2, [r4, #8]
    a340:	ldr	r3, [r4, #12]
    a342:	mov	r5, r7
    a344:	stmia	r5!, {r0, r1, r2, r3}
    a346:	adds	r4, #16
    a348:	cmp	r4, lr
    a34a:	mov	r7, r5
    a34c:	bne.n	a33a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    a34e:	ldr	r0, [r4, #0]
    a350:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    a352:	mov	r0, r6
    a354:	bl	8f1c <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    a358:	add	r4, sp, #24
    a35a:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    a35c:	b.n	a2f4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    a35e:	adds	r1, #1
    a360:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    a362:	ldrb	r3, [r1, #0]
    a364:	cmp	r3, #47	; 0x2f
    a366:	beq.n	a35e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    a368:	ldr	r1, [r4, #32]
    a36a:	add	r0, sp, #24
    a36c:	bl	8fe0 <ExFatFile::openRoot(ExFatVolume*)>
    a370:	cmp	r0, #0
    a372:	beq.n	a2e0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    a374:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    a376:	add	r4, sp, #24
    a378:	b.n	a2f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    a37a:	add	r2, sp, #16
    a37c:	mov	r1, r4
    a37e:	mov	r0, r6
    a380:	bl	a258 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

 fail:
  return false;
}
    a384:	add	sp, #84	; 0x54
    a386:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a38a:	nop

0000a38c <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    a38c:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a38e:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    a392:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a394:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    a396:	tst.w	r4, #24
    a39a:	strb.w	r3, [sp, #49]	; 0x31
    a39e:	strb.w	r3, [sp, #50]	; 0x32
    a3a2:	strb.w	r3, [sp, #51]	; 0x33
    a3a6:	strb.w	r3, [sp, #105]	; 0x69
    a3aa:	strb.w	r3, [sp, #106]	; 0x6a
    a3ae:	strb.w	r3, [sp, #107]	; 0x6b
    a3b2:	beq.n	a3bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    a3b4:	ldr	r3, [r1, #32]
    a3b6:	ldr	r4, [r0, #32]
    a3b8:	cmp	r4, r3
    a3ba:	beq.n	a3c2 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

 fail:
  return false;
    a3bc:	movs	r0, #0
}
    a3be:	add	sp, #116	; 0x74
    a3c0:	pop	{r4, r5, r6, r7, pc}
    a3c2:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    a3c4:	movw	r3, #2561	; 0xa01
    a3c8:	mov	r0, sp
    a3ca:	bl	9780 <ExFatFile::open(ExFatFile*, char const*, int)>
    a3ce:	cmp	r0, #0
    a3d0:	beq.n	a3bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    a3d2:	add	r7, sp, #56	; 0x38
    a3d4:	mov	r5, r4
    a3d6:	add.w	lr, r4, #48	; 0x30
    a3da:	ldr	r0, [r5, #0]
    a3dc:	ldr	r1, [r5, #4]
    a3de:	ldr	r2, [r5, #8]
    a3e0:	ldr	r3, [r5, #12]
    a3e2:	mov	r6, r7
    a3e4:	stmia	r6!, {r0, r1, r2, r3}
    a3e6:	adds	r5, #16
    a3e8:	cmp	r5, lr
    a3ea:	mov	r7, r6
    a3ec:	bne.n	a3da <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    a3ee:	ldr	r0, [r5, #0]
    a3f0:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    a3f2:	add	r3, sp, #36	; 0x24
    a3f4:	ldmia.w	r3, {r0, r1, r2}
    a3f8:	add.w	r3, r4, #36	; 0x24
    a3fc:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a400:	ldrb.w	r3, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    a404:	ldrb.w	r2, [sp, #48]	; 0x30
    a408:	strb.w	r2, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a40c:	orn	r3, r3, #127	; 0x7f
    a410:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    a414:	mov	r0, r4
    a416:	bl	a110 <ExFatFile::sync()>
    a41a:	cmp	r0, #0
    a41c:	beq.n	a3bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a41e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    a420:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    a422:	movs	r3, #8
  return oldFile.remove();
    a424:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    a426:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    a428:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    a42c:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    a430:	bl	9e98 <ExFatFile::remove()>
    a434:	b.n	a3be <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    a436:	nop

0000a438 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a438:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    a43c:	lsls	r2, r3, #30
    a43e:	bpl.n	a472 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a440:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a442:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    a444:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    a446:	cbz	r5, a46c <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    a448:	and.w	r3, r3, #64	; 0x40
    a44c:	mov	r4, r0
    a44e:	and.w	r0, r3, #255	; 0xff
    a452:	cbnz	r3, a476 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    a454:	ldr	r1, [r4, #24]
    a456:	cmp	r1, #0
    a458:	bne.n	a4de <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    a45a:	str	r5, [sp, #4]
      m_firstCluster = 0;
    a45c:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    a45e:	mov	r1, r5
    a460:	ldr	r0, [r4, #32]
    a462:	bl	9b8c <ExFatPartition::freeChain(unsigned long)>
    a466:	cbnz	r0, a4b6 <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    a468:	movs	r0, #0
    a46a:	b.n	a46e <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    a46c:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    a46e:	add	sp, #12
    a470:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    a472:	movs	r0, #0
}
    a474:	bx	lr
    a476:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    a478:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    a47a:	ldrb.w	r3, [r0, #1093]	; 0x445
    a47e:	ldrd	r6, r7, [r4, #8]
    a482:	adds	r3, #9
    a484:	uxtb	r3, r3
    a486:	adds.w	r6, r6, #4294967295
    a48a:	rsb	lr, r3, #32
    a48e:	adc.w	r7, r7, #4294967295
    a492:	lsr.w	r2, r6, r3
    a496:	lsl.w	lr, r7, lr
    a49a:	subs	r3, #32
    a49c:	orr.w	r2, r2, lr
    a4a0:	lsr.w	r3, r7, r3
    a4a4:	orrs	r2, r3
    a4a6:	adds	r2, #1
    if (m_curCluster) {
    a4a8:	cbz	r1, a4d8 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    a4aa:	subs	r5, #1
    a4ac:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    a4ae:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    a4b0:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    a4b2:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    a4b4:	cbnz	r2, a4fa <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    a4b6:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a4ba:	ldrb.w	r3, [r4, #51]	; 0x33
    a4be:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    a4c2:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    a4c6:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a4ca:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    a4ce:	mov	r0, r4
    a4d0:	bl	a110 <ExFatFile::sync()>

 fail:
  return false;
}
    a4d4:	add	sp, #12
    a4d6:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    a4d8:	str	r5, [sp, #4]
      m_firstCluster = 0;
    a4da:	str	r1, [r4, #28]
    a4dc:	b.n	a4b4 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    a4de:	add	r2, sp, #8
    a4e0:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    a4e4:	ldr	r0, [r4, #32]
    a4e6:	bl	9b54 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    a4ea:	sxtb	r0, r0
      if (fg < 0) {
    a4ec:	cmp	r0, #0
    a4ee:	blt.n	a468 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    a4f0:	bne.n	a508 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    a4f2:	ldr	r5, [sp, #4]
    a4f4:	cmp	r5, #0
    a4f6:	beq.n	a4b6 <ExFatFile::truncate()+0x7e>
    a4f8:	b.n	a45e <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    a4fa:	movs	r3, #0
    a4fc:	ldr	r1, [sp, #4]
    a4fe:	bl	99e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    a502:	cmp	r0, #0
    a504:	bne.n	a4b6 <ExFatFile::truncate()+0x7e>
    a506:	b.n	a468 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    a508:	mov.w	r2, #4294967295
    a50c:	ldr	r1, [r4, #24]
    a50e:	ldr	r0, [r4, #32]
    a510:	bl	9b68 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    a514:	cmp	r0, #0
    a516:	bne.n	a4f2 <ExFatFile::truncate()+0xba>
    a518:	b.n	a468 <ExFatFile::truncate()+0x30>
    a51a:	nop

0000a51c <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    a51c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a520:	ldrb.w	r3, [r0, #51]	; 0x33
    a524:	sub	sp, #12

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    a526:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    a528:	mov	r4, r0
    a52a:	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    a52c:	bmi.n	a544 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    a52e:	ldrb.w	r3, [r4, #50]	; 0x32
    a532:	orr.w	r3, r3, #1
    a536:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    a53a:	mov.w	r0, #4294967295
}
    a53e:	add	sp, #12
    a540:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    a544:	lsls	r2, r3, #28
    a546:	mov	r9, r1
    a548:	bmi.w	a74e <ExFatFile::write(void const*, unsigned int)+0x232>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    a54c:	ldr	r3, [sp, #0]
    a54e:	cmp	r3, #0
    a550:	beq.w	a776 <ExFatFile::write(void const*, unsigned int)+0x25a>
    a554:	mov	r1, r4
    a556:	ldrd	r2, r3, [r1], #24
    a55a:	ldr.w	r8, [sp]
    a55e:	str	r1, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    a560:	mov.w	fp, #1
    a564:	mov	sl, r9
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    a566:	ldr	r0, [r4, #32]
    a568:	ldr.w	r5, [r0, #1080]	; 0x438
    a56c:	ands	r5, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    a56e:	ubfx	r9, r5, #0, #9
    if (clusterOffset == 0) {
    a572:	cbnz	r5, a5c6 <ExFatFile::write(void const*, unsigned int)+0xaa>
      // start of new cluster
      if (m_curCluster != 0) {
    a574:	ldr	r1, [r4, #24]
    a576:	cmp	r1, #0
    a578:	beq.w	a6d8 <ExFatFile::write(void const*, unsigned int)+0x1bc>
        int fg;

        if (isContiguous()) {
    a57c:	ldrb.w	r3, [r4, #51]	; 0x33
    a580:	lsls	r3, r3, #25
    a582:	bpl.w	a720 <ExFatFile::write(void const*, unsigned int)+0x204>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    a586:	ldrd	r6, r7, [r4, #8]
    a58a:	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    a58e:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    a590:	adds	r2, #9
    a592:	uxtb	r2, r2
    a594:	adds.w	r6, r6, #4294967295
    a598:	adc.w	r7, r7, #4294967295
    a59c:	rsb	lr, r2, #32
    a5a0:	lsrs	r6, r2
    a5a2:	lsl.w	lr, r7, lr
    a5a6:	subs	r2, #32
    a5a8:	orr.w	r6, r6, lr
    a5ac:	lsr.w	r2, r7, r2
    a5b0:	orrs	r6, r2
    a5b2:	add	r3, r6
    a5b4:	cmp	r1, r3
    a5b6:	bcc.w	a706 <ExFatFile::write(void const*, unsigned int)+0x1ea>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    a5ba:	mov	r0, r4
    a5bc:	bl	9e0c <ExFatFile::addCluster()>
    a5c0:	cmp	r0, #0
    a5c2:	beq.n	a52e <ExFatFile::write(void const*, unsigned int)+0x12>
    a5c4:	ldr	r0, [r4, #32]
    a5c6:	ldr	r6, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    a5c8:	ldr.w	r7, [r0, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    a5cc:	ldrb.w	lr, [r0, #1093]	; 0x445
    a5d0:	lsrs	r5, r5, #9
    a5d2:	subs	r6, #2
    a5d4:	adds	r1, r5, r7
    a5d6:	lsl.w	r6, r6, lr
    a5da:	add	r1, r6

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    a5dc:	cmp.w	r9, #0
    a5e0:	bne.n	a6ca <ExFatFile::write(void const*, unsigned int)+0x1ae>
    a5e2:	cmp.w	r8, #512	; 0x200
    a5e6:	bcs.n	a684 <ExFatFile::write(void const*, unsigned int)+0x168>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    a5e8:	ldrd	r2, r3, [r4, #16]
    a5ec:	ldrd	r6, r7, [r4]
    a5f0:	cmp.w	r8, #512	; 0x200
    a5f4:	mov	r5, r8
    a5f6:	it	cs
    a5f8:	movcs.w	r5, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    a5fc:	cmp	r7, r3
    a5fe:	it	eq
    a600:	cmpeq	r6, r2
    a602:	ite	cc
    a604:	movcc	r2, #1
    a606:	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    a608:	add.w	r0, r0, #528	; 0x210
    a60c:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    a610:	cmp	r0, #0
    a612:	beq.n	a52e <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    a614:	add	r0, r9
    a616:	mov	r2, r5
    a618:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a61a:	add	r9, r5
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    a61c:	bl	db90 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    a620:	cmp.w	r9, #512	; 0x200
    a624:	beq.w	a73c <ExFatFile::write(void const*, unsigned int)+0x220>
    a628:	mov	r0, r5
    a62a:	movs	r1, #0
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a62c:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a630:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a634:	adds	r2, r2, r0
    a636:	adcs	r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a638:	cmp	r7, r3
    a63a:	it	eq
    a63c:	cmpeq	r6, r2
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    a63e:	add	sl, r5
    toWrite -= n;
    a640:	rsb	r8, r5, r8
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    a644:	strd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    a648:	bcs.n	a65a <ExFatFile::write(void const*, unsigned int)+0x13e>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    a64a:	ldrb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    a64e:	strd	r2, r3, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    a652:	orn	r1, r1, #127	; 0x7f
    a656:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    a65a:	cmp.w	r8, #0
    a65e:	bne.n	a566 <ExFatFile::write(void const*, unsigned int)+0x4a>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    a660:	ldrd	r0, r1, [r4, #8]
    a664:	cmp	r1, r3
    a666:	it	eq
    a668:	cmpeq	r0, r2
    a66a:	bcc.n	a75e <ExFatFile::write(void const*, unsigned int)+0x242>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    a66c:	ldr	r3, [pc, #268]	; (a77c <ExFatFile::write(void const*, unsigned int)+0x260>)
    a66e:	ldr	r3, [r3, #0]
    a670:	cmp	r3, #0
    a672:	beq.n	a772 <ExFatFile::write(void const*, unsigned int)+0x256>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a674:	ldrb.w	r3, [r4, #51]	; 0x33
    a678:	ldr	r0, [sp, #0]
    a67a:	orn	r3, r3, #127	; 0x7f
    a67e:	strb.w	r3, [r4, #51]	; 0x33
    a682:	b.n	a53e <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    a684:	cmp.w	r8, #1024	; 0x400
    a688:	bcc.n	a6e0 <ExFatFile::write(void const*, unsigned int)+0x1c4>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    a68a:	lsl.w	r3, fp, lr
    a68e:	subs	r5, r3, r5
    a690:	ldr.w	r2, [r0, #540]	; 0x21c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    a694:	mov.w	r3, r8, lsr #9
    a698:	cmp	r3, r5
    a69a:	it	cs
    a69c:	movcs	r3, r5
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    a69e:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    a6a0:	mov.w	r5, r3, lsl #9
    a6a4:	bhi.n	a6b8 <ExFatFile::write(void const*, unsigned int)+0x19c>
    a6a6:	adds	r6, r1, r3
    a6a8:	cmp	r2, r6
    a6aa:	bcs.n	a6b8 <ExFatFile::write(void const*, unsigned int)+0x19c>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a6ac:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a6b0:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    a6b4:	str.w	r2, [r0, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    a6b8:	ldr.w	r0, [r0, #532]	; 0x214
    a6bc:	ldr	r6, [r0, #0]
    a6be:	mov	r2, sl
    a6c0:	ldr	r6, [r6, #32]
    a6c2:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    a6c4:	cmp	r0, #0
    a6c6:	bne.n	a628 <ExFatFile::write(void const*, unsigned int)+0x10c>
    a6c8:	b.n	a52e <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    a6ca:	rsb	r5, r9, #512	; 0x200
    a6ce:	cmp	r5, r8
    a6d0:	it	cs
    a6d2:	movcs	r5, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    a6d4:	movs	r2, #1
    a6d6:	b.n	a608 <ExFatFile::write(void const*, unsigned int)+0xec>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    a6d8:	ldr	r6, [r4, #28]
    a6da:	cbz	r6, a70c <ExFatFile::write(void const*, unsigned int)+0x1f0>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    a6dc:	str	r6, [r4, #24]
    a6de:	b.n	a5c8 <ExFatFile::write(void const*, unsigned int)+0xac>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    a6e0:	ldr.w	r3, [r0, #540]	; 0x21c
    a6e4:	cmp	r1, r3
    a6e6:	beq.n	a72e <ExFatFile::write(void const*, unsigned int)+0x212>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    a6e8:	ldr.w	r0, [r0, #532]	; 0x214
    a6ec:	ldr	r3, [r0, #0]
    a6ee:	mov	r2, sl
    a6f0:	ldr	r3, [r3, #28]
    a6f2:	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    a6f4:	cmp	r0, #0
    a6f6:	beq.w	a52e <ExFatFile::write(void const*, unsigned int)+0x12>
    a6fa:	mov.w	r0, #512	; 0x200
    a6fe:	movs	r1, #0
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    a700:	mov.w	r5, #512	; 0x200
    a704:	b.n	a62c <ExFatFile::write(void const*, unsigned int)+0x110>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    a706:	adds	r6, r1, #1
    a708:	str	r6, [r4, #24]
    a70a:	b.n	a5c8 <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    a70c:	mov	r0, r4
    a70e:	bl	9e0c <ExFatFile::addCluster()>
    a712:	cmp	r0, #0
    a714:	beq.w	a52e <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    a718:	ldr	r6, [r4, #24]
    a71a:	str	r6, [r4, #28]
    a71c:	ldr	r0, [r4, #32]
    a71e:	b.n	a5c8 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    a720:	ldr	r2, [sp, #4]
    a722:	bl	9b54 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    a726:	cmp	r0, #0
    a728:	bne.w	a5c4 <ExFatFile::write(void const*, unsigned int)+0xa8>
    a72c:	b.n	a5ba <ExFatFile::write(void const*, unsigned int)+0x9e>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    a72e:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    a732:	strb.w	r9, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    a736:	str.w	r3, [r0, #540]	; 0x21c
    a73a:	b.n	a6e8 <ExFatFile::write(void const*, unsigned int)+0x1cc>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    a73c:	ldr	r0, [r4, #32]
    a73e:	add.w	r0, r0, #528	; 0x210
    a742:	bl	8f0c <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    a746:	cmp	r0, #0
    a748:	bne.w	a628 <ExFatFile::write(void const*, unsigned int)+0x10c>
    a74c:	b.n	a52e <ExFatFile::write(void const*, unsigned int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    a74e:	ldrd	r2, r3, [r0, #16]
    a752:	bl	92a4 <ExFatFile::seekSet(unsigned long long)>
    a756:	cmp	r0, #0
    a758:	beq.w	a52e <ExFatFile::write(void const*, unsigned int)+0x12>
    a75c:	b.n	a54c <ExFatFile::write(void const*, unsigned int)+0x30>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a75e:	ldrb.w	r1, [r4, #51]	; 0x33
    a762:	ldr	r0, [sp, #0]
    a764:	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    a768:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    a76c:	strb.w	r1, [r4, #51]	; 0x33
    a770:	b.n	a53e <ExFatFile::write(void const*, unsigned int)+0x22>
    a772:	ldr	r0, [sp, #0]
    a774:	b.n	a53e <ExFatFile::write(void const*, unsigned int)+0x22>
    a776:	ldrd	r2, r3, [r4]
    a77a:	b.n	a660 <ExFatFile::write(void const*, unsigned int)+0x144>
    a77c:	.word	0x20006af8

0000a780 <FatFile::openRoot(FatVolume*) [clone .part.38]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    a780:	push	{r3, r4, r5, lr}
    a782:	mov	r4, r0
    a784:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    a786:	movs	r2, #36	; 0x24
    a788:	movs	r1, #0
    a78a:	bl	1109c <memset>

  m_vol = vol;
    a78e:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    a790:	ldrb	r3, [r5, #7]
    a792:	cmp	r3, #16
    a794:	beq.n	a7a8 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x28>
    a796:	cmp	r3, #32
    a798:	bne.n	a7a4 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    a79a:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a79c:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    a79e:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a7a0:	strb	r0, [r4, #2]
    a7a2:	pop	{r3, r4, r5, pc}
  return true;

 fail:
  return false;
    a7a4:	movs	r0, #0
}
    a7a6:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    a7a8:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a7aa:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    a7ac:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    a7ae:	strb	r0, [r4, #2]
    a7b0:	pop	{r3, r4, r5, pc}
    a7b2:	nop

0000a7b4 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    a7b4:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    a7b6:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    a7b8:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    a7bc:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    a7be:	mov	r1, r5
    a7c0:	ldr	r0, [r0, #8]
    a7c2:	bl	b5fc <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    a7c6:	cbz	r0, a7de <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    a7c8:	cbz	r5, a7e0 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    a7ca:	ldr	r3, [r4, #16]
    a7cc:	adds	r5, #1
    a7ce:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    a7d0:	ldrb	r3, [r4, #2]
    a7d2:	it	ne
    a7d4:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    a7d8:	orn	r3, r3, #127	; 0x7f
    a7dc:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    a7de:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    a7e0:	ldrb	r3, [r4, #2]
    a7e2:	orr.w	r3, r3, #64	; 0x40
    a7e6:	b.n	a7d8 <FatFile::addCluster()+0x24>

0000a7e8 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    a7e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    a7ec:	ldrb	r3, [r0, #0]
    a7ee:	and.w	r3, r3, #32
    a7f2:	cbnz	r3, a800 <FatFile::addDirCluster()+0x18>
    a7f4:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    a7f8:	ldr	r1, [r0, #20]
    a7fa:	ldr	r3, [pc, #128]	; (a87c <FatFile::addDirCluster()+0x94>)
    a7fc:	cmp	r1, r3
    a7fe:	bls.n	a808 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    a800:	movs	r6, #0
}
    a802:	mov	r0, r6
    a804:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a808:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    a80a:	bl	a7b4 <FatFile::addCluster()>
    a80e:	mov	r6, r0
    a810:	cmp	r0, #0
    a812:	beq.n	a800 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    a814:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    a816:	ldr	r3, [r5, #16]
    a818:	ldrb	r7, [r0, #6]
    a81a:	ldr	r2, [r0, #20]
    a81c:	subs	r3, #2
    a81e:	lsls	r3, r7
    a820:	adds	r7, r3, r2
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a822:	adds	r0, #36	; 0x24
    a824:	mov	r1, r7
    a826:	movs	r2, #5
    a828:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    a82c:	mov	r8, r0
    a82e:	cmp	r0, #0
    a830:	beq.n	a800 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    a832:	mov.w	r2, #512	; 0x200
    a836:	mov	r1, r4
    a838:	bl	1109c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    a83c:	ldr	r3, [r5, #8]
    a83e:	ldrb	r2, [r3, #4]
    a840:	cmp	r2, #1
    a842:	bls.n	a866 <FatFile::addDirCluster()+0x7e>
    a844:	movs	r4, #1
    a846:	b.n	a850 <FatFile::addDirCluster()+0x68>
    a848:	ldr	r3, [r5, #8]
    a84a:	ldrb	r2, [r3, #4]
    a84c:	cmp	r2, r4
    a84e:	bls.n	a866 <FatFile::addDirCluster()+0x7e>
    a850:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    a852:	ldr	r3, [r0, #0]
    a854:	adds	r1, r4, r7
    a856:	ldr	r3, [r3, #28]
    a858:	mov	r2, r8
    a85a:	blx	r3
    a85c:	adds	r4, #1
    a85e:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    a860:	cmp	r0, #0
    a862:	bne.n	a848 <FatFile::addDirCluster()+0x60>
    a864:	b.n	a800 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    a866:	ldrb	r3, [r3, #6]
    a868:	ldr	r1, [r5, #20]
    a86a:	mov.w	r2, #512	; 0x200
    a86e:	lsl.w	r3, r2, r3
    a872:	uxtah	r3, r1, r3
    a876:	str	r3, [r5, #20]
    a878:	b.n	a802 <FatFile::addDirCluster()+0x1a>
    a87a:	nop
    a87c:	.word	0x001ffdff

0000a880 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    a880:	push	{r4, lr}
    a882:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a884:	ldr	r0, [r0, #8]
    a886:	mov	r2, r1
    a888:	adds	r0, #36	; 0x24
    a88a:	ldr	r1, [r4, #24]
    a88c:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    a890:	cbz	r0, a89c <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    a892:	ldrh	r3, [r4, #4]
    a894:	and.w	r3, r3, #15
    a898:	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    a89c:	pop	{r4, pc}
    a89e:	nop

0000a8a0 <FatFile::sync() [clone .part.42]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    a8a0:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a8a2:	ldrsb.w	r3, [r0, #2]
    a8a6:	cmp	r3, #0
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    a8a8:	sub	sp, #8
    a8aa:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    a8ac:	blt.n	a8e2 <FatFile::sync() [clone .part.42]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    a8ae:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a8b0:	add.w	r0, r5, #36	; 0x24
    a8b4:	bl	8f0c <FsCache::sync()>
    a8b8:	cbnz	r0, a8c8 <FatFile::sync() [clone .part.42]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    a8ba:	ldrb	r3, [r4, #1]
    a8bc:	orr.w	r3, r3, #1
    a8c0:	strb	r3, [r4, #1]
  return false;
    a8c2:	movs	r0, #0
}
    a8c4:	add	sp, #8
    a8c6:	pop	{r4, r5, r6, pc}
    a8c8:	add.w	r0, r5, #564	; 0x234
    a8cc:	bl	8f0c <FsCache::sync()>
    a8d0:	cmp	r0, #0
    a8d2:	beq.n	a8ba <FatFile::sync() [clone .part.42]+0x1a>
    a8d4:	ldr	r0, [r5, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    a8d6:	ldr	r3, [r0, #0]
    a8d8:	ldr	r3, [r3, #24]
    a8da:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a8dc:	cmp	r0, #0
    a8de:	beq.n	a8ba <FatFile::sync() [clone .part.42]+0x1a>
    a8e0:	b.n	a8c4 <FatFile::sync() [clone .part.42]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    a8e2:	movs	r1, #1
    a8e4:	bl	a880 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    a8e8:	mov	r5, r0
    a8ea:	cmp	r0, #0
    a8ec:	beq.n	a8ba <FatFile::sync() [clone .part.42]+0x1a>
    a8ee:	ldrb	r3, [r0, #0]
    a8f0:	cmp	r3, #229	; 0xe5
    a8f2:	beq.n	a8ba <FatFile::sync() [clone .part.42]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    a8f4:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    a8f6:	ldr	r2, [pc, #56]	; (a930 <FatFile::sync() [clone .part.42]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    a8f8:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    a8fa:	itt	mi
    a8fc:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    a8fe:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    a900:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    a902:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    a904:	strh	r3, [r0, #26]
    a906:	lsrs	r3, r3, #16
    a908:	strh	r3, [r0, #20]
    a90a:	cbz	r6, a926 <FatFile::sync() [clone .part.42]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    a90c:	add.w	r2, sp, #3
    a910:	add.w	r1, sp, #6
    a914:	add	r0, sp, #4
    a916:	blx	r6
      setLe16(dir->modifyDate, date);
    a918:	ldrh.w	r3, [sp, #4]
    a91c:	ldrh.w	r2, [sp, #6]
    a920:	strh	r3, [r5, #24]
    a922:	strh	r3, [r5, #18]
    a924:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    a926:	ldrb	r3, [r4, #2]
    a928:	and.w	r3, r3, #127	; 0x7f
    a92c:	strb	r3, [r4, #2]
    a92e:	b.n	a8ae <FatFile::sync() [clone .part.42]+0xe>
    a930:	.word	0x20006af8

0000a934 <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    a934:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a936:	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    a938:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    a93a:	cbnz	r3, a946 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a93c:	movs	r3, #0
    a93e:	strb	r3, [r4, #0]
  m_flags = 0;
    a940:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    a942:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    a944:	pop	{r4, pc}
    a946:	bl	a8a0 <FatFile::sync() [clone .part.42]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    a94a:	movs	r3, #0
    a94c:	strb	r3, [r4, #0]
  m_flags = 0;
    a94e:	strb	r3, [r4, #2]
  return rtn;
}
    a950:	pop	{r4, pc}
    a952:	nop

0000a954 <FatFile::mkdir(FatFile*, fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    a954:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    a958:	ldrb	r4, [r1, #0]
    a95a:	tst.w	r4, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    a95e:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    a960:	bne.n	a96a <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

 fail:
  return false;
}
    a962:	movs	r0, #0
    a964:	add	sp, #36	; 0x24
    a966:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    a96a:	movw	r3, #2562	; 0xa02
    a96e:	mov	r5, r0
    a970:	mov	r4, r1
    a972:	bl	be1c <FatFile::open(FatFile*, fname_t*, int)>
    a976:	cmp	r0, #0
    a978:	beq.n	a962 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    a97a:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    a97c:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    a97e:	strb	r2, [r5, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    a980:	strb	r3, [r5, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    a982:	mov	r0, r5
    a984:	bl	a7e8 <FatFile::addDirCluster()>
    a988:	cmp	r0, #0
    a98a:	beq.n	a962 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    a98c:	ldrb	r3, [r5, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    a98e:	ldr	r2, [r5, #16]
    a990:	str	r2, [r5, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    a992:	cmp	r3, #0
    a994:	bne.n	aa82 <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    a996:	movs	r1, #1
    a998:	mov	r0, r5
    a99a:	bl	a880 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a99e:	mov	r6, r0
    a9a0:	cmp	r0, #0
    a9a2:	beq.n	a962 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    a9a4:	movs	r3, #16
    a9a6:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a9a8:	ldr	r2, [r0, #8]
    a9aa:	ldr	r1, [r6, #4]
    a9ac:	ldr	r3, [r6, #12]
    a9ae:	ldr	r0, [r0, #0]
    a9b0:	ldrh.w	r8, [r6, #20]
    a9b4:	ldrh.w	r9, [r6, #26]
    a9b8:	mov	r7, sp
    a9ba:	stmia	r7!, {r0, r1, r2, r3}
    a9bc:	ldr	r1, [r6, #20]
    a9be:	ldr	r2, [r6, #24]
    a9c0:	ldr	r3, [r6, #28]
    a9c2:	ldr	r0, [r6, #16]
  dot.name[0] = '.';
    a9c4:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    a9c6:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    a9c8:	movs	r3, #46	; 0x2e
    a9ca:	strb.w	r3, [r6, #-32]!
    a9ce:	add.w	r1, sp, #10
    a9d2:	mov	r3, r6
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    a9d4:	movs	r2, #32
    a9d6:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    a9da:	cmp	r3, r1
    a9dc:	bne.n	a9d6 <FatFile::mkdir(FatFile*, fname_t*)+0x82>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    a9de:	ldr	r0, [r5, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    a9e0:	ldr	r3, [r5, #32]
    a9e2:	ldrb	r2, [r0, #6]
    a9e4:	ldr	r1, [r0, #20]
    a9e6:	subs	r3, #2
    a9e8:	lsls	r3, r2
    a9ea:	add	r1, r3
    a9ec:	adds	r0, #36	; 0x24
    a9ee:	movs	r2, #1
    a9f0:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
  if (!pc) {
    a9f4:	mov	lr, r0
    a9f6:	cmp	r0, #0
    a9f8:	beq.n	a962 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    a9fa:	mov	r7, r6
    a9fc:	strh.w	r8, [sp, #20]
    aa00:	strh.w	r9, [sp, #26]
    aa04:	ldmia	r7!, {r0, r1, r2, r3}
    aa06:	str.w	r0, [lr]
    aa0a:	str.w	r1, [lr, #4]
    aa0e:	str.w	r2, [lr, #8]
    aa12:	str.w	r3, [lr, #12]
    aa16:	ldmia	r7!, {r0, r1, r2, r3}
    aa18:	str.w	r0, [lr, #16]
    aa1c:	str.w	r1, [lr, #20]
    aa20:	str.w	r2, [lr, #24]
    aa24:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    aa28:	ldr	r3, [r4, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    aa2a:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    aa2e:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    aa30:	lsrs	r3, r3, #16
    aa32:	mov	r4, r6
    aa34:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    aa38:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    aa3c:	ldmia	r4!, {r0, r1, r2, r3}
    aa3e:	add.w	r6, lr, #32
    aa42:	str.w	r0, [lr, #32]
    aa46:	str	r1, [r6, #4]
    aa48:	str	r2, [r6, #8]
    aa4a:	str	r3, [r6, #12]
    aa4c:	ldmia	r4!, {r0, r1, r2, r3}
    aa4e:	str	r0, [r6, #16]
    aa50:	str	r1, [r6, #20]
    aa52:	str	r2, [r6, #24]
    aa54:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    aa56:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    aa58:	add.w	r0, r4, #36	; 0x24
    aa5c:	bl	8f0c <FsCache::sync()>
    aa60:	cmp	r0, #0
    aa62:	beq.w	a962 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    aa66:	add.w	r0, r4, #564	; 0x234
    aa6a:	bl	8f0c <FsCache::sync()>
    aa6e:	cmp	r0, #0
    aa70:	beq.w	a962 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    aa74:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    aa76:	ldr	r3, [r0, #0]
    aa78:	ldr	r3, [r3, #24]

 fail:
  return false;
}
    aa7a:	add	sp, #36	; 0x24
    aa7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aa80:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    aa82:	ldr	r3, [r5, #20]
    aa84:	cbz	r3, aa94 <FatFile::mkdir(FatFile*, fname_t*)+0x140>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    aa86:	ldrb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    aa88:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    aa8a:	bic.w	r3, r3, #32
    aa8e:	strb	r3, [r5, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    aa90:	str	r2, [r5, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    aa92:	str	r2, [r5, #20]
    aa94:	mov	r0, r5
    aa96:	bl	a8a0 <FatFile::sync() [clone .part.42]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    aa9a:	cmp	r0, #0
    aa9c:	beq.w	a962 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    aaa0:	b.n	a996 <FatFile::mkdir(FatFile*, fname_t*)+0x42>
    aaa2:	nop

0000aaa4 <FatFile::mkdir(FatFile*, char const*, bool)>:
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    aaa4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aaa8:	mov	r6, r0
    aaaa:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    aaac:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
  return m_vol->isBusy();
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    aaae:	str	r2, [sp, #4]
    aab0:	movs	r0, #0
    aab2:	strb.w	r0, [sp, #36]	; 0x24
    aab6:	strb.w	r0, [sp, #37]	; 0x25
    aaba:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    aabe:	cbnz	r5, aacc <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    aac0:	mov	r8, r3
    aac2:	ldrb	r3, [r1, #0]
    aac4:	tst.w	r3, #112	; 0x70
    aac8:	mov	r4, r1
    aaca:	bne.n	aad4 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

 fail:
  return false;
    aacc:	movs	r0, #0
}
    aace:	add	sp, #72	; 0x48
    aad0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    aad4:	ldrb	r3, [r2, #0]
    aad6:	cmp	r3, #47	; 0x2f
    aad8:	mov	r0, r2
    aada:	beq.n	ab32 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aadc:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    aade:	add	r2, sp, #4
    aae0:	add	r1, sp, #12
    aae2:	bl	b9f0 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aae6:	add	r2, sp, #12
    aae8:	mov	r1, r4
    aaea:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    aaec:	cmp	r0, #0
    aaee:	beq.n	aacc <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    aaf0:	ldr	r5, [sp, #4]
    aaf2:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aaf4:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    aaf6:	cmp	r5, #0
    aaf8:	beq.n	ab56 <FatFile::mkdir(FatFile*, char const*, bool)+0xb2>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    aafa:	bl	be1c <FatFile::open(FatFile*, fname_t*, int)>
    aafe:	cbnz	r0, ab14 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    ab00:	cmp.w	r8, #0
    ab04:	beq.n	aacc <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    ab06:	mov	r1, r4
    ab08:	add	r2, sp, #12
    ab0a:	mov	r0, r6
    ab0c:	bl	a954 <FatFile::mkdir(FatFile*, fname_t*)>
    ab10:	cmp	r0, #0
    ab12:	beq.n	aacc <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    ab14:	mov	r5, r6
    ab16:	ldmia	r5!, {r0, r1, r2, r3}
    ab18:	add	r4, sp, #36	; 0x24
    ab1a:	stmia	r4!, {r0, r1, r2, r3}
    ab1c:	ldmia	r5!, {r0, r1, r2, r3}
    ab1e:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    ab20:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    ab22:	ldr	r2, [r5, #0]
    ab24:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    ab26:	cbnz	r3, ab4e <FatFile::mkdir(FatFile*, char const*, bool)+0xaa>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    ab28:	strb	r7, [r6, #0]
  m_flags = 0;
    ab2a:	strb	r7, [r6, #2]
    ab2c:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    ab2e:	add	r4, sp, #36	; 0x24
    ab30:	b.n	aade <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    ab32:	adds	r0, #1
    ab34:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    ab36:	ldrb	r3, [r0, #0]
    ab38:	cmp	r3, #47	; 0x2f
    ab3a:	beq.n	ab32 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    ab3c:	ldr	r1, [r4, #8]
    ab3e:	add	r0, sp, #36	; 0x24
    ab40:	bl	a780 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    ab44:	cmp	r0, #0
    ab46:	beq.n	aacc <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    ab48:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    ab4a:	add	r4, sp, #36	; 0x24
    ab4c:	b.n	aadc <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    ab4e:	mov	r0, r6
    ab50:	bl	a8a0 <FatFile::sync() [clone .part.42]>
    ab54:	b.n	ab28 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    ab56:	add	r2, sp, #12
    ab58:	mov	r1, r4
    ab5a:	mov	r0, r6
    ab5c:	bl	a954 <FatFile::mkdir(FatFile*, fname_t*)>

 fail:
  return false;
}
    ab60:	add	sp, #72	; 0x48
    ab62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab66:	nop

0000ab68 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    ab68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab6c:	mov	r6, r0
    ab6e:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    ab70:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    ab72:	str	r2, [sp, #4]
    ab74:	movs	r0, #0
    ab76:	strb.w	r0, [sp, #36]	; 0x24
    ab7a:	strb.w	r0, [sp, #37]	; 0x25
    ab7e:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    ab82:	cbnz	r5, ab90 <FatFile::open(FatFile*, char const*, int)+0x28>
    ab84:	mov	r8, r3
    ab86:	ldrb	r3, [r1, #0]
    ab88:	tst.w	r3, #112	; 0x70
    ab8c:	mov	r4, r1
    ab8e:	bne.n	ab98 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    ab90:	movs	r0, #0
}
    ab92:	add	sp, #72	; 0x48
    ab94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    ab98:	ldrb	r3, [r2, #0]
    ab9a:	cmp	r3, #47	; 0x2f
    ab9c:	mov	r0, r2
    ab9e:	beq.n	abec <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    aba0:	movs	r7, #0
    aba2:	b.n	abac <FatFile::open(FatFile*, char const*, int)+0x44>
    aba4:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    aba6:	strb	r7, [r6, #0]
  m_flags = 0;
    aba8:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    abaa:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    abac:	add	r2, sp, #4
    abae:	add	r1, sp, #12
    abb0:	bl	b9f0 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    abb4:	add	r2, sp, #12
    abb6:	mov	r1, r4
    abb8:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    abba:	cmp	r0, #0
    abbc:	beq.n	ab90 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    abbe:	ldr	r5, [sp, #4]
    abc0:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    abc2:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    abc4:	cbz	r5, ac0a <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    abc6:	bl	be1c <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    abca:	mov	r5, r6
    abcc:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    abce:	cmp	r0, #0
    abd0:	beq.n	ab90 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    abd2:	ldmia	r5!, {r0, r1, r2, r3}
    abd4:	stmia	r4!, {r0, r1, r2, r3}
    abd6:	ldmia	r5!, {r0, r1, r2, r3}
    abd8:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    abda:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    abdc:	ldr	r2, [r5, #0]
    abde:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    abe0:	cmp	r3, #0
    abe2:	beq.n	aba4 <FatFile::open(FatFile*, char const*, int)+0x3c>
    abe4:	mov	r0, r6
    abe6:	bl	a8a0 <FatFile::sync() [clone .part.42]>
    abea:	b.n	aba4 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    abec:	adds	r0, #1
    abee:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    abf0:	ldrb	r3, [r0, #0]
    abf2:	cmp	r3, #47	; 0x2f
    abf4:	beq.n	abec <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    abf6:	cbz	r3, ac1c <FatFile::open(FatFile*, char const*, int)+0xb4>
    abf8:	ldr	r1, [r4, #8]
    abfa:	add	r0, sp, #36	; 0x24
    abfc:	bl	a780 <FatFile::openRoot(FatVolume*) [clone .part.38]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    ac00:	cmp	r0, #0
    ac02:	beq.n	ab90 <FatFile::open(FatFile*, char const*, int)+0x28>
    ac04:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    ac06:	add	r4, sp, #36	; 0x24
    ac08:	b.n	aba0 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    ac0a:	mov	r3, r8
    ac0c:	add	r2, sp, #12
    ac0e:	mov	r1, r4
    ac10:	mov	r0, r6
    ac12:	bl	be1c <FatFile::open(FatFile*, fname_t*, int)>

 fail:
  return false;
}
    ac16:	add	sp, #72	; 0x48
    ac18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac1c:	ldr	r1, [r4, #8]
    ac1e:	mov	r0, r6
    ac20:	bl	a780 <FatFile::openRoot(FatVolume*) [clone .part.38]>
    ac24:	b.n	ab92 <FatFile::open(FatFile*, char const*, int)+0x2a>
    ac26:	nop

0000ac28 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    ac28:	cbz	r1, ac32 <FatFile::open(FatVolume*, char const*, int)+0xa>
    ac2a:	addw	r1, r1, #1092	; 0x444
    ac2e:	b.w	ab68 <FatFile::open(FatFile*, char const*, int)>
}
    ac32:	mov	r0, r1
    ac34:	bx	lr
    ac36:	nop

0000ac38 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    ac38:	ldrb	r3, [r0, #0]
    ac3a:	cbz	r3, ac40 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    ac3c:	movs	r0, #0
    ac3e:	bx	lr
    ac40:	b.w	a780 <FatFile::openRoot(FatVolume*) [clone .part.38]>

0000ac44 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    ac44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    ac48:	ldrb	r3, [r0, #2]
    ac4a:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    ac4c:	sub	sp, #12
    ac4e:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    ac50:	bpl.w	ad78 <FatFile::read(void*, unsigned int)+0x134>
    ac54:	mov	r7, r1
    ac56:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    ac58:	lsls	r6, r1, #28
    ac5a:	mov	r9, r2
    ac5c:	bmi.w	ad8a <FatFile::read(void*, unsigned int)+0x146>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    ac60:	lsls	r4, r1, #26
    ac62:	bpl.n	ac76 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    ac64:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    ac66:	ldr	r3, [r0, #20]
    ac68:	ldrh	r2, [r2, #8]
    ac6a:	rsb	r3, r3, r2, lsl #5
    ac6e:	uxth	r3, r3
    ac70:	cmp	r9, r3
    ac72:	it	cs
    ac74:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ac76:	cmp.w	r9, #0
    ac7a:	beq.w	add6 <FatFile::read(void*, unsigned int)+0x192>
    ac7e:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ac80:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    ac82:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ac84:	mov	r6, r9
    ac86:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    ac8a:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ac8e:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    ac92:	bpl.n	ad16 <FatFile::read(void*, unsigned int)+0xd2>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    ac94:	ldr	r1, [r2, #32]
    ac96:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    ac9a:	cmp.w	fp, #0
    ac9e:	bne.n	ad4c <FatFile::read(void*, unsigned int)+0x108>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    aca0:	cmp.w	r6, #512	; 0x200
    aca4:	bcc.n	ad4c <FatFile::read(void*, unsigned int)+0x108>
    aca6:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    aca8:	cmp	r1, r3
    acaa:	beq.n	ad4c <FatFile::read(void*, unsigned int)+0x108>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    acac:	cmp.w	r6, #1024	; 0x400
    acb0:	bcc.n	ad9c <FatFile::read(void*, unsigned int)+0x158>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    acb2:	ldrb	r0, [r5, #0]
    acb4:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    acb6:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    acba:	bmi.n	acc8 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    acbc:	ldrb	r0, [r2, #4]
    acbe:	rsb	r0, r8, r0
    acc2:	cmp	fp, r0
    acc4:	it	cs
    acc6:	movcs	fp, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    acc8:	cmp	r1, r3
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    acca:	mov.w	r4, fp, lsl #9
    acce:	bhi.n	acec <FatFile::read(void*, unsigned int)+0xa8>
    acd0:	add.w	r0, r1, fp
    acd4:	cmp	r3, r0
    acd6:	bcs.n	acec <FatFile::read(void*, unsigned int)+0xa8>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    acd8:	add.w	r0, r2, #36	; 0x24
    acdc:	str	r1, [sp, #4]
    acde:	str	r2, [sp, #0]
    ace0:	bl	8f0c <FsCache::sync()>
    ace4:	ldr	r2, [sp, #0]
    ace6:	ldr	r1, [sp, #4]
    ace8:	cmp	r0, #0
    acea:	beq.n	ad78 <FatFile::read(void*, unsigned int)+0x134>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    acec:	ldr	r0, [r2, #40]	; 0x28
    acee:	ldr	r2, [r0, #0]
    acf0:	mov	r3, fp
    acf2:	ldr.w	fp, [r2, #16]
    acf6:	mov	r2, r7
    acf8:	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    acfa:	cmp	r0, #0
    acfc:	beq.n	ad78 <FatFile::read(void*, unsigned int)+0x134>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    acfe:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ad00:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    ad02:	add	r3, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    ad04:	add	r7, r4
    m_curPosition += n;
    ad06:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    ad08:	beq.n	add6 <FatFile::read(void*, unsigned int)+0x192>
    ad0a:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ad0c:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    ad0e:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    ad10:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    ad14:	bmi.n	ac94 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    ad16:	ldrb.w	r8, [r2, #5]
    ad1a:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    ad1e:	cmp.w	fp, #0
    ad22:	bne.n	ad98 <FatFile::read(void*, unsigned int)+0x154>
    ad24:	cmp.w	r8, #0
    ad28:	bne.n	ad98 <FatFile::read(void*, unsigned int)+0x154>
        // start of new cluster
        if (m_curPosition == 0) {
    ad2a:	cmp	r3, #0
    ad2c:	bne.n	adb0 <FatFile::read(void*, unsigned int)+0x16c>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    ad2e:	lsls	r1, r1, #25
    ad30:	ite	mi
    ad32:	ldrmi	r4, [r2, #32]
    ad34:	ldrpl	r4, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    ad36:	str	r4, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    ad38:	ldrb	r1, [r2, #6]
    ad3a:	ldr	r0, [r2, #20]
    ad3c:	subs	r4, #2
    ad3e:	lsls	r4, r1
    ad40:	add.w	r1, r8, r0
    ad44:	add	r1, r4
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    ad46:	cmp.w	fp, #0
    ad4a:	beq.n	aca0 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    ad4c:	add.w	r0, r2, #36	; 0x24
    ad50:	movs	r2, #0
    ad52:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    ad56:	cbz	r0, ad78 <FatFile::read(void*, unsigned int)+0x134>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    ad58:	rsb	r4, fp, #512	; 0x200
    ad5c:	cmp	r4, r6
    ad5e:	it	cs
    ad60:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    ad62:	add.w	r1, r0, fp
    ad66:	mov	r2, r4
    ad68:	mov	r0, r7
    ad6a:	bl	db90 <memcpy>
    ad6e:	b.n	acfe <FatFile::read(void*, unsigned int)+0xba>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    ad70:	ldrb	r3, [r5, #0]
    ad72:	tst.w	r3, #112	; 0x70
    ad76:	bne.n	add8 <FatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    ad78:	ldrb	r3, [r5, #1]
  return -1;
    ad7a:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    ad7e:	orr.w	r3, r3, #2
    ad82:	strb	r3, [r5, #1]
  return -1;
}
    ad84:	add	sp, #12
    ad86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    ad8a:	ldr	r3, [r0, #28]
    ad8c:	ldr	r2, [r0, #20]
    ad8e:	subs	r3, r3, r2
    ad90:	cmp	r9, r3
    ad92:	it	cs
    ad94:	movcs	r9, r3
    ad96:	b.n	ac76 <FatFile::read(void*, unsigned int)+0x32>
    ad98:	ldr	r4, [r5, #16]
    ad9a:	b.n	ad38 <FatFile::read(void*, unsigned int)+0xf4>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    ad9c:	ldr	r0, [r2, #40]	; 0x28
    ad9e:	ldr	r3, [r0, #0]
    ada0:	mov	r2, r7
    ada2:	ldr	r3, [r3, #12]
    ada4:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    ada6:	cmp	r0, #0
    ada8:	beq.n	ad78 <FatFile::read(void*, unsigned int)+0x134>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    adaa:	mov.w	r4, #512	; 0x200
    adae:	b.n	acfe <FatFile::read(void*, unsigned int)+0xba>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    adb0:	lsls	r3, r1, #28
    adb2:	bpl.n	adc0 <FatFile::read(void*, unsigned int)+0x17c>
    adb4:	ldrb	r3, [r5, #2]
    adb6:	lsls	r4, r3, #25
    adb8:	bpl.n	adc0 <FatFile::read(void*, unsigned int)+0x17c>
          m_curCluster++;
    adba:	ldr	r4, [r5, #16]
    adbc:	adds	r4, #1
    adbe:	b.n	ad36 <FatFile::read(void*, unsigned int)+0xf2>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    adc0:	mov	r0, r2
    adc2:	ldr	r1, [r5, #16]
    adc4:	mov	r2, sl
    adc6:	bl	b524 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    adca:	cmp	r0, #0
    adcc:	blt.n	ad78 <FatFile::read(void*, unsigned int)+0x134>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    adce:	beq.n	ad70 <FatFile::read(void*, unsigned int)+0x12c>
    add0:	ldr	r2, [r5, #8]
    add2:	ldr	r4, [r5, #16]
    add4:	b.n	ad38 <FatFile::read(void*, unsigned int)+0xf4>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    add6:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    add8:	rsb	r0, r6, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    addc:	add	sp, #12
    adde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ade2:	nop

0000ade4 <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    ade4:	push	{r4, r5, r6, lr}
    ade6:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    ade8:	movs	r2, #1
    adea:	add.w	r1, sp, #7
    adee:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    adf0:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    adf2:	ldr	r5, [r0, #16]
    adf4:	bl	ac44 <FatFile::read(void*, unsigned int)>
    adf8:	cmp	r0, #1
    adfa:	it	eq
    adfc:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    ae00:	str	r6, [r4, #20]
    ae02:	it	ne
    ae04:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    ae08:	str	r5, [r4, #16]
  return c;
}
    ae0a:	add	sp, #8
    ae0c:	pop	{r4, r5, r6, pc}
    ae0e:	nop

0000ae10 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    ae10:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    ae12:	ldr	r3, [r0, #20]
    ae14:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    ae18:	sub	sp, #12
    ae1a:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    ae1c:	cbz	r5, ae20 <FatFile::readDirCache(bool)+0x10>
    ae1e:	cbnz	r1, ae44 <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    ae20:	movs	r2, #1
    ae22:	add.w	r1, sp, #7
    ae26:	mov	r0, r4
    ae28:	bl	ac44 <FatFile::read(void*, unsigned int)>
    ae2c:	sxtb	r0, r0
    if  (n != 1) {
    ae2e:	cmp	r0, #1
    ae30:	bne.n	ae4a <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    ae32:	ldr	r3, [r4, #20]
    ae34:	adds	r3, #31
    ae36:	str	r3, [r4, #20]
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    ae38:	ldr	r0, [r4, #8]
    ae3a:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    ae3c:	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    ae40:	add	sp, #12
    ae42:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    ae44:	adds	r3, #32
    ae46:	str	r3, [r0, #20]
    ae48:	b.n	ae38 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    ae4a:	movs	r0, #0
}
    ae4c:	add	sp, #12
    ae4e:	pop	{r4, r5, pc}

0000ae50 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    ae50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    ae54:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    ae56:	sub	sp, #104	; 0x68
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    ae58:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    ae5a:	tst.w	r5, #24
    ae5e:	strb.w	r4, [sp, #32]
    ae62:	strb.w	r4, [sp, #33]	; 0x21
    ae66:	strb.w	r4, [sp, #34]	; 0x22
    ae6a:	strb.w	r4, [sp, #68]	; 0x44
    ae6e:	strb.w	r4, [sp, #69]	; 0x45
    ae72:	strb.w	r4, [sp, #70]	; 0x46
    ae76:	beq.n	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    ae78:	ldr	r6, [r0, #8]
    ae7a:	ldr	r5, [r1, #8]
    ae7c:	cmp	r6, r5
    ae7e:	mov	r3, r0
    ae80:	beq.n	ae8a <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

 fail:
  return false;
    ae82:	movs	r0, #0
}
    ae84:	add	sp, #104	; 0x68
    ae86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae8a:	mov	r5, r3
    ae8c:	mov	r8, r2
    ae8e:	mov	r6, r1
    ae90:	bl	a8a0 <FatFile::sync() [clone .part.42]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    ae94:	mov	lr, r5
    ae96:	ldmia.w	lr!, {r0, r1, r2, r3}
    ae9a:	add	r7, sp, #68	; 0x44
    ae9c:	stmia	r7!, {r0, r1, r2, r3}
    ae9e:	ldmia.w	lr!, {r0, r1, r2, r3}
    aea2:	stmia	r7!, {r0, r1, r2, r3}
    aea4:	ldr.w	r3, [lr]
    aea8:	str	r3, [r7, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    aeaa:	mov	r1, r4
    aeac:	mov	r0, r5
    aeae:	bl	a880 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    aeb2:	mov	lr, r0
    aeb4:	cmp	r0, #0
    aeb6:	beq.n	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    aeb8:	ldr.w	r1, [lr, #4]
    aebc:	ldr.w	r2, [lr, #8]
    aec0:	ldr.w	r3, [lr, #12]
    aec4:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    aec6:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    aeca:	mov	r7, sp
    aecc:	stmia	r7!, {r0, r1, r2, r3}
    aece:	ldr.w	r1, [lr, #20]
    aed2:	ldr.w	r2, [lr, #24]
    aed6:	ldr.w	r3, [lr, #28]
    aeda:	ldr.w	r0, [lr, #16]
  // make directory entry for new path
  if (isFile()) {
    aede:	and.w	lr, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    aee2:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    aee4:	and.w	r3, lr, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    aee8:	mov	r2, r8
    aeea:	mov	r1, r6
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    aeec:	cmp.w	lr, #0
    aef0:	beq.w	b014 <FatFile::rename(FatFile*, char const*)+0x1c4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    aef4:	movw	r3, #2561	; 0xa01
    aef8:	add	r0, sp, #32
    aefa:	bl	ab68 <FatFile::open(FatFile*, char const*, int)>
    aefe:	cmp	r0, #0
    af00:	beq.n	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    af02:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    af04:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    af08:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    af0c:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    af0e:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    af10:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    af12:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    af14:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    af16:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    af18:	movs	r1, #1
    af1a:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    af1c:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    af20:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    af24:	bl	a880 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    af28:	cmp	r0, #0
    af2a:	beq.n	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    af2c:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    af2e:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    af32:	ldr.w	r7, [r3, #-91]!
    af36:	str.w	r7, [r0, #13]
    af3a:	ldr	r7, [r3, #4]
    af3c:	str.w	r7, [r0, #17]
    af40:	ldr	r7, [r3, #8]
    af42:	str.w	r7, [r0, #21]
    af46:	ldr	r7, [r3, #12]
    af48:	str.w	r7, [r0, #25]
    af4c:	ldrh	r7, [r3, #16]
    af4e:	ldrb	r3, [r3, #18]
    af50:	strh.w	r7, [r0, #29]
    af54:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    af56:	strb	r2, [r0, #11]

  // update dot dot if directory
  if (dirCluster) {
    af58:	cmp	r4, #0
    af5a:	beq.n	afd0 <FatFile::rename(FatFile*, char const*)+0x180>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    af5c:	ldr	r0, [r5, #8]
    af5e:	ldrb	r2, [r0, #6]
    af60:	ldr	r1, [r0, #20]
    af62:	subs	r3, r4, #2
    af64:	lsls	r3, r2
    af66:	add	r1, r3
    af68:	mov	r2, r6
    af6a:	adds	r0, #36	; 0x24
    af6c:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    af70:	cmp	r0, #0
    af72:	beq.n	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    af74:	mov	r6, r0
    af76:	mov	r7, sp
    af78:	ldr.w	r0, [r6, #32]!
    af7c:	ldr	r1, [r6, #4]
    af7e:	ldr	r2, [r6, #8]
    af80:	ldr	r3, [r6, #12]
    af82:	stmia	r7!, {r0, r1, r2, r3}
    af84:	ldr	r0, [r6, #16]
    af86:	ldr	r1, [r6, #20]
    af88:	ldr	r2, [r6, #24]
    af8a:	ldr	r3, [r6, #28]
    af8c:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    af8e:	mov	r1, r4
    af90:	ldr	r0, [r5, #8]
    af92:	bl	b680 <FatPartition::freeChain(unsigned long)>
    af96:	cmp	r0, #0
    af98:	beq.w	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    af9c:	ldr	r0, [r5, #8]
    af9e:	ldr	r3, [r5, #32]
    afa0:	ldrb	r2, [r0, #6]
    afa2:	ldr	r1, [r0, #20]
    afa4:	subs	r3, #2
    afa6:	lsls	r3, r2
    afa8:	add	r1, r3
    afaa:	adds	r0, #36	; 0x24
    afac:	movs	r2, #1
    afae:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    afb2:	mov	r7, r0
    afb4:	cmp	r0, #0
    afb6:	beq.w	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    afba:	mov	r4, sp
    afbc:	ldmia	r4!, {r0, r1, r2, r3}
    afbe:	str	r0, [r7, #32]
    afc0:	str	r1, [r7, #36]	; 0x24
    afc2:	str	r2, [r7, #40]	; 0x28
    afc4:	str	r3, [r7, #44]	; 0x2c
    afc6:	ldmia	r4!, {r0, r1, r2, r3}
    afc8:	str	r0, [r7, #48]	; 0x30
    afca:	str	r1, [r7, #52]	; 0x34
    afcc:	str	r2, [r7, #56]	; 0x38
    afce:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    afd0:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    afd2:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    afd4:	movs	r3, #8
  if (!oldFile.remove()) {
    afd6:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    afd8:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    afda:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    afde:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    afe2:	bl	bc3c <FatFile::remove()>
    afe6:	cmp	r0, #0
    afe8:	beq.w	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    afec:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    afee:	add.w	r0, r4, #36	; 0x24
    aff2:	bl	8f0c <FsCache::sync()>
    aff6:	cmp	r0, #0
    aff8:	beq.w	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
    affc:	add.w	r0, r4, #564	; 0x234
    b000:	bl	8f0c <FsCache::sync()>
    b004:	cmp	r0, #0
    b006:	beq.w	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
    b00a:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    b00c:	ldr	r3, [r0, #0]
    b00e:	ldr	r3, [r3, #24]
    b010:	blx	r3
    b012:	b.n	ae84 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    b014:	add	r0, sp, #32
    b016:	bl	aaa4 <FatFile::mkdir(FatFile*, char const*, bool)>
    b01a:	cmp	r0, #0
    b01c:	beq.w	ae82 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    b020:	ldr	r4, [sp, #64]	; 0x40
    b022:	b.n	af02 <FatFile::rename(FatFile*, char const*)+0xb2>

0000b024 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    b024:	ldrb	r3, [r0, #0]
    b026:	lsls	r2, r3, #27
    b028:	bpl.n	b060 <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    b02a:	ldr	r3, [r0, #20]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    b02c:	push	{r4, lr}
    b02e:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    b030:	cbz	r3, b040 <FatFile::rmdir()+0x1c>
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    b032:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    b034:	movs	r2, #0
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    b036:	bic.w	r3, r3, #32
    b03a:	strb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    b03c:	str	r2, [r0, #16]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    b03e:	str	r2, [r0, #20]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    b040:	movs	r1, #1
    b042:	mov	r0, r4
    b044:	bl	ae10 <FatFile::readDirCache(bool)>
    if (!dir) {
    b048:	cbz	r0, b064 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    b04a:	ldrb	r3, [r0, #0]
    b04c:	cbz	r3, b06a <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    b04e:	cmp	r3, #229	; 0xe5
    b050:	beq.n	b040 <FatFile::rmdir()+0x1c>
    b052:	cmp	r3, #46	; 0x2e
    b054:	beq.n	b040 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    b056:	ldrb	r3, [r0, #11]
    b058:	lsls	r3, r3, #28
    b05a:	bmi.n	b040 <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
}
    b05c:	movs	r0, #0
    b05e:	pop	{r4, pc}
    b060:	movs	r0, #0
    b062:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    b064:	ldrb	r3, [r4, #1]
    b066:	cmp	r3, #0
    b068:	bne.n	b05c <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    b06a:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    b06c:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    b06e:	orr.w	r3, r3, #2
    b072:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    b074:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    b076:	mov	r0, r4

 fail:
  return false;
}
    b078:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    b07c:	b.w	bc3c <FatFile::remove()>

0000b080 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    b080:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b084:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    b086:	ldr	r7, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    b088:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    b08a:	cbz	r3, b0ba <FatFile::seekSet(unsigned long)+0x3a>
    b08c:	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    b08e:	ldr	r1, [r0, #20]
    b090:	cmp	r1, r5
    b092:	beq.n	b0ec <FatFile::seekSet(unsigned long)+0x6c>
    return true;
  }
  if (pos == 0) {
    b094:	cbnz	r5, b0a8 <FatFile::seekSet(unsigned long)+0x28>
    b096:	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    b098:	str	r5, [r0, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    b09a:	bic.w	r3, r3, #32
    b09e:	strb	r3, [r4, #2]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    b0a0:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    b0a2:	movs	r0, #1
    b0a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    b0a8:	lsls	r0, r3, #28
    b0aa:	bmi.n	b0c2 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    b0ac:	lsls	r2, r3, #26
    b0ae:	bpl.n	b0c8 <FatFile::seekSet(unsigned long)+0x48>
    b0b0:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    b0b2:	ldrh	r3, [r3, #8]
    b0b4:	cmp.w	r5, r3, lsl #5
    b0b8:	bls.n	b124 <FatFile::seekSet(unsigned long)+0xa4>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    b0ba:	str	r7, [r4, #16]
  return false;
    b0bc:	movs	r0, #0
    b0be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    b0c2:	ldr	r2, [r4, #28]
    b0c4:	cmp	r5, r2
    b0c6:	bhi.n	b0ba <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    b0c8:	ldr.w	lr, [r4, #8]
    b0cc:	ldrb	r2, [r4, #2]
    b0ce:	ldrb.w	r0, [lr, #6]
    b0d2:	adds	r0, #9
    b0d4:	uxtb	r0, r0
    b0d6:	subs	r6, r5, #1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    b0d8:	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    b0dc:	lsr.w	r6, r6, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    b0e0:	beq.n	b0f2 <FatFile::seekSet(unsigned long)+0x72>
    m_curCluster = m_firstCluster + nNew;
    b0e2:	ldr	r3, [r4, #32]
    b0e4:	add	r6, r3
    b0e6:	str	r6, [r4, #16]
    goto done;
    b0e8:	mov	r3, r2
    b0ea:	b.n	b09a <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    b0ec:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    b0ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    b0f2:	subs	r2, r1, #1
    b0f4:	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    b0f8:	cmp	r6, r0
    b0fa:	bcs.n	b128 <FatFile::seekSet(unsigned long)+0xa8>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    b0fc:	lsls	r3, r3, #25
    b0fe:	ite	mi
    b100:	ldrmi.w	r3, [lr, #32]
    b104:	ldrpl	r3, [r4, #32]
    b106:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    b108:	add.w	r8, r4, #16
    b10c:	b.n	b11e <FatFile::seekSet(unsigned long)+0x9e>
    b10e:	ldr	r1, [r4, #16]
    b110:	ldr	r0, [r4, #8]
    b112:	bl	b524 <FatPartition::fatGet(unsigned long, unsigned long*)>
    b116:	cmp	r0, #0
    b118:	add.w	r6, r6, #4294967295
    b11c:	ble.n	b0ba <FatFile::seekSet(unsigned long)+0x3a>
    b11e:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    b120:	cmp	r6, #0
    b122:	bne.n	b10e <FatFile::seekSet(unsigned long)+0x8e>
    b124:	ldrb	r3, [r4, #2]
    b126:	b.n	b09a <FatFile::seekSet(unsigned long)+0x1a>
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    b128:	cmp	r1, #0
    b12a:	beq.n	b0fc <FatFile::seekSet(unsigned long)+0x7c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    b12c:	subs	r6, r6, r0
    b12e:	b.n	b108 <FatFile::seekSet(unsigned long)+0x88>

0000b130 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    b130:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b134:	mov	r5, r1
    b136:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    b138:	movs	r1, #0
    b13a:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    b13c:	mov	r4, r0
    b13e:	mov	r7, r3
    b140:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    b144:	bl	1109c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    b148:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    b14a:	ldr	r3, [r5, #32]
    b14c:	str	r3, [r4, #12]
    b14e:	add.w	r2, r0, #52	; 0x34
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    b152:	and.w	r3, r8, #15
    b156:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    b15a:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    b15c:	strh.w	r8, [r4, #4]
    b160:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    b162:	lsls	r5, r1, #28
    b164:	bmi.n	b18c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    b166:	and.w	r1, r1, #23
    b16a:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    b16c:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    b16e:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    b170:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    b174:	it	eq
    b176:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    b17a:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    b17e:	it	eq
    b180:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    b182:	cmp	r3, #1
    b184:	beq.n	b196 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    b186:	cmp	r3, #2
    b188:	beq.n	b1de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    b18a:	cbz	r3, b1d4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    b18c:	movs	r0, #0
    b18e:	strb	r0, [r4, #0]
  m_flags = 0;
    b190:	strb	r0, [r4, #2]
  return false;
    b192:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    b196:	movs	r3, #2
    b198:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    b19a:	ldrb	r1, [r4, #0]
    b19c:	tst.w	r1, #17
    b1a0:	bne.n	b18c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    b1a2:	sxtb	r1, r3
    b1a4:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    b1a8:	and.w	r3, r7, #8
    b1ac:	orrs	r3, r1
    b1ae:	uxtb	r3, r3
    b1b0:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    b1b2:	ldrh.w	lr, [r2, #20]
    b1b6:	ldrh	r1, [r2, #26]
    b1b8:	ldr	r6, [r0, #48]	; 0x30
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    b1ba:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    b1bc:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    b1c0:	cbz	r5, b1e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    b1c2:	cbnz	r1, b1fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b1c4:	orn	r3, r3, #127	; 0x7f
    b1c8:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b1ca:	lsls	r3, r7, #17
    b1cc:	bmi.n	b1ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    b1ce:	movs	r0, #1
    b1d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    b1d4:	ands.w	r5, r7, #1024	; 0x400
    b1d8:	bne.n	b18c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    b1da:	movs	r1, #1
    b1dc:	b.n	b1a8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    b1de:	movs	r3, #3
    b1e0:	strb	r3, [r4, #2]
      break;
    b1e2:	b.n	b19a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    b1e4:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b1e6:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    b1e8:	str	r3, [r4, #28]
    b1ea:	b.n	b1ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    b1ec:	ldr	r1, [r4, #28]
    b1ee:	mov	r0, r4
    b1f0:	bl	b080 <FatFile::seekSet(unsigned long)>
    b1f4:	cmp	r0, #0
    b1f6:	bne.n	b1ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    b1f8:	b.n	b18c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    b1fa:	bl	b680 <FatPartition::freeChain(unsigned long)>
    b1fe:	cmp	r0, #0
    b200:	beq.n	b18c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    b202:	ldrb	r3, [r4, #2]
    b204:	b.n	b1c4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    b206:	nop

0000b208 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b208:	ldrb	r3, [r0, #0]
    b20a:	cbnz	r3, b214 <FatFile::openNext(FatFile*, int)+0xc>
    b20c:	ldrb	r3, [r1, #0]
    b20e:	tst.w	r3, #112	; 0x70
    b212:	bne.n	b218 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    b214:	movs	r0, #0
}
    b216:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    b218:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b21c:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b21e:	ands.w	r7, r6, #31
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    b222:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    b224:	bne.n	b26a <FatFile::openNext(FatFile*, int)+0x62>
    b226:	mov	r9, r2
    b228:	mov	r5, r1
    b22a:	mov	r8, r0
    b22c:	mov	sl, r7
    b22e:	b.n	b234 <FatFile::openNext(FatFile*, int)+0x2c>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    b230:	movs	r7, #0
    b232:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    b234:	movs	r1, #0
    b236:	mov	r0, r5
    b238:	bl	ae10 <FatFile::readDirCache(bool)>
    if (!dir) {
    b23c:	cbz	r0, b26a <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    b23e:	ldrb	r3, [r0, #0]
    b240:	cbz	r3, b26a <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    b242:	cmp	r3, #46	; 0x2e
    b244:	beq.n	b230 <FatFile::openNext(FatFile*, int)+0x28>
    b246:	cmp	r3, #229	; 0xe5
    b248:	beq.n	b230 <FatFile::openNext(FatFile*, int)+0x28>
    b24a:	ldrb	r2, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    b24c:	lsls	r1, r2, #28
    b24e:	bpl.n	b272 <FatFile::openNext(FatFile*, int)+0x6a>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    b250:	cmp	r2, #15
    b252:	bne.n	b230 <FatFile::openNext(FatFile*, int)+0x28>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    b254:	lsls	r2, r3, #25
    b256:	bpl.n	b232 <FatFile::openNext(FatFile*, int)+0x2a>
        lfnOrd = ldir->order & 0X1F;
    b258:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    b25c:	ldrb.w	sl, [r0, #13]
    b260:	b.n	b232 <FatFile::openNext(FatFile*, int)+0x2a>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    b262:	bl	b8b0 <FatFile::lfnChecksum(unsigned char*)>
    b266:	cmp	r0, sl
    b268:	beq.n	b276 <FatFile::openNext(FatFile*, int)+0x6e>
      lfnOrd = 0;
    }
  }

 fail:
  return false;
    b26a:	movs	r0, #0
}
    b26c:	add	sp, #8
    b26e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    b272:	cmp	r7, #0
    b274:	bne.n	b262 <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    b276:	str	r7, [sp, #0]
    b278:	mov	r3, r9
    b27a:	ubfx	r2, r6, #5, #16
    b27e:	mov	r1, r5
    b280:	mov	r0, r8
    b282:	bl	b130 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    b286:	b.n	b26c <FatFile::openNext(FatFile*, int)+0x64>

0000b288 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b288:	ldrb	r3, [r0, #0]
    b28a:	cbz	r3, b290 <FatFile::sync()+0x8>
    b28c:	b.w	a8a0 <FatFile::sync() [clone .part.42]>
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    b290:	movs	r0, #1
    b292:	bx	lr

0000b294 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    b294:	ldrb	r3, [r0, #2]
    b296:	lsls	r3, r3, #30
    b298:	bpl.n	b2d0 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    b29a:	ldr	r3, [r0, #32]
    b29c:	cbz	r3, b2cc <FatFile::truncate()+0x38>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    b29e:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    b2a0:	ldr	r1, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    b2a2:	sub	sp, #8
    b2a4:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    b2a6:	cbnz	r1, b2e6 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    b2a8:	str	r3, [sp, #4]
    m_firstCluster = 0;
    b2aa:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    b2ac:	mov	r1, r3
    b2ae:	ldr	r0, [r4, #8]
    b2b0:	bl	b680 <FatPartition::freeChain(unsigned long)>
    b2b4:	cbz	r0, b2e2 <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    b2b6:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b2b8:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    b2ba:	ldr	r1, [r4, #20]
    b2bc:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    b2be:	orn	r3, r3, #127	; 0x7f
    b2c2:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    b2c4:	cbnz	r2, b302 <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    b2c6:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    b2c8:	add	sp, #8
    b2ca:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    b2cc:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    b2ce:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    b2d0:	movs	r0, #0
}
    b2d2:	bx	lr
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    b2d4:	mvn.w	r2, #4026531840	; 0xf0000000
    b2d8:	ldr	r1, [r4, #16]
    b2da:	ldr	r0, [r4, #8]
    b2dc:	bl	b594 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    b2e0:	cbnz	r0, b2fa <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    b2e2:	movs	r0, #0
    b2e4:	b.n	b2c8 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    b2e6:	add	r2, sp, #8
    b2e8:	movs	r3, #0
    b2ea:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    b2ee:	ldr	r0, [r0, #8]
    b2f0:	bl	b524 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b2f4:	cmp	r0, #0
    b2f6:	blt.n	b2e2 <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    b2f8:	bne.n	b2d4 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    b2fa:	ldr	r3, [sp, #4]
    b2fc:	cmp	r3, #0
    b2fe:	beq.n	b2b6 <FatFile::truncate()+0x22>
    b300:	b.n	b2ac <FatFile::truncate()+0x18>
    b302:	mov	r0, r4
    b304:	bl	a8a0 <FatFile::sync() [clone .part.42]>
    b308:	b.n	b2c8 <FatFile::truncate()+0x34>
    b30a:	nop

0000b30c <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    b30c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b310:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    b312:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    b314:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    b316:	bmi.n	b328 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    b318:	ldrb	r3, [r4, #1]
    b31a:	orr.w	r3, r3, #1
    b31e:	strb	r3, [r4, #1]
  return -1;
    b320:	mov.w	r0, #4294967295
    b324:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b328:	mov	r8, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    b32a:	lsls	r2, r3, #28
    b32c:	mov	r7, r1
    b32e:	bmi.w	b4ce <FatFile::write(void const*, unsigned int)+0x1c2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    b332:	ldr	r2, [r4, #20]
    b334:	mvns	r3, r2
    b336:	cmp	r8, r3
    b338:	bhi.n	b318 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b33a:	cmp.w	r8, #0
    b33e:	beq.w	b4f0 <FatFile::write(void const*, unsigned int)+0x1e4>
    b342:	mov	r6, r8
    b344:	b.n	b3bc <FatFile::write(void const*, unsigned int)+0xb0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b346:	cmp.w	r9, #0
    b34a:	bne.n	b3fe <FatFile::write(void const*, unsigned int)+0xf2>
      // start of new cluster
      if (m_curCluster != 0) {
    b34c:	ldr	r1, [r4, #16]
    b34e:	cmp	r1, #0
    b350:	beq.w	b47a <FatFile::write(void const*, unsigned int)+0x16e>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    b354:	ldrb	r3, [r4, #2]
    b356:	lsls	r3, r3, #25
    b358:	bpl.w	b48e <FatFile::write(void const*, unsigned int)+0x182>
    b35c:	ldr	r3, [r4, #28]
    b35e:	cmp	r3, r2
    b360:	bls.w	b48e <FatFile::write(void const*, unsigned int)+0x182>
          m_curCluster++;
    b364:	adds	r3, r1, #1
    b366:	str	r3, [r4, #16]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    b368:	ldrb	r2, [r0, #6]
    b36a:	ldr	r3, [r0, #20]
    b36c:	subs	r1, #1
    b36e:	lsls	r1, r2
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    b370:	cmp.w	r6, #512	; 0x200
    b374:	add	r1, r3
    b376:	bcs.n	b41a <FatFile::write(void const*, unsigned int)+0x10e>
    b378:	cmp.w	r6, #512	; 0x200
    b37c:	mov	r5, r6
    b37e:	it	cs
    b380:	movcs.w	r5, #512	; 0x200
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    b384:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    b386:	tst.w	r3, #32
    b38a:	ite	eq
    b38c:	moveq	r2, #1
    b38e:	movne	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    b390:	adds	r0, #36	; 0x24
    b392:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    b396:	cmp	r0, #0
    b398:	beq.n	b318 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    b39a:	add	r0, r9
    b39c:	mov	r2, r5
    b39e:	mov	r1, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    b3a0:	add	r9, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    b3a2:	bl	db90 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    b3a6:	cmp.w	r9, #512	; 0x200
    b3aa:	beq.w	b4be <FatFile::write(void const*, unsigned int)+0x1b2>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b3ae:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b3b0:	subs	r6, r6, r5
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b3b2:	add	r2, r5
    src += n;
    b3b4:	add	r7, r5
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    b3b6:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    b3b8:	beq.w	b4f0 <FatFile::write(void const*, unsigned int)+0x1e4>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    b3bc:	ldr	r0, [r4, #8]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    b3be:	ldrb	r3, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b3c0:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    b3c4:	ubfx	r9, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    b3c8:	beq.n	b346 <FatFile::write(void const*, unsigned int)+0x3a>
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    b3ca:	ldr	r3, [r4, #16]
    b3cc:	ldrb	r1, [r0, #6]
    b3ce:	ldr	r2, [r0, #20]
    b3d0:	subs	r3, #2
    b3d2:	lsl.w	r1, r3, r1
    b3d6:	add	r1, r2
    b3d8:	add	r1, r5

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    b3da:	cmp.w	r9, #0
    b3de:	bne.n	b40c <FatFile::write(void const*, unsigned int)+0x100>
    b3e0:	cmp.w	r6, #512	; 0x200
    b3e4:	bcs.n	b41a <FatFile::write(void const*, unsigned int)+0x10e>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    b3e6:	ldr	r2, [r4, #20]
    b3e8:	ldr	r3, [r4, #28]
    b3ea:	cmp.w	r6, #512	; 0x200
    b3ee:	mov	r5, r6
    b3f0:	it	cs
    b3f2:	movcs.w	r5, #512	; 0x200
    b3f6:	cmp	r2, r3
    b3f8:	bcc.n	b384 <FatFile::write(void const*, unsigned int)+0x78>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    b3fa:	movs	r2, #5
    b3fc:	b.n	b390 <FatFile::write(void const*, unsigned int)+0x84>
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    b3fe:	ldr	r3, [r4, #16]
    b400:	ldrb	r1, [r0, #6]
    b402:	ldr	r2, [r0, #20]
    b404:	subs	r3, #2
    b406:	lsl.w	r1, r3, r1
    b40a:	add	r1, r2
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    b40c:	rsb	r5, r9, #512	; 0x200
    b410:	cmp	r5, r6
    b412:	it	cs
    b414:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    b416:	movs	r2, #1
    b418:	b.n	b390 <FatFile::write(void const*, unsigned int)+0x84>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    b41a:	cmp.w	r6, #1024	; 0x400
    b41e:	bcc.n	b45e <FatFile::write(void const*, unsigned int)+0x152>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    b420:	ldrb	r3, [r0, #4]
    b422:	ldr.w	lr, [r0, #48]	; 0x30
    b426:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    b428:	lsrs	r2, r6, #9
    b42a:	cmp	r3, r2
    b42c:	it	cs
    b42e:	movcs	r3, r2
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    b430:	cmp	lr, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    b432:	mov.w	r5, r3, lsl #9
    b436:	bcc.n	b44c <FatFile::write(void const*, unsigned int)+0x140>
    b438:	adds	r2, r3, r1
    b43a:	cmp	lr, r2
    b43c:	bcs.n	b44c <FatFile::write(void const*, unsigned int)+0x140>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b43e:	mov.w	lr, #0
    m_sector = 0XFFFFFFFF;
    b442:	mov.w	r2, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b446:	strb.w	lr, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    b44a:	str	r2, [r0, #48]	; 0x30
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    b44c:	ldr	r0, [r0, #40]	; 0x28
    b44e:	ldr	r2, [r0, #0]
    b450:	ldr.w	r9, [r2, #32]
    b454:	mov	r2, r7
    b456:	blx	r9
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    b458:	cmp	r0, #0
    b45a:	bne.n	b3ae <FatFile::write(void const*, unsigned int)+0xa2>
    b45c:	b.n	b318 <FatFile::write(void const*, unsigned int)+0xc>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    b45e:	ldr	r3, [r0, #48]	; 0x30
    b460:	cmp	r3, r1
    b462:	beq.n	b4b0 <FatFile::write(void const*, unsigned int)+0x1a4>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    b464:	ldr	r0, [r0, #40]	; 0x28
    b466:	ldr	r3, [r0, #0]
    b468:	mov	r2, r7
    b46a:	ldr	r3, [r3, #28]
    b46c:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    b46e:	cmp	r0, #0
    b470:	beq.w	b318 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    b474:	mov.w	r5, #512	; 0x200
    b478:	b.n	b3ae <FatFile::write(void const*, unsigned int)+0xa2>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    b47a:	ldr	r3, [r4, #32]
    b47c:	cbz	r3, b4dc <FatFile::write(void const*, unsigned int)+0x1d0>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    b47e:	str	r3, [r4, #16]
    b480:	ldrb	r1, [r0, #6]
    b482:	ldr	r2, [r0, #20]
    b484:	subs	r3, #2
    b486:	lsl.w	r1, r3, r1
    b48a:	add	r1, r2
    b48c:	b.n	b3e0 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    b48e:	add.w	r2, r4, #16
    b492:	bl	b524 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    b496:	cmp	r0, #0
    b498:	blt.w	b318 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    b49c:	bne.n	b4aa <FatFile::write(void const*, unsigned int)+0x19e>
          // add cluster if at end of chain
          if (!addCluster()) {
    b49e:	mov	r0, r4
    b4a0:	bl	a7b4 <FatFile::addCluster()>
    b4a4:	cmp	r0, #0
    b4a6:	beq.w	b318 <FatFile::write(void const*, unsigned int)+0xc>
    b4aa:	ldr	r3, [r4, #16]
    b4ac:	ldr	r0, [r4, #8]
    b4ae:	b.n	b480 <FatFile::write(void const*, unsigned int)+0x174>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b4b0:	movs	r2, #0
    m_sector = 0XFFFFFFFF;
    b4b2:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b4b6:	strb.w	r2, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    b4ba:	str	r3, [r0, #48]	; 0x30
    b4bc:	b.n	b464 <FatFile::write(void const*, unsigned int)+0x158>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    b4be:	ldr	r0, [r4, #8]
    b4c0:	adds	r0, #36	; 0x24
    b4c2:	bl	8f0c <FsCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    b4c6:	cmp	r0, #0
    b4c8:	bne.w	b3ae <FatFile::write(void const*, unsigned int)+0xa2>
    b4cc:	b.n	b318 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    b4ce:	ldr	r1, [r0, #28]
    b4d0:	bl	b080 <FatFile::seekSet(unsigned long)>
    b4d4:	cmp	r0, #0
    b4d6:	beq.w	b318 <FatFile::write(void const*, unsigned int)+0xc>
    b4da:	b.n	b332 <FatFile::write(void const*, unsigned int)+0x26>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    b4dc:	mov	r0, r4
    b4de:	bl	a7b4 <FatFile::addCluster()>
    b4e2:	cmp	r0, #0
    b4e4:	beq.w	b318 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    b4e8:	ldr	r3, [r4, #16]
    b4ea:	str	r3, [r4, #32]
    b4ec:	ldr	r0, [r4, #8]
    b4ee:	b.n	b480 <FatFile::write(void const*, unsigned int)+0x174>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    b4f0:	ldr	r3, [r4, #28]
    b4f2:	cmp	r3, r2
    b4f4:	bcc.n	b50a <FatFile::write(void const*, unsigned int)+0x1fe>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    b4f6:	ldr	r3, [pc, #40]	; (b520 <FatFile::write(void const*, unsigned int)+0x214>)
    b4f8:	ldr	r3, [r3, #0]
    b4fa:	cbz	r3, b51a <FatFile::write(void const*, unsigned int)+0x20e>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b4fc:	ldrb	r3, [r4, #2]
    b4fe:	orn	r3, r3, #127	; 0x7f
    b502:	strb	r3, [r4, #2]
    b504:	mov	r0, r8
    b506:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b50a:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    b50c:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    b50e:	orn	r3, r3, #127	; 0x7f
    b512:	strb	r3, [r4, #2]
    b514:	mov	r0, r8
    b516:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b51a:	mov	r0, r8
    b51c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b520:	.word	0x20006af8

0000b524 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b524:	cmp	r1, #1
    b526:	bls.n	b58c <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    b528:	ldr	r3, [r0, #28]
    b52a:	cmp	r1, r3
    b52c:	bhi.n	b58c <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    b52e:	push	{r4, r5, r6, lr}
    b530:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    b532:	cmp	r3, #32
    b534:	mov	r6, r2
    b536:	mov	r5, r0
    b538:	mov	r4, r1
    b53a:	beq.n	b56e <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    b53c:	cmp	r3, #16
    b53e:	bne.n	b568 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    b540:	ldr	r3, [r0, #24]
    b542:	ubfx	r1, r1, #8, #8
    b546:	add	r1, r3
    b548:	movs	r2, #2
    b54a:	add.w	r0, r0, #564	; 0x234
    b54e:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    b552:	cbz	r0, b568 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b554:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    b556:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    b55a:	ldr	r2, [r5, #28]
    b55c:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    b55e:	itte	ls
    b560:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    b562:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    b564:	movhi	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    b566:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

 fail:
  return -1;
    b568:	mov.w	r0, #4294967295
    b56c:	pop	{r4, r5, r6, pc}
    b56e:	ldr	r1, [r0, #24]
    b570:	movs	r2, #2
    b572:	add.w	r1, r1, r4, lsr #7
    b576:	add.w	r0, r0, #564	; 0x234
    b57a:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    b57e:	cmp	r0, #0
    b580:	beq.n	b568 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b582:	and.w	r1, r4, #127	; 0x7f
    b586:	ldr.w	r3, [r0, r1, lsl #2]
    b58a:	b.n	b55a <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    b58c:	mov.w	r0, #4294967295
}
    b590:	bx	lr
    b592:	nop

0000b594 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b594:	cmp	r1, #1
    b596:	bls.n	b5d4 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    b598:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    b59a:	ldr	r3, [r0, #28]
    b59c:	cmp	r1, r3
    b59e:	bhi.n	b5ae <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    b5a0:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    b5a2:	cmp	r3, #32
    b5a4:	mov	r5, r2
    b5a6:	mov	r4, r1
    b5a8:	beq.n	b5d8 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    b5aa:	cmp	r3, #16
    b5ac:	beq.n	b5b2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    b5ae:	movs	r0, #0
    b5b0:	pop	{r3, r4, r5, pc}
    b5b2:	ldr	r3, [r0, #24]
    b5b4:	ubfx	r1, r1, #8, #8
    b5b8:	add	r1, r3
    b5ba:	add.w	r0, r0, #564	; 0x234
    b5be:	movs	r2, #3
    b5c0:	bl	8eac <FsCache::get(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    b5c4:	mov	r3, r0
    b5c6:	cmp	r0, #0
    b5c8:	beq.n	b5ae <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    b5ca:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    b5cc:	movs	r0, #1
    b5ce:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

 fail:
  return false;
}
    b5d2:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    b5d4:	movs	r0, #0
}
    b5d6:	bx	lr
    b5d8:	ldr	r1, [r0, #24]
    b5da:	movs	r2, #3
    b5dc:	add.w	r0, r0, #564	; 0x234
    b5e0:	add.w	r1, r1, r4, lsr #7
    b5e4:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    b5e8:	mov	r3, r0
    b5ea:	cmp	r0, #0
    b5ec:	beq.n	b5ae <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    b5ee:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    b5f2:	movs	r0, #1
    b5f4:	str.w	r5, [r3, r1, lsl #2]
    b5f8:	pop	{r3, r4, r5, pc}
    b5fa:	nop

0000b5fc <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    b5fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    b600:	ldr	r4, [r0, #12]
    b602:	cmp	r4, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    b604:	sub	sp, #8
    b606:	mov	r5, r0
    b608:	mov	r7, r1
    b60a:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    b60c:	itte	cc
    b60e:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    b610:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    b612:	movcs	r6, #1
    b614:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    b616:	adds	r4, #1
    if (find > m_lastCluster) {
    b618:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b61a:	add	r2, sp, #4
    b61c:	mov	r0, r5
    b61e:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    b620:	bls.n	b636 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    b622:	cbnz	r6, b674 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    b624:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    b626:	adds	r4, #1
    if (find > m_lastCluster) {
    b628:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    b62a:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b62e:	add	r2, sp, #4
    b630:	mov	r0, r5
    b632:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    b634:	bhi.n	b622 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    b636:	cmp	r7, r4
    b638:	beq.n	b674 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    b63a:	bl	b524 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b63e:	cmp	r0, #0
    b640:	blt.n	b674 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    b642:	beq.n	b614 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    b644:	ldr	r3, [sp, #4]
    b646:	cmp	r3, #0
    b648:	bne.n	b614 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    b64a:	cbz	r6, b64e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    b64c:	str	r4, [r5, #12]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    b64e:	mvn.w	r2, #4026531840	; 0xf0000000
    b652:	mov	r1, r4
    b654:	mov	r0, r5
    b656:	bl	b594 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    b65a:	mov	r6, r0
    b65c:	cbz	r0, b674 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    b65e:	cbnz	r7, b666 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    b660:	str.w	r4, [r8]
  return true;
    b664:	b.n	b676 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    b666:	mov	r1, r7
    b668:	mov	r0, r5
    b66a:	mov	r2, r4
    b66c:	bl	b594 <FatPartition::fatPut(unsigned long, unsigned long)>
    b670:	cmp	r0, #0
    b672:	bne.n	b660 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    b674:	movs	r6, #0
}
    b676:	mov	r0, r6
    b678:	add	sp, #8
    b67a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b67e:	nop

0000b680 <FatPartition::freeChain(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    b680:	push	{r4, r5, r6, lr}
    b682:	mov	r5, r0
    b684:	sub	sp, #8
    b686:	mov	r4, r1
    b688:	b.n	b6a0 <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    b68a:	bl	b594 <FatPartition::fatPut(unsigned long, unsigned long)>
    b68e:	cbz	r0, b6b6 <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    b690:	ldr	r3, [r5, #12]
    b692:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    b694:	itt	cc
    b696:	addcc.w	r4, r4, #4294967295
    b69a:	strcc	r4, [r5, #12]
    }
    cluster = next;
    b69c:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    b69e:	cbz	r6, b6b8 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    b6a0:	add	r2, sp, #4
    b6a2:	mov	r1, r4
    b6a4:	mov	r0, r5
    b6a6:	bl	b524 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    b6aa:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    b6ac:	mov	r1, r4
    b6ae:	mov.w	r2, #0
    b6b2:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    b6b4:	bge.n	b68a <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

 fail:
  return false;
    b6b6:	movs	r0, #0
}
    b6b8:	add	sp, #8
    b6ba:	pop	{r4, r5, r6, pc}

0000b6bc <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    b6bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6c0:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    b6c2:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    b6c4:	cmp	r3, #16
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    b6c6:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    b6ca:	beq.n	b6d8 <FatPartition::freeClusterCount()+0x1c>
    b6cc:	cmp	r3, #32
    b6ce:	beq.n	b6d8 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

 fail:
  return -1;
    b6d0:	mov.w	r0, #4294967295
    b6d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    b6d8:	ldr	r5, [r0, #24]
    while (todo) {
    b6da:	cmp.w	r8, #0
    b6de:	beq.n	b75e <FatPartition::freeClusterCount()+0xa2>
    b6e0:	mov	r6, r0
    b6e2:	add.w	r7, r0, #564	; 0x234
    b6e6:	movs	r4, #0
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    b6e8:	mov	r1, r5
    b6ea:	movs	r2, #2
    b6ec:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
    b6ee:	adds	r5, #1
    b6f0:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
      if (!pc) {
    b6f4:	cmp	r0, #0
    b6f6:	beq.n	b6d0 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b6f8:	ldrb	r3, [r6, #7]
    b6fa:	cmp	r3, #16
    b6fc:	beq.n	b72c <FatPartition::freeClusterCount()+0x70>
      if (todo < n) {
    b6fe:	cmp.w	r8, #127	; 0x7f
    b702:	bhi.n	b756 <FatPartition::freeClusterCount()+0x9a>
        n = todo;
    b704:	uxth.w	r1, r8
    b708:	mov	lr, r8
    b70a:	subs	r1, #1
    b70c:	uxth	r1, r1
    b70e:	add.w	r1, r0, r1, lsl #2
    b712:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    b714:	ldr.w	r2, [r3, #4]!
    b718:	cbnz	r2, b71c <FatPartition::freeClusterCount()+0x60>
            free++;
    b71a:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    b71c:	cmp	r3, r1
    b71e:	bne.n	b714 <FatPartition::freeClusterCount()+0x58>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b720:	subs.w	r8, r8, lr
    b724:	bne.n	b6e8 <FatPartition::freeClusterCount()+0x2c>
    b726:	mov	r0, r4
    b728:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    b72c:	cmp.w	r8, #255	; 0xff
    b730:	bls.n	b764 <FatPartition::freeClusterCount()+0xa8>
    b732:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b736:	mov	r3, lr
    b738:	subs	r1, r3, #1
    b73a:	uxth	r1, r1
    b73c:	add.w	r1, r0, r1, lsl #1
    b740:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    b742:	ldrh.w	r2, [r3, #2]!
    b746:	cbnz	r2, b74a <FatPartition::freeClusterCount()+0x8e>
            free++;
    b748:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    b74a:	cmp	r1, r3
    b74c:	bne.n	b742 <FatPartition::freeClusterCount()+0x86>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b74e:	subs.w	r8, r8, lr
    b752:	bne.n	b6e8 <FatPartition::freeClusterCount()+0x2c>
    b754:	b.n	b726 <FatPartition::freeClusterCount()+0x6a>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    b756:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    b75a:	mov	r1, lr
    b75c:	b.n	b70a <FatPartition::freeClusterCount()+0x4e>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    b75e:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    b760:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    b764:	uxth.w	r3, r8
    b768:	mov	lr, r8
    b76a:	b.n	b738 <FatPartition::freeClusterCount()+0x7c>

0000b76c <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

 fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    b76c:	push	{r3, r4, r5, r6, r7, lr}
    b76e:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    b770:	movs	r3, #0
  m_allocSearchStart = 1;
    b772:	movs	r5, #1
    b774:	mov.w	r0, #4294967295
    b778:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    b77a:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    b77c:	str	r1, [r4, #40]	; 0x28
    b77e:	str.w	r1, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    b782:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    b784:	strb.w	r3, [r4, #36]	; 0x24
    b788:	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    b78c:	str	r0, [r4, #48]	; 0x30
    b78e:	str.w	r0, [r4, #576]	; 0x240
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    b792:	mov	r5, r2
    b794:	cbz	r2, b7ce <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    b796:	cmp	r2, #4
    b798:	bls.n	b79e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    b79a:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    b79c:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    b79e:	add.w	r6, r4, #36	; 0x24
    b7a2:	mov	r2, r3
    b7a4:	mov	r1, r3
    b7a6:	mov	r0, r6
    b7a8:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FsCache::CACHE_FOR_READ));
    MbrPart_t* mp = mbr->part + part - 1;
    b7ac:	add.w	r5, r5, #268435456	; 0x10000000
    b7b0:	subs	r5, #1
    b7b2:	lsls	r5, r5, #4
    b7b4:	add.w	r3, r0, #446	; 0x1be
    b7b8:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    b7ba:	cmp	r0, #0
    b7bc:	beq.n	b79a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b7be:	ldrb	r1, [r2, #4]
    b7c0:	cmp	r1, #0
    b7c2:	beq.n	b79a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b7c4:	ldrb	r3, [r3, r5]
    b7c6:	lsls	r3, r3, #25
    b7c8:	bne.n	b79a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b7ca:	ldr	r5, [r2, #8]
    b7cc:	b.n	b7d2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    b7ce:	add.w	r6, r4, #36	; 0x24
    b7d2:	mov	r0, r6
    b7d4:	movs	r2, #0
    b7d6:	mov	r1, r5
    b7d8:	bl	8eac <FsCache::get(unsigned long, unsigned char)>
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    b7dc:	cmp	r0, #0
    b7de:	beq.n	b79a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b7e0:	ldrb	r3, [r0, #16]
    b7e2:	cmp	r3, #2
    b7e4:	bne.n	b79a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b7e6:	ldrh.w	r3, [r0, #11]
    b7ea:	cmp.w	r3, #512	; 0x200
    b7ee:	bne.n	b79a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    b7f0:	ldrb	r6, [r0, #13]
    b7f2:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    b7f4:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    b7f6:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    b7f8:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    b7fa:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    b7fc:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    b7fe:	beq.n	b820 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    b800:	movs	r2, #1
    b802:	mov	r1, r2
    b804:	b.n	b808 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    b806:	mov	r2, r3
    b808:	lsls	r1, r1, #1
    b80a:	uxtb	r1, r1
    b80c:	adds	r3, r2, #1
    b80e:	cmp	r6, r1
    b810:	uxtb	r3, r3
    b812:	beq.n	b81e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    b814:	cmp	r3, #9
    b816:	bne.n	b806 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    b818:	strb	r2, [r4, #6]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    b81a:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    b81c:	pop	{r3, r4, r5, r6, r7, pc}
    b81e:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    b820:	ldrh	r6, [r0, #22]
    b822:	str	r6, [r4, #16]
  if (m_sectorsPerFat == 0) {
    b824:	cbnz	r6, b82a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    b826:	ldr	r6, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    b828:	str	r6, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b82a:	ldrh	r1, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b82c:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    b830:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b832:	add	r1, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b834:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    b836:	add.w	r7, r1, r6, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b83a:	addw	r3, r3, #511	; 0x1ff
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    b83e:	str	r1, [r4, #24]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    b840:	ldrh.w	r1, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    b844:	str	r7, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    b846:	add.w	r3, r7, r3, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    b84a:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    b84c:	cbnz	r1, b850 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    b84e:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    b850:	subs	r5, r5, r3
    b852:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    b854:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b858:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    b85c:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b85e:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    b860:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    b862:	bls.n	b880 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x114>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    b864:	movw	r3, #65524	; 0xfff4
    b868:	cmp	r2, r3
    b86a:	ittet	hi
    b86c:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    b86e:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    b870:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    b872:	movhi	r3, #32
    b874:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    b876:	str	r6, [r4, #44]	; 0x2c
    b878:	str.w	r6, [r4, #572]	; 0x23c
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    b87c:	movs	r0, #1
    b87e:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    b880:	movs	r3, #12
    b882:	strb	r3, [r4, #7]
    b884:	b.n	b79a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    b886:	nop

0000b888 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    b888:	cmp	r1, #4
    b88a:	bls.n	b8a6 <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    b88c:	cmp	r1, #10
    b88e:	bls.n	b89e <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    b890:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    b892:	itte	ls
    b894:	addls.w	r1, r0, r1, lsl #1
    b898:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    b89a:	movhi	r0, #0
}
    b89c:	bx	lr
    b89e:	add.w	r1, r0, r1, lsl #1
    b8a2:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    b8a4:	bx	lr
    b8a6:	add.w	r1, r0, r1, lsl #1
    b8aa:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    b8ae:	bx	lr

0000b8b0 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    b8b0:	push	{r4}
    b8b2:	subs	r2, r0, #1
    b8b4:	add.w	r4, r0, #10
  uint8_t sum = 0;
    b8b8:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b8ba:	ldrb.w	r1, [r2, #1]!
    b8be:	lsrs	r3, r0, #1
    b8c0:	orr.w	r0, r3, r0, lsl #7
    b8c4:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b8c8:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    b8ca:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    b8cc:	bne.n	b8ba <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    b8ce:	ldr.w	r4, [sp], #4
    b8d2:	bx	lr

0000b8d4 <FatFile::openCluster(FatFile*)>:
 fail:
  name[0] = '\0';
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    b8d4:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    b8d6:	ldr	r3, [r1, #12]
    b8d8:	cbz	r3, b8f8 <FatFile::openCluster(FatFile*)+0x24>
    b8da:	mov	r5, r0
    b8dc:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    b8de:	movs	r2, #36	; 0x24
    b8e0:	movs	r1, #0
    b8e2:	bl	1109c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    b8e6:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    b8e8:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    b8ea:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    b8ec:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    b8ee:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    b8f0:	ldr	r3, [r4, #12]
    b8f2:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    b8f4:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    b8f6:	pop	{r3, r4, r5, pc}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    b8f8:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    b8fa:	ldmia.w	sp!, {r3, r4, r5, lr}
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    b8fe:	b.w	ac38 <FatFile::openRoot(FatVolume*)>
    b902:	nop

0000b904 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    b904:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b908:	sub	sp, #52	; 0x34
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    b90a:	ldrb	r3, [r0, #0]
    b90c:	movs	r4, #0
    b90e:	strb.w	r4, [sp, #12]
    b912:	strb.w	r4, [sp, #13]
    b916:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
size_t FatFile::getName(char* name, size_t size) {
    b91a:	mov	r8, r1
  size_t n = 0;
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    b91c:	cbz	r3, b924 <FatFile::getName(char*, unsigned int)+0x20>
    b91e:	cmp	r2, #12
    b920:	mov	r9, r2
    b922:	bhi.n	b930 <FatFile::getName(char*, unsigned int)+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
    b924:	movs	r0, #0
    b926:	strb.w	r0, [r8]
  return 0;
}
    b92a:	add	sp, #52	; 0x34
    b92c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    b930:	ldrb	r3, [r0, #3]
    b932:	mov	r7, r0
    b934:	cmp	r3, #0
    b936:	beq.n	b9de <FatFile::getName(char*, unsigned int)+0xda>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    b938:	add	r0, sp, #12
    b93a:	mov	r1, r7
    b93c:	bl	b8d4 <FatFile::openCluster(FatFile*)>
    b940:	cmp	r0, #0
    b942:	beq.n	b924 <FatFile::getName(char*, unsigned int)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b944:	ldrb	r3, [r7, #3]
    b946:	cmp	r3, #0
    b948:	beq.n	b924 <FatFile::getName(char*, unsigned int)+0x20>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b94a:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b94c:	movs	r6, #1
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    b94e:	add.w	r5, r9, #4294967295
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    b952:	ldrh	r1, [r7, #4]
    b954:	subs	r1, r1, r6
    b956:	lsls	r1, r1, #5
    b958:	add	r0, sp, #12
    b95a:	bl	b080 <FatFile::seekSet(unsigned long)>
    b95e:	cmp	r0, #0
    b960:	beq.n	b924 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    b962:	movs	r1, #0
    b964:	add	r0, sp, #12
    b966:	bl	ae10 <FatFile::readDirCache(bool)>
    if (!ldir) {
    b96a:	mov	fp, r0
    b96c:	cmp	r0, #0
    b96e:	beq.n	b924 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    b970:	ldrb	r3, [r0, #11]
    b972:	cmp	r3, #15
    b974:	bne.n	b924 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    b976:	ldrb	r3, [r0, #0]
    b978:	and.w	r3, r3, #31
    b97c:	cmp	r6, r3
    b97e:	bne.n	b924 <FatFile::getName(char*, unsigned int)+0x20>
  return 0;
}
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    b980:	subs	r3, r6, #1
    b982:	add.w	r4, r3, r3, lsl #1
    b986:	add.w	r4, r3, r4, lsl #2
    b98a:	mov	r3, r4
    b98c:	add.w	sl, r8, r4
    b990:	add.w	r2, r4, #13
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    b994:	subs	r1, r3, r4
    b996:	uxtb	r1, r1
    b998:	mov	r0, fp
    b99a:	bl	b888 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= (n - 1)) {
    b99e:	cbz	r0, b9e8 <FatFile::getName(char*, unsigned int)+0xe4>
    b9a0:	cmp	r5, r3
    b9a2:	bls.n	b9e8 <FatFile::getName(char*, unsigned int)+0xe4>
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b9a4:	cmp	r0, #126	; 0x7e
    b9a6:	add.w	r3, r3, #1
    b9aa:	ite	ls
    b9ac:	uxtbls	r0, r0
    b9ae:	movhi	r0, #63	; 0x3f
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    b9b0:	cmp	r2, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
     //       k = n - 1;   <<-------removed
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    b9b2:	strb.w	r0, [sl], #1
//------------------------------------------------------------------------------
static size_t lfnGetName(DirLfn_t* ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    b9b6:	bne.n	b994 <FatFile::getName(char*, unsigned int)+0x90>
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte.
  if (k >= n) {  // <<----------added
    k = n - 1;   // <<--------- added
    b9b8:	cmp	r9, r2
    b9ba:	it	ls
    b9bc:	movls	r2, r5
  }             // <<---------added
  name[k] = '\0';
    b9be:	ldrb.w	r3, [sp, #4]
    b9c2:	strb.w	r3, [r8, r2]
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    n = lfnGetName(ldir, name, size);
    if (n == 0) {
    b9c6:	cmp	r2, #0
    b9c8:	beq.n	b924 <FatFile::getName(char*, unsigned int)+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    b9ca:	ldrb.w	r3, [fp]
    b9ce:	lsls	r3, r3, #25
    b9d0:	bmi.n	b9ec <FatFile::getName(char*, unsigned int)+0xe8>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    b9d2:	adds	r6, #1
    b9d4:	ldrb	r3, [r7, #3]
    b9d6:	uxtb	r6, r6
    b9d8:	cmp	r3, r6
    b9da:	bcs.n	b952 <FatFile::getName(char*, unsigned int)+0x4e>
    b9dc:	b.n	b924 <FatFile::getName(char*, unsigned int)+0x20>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    b9de:	bl	c1ac <FatFile::getSFN(char*)>
  DBG_FAIL_MACRO;

 fail:
  name[0] = '\0';
  return 0;
}
    b9e2:	add	sp, #52	; 0x34
    b9e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  // https://github.com/greiman/SdFat-beta/issues/67#issuecomment-774508283
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= (n - 1)) {
    b9e8:	mov	r2, r3
    b9ea:	b.n	b9b8 <FatFile::getName(char*, unsigned int)+0xb4>
    b9ec:	mov	r0, r2
    b9ee:	b.n	b92a <FatFile::getName(char*, unsigned int)+0x26>

0000b9f0 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    b9f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    b9f4:	ldrb	r3, [r0, #0]
    b9f6:	cmp	r3, #32
    b9f8:	bne.n	ba02 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    b9fa:	ldrb.w	r3, [r0, #1]!
    b9fe:	cmp	r3, #32
    ba00:	beq.n	b9fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    ba02:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    ba04:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    ba06:	cmp	r3, #0
    ba08:	beq.w	bc1a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    ba0c:	cmp	r3, #47	; 0x2f
    ba0e:	beq.n	ba70 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ba10:	cmp	r3, #92	; 0x5c
    ba12:	beq.n	ba5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    ba14:	sub.w	r4, r3, #34	; 0x22
    ba18:	uxtb	r4, r4
    ba1a:	cmp	r4, #29
    ba1c:	bls.n	ba60 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    ba1e:	ldr.w	lr, [pc, #536]	; bc38 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    ba22:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    ba24:	movs	r4, #0
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    ba26:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    ba28:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    ba2c:	mov	r7, r6
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    ba2e:	beq.n	ba5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    ba30:	cmp	r5, #94	; 0x5e
    ba32:	bhi.n	ba5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    ba34:	ldrb.w	r3, [r6], #1
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ba38:	sub.w	r5, r3, #34	; 0x22
    ba3c:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    ba3e:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    ba40:	cmp	r3, #0
    ba42:	beq.w	bbec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    ba46:	cmp	r3, #47	; 0x2f
    ba48:	beq.n	ba72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ba4a:	cmp	r3, #92	; 0x5c
    ba4c:	lsr.w	r7, lr, r5
    ba50:	beq.n	ba5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    ba52:	cmp	r5, #29
    ba54:	bhi.n	ba26 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    ba56:	lsls	r7, r7, #31
    ba58:	bpl.n	ba26 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    ba5a:	movs	r0, #0
    ba5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    ba60:	ldr	r5, [pc, #468]	; (bc38 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    ba62:	lsr.w	r4, r5, r4
    ba66:	lsls	r4, r4, #31
    ba68:	bpl.n	ba1e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    ba6a:	movs	r0, #0
    ba6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    ba70:	movs	r4, #0
    ba72:	adds	r7, r0, r4
    ba74:	mov	r6, r7
    ba76:	mov	r5, r4
    ba78:	movs	r3, #47	; 0x2f
    ba7a:	b.n	ba82 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    ba7c:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    ba80:	adds	r5, #1
    ba82:	cmp	r3, #32
    ba84:	beq.n	ba7c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    ba86:	cmp	r3, #47	; 0x2f
    ba88:	beq.n	ba7c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    ba8a:	add	r5, r0
    ba8c:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    ba8e:	cbz	r4, baa4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    ba90:	mov	r2, r7
    c = path[len - 1];
    ba92:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    ba96:	cmp	r3, #46	; 0x2e
    ba98:	beq.n	baa0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    ba9a:	cmp	r3, #32
    ba9c:	bne.w	bbf2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    baa0:	subs	r4, #1
    baa2:	bne.n	ba92 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    baa4:	mov.w	r5, #4294967295
    baa8:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    baaa:	str	r3, [r1, #4]
    baac:	add.w	r6, r1, #23
    bab0:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    bab4:	movs	r2, #32
    bab6:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    baba:	cmp	r3, r6
    babc:	bne.n	bab6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    babe:	subs	r6, r0, #1
    bac0:	movs	r2, #0
    bac2:	b.n	bac6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    bac4:	adds	r2, #1
    bac6:	ldrb.w	r3, [r6, #1]!
    baca:	cmp	r3, #46	; 0x2e
    bacc:	beq.n	bac4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    bace:	cmp	r3, #32
    bad0:	beq.n	bac4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    bad2:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    bad6:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    bad8:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    badc:	beq.n	baf8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    bade:	ldrb	r7, [r0, r5]
    bae0:	cmp	r7, #46	; 0x2e
    bae2:	add.w	r6, r0, r5
    bae6:	bne.n	baf2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    bae8:	b.n	baf8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    baea:	ldrb.w	r7, [r6, #-1]!
    baee:	cmp	r7, #46	; 0x2e
    baf0:	beq.n	baf8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    baf2:	adds.w	r5, r5, #4294967295
    baf6:	bcs.n	baea <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    baf8:	cmp	r2, r4
    bafa:	mov.w	r9, #0
    bafe:	bge.w	bc24 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    bb02:	mov	r6, r9
    bb04:	mov	sl, r9
    bb06:	movs	r7, #7
    bb08:	mov.w	r8, #8
    bb0c:	b.n	bb5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    bb0e:	cmp	r3, #46	; 0x2e
    bb10:	beq.n	bba2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    bb12:	cmp	r3, #34	; 0x22
    bb14:	beq.n	bb2e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    bb16:	cmp	r3, #124	; 0x7c
    bb18:	beq.n	bb2e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    bb1a:	sub.w	lr, r3, #42	; 0x2a
    bb1e:	cmp.w	lr, #5
    bb22:	bls.n	bbb6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    bb24:	sub.w	lr, r3, #58	; 0x3a
    bb28:	cmp.w	lr, #5
    bb2c:	bhi.n	bbe0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    bb2e:	cmp	r5, r2
    bb30:	beq.n	bba6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    bb32:	cmp	r7, r6
    bb34:	bcc.n	bb8a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    bb36:	mov.w	ip, #0
      c = '_';
    bb3a:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    bb3c:	add.w	lr, r6, #1
    bb40:	add.w	fp, r1, r6
    bb44:	uxtb.w	r6, lr
      if (i < 7) {
    bb48:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    bb4a:	strb.w	r3, [fp, #13]
      if (i < 7) {
    bb4e:	bhi.n	bb52 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    bb50:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bb52:	adds	r2, #1
    bb54:	cmp	r2, r4
    bb56:	bge.n	bb68 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    bb58:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    bb5a:	cmp	r3, #32
    bb5c:	bne.n	bb0e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bb5e:	adds	r2, #1
    bb60:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    bb62:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bb66:	blt.n	bb58 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    bb68:	ldrb	r3, [r1, #13]
    bb6a:	cmp	r3, #32
    bb6c:	beq.w	ba5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    bb70:	cmp.w	ip, #0
    bb74:	beq.n	bc06 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    bb76:	tst.w	sl, r9
    bb7a:	it	ne
    bb7c:	movne.w	r9, #2
    bb80:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    bb84:	movs	r0, #1
    bb86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    bb8a:	cmp	r7, #10
    bb8c:	beq.n	bbfe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    bb8e:	cmp	r5, r2
    bb90:	blt.n	bbfe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    bb92:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    bb94:	movs	r7, #10
      i = 8;    // Place for extension.
    bb96:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    bb98:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    bb9c:	mov.w	ip, #0
    bba0:	b.n	bb52 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    bba2:	cmp	r5, r2
    bba4:	bne.n	bb5e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    bba6:	cmp	r7, #10
    bba8:	beq.n	bbfe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    bbaa:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    bbac:	movs	r7, #10
      i = 8;    // Place for extension.
    bbae:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    bbb0:	mov.w	r8, #16
    bbb4:	b.n	bb52 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    bbb6:	cmp	r3, #45	; 0x2d
    bbb8:	bne.n	bb2e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    bbba:	sub.w	lr, r3, #33	; 0x21
    bbbe:	cmp.w	lr, #93	; 0x5d
    bbc2:	bhi.n	bb2e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    bbc4:	cmp	r5, r2
    bbc6:	beq.n	bba6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    bbc8:	cmp	r7, r6
    bbca:	bcc.n	bb8a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    bbcc:	sub.w	lr, r3, #97	; 0x61
    bbd0:	cmp.w	lr, #25
    bbd4:	bhi.n	bc28 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    bbd6:	subs	r3, #32
    bbd8:	uxtb	r3, r3
        lc |= bit;
    bbda:	orr.w	r9, r8, r9
    bbde:	b.n	bb3c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    bbe0:	sub.w	lr, r3, #91	; 0x5b
    bbe4:	cmp.w	lr, #2
    bbe8:	bls.n	bb2e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    bbea:	b.n	bbba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    bbec:	str	r7, [r2, #0]
    bbee:	adds	r7, r0, r4
    bbf0:	b.n	ba90 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    bbf2:	cmp	r4, #255	; 0xff
    bbf4:	bgt.w	ba5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    bbf8:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    bbfa:	mov	r3, r4
    bbfc:	b.n	baaa <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    bbfe:	ldrb	r3, [r1, #13]
    bc00:	cmp	r3, #32
    bc02:	beq.w	ba5a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    bc06:	ldrb	r3, [r1, #12]
    bc08:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    bc0a:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    bc0c:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    bc0e:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    bc10:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    bc12:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    bc14:	strb	r2, [r3, #14]
    bc16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    bc1a:	str	r0, [r2, #0]
    bc1c:	mov	r4, r3
    bc1e:	mov.w	r5, #4294967295
    bc22:	b.n	baaa <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    bc24:	mov	sl, r9
    bc26:	b.n	bb68 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    bc28:	sub.w	lr, r3, #65	; 0x41
    bc2c:	cmp.w	lr, #25
        uc |= bit;
    bc30:	it	ls
    bc32:	orrls.w	sl, r8, sl
    bc36:	b.n	bb3c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    bc38:	.word	0x35000101

0000bc3c <FatFile::remove()>:

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    bc3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    bc40:	ldrb	r2, [r0, #2]

 fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    bc42:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    bc44:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    bc46:	lsls	r2, r2, #30
    bc48:	strb.w	r3, [sp, #4]
    bc4c:	strb.w	r3, [sp, #5]
    bc50:	strb.w	r3, [sp, #6]
    bc54:	bpl.n	bc9c <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    bc56:	ldr	r1, [r0, #32]
    bc58:	mov	r5, r0
    bc5a:	cbnz	r1, bca6 <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    bc5c:	movs	r1, #1
    bc5e:	mov	r0, r5
    bc60:	bl	a880 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    bc64:	cbz	r0, bc9c <FatFile::remove()+0x60>
    bc66:	subs	r1, r0, #1
    bc68:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    bc6c:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    bc6e:	lsrs	r2, r4, #1
    bc70:	ldrb.w	r6, [r1, #1]!
    bc74:	orr.w	r3, r2, r4, lsl #7
    bc78:	uxtab	r3, r6, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    bc7c:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    bc7e:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    bc80:	bne.n	bc6e <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    bc82:	mov.w	r8, #229	; 0xe5
    bc86:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    bc8a:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    bc8c:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bc8e:	add.w	r0, r6, #36	; 0x24
    bc92:	strb	r3, [r5, #0]
  m_flags = 0;
    bc94:	strb	r3, [r5, #2]
    bc96:	bl	8f0c <FsCache::sync()>
    bc9a:	cbnz	r0, bcb2 <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    bc9c:	movs	r6, #0
}
    bc9e:	mov	r0, r6
    bca0:	add	sp, #40	; 0x28
    bca2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    bca6:	ldr	r0, [r0, #8]
    bca8:	bl	b680 <FatPartition::freeChain(unsigned long)>
    bcac:	cmp	r0, #0
    bcae:	bne.n	bc5c <FatFile::remove()+0x20>
    bcb0:	b.n	bc9c <FatFile::remove()+0x60>
    bcb2:	add.w	r0, r6, #564	; 0x234
    bcb6:	bl	8f0c <FsCache::sync()>
    bcba:	cmp	r0, #0
    bcbc:	beq.n	bc9c <FatFile::remove()+0x60>
    bcbe:	ldr	r0, [r6, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    bcc0:	ldr	r3, [r0, #0]
    bcc2:	ldr	r3, [r3, #24]
    bcc4:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bcc6:	mov	r6, r0
    bcc8:	cmp	r0, #0
    bcca:	beq.n	bc9c <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    bccc:	ldrb	r3, [r5, #3]
    bcce:	cmp	r3, #0
    bcd0:	beq.n	bc9e <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    bcd2:	add	r0, sp, #4
    bcd4:	mov	r1, r5
    bcd6:	bl	b8d4 <FatFile::openCluster(FatFile*)>
    bcda:	cmp	r0, #0
    bcdc:	beq.n	bc9c <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bcde:	ldrb	r3, [r5, #3]
    bce0:	cmp	r3, #0
    bce2:	beq.n	bc9c <FatFile::remove()+0x60>
    bce4:	movs	r7, #1
    bce6:	b.n	bd28 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    bce8:	add	r0, sp, #4
    bcea:	bl	ae10 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bcee:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    bcf0:	cmp	r0, #0
    bcf2:	beq.n	bc9c <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bcf4:	ldrb	r2, [r0, #11]
    bcf6:	cmp	r2, #15
    bcf8:	bne.n	bc9c <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    bcfa:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bcfc:	and.w	r1, r2, #31
    bd00:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bd02:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    bd04:	bne.n	bc9c <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    bd06:	ldrb	r3, [r0, #13]
    bd08:	cmp	r3, r4
    bd0a:	bne.n	bc9c <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    bd0c:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    bd10:	ldr	r1, [r5, #8]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    bd12:	ldrb.w	r3, [r1, #36]	; 0x24
    bd16:	orr.w	r3, r3, #1
    bd1a:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    bd1e:	lsls	r3, r2, #25
    bd20:	bmi.n	bd3c <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    bd22:	ldrb	r3, [r5, #3]
    bd24:	cmp	r3, r7
    bd26:	bcc.n	bc9c <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    bd28:	ldrh	r1, [r5, #4]
    bd2a:	subs	r1, r1, r7
    bd2c:	lsls	r1, r1, #5
    bd2e:	add	r0, sp, #4
    bd30:	bl	b080 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    bd34:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    bd36:	cmp	r0, #0
    bd38:	bne.n	bce8 <FatFile::remove()+0xac>
    bd3a:	b.n	bc9c <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    bd3c:	ldr	r4, [r5, #8]
    bd3e:	add.w	r0, r4, #36	; 0x24
    bd42:	bl	8f0c <FsCache::sync()>
    bd46:	cmp	r0, #0
    bd48:	beq.n	bc9c <FatFile::remove()+0x60>
    bd4a:	add.w	r0, r4, #564	; 0x234
    bd4e:	bl	8f0c <FsCache::sync()>
    bd52:	cmp	r0, #0
    bd54:	beq.n	bc9c <FatFile::remove()+0x60>
    bd56:	ldr	r0, [r4, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    bd58:	ldr	r3, [r0, #0]
    bd5a:	ldr	r3, [r3, #24]
    bd5c:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    bd5e:	cmp	r0, #0
    bd60:	beq.n	bc9c <FatFile::remove()+0x60>
    bd62:	b.n	bc9e <FatFile::remove()+0x62>

0000bd64 <FatFile::lfnUniqueSfn(fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    bd64:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    bd68:	ldrb	r7, [r1, #12]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    bd6a:	mov	r6, r1
    bd6c:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bd6e:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    bd72:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    bd76:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    bd7a:	ldr	r0, [r6, #4]
    bd7c:	ldr	r1, [r6, #8]
    bd7e:	add.w	r3, r8, r0
    bd82:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bd84:	cbz	r0, bd98 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    bd86:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    bd88:	ldrb.w	r2, [r1], #1
    bd8c:	add.w	r3, r3, r3, lsl #5
    bd90:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bd92:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    bd94:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    bd96:	bne.n	bd88 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    bd98:	cmp	r7, #3
    bd9a:	it	cs
    bd9c:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bd9e:	adds	r2, r7, #4
    bda0:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    bda2:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bda6:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bda8:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bdaa:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bdac:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bdae:	ite	ls
    bdb0:	addls	r1, #48	; 0x30
    bdb2:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bdb4:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    bdb6:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    bdba:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    bdbc:	bcc.n	bda2 <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    bdbe:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    bdc0:	movs	r1, #0
    bdc2:	strb.w	r9, [r3, #13]
    bdc6:	mov	r0, r4
    bdc8:	bl	b080 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    bdcc:	movs	r1, #1
    bdce:	mov	r0, r4
    bdd0:	bl	ae10 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bdd4:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    bdd6:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bdd8:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    bdda:	cbz	r0, be08 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bddc:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bde0:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bde2:	cmp.w	lr, #0
    bde6:	beq.n	be14 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    bde8:	ldrb	r3, [r3, #11]
    bdea:	lsls	r3, r3, #28
    bdec:	bmi.n	bdcc <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    bdee:	bl	10f70 <memcmp>
    bdf2:	cmp	r0, #0
    bdf4:	bne.n	bdcc <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    bdf6:	add.w	r8, r8, #1
    bdfa:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    bdfe:	cmp.w	r8, #100	; 0x64
    be02:	bne.n	bd7a <FatFile::lfnUniqueSfn(fname_t*)+0x16>
 fail:
  return false;

 done:
  return true;
}
    be04:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    be08:	ldrb	r0, [r4, #1]
    be0a:	clz	r0, r0
    be0e:	lsrs	r0, r0, #5
    be10:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

 fail:
  return false;

 done:
  return true;
    be14:	movs	r0, #1
    be16:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    be1a:	nop

0000be1c <FatFile::open(FatFile*, fname_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    be1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    be20:	ldrb	r4, [r1, #0]
    be22:	tst.w	r4, #112	; 0x70

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    be26:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    be28:	beq.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    be2a:	ldrb	r4, [r0, #0]
    be2c:	cbz	r4, be36 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

 fail:
  return false;
    be2e:	movs	r0, #0
}
    be30:	add	sp, #52	; 0x34
    be32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    be36:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    be38:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    be3c:	lsls	r4, r4, #30
    be3e:	bne.n	bec6 <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    be40:	mov.w	r8, #1
    be44:	mov	r6, r1
    be46:	mov	fp, r2
    be48:	str	r0, [sp, #36]	; 0x24
    be4a:	movs	r1, #0
    be4c:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    be4e:	mov	r7, r1
    be50:	str	r3, [sp, #28]
    be52:	bl	b080 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    be56:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    be5a:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    be5c:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    be5e:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    be60:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    be62:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    be64:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    be66:	movs	r1, #1
    be68:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    be6a:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    be6c:	bl	ae10 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    be70:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    be74:	mov	r3, r0
    be76:	cmp	r0, #0
    be78:	beq.w	bf94 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    be7c:	ldrb	r2, [r0, #0]
    be7e:	cmp	r2, #229	; 0xe5
    be80:	beq.n	bef8 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    be82:	cmp	r2, #0
    be84:	beq.n	bef8 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    be86:	cmp	r4, r8
    be88:	it	cc
    be8a:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    be8c:	cmp	r2, #46	; 0x2e
    be8e:	beq.n	bef2 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    be90:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    be92:	cmp	r1, #15
    be94:	beq.n	bf14 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    be96:	and.w	r1, r1, #8
    be9a:	and.w	r2, r1, #255	; 0xff
    be9e:	cbnz	r1, bef2 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    bea0:	cmp.w	r9, #0
    bea4:	bne.w	c168 <FatFile::open(FatFile*, fname_t*, int)+0x34c>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    bea8:	mov	r0, r3
    beaa:	movs	r2, #11
    beac:	ldr	r1, [sp, #16]
    beae:	bl	10f70 <memcmp>
    beb2:	cmp	r0, #0
    beb4:	bne.n	be66 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    beb6:	ldrb.w	r3, [fp]
    beba:	lsls	r0, r3, #31
    bebc:	bpl.w	c190 <FatFile::open(FatFile*, fname_t*, int)+0x374>
          goto found;
        }
        fnameFound = true;
    bec0:	movs	r3, #1
    bec2:	str	r3, [sp, #20]
    bec4:	b.n	be66 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    bec6:	ldr	r5, [pc, #732]	; (c1a4 <FatFile::open(FatFile*, fname_t*, int)+0x388>)
    bec8:	add.w	r4, sl, #12
    becc:	umull	r4, r8, r5, r4
    bed0:	mov.w	r8, r8, lsr #2
    bed4:	add.w	r8, r8, #1
    bed8:	uxtb.w	r8, r8
    bedc:	b.n	be44 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    bede:	ldr	r1, [sp, #12]
    bee0:	subs	r1, #1
    bee2:	uxtb	r1, r1
    bee4:	cmp	r2, r1
    bee6:	str	r1, [sp, #12]
    bee8:	bne.n	bef2 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    beea:	ldrb	r2, [r3, #13]
    beec:	ldr	r1, [sp, #24]
    beee:	cmp	r1, r2
    bef0:	beq.n	bf2a <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    bef2:	mov.w	r9, #0
    bef6:	b.n	be66 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    bef8:	cmp	r4, #0
    befa:	it	eq
    befc:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    befe:	cmp	r4, r8
        freeFound++;
    bf00:	itt	cc
    bf02:	addcc	r4, #1
    bf04:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    bf06:	cmp	r2, #0
    bf08:	beq.n	bf9c <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    bf0a:	cmp	r2, #229	; 0xe5
    bf0c:	bne.n	be8c <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    bf0e:	mov.w	r9, #0
    bf12:	b.n	be66 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    bf14:	cmp.w	r9, #0
    bf18:	bne.n	bede <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    bf1a:	lsls	r5, r2, #25
    bf1c:	bpl.n	be66 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    bf1e:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    bf22:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    bf24:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    bf28:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    bf2a:	ldr	r2, [sp, #12]
    bf2c:	subs	r2, #1
    bf2e:	add.w	r5, r2, r2, lsl #1
    bf32:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    bf36:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    bf38:	mov	r2, r5
      if (k >= len) {
    bf3a:	bls.n	bef2 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    bf3c:	add.w	r1, r5, #13
    bf40:	str.w	r9, [sp, #32]
    bf44:	mov	r9, r1
    bf46:	b.n	bf70 <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf48:	ldr.w	r0, [fp, #8]
    bf4c:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    bf4e:	cmp.w	ip, #25
    bf52:	it	ls
    bf54:	addls	r1, #32
    bf56:	sub.w	r0, r2, #65	; 0x41
    bf5a:	it	ls
    bf5c:	uxtbls	r1, r1
    bf5e:	cmp	r0, #25
    bf60:	itt	ls
    bf62:	addls	r2, #32
    bf64:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf66:	cmp	r1, r2
    bf68:	bne.n	bef2 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    bf6a:	cmp	lr, r9
    bf6c:	beq.n	bff4 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    bf6e:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    bf70:	subs	r1, r2, r5
    bf72:	uxtb	r1, r1
    bf74:	mov	r0, r3
    bf76:	bl	b888 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf7a:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    bf7c:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    bf7e:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf82:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    bf86:	beq.w	c15a <FatFile::open(FatFile*, fname_t*, int)+0x33e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    bf8a:	cmp	r0, #255	; 0xff
    bf8c:	bls.n	bf48 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    bf8e:	mov.w	r9, #0
    bf92:	b.n	be66 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    bf94:	ldrb	r3, [r6, #1]
    bf96:	cmp	r3, #0
    bf98:	bne.w	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    bf9c:	ldr	r2, [sp, #28]
    bf9e:	mov	r3, r2
    bfa0:	lsls	r2, r3, #22
    bfa2:	bpl.w	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bfa6:	and.w	r3, r3, #3
    bfaa:	subs	r3, #1
    bfac:	cmp	r3, #1
    bfae:	bhi.w	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    bfb2:	cmp	r4, #0
    bfb4:	it	eq
    bfb6:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    bfb8:	cmp	r4, r8
    bfba:	bcc.n	bfc4 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    bfbc:	b.n	bffa <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    bfbe:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    bfc0:	cmp	r8, r4
    bfc2:	bls.n	bffa <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    bfc4:	movs	r1, #0
    bfc6:	mov	r0, r6
    bfc8:	bl	ae10 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    bfcc:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    bfce:	cmp	r0, #0
    bfd0:	bne.n	bfbe <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    bfd2:	ldrb	r3, [r6, #1]
    bfd4:	cbz	r3, bfe0 <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    bfd6:	b.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bfd8:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    bfda:	ldrb	r3, [r3, #4]
    bfdc:	cmp	r3, #1
    bfde:	bhi.n	bffa <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    bfe0:	cmp	r8, r4
    bfe2:	bls.n	bffa <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    bfe4:	mov	r0, r6
    bfe6:	bl	a7e8 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    bfea:	adds	r4, #16
    bfec:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    bfee:	cmp	r0, #0
    bff0:	bne.n	bfd8 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    bff2:	b.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    bff4:	ldr.w	r9, [sp, #32]
    bff8:	b.n	be66 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    bffa:	ldr	r3, [sp, #20]
    bffc:	cbz	r3, c00c <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    bffe:	mov	r1, fp
    c000:	mov	r0, r6
    c002:	bl	bd64 <FatFile::lfnUniqueSfn(fname_t*)>
    c006:	cmp	r0, #0
    c008:	beq.w	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    c00c:	lsls	r1, r7, #5
    c00e:	mov	r0, r6
    c010:	bl	b080 <FatFile::seekSet(unsigned long)>
    c014:	cmp	r0, #0
    c016:	beq.w	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    c01a:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    c01e:	ands.w	r9, r8, #255	; 0xff
    c022:	beq.n	c0d8 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c024:	orr.w	r4, r9, #64	; 0x40
    c028:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    c02a:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    c02c:	movs	r7, #0
    c02e:	movs	r1, #0
    c030:	mov	r0, r6
    c032:	bl	ae10 <FatFile::readDirCache(bool)>
    if (!ldir) {
    c036:	cmp	r0, #0
    c038:	beq.w	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    c03c:	ldr	r2, [r6, #8]
    c03e:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c042:	cmp	r9, r5
    c044:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    c048:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c04c:	ite	ne
    c04e:	movne	r1, r5
    c050:	moveq	r1, r4
    c052:	strb.w	r3, [r2, #36]	; 0x24
    c056:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    c05a:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    c05e:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    c060:	strb	r1, [r0, #0]
    c062:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    c066:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c068:	ldrb.w	r8, [lr, #1]!
    c06c:	lsrs	r2, r3, #1
    c06e:	orr.w	r3, r2, r3, lsl #7
    c072:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c076:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c078:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c07a:	bne.n	c068 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    c07c:	and.w	r1, r1, #31
    c080:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    c082:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    c084:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    c088:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    c08c:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    c08e:	add.w	r2, r1, r2, lsl #2
    c092:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    c094:	movs	r3, #0
    c096:	b.n	c0b8 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    c098:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    c09a:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    c09e:	bls.n	c0ca <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    c0a0:	cmp	r3, #10
    c0a2:	ite	ls
    c0a4:	strhls	r1, [r0, #0]
    c0a6:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    c0a8:	adds	r3, #1
    c0aa:	uxtb	r3, r3
    c0ac:	cmp	r3, #13
    c0ae:	add.w	r2, r2, #1
    c0b2:	add.w	r0, r0, #2
    c0b6:	beq.n	c0d0 <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    c0b8:	cmp	sl, r2
    c0ba:	bhi.n	c098 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    c0bc:	ite	ne
    c0be:	movne.w	r1, #4294967295
    c0c2:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    c0c4:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    c0c6:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    c0c8:	bhi.n	c0a0 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    c0ca:	strh.w	r1, [r0, #-3]
    c0ce:	b.n	c0a8 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    c0d0:	subs	r5, #1
    c0d2:	ands.w	r5, r5, #255	; 0xff
    c0d6:	bne.n	c02e <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    c0d8:	movs	r1, #0
    c0da:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    c0dc:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    c0de:	bl	ae10 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    c0e2:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    c0e6:	mov	r4, r0
    c0e8:	cmp	r0, #0
    c0ea:	beq.w	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    c0ee:	movs	r2, #32
    c0f0:	movs	r1, #0
    c0f2:	bl	1109c <memset>
  memcpy(dir->name, fname->sfn, 11);
    c0f6:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    c0f8:	ldr	r2, [pc, #172]	; (c1a8 <FatFile::open(FatFile*, fname_t*, int)+0x38c>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    c0fa:	ldr.w	r1, [r3, #13]!
    c0fe:	ldr	r0, [r3, #4]
    c100:	str	r0, [r4, #4]
    c102:	str	r1, [r4, #0]
    c104:	ldrh	r1, [r3, #8]
    c106:	ldrb	r3, [r3, #10]
    c108:	strb	r3, [r4, #10]
    c10a:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    c10c:	ldrb.w	r3, [fp]

  // Set timestamps.
  if (FsDateTime::callback) {
    c110:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    c112:	and.w	r3, r3, #24
    c116:	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    c118:	cmp	r7, #0
    c11a:	beq.n	c198 <FatFile::open(FatFile*, fname_t*, int)+0x37c>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    c11c:	add.w	r2, sp, #43	; 0x2b
    c120:	add.w	r1, sp, #46	; 0x2e
    c124:	add	r0, sp, #44	; 0x2c
    c126:	blx	r7
    c128:	ldrh.w	r1, [sp, #44]	; 0x2c
    c12c:	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    c130:	ldrb.w	r3, [sp, #43]	; 0x2b
    c134:	strh	r1, [r4, #16]
    c136:	strh	r2, [r4, #14]
    c138:	strb	r3, [r4, #13]
      setLe16(dir->createTime, FS_DEFAULT_TIME);
      setLe16(dir->modifyTime, FS_DEFAULT_TIME);
    }
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    c13a:	ldr	r2, [r6, #8]
    c13c:	ldrb.w	r3, [r2, #36]	; 0x24
    c140:	orr.w	r3, r3, #1
    c144:	strb.w	r3, [r2, #36]	; 0x24

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    c148:	str.w	r9, [sp]
    c14c:	ldr	r3, [sp, #28]
    c14e:	ldr	r0, [sp, #36]	; 0x24
    c150:	mov	r2, r5
    c152:	mov	r1, r6
    c154:	bl	b130 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    c158:	b.n	be30 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    c15a:	cmp	r0, #0
    c15c:	ldr.w	r9, [sp, #32]
    c160:	it	ne
    c162:	movne.w	r9, #0
    c166:	b.n	be66 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    c168:	ldr	r1, [sp, #12]
    c16a:	cmp	r1, #1
    c16c:	bne.w	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    c170:	subs	r4, r3, #1
    c172:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c174:	ldrb.w	r0, [r4, #1]!
    c178:	lsrs	r1, r2, #1
    c17a:	orr.w	r2, r1, r2, lsl #7
    c17e:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c182:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    c184:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c186:	bne.n	c174 <FatFile::open(FatFile*, fname_t*, int)+0x358>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    c188:	ldr	r3, [sp, #24]
    c18a:	cmp	r3, r2
    c18c:	bne.w	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    c190:	ldr	r3, [sp, #28]
    c192:	lsls	r1, r3, #20
    c194:	bpl.n	c148 <FatFile::open(FatFile*, fname_t*, int)+0x32c>
    c196:	b.n	be2e <FatFile::open(FatFile*, fname_t*, int)+0x12>
    c198:	movw	r3, #21025	; 0x5221
    c19c:	strh	r3, [r4, #16]
    c19e:	strh	r3, [r4, #24]
    c1a0:	strh	r3, [r4, #18]
    c1a2:	b.n	c13a <FatFile::open(FatFile*, fname_t*, int)+0x31e>
    c1a4:	.word	0x4ec4ec4f
    c1a8:	.word	0x20006af8

0000c1ac <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name) {
    c1ac:	push	{r3, r4, r5, r6, r7, lr}
    c1ae:	ldrb	r3, [r0, #0]
    c1b0:	mov	r5, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t* dir;

  if (!isOpen()) {
    c1b2:	cbz	r3, c1c6 <FatFile::getSFN(char*)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    c1b4:	ands.w	r4, r3, #96	; 0x60
    c1b8:	beq.n	c1cc <FatFile::getSFN(char*)+0x20>
    name[0] = '/';
    c1ba:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    c1bc:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    c1be:	strb	r2, [r1, #0]
    name[1] = '\0';
    c1c0:	strb	r3, [r1, #1]
    return 1;
    c1c2:	movs	r0, #1
    c1c4:	pop	{r3, r4, r5, r6, r7, pc}
  }
  name[j] = '\0';
  return j;

 fail:
  name[0] = '\0';
    c1c6:	movs	r0, #0
    c1c8:	strb	r0, [r5, #0]
  return 0;
}
    c1ca:	pop	{r3, r4, r5, r6, r7, pc}
    name[0] = '/';
    name[1] = '\0';
    return 1;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FsCache::CACHE_FOR_READ));
    c1cc:	mov	r1, r4
    c1ce:	bl	a880 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    c1d2:	cmp	r0, #0
    c1d4:	beq.n	c1c6 <FatFile::getSFN(char*)+0x1a>
    c1d6:	mov	r1, r4
    c1d8:	mov	r3, r4
    c1da:	movs	r7, #8
    c1dc:	subs	r4, r0, #1
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    c1de:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    c1e2:	ldrb.w	r2, [r4, #1]!
    c1e6:	cmp	r2, #32
    c1e8:	beq.n	c206 <FatFile::getSFN(char*)+0x5a>
      continue;
    }
    if (i == 8) {
    c1ea:	cmp	r1, #8
    c1ec:	beq.n	c214 <FatFile::getSFN(char*)+0x68>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    c1ee:	sub.w	r6, r2, #65	; 0x41
    c1f2:	cmp	r6, #25
    c1f4:	bhi.n	c200 <FatFile::getSFN(char*)+0x54>
    c1f6:	ldrb	r6, [r0, #12]
    c1f8:	tst	r7, r6
      c += 'a' - 'A';
    c1fa:	itt	ne
    c1fc:	addne	r2, #32
    c1fe:	uxtbne	r2, r2
    }
    name[j++] = c;
    c200:	strb	r2, [r5, r3]
    c202:	adds	r3, #1
    c204:	uxtb	r3, r3
    c206:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    c208:	cmp	r1, #11
    c20a:	bne.n	c1e2 <FatFile::getSFN(char*)+0x36>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = '\0';
    c20c:	movs	r2, #0
    c20e:	strb	r2, [r5, r3]
  return j;
    c210:	mov	r0, r3
    c212:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    c214:	strb.w	lr, [r5, r3]
    c218:	adds	r3, #1
    c21a:	uxtb	r3, r3
    c21c:	ldrb	r2, [r4, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    c21e:	movs	r7, #16
    c220:	b.n	c1ee <FatFile::getSFN(char*)+0x42>
    c222:	nop

0000c224 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    c224:	push	{r3, r4, r5, r6, r7, lr}
    c226:	movs	r5, #0
    c228:	str	r5, [r0, #56]	; 0x38
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    c22a:	ldr	r4, [r1, #56]	; 0x38
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    c22c:	str	r5, [r0, #60]	; 0x3c
    c22e:	mov	r6, r0
    c230:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    c232:	cbz	r4, c258 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    c234:	mov	r1, r0
    c236:	movs	r0, #36	; 0x24
    c238:	bl	c494 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    c23c:	strb	r5, [r0, #0]
    c23e:	strb	r5, [r0, #1]
    c240:	strb	r5, [r0, #2]
    c242:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    c244:	ldr	r5, [r7, #56]	; 0x38
    c246:	mov	r4, r0
    c248:	ldmia	r5!, {r0, r1, r2, r3}
    c24a:	stmia	r4!, {r0, r1, r2, r3}
    c24c:	ldmia	r5!, {r0, r1, r2, r3}
    c24e:	stmia	r4!, {r0, r1, r2, r3}
    c250:	ldr	r3, [r5, #0]
    c252:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    c254:	mov	r0, r6
    c256:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    c258:	ldr	r3, [r1, #60]	; 0x3c
    c25a:	cmp	r3, #0
    c25c:	beq.n	c254 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    c25e:	mov	r1, r0
    c260:	movs	r0, #56	; 0x38
    c262:	bl	c494 <operator new(unsigned int, unsigned long*)>
    c266:	strb.w	r4, [r0, #49]	; 0x31
    c26a:	strb.w	r4, [r0, #50]	; 0x32
    c26e:	strb.w	r4, [r0, #51]	; 0x33
    c272:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    c274:	ldr	r3, [r7, #60]	; 0x3c
    c276:	mov	r2, r0
    c278:	add.w	r1, r3, #48	; 0x30
    c27c:	ldr	r5, [r3, #0]
    c27e:	ldr	r4, [r3, #4]
    c280:	ldr	r0, [r3, #8]
    c282:	ldr	r7, [r3, #12]
    c284:	str	r7, [r2, #12]
    c286:	adds	r3, #16
    c288:	cmp	r3, r1
    c28a:	str	r5, [r2, #0]
    c28c:	str	r4, [r2, #4]
    c28e:	str	r0, [r2, #8]
    c290:	add.w	r2, r2, #16
    c294:	bne.n	c27c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    c296:	ldr	r3, [r3, #0]
    c298:	str	r3, [r2, #0]
    c29a:	b.n	c254 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

0000c29c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    c29c:	push	{r4, lr}
    c29e:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    c2a0:	ldr	r0, [r0, #56]	; 0x38
    c2a2:	cbz	r0, c2b0 <FsBaseFile::close()+0x14>
    c2a4:	bl	a934 <FatFile::close()>
    c2a8:	cbz	r0, c2b0 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    c2aa:	movs	r3, #0
    c2ac:	str	r3, [r4, #56]	; 0x38
    return true;
    c2ae:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    c2b0:	ldr	r0, [r4, #60]	; 0x3c
    c2b2:	cbz	r0, c2c0 <FsBaseFile::close()+0x24>
    c2b4:	bl	8f1c <ExFatFile::close()>
    c2b8:	cbz	r0, c2c0 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    c2ba:	movs	r3, #0
    c2bc:	str	r3, [r4, #60]	; 0x3c
    c2be:	pop	{r4, pc}
    return true;
  }
  return false;
    c2c0:	movs	r0, #0
}
    c2c2:	pop	{r4, pc}

0000c2c4 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    c2c4:	cbz	r1, c33a <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    c2c6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2ca:	mov	r4, r1
    c2cc:	mov	r5, r0
    c2ce:	mov	r8, r3
    c2d0:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    c2d2:	bl	c29c <FsBaseFile::close()>
  if (vol->m_fVol) {
    c2d6:	ldr.w	r6, [r4, #1152]	; 0x480
    c2da:	cbz	r6, c308 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    c2dc:	mov	r1, r5
    c2de:	movs	r0, #36	; 0x24
    c2e0:	bl	c494 <operator new(unsigned int, unsigned long*)>
    c2e4:	movs	r1, #0
    c2e6:	strb	r1, [r0, #0]
    c2e8:	strb	r1, [r0, #1]
    c2ea:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    c2ec:	ldr.w	r1, [r4, #1152]	; 0x480
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    c2f0:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    c2f2:	mov	r3, r8
    c2f4:	mov	r2, r7
    c2f6:	bl	ac28 <FatFile::open(FatVolume*, char const*, int)>
    c2fa:	cbz	r0, c302 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    c2fc:	movs	r0, #1
    c2fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    c302:	str	r0, [r5, #56]	; 0x38
    c304:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    c308:	ldr.w	r3, [r4, #1156]	; 0x484
    c30c:	cbz	r3, c33e <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    c30e:	mov	r1, r5
    c310:	movs	r0, #56	; 0x38
    c312:	bl	c494 <operator new(unsigned int, unsigned long*)>
    c316:	strb.w	r6, [r0, #49]	; 0x31
    c31a:	strb.w	r6, [r0, #50]	; 0x32
    c31e:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    c322:	ldr.w	r1, [r4, #1156]	; 0x484
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    c326:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    c328:	mov	r3, r8
    c32a:	mov	r2, r7
    c32c:	bl	9880 <ExFatFile::open(ExFatVolume*, char const*, int)>
    c330:	cmp	r0, #0
    c332:	bne.n	c2fc <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    c334:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    c336:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    c33a:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    c33c:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    c33e:	movs	r0, #0
    c340:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c344 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    c344:	push	{r3, r4, r5, r6, r7, lr}
    c346:	mov	r5, r1
    c348:	mov	r7, r2
    c34a:	mov	r4, r0
  close();
    c34c:	bl	c29c <FsBaseFile::close()>
  if (dir->m_fFile) {
    c350:	ldr	r6, [r5, #56]	; 0x38
    c352:	cbz	r6, c378 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    c354:	mov	r1, r4
    c356:	movs	r0, #36	; 0x24
    c358:	bl	c494 <operator new(unsigned int, unsigned long*)>
    c35c:	movs	r2, #0
    c35e:	strb	r2, [r0, #0]
    c360:	strb	r2, [r0, #1]
    c362:	strb	r2, [r0, #2]
    c364:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    c366:	mov	r2, r7
    c368:	ldr	r1, [r5, #56]	; 0x38
    c36a:	bl	b208 <FatFile::openNext(FatFile*, int)>
    c36e:	cbz	r0, c374 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    c370:	movs	r0, #1
    c372:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    c374:	str	r0, [r4, #56]	; 0x38
    c376:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    c378:	ldr	r0, [r5, #60]	; 0x3c
    c37a:	cbz	r0, c3a0 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    c37c:	mov	r1, r4
    c37e:	movs	r0, #56	; 0x38
    c380:	bl	c494 <operator new(unsigned int, unsigned long*)>
    c384:	strb.w	r6, [r0, #49]	; 0x31
    c388:	strb.w	r6, [r0, #50]	; 0x32
    c38c:	strb.w	r6, [r0, #51]	; 0x33
    c390:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    c392:	mov	r2, r7
    c394:	ldr	r1, [r5, #60]	; 0x3c
    c396:	bl	9890 <ExFatFile::openNext(ExFatFile*, int)>
    c39a:	cmp	r0, #0
    c39c:	bne.n	c370 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    c39e:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    c3a0:	pop	{r3, r4, r5, r6, r7, pc}
    c3a2:	nop

0000c3a4 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    c3a4:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    c3a6:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    c3a8:	mov	r4, r0
  m_blockDev = blockDev;
    c3aa:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    c3ae:	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    c3b2:	mov	r1, r0
    c3b4:	mov.w	r0, #1152	; 0x480
    c3b8:	bl	c494 <operator new(unsigned int, unsigned long*)>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    c3bc:	strb.w	r6, [r0, #1092]	; 0x444
    c3c0:	strb.w	r6, [r0, #1145]	; 0x479
    c3c4:	strb.w	r6, [r0, #1146]	; 0x47a
    c3c8:	strb.w	r6, [r0, #1147]	; 0x47b
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    c3cc:	movs	r2, #1
    c3ce:	ldr.w	r1, [r4, #1160]	; 0x488
    c3d2:	str.w	r0, [r4, #1156]	; 0x484
    c3d6:	mov	r5, r0
    c3d8:	bl	9c80 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    c3dc:	cbnz	r0, c41a <FsVolume::begin(BlockDeviceInterface*)+0x76>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    c3de:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    c3e0:	mov	r1, r4
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    c3e2:	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    c3e6:	mov.w	r0, #1128	; 0x468
    c3ea:	bl	c494 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    c3ee:	strb	r6, [r0, #7]
    c3f0:	strb.w	r6, [r0, #1092]	; 0x444
    c3f4:	strb.w	r6, [r0, #1093]	; 0x445
    c3f8:	strb.w	r6, [r0, #1094]	; 0x446
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    c3fc:	movs	r2, #1
    c3fe:	ldr.w	r1, [r4, #1160]	; 0x488
    c402:	str.w	r0, [r4, #1152]	; 0x480
    c406:	mov	r5, r0
    c408:	bl	b76c <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    c40c:	cbnz	r0, c43e <FsVolume::begin(BlockDeviceInterface*)+0x9a>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    c40e:	ldr	r3, [pc, #80]	; (c460 <FsVolume::begin(BlockDeviceInterface*)+0xbc>)
    c410:	movs	r0, #0
    c412:	str	r0, [r3, #0]
  m_fVol = nullptr;
    c414:	str.w	r0, [r4, #1152]	; 0x480
  return false;

 done:
  m_cwv = this;
  return true;
}
    c418:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    c41a:	add.w	r6, r5, #1096	; 0x448
    c41e:	mov	r0, r6
    c420:	bl	8f1c <ExFatFile::close()>
    return m_vwd.openRoot(this);
    c424:	mov	r1, r5
    c426:	mov	r0, r6
    c428:	bl	8fe0 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    c42c:	cmp	r0, #0
    c42e:	beq.n	c3de <FsVolume::begin(BlockDeviceInterface*)+0x3a>
      return false;
    }
    if (setCwv || !m_cwv) {
    c430:	ldr	r3, [pc, #48]	; (c464 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    c432:	ldr	r2, [r3, #0]
    c434:	cbz	r2, c45c <FsVolume::begin(BlockDeviceInterface*)+0xb8>
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    c436:	ldr	r3, [pc, #40]	; (c460 <FsVolume::begin(BlockDeviceInterface*)+0xbc>)
  return true;
    c438:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    c43a:	str	r4, [r3, #0]
  return true;
    c43c:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    c43e:	addw	r6, r5, #1092	; 0x444
    c442:	mov	r0, r6
    c444:	bl	a934 <FatFile::close()>
    return m_vwd.openRoot(this);
    c448:	mov	r1, r5
    c44a:	mov	r0, r6
    c44c:	bl	ac38 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    c450:	cmp	r0, #0
    c452:	beq.n	c40e <FsVolume::begin(BlockDeviceInterface*)+0x6a>
      return false;
    }
    if (setCwv || !m_cwv) {
    c454:	ldr	r3, [pc, #16]	; (c468 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
    c456:	ldr	r2, [r3, #0]
    c458:	cmp	r2, #0
    c45a:	bne.n	c436 <FsVolume::begin(BlockDeviceInterface*)+0x92>
      m_cwv = this;
    c45c:	str	r5, [r3, #0]
    c45e:	b.n	c436 <FsVolume::begin(BlockDeviceInterface*)+0x92>
    c460:	.word	0x20006b04
    c464:	.word	0x20006afc
    c468:	.word	0x20006b00

0000c46c <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    c46c:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    c46e:	movs	r5, #0
    c470:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c474:	ldr	r6, [pc, #24]	; (c490 <FsVolume::open(char const*, int)+0x24>)
    c476:	str	r7, [r0, #8]
    c478:	mov	r4, r0
    c47a:	strb	r5, [r0, #4]
    c47c:	strb	r5, [r0, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    c47e:	str	r5, [r0, #72]	; 0x48
    c480:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c482:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    c486:	bl	c2c4 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    c48a:	mov	r0, r4
    c48c:	pop	{r3, r4, r5, r6, r7, pc}
    c48e:	nop
    c490:	.word	0x00014bb8

0000c494 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    c494:	mov	r0, r1
    c496:	bx	lr

0000c498 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    c498:	ldrb	r0, [r0, #19]
    c49a:	bx	lr

0000c49c <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    c49c:	ldrb	r0, [r0, #21]
    c49e:	bx	lr

0000c4a0 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    c4a0:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    c4a2:	ldr	r4, [r0, #0]
    c4a4:	ldr	r4, [r4, #16]
    c4a6:	movs	r3, #1
    c4a8:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    c4aa:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    c4ae:	bx	ip

0000c4b0 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    c4b0:	ldrb	r0, [r0, #22]
    c4b2:	bx	lr

0000c4b4 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    c4b4:	bx	lr
    c4b6:	nop

0000c4b8 <SdSpiCard::~SdSpiCard()>:
    c4b8:	push	{r4, lr}
    c4ba:	movs	r1, #24
    c4bc:	mov	r4, r0
    c4be:	bl	f95c <operator delete(void*, unsigned int)>
    c4c2:	mov	r0, r4
    c4c4:	pop	{r4, pc}
    c4c6:	nop

0000c4c8 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    c4c8:	push	{r4, lr}
    c4ca:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    c4cc:	adds	r0, #4
    c4ce:	bl	d94c <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    c4d2:	ldrb	r0, [r4, #18]
    c4d4:	movs	r1, #0
    c4d6:	bl	db24 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    c4da:	movs	r3, #1
    c4dc:	strb	r3, [r4, #20]
    c4de:	pop	{r4, pc}

0000c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    c4e0:	push	{r3, r4, r5, lr}
    c4e2:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c4e4:	movs	r1, #1
    c4e6:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c4e8:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c4ea:	bl	db24 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c4ee:	mov	r0, r5
    c4f0:	movs	r1, #255	; 0xff
    c4f2:	bl	dab0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    c4f6:	mov	r0, r5
    c4f8:	bl	da2c <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    c4fc:	movs	r3, #0
    c4fe:	strb	r3, [r4, #20]
    c500:	pop	{r3, r4, r5, pc}
    c502:	nop

0000c504 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    c504:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c508:	mov	r6, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c50a:	ldrb	r1, [r0, #16]
    c50c:	cmp	r1, #2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    c50e:	mov	r5, r0
    c510:	mov	r4, r2
    c512:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c514:	beq.n	c55a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    if (!writeStart(sector)) {
    c516:	ldr	r3, [r5, #0]
    c518:	mov	r1, r6
    c51a:	ldr	r3, [r3, #72]	; 0x48
    c51c:	mov	r0, r5
    c51e:	blx	r3
    c520:	cbz	r0, c546 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x42>
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    c522:	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    c524:	str	r6, [r5, #12]
    m_curState = WRITE_STATE;
    c526:	strb	r3, [r5, #16]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    c528:	movs	r6, #0
    c52a:	cbnz	r7, c532 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    c52c:	b.n	c562 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
    c52e:	cmp	r7, r6
    c530:	beq.n	c562 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
    if (!writeData(src)) {
    c532:	ldr	r3, [r5, #0]
    c534:	mov	r1, r4
    c536:	ldr	r3, [r3, #68]	; 0x44
    c538:	mov	r0, r5
    c53a:	blx	r3
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    c53c:	adds	r6, #1
    c53e:	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    c542:	cmp	r0, #0
    c544:	bne.n	c52e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c546:	ldrb	r0, [r5, #20]
    c548:	cbnz	r0, c54e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    c54a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c54e:	mov	r0, r5
    c550:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
    c554:	movs	r0, #0
}
    c556:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    c55a:	ldr	r3, [r0, #12]
    c55c:	cmp	r3, r6
    c55e:	bne.n	c516 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    c560:	b.n	c528 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    c562:	ldr	r3, [r5, #12]
  return m_sharedSpi ? syncDevice() : true;
    c564:	ldrb	r2, [r5, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    c566:	add	r7, r3
    c568:	str	r7, [r5, #12]
  return m_sharedSpi ? syncDevice() : true;
    c56a:	cbnz	r2, c572 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6e>
    c56c:	movs	r0, #1
    c56e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c572:	ldr	r3, [r5, #0]
    c574:	mov	r0, r5
    c576:	ldr	r3, [r3, #24]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    c578:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    c57c:	bx	r3
    c57e:	nop

0000c580 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    c580:	push	{r3, r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    c582:	ldrb	r3, [r0, #16]
    c584:	cmp	r3, #1
    c586:	beq.n	c5ca <SdSpiCard::isBusy()+0x4a>
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
  bool spiActive = m_spiActive;
    c588:	ldrb	r7, [r0, #20]
    c58a:	mov	r5, r0
  if (!spiActive) {
    c58c:	cbz	r7, c5ba <SdSpiCard::isBusy()+0x3a>
    c58e:	adds	r6, r5, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    c590:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c592:	mov	r0, r6
    c594:	bl	da74 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    c598:	cmp	r0, #255	; 0xff
    c59a:	add.w	r3, r4, #4294967295
    c59e:	beq.n	c5b2 <SdSpiCard::isBusy()+0x32>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    c5a0:	ands.w	r4, r3, #255	; 0xff
    c5a4:	bne.n	c592 <SdSpiCard::isBusy()+0x12>
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
    c5a6:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    c5a8:	cbnz	r7, c5ae <SdSpiCard::isBusy()+0x2e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c5aa:	ldrb	r3, [r5, #20]
    c5ac:	cbnz	r3, c5c0 <SdSpiCard::isBusy()+0x40>
    }
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
    c5ae:	mov	r0, r4
}
    c5b0:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    c5b2:	movs	r4, #0
      break;
    }
  }
  if (!spiActive) {
    c5b4:	cmp	r7, #0
    c5b6:	beq.n	c5aa <SdSpiCard::isBusy()+0x2a>
    c5b8:	b.n	c5ae <SdSpiCard::isBusy()+0x2e>
    c5ba:	bl	c4c8 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    c5be:	b.n	c58e <SdSpiCard::isBusy()+0xe>
    c5c0:	mov	r0, r5
    c5c2:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    spiStop();
  }
  return rtn;
    c5c6:	mov	r0, r4
    c5c8:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
    c5ca:	movs	r0, #0
    c5cc:	pop	{r3, r4, r5, r6, r7, pc}
    c5ce:	nop

0000c5d0 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    c5d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c5d4:	ldr	r6, [pc, #116]	; (c64c <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    c5d6:	sub	sp, #12
    c5d8:	ldr	r3, [r6, #0]
    c5da:	str	r3, [sp, #0]
	return ret;
    c5dc:	ldr	r5, [sp, #0]
    c5de:	mov	r4, r0
    c5e0:	mov	r8, r1
    c5e2:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    c5e4:	uxth	r5, r5
    c5e6:	adds	r7, r0, #4
    c5e8:	b.n	c5fa <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c5ea:	ldr	r3, [r6, #0]
    c5ec:	str	r3, [sp, #4]
	return ret;
    c5ee:	ldr	r3, [sp, #4]
    c5f0:	uxth	r3, r3
    c5f2:	subs	r3, r3, r5
    c5f4:	cmp.w	r3, #300	; 0x12c
    c5f8:	bgt.n	c620 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    c5fa:	mov	r0, r7
    c5fc:	bl	da74 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    c600:	cmp	r0, #255	; 0xff
    c602:	strb	r0, [r4, #21]
    c604:	beq.n	c5ea <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    c606:	cmp	r0, #254	; 0xfe
    c608:	beq.n	c626 <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c60a:	movs	r3, #24
    c60c:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c60e:	ldrb	r0, [r4, #20]
    c610:	cbz	r0, c61a <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    c612:	mov	r0, r4
    c614:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
  return false;
    c618:	movs	r0, #0
}
    c61a:	add	sp, #12
    c61c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c620:	movs	r3, #29
    c622:	strb	r3, [r4, #19]
    c624:	b.n	c60e <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    c626:	mov	r2, r9
    c628:	mov	r1, r8
    c62a:	mov	r0, r7
    c62c:	bl	da90 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    c630:	strb	r0, [r4, #21]
    c632:	cbz	r0, c63a <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c634:	movs	r3, #37	; 0x25
    c636:	strb	r3, [r4, #19]
    c638:	b.n	c60e <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c63a:	mov	r0, r7
    c63c:	bl	da74 <SdSpiArduinoDriver::receive()>
    c640:	mov	r0, r7
    c642:	bl	da74 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    c646:	movs	r0, #1
    c648:	b.n	c61a <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    c64a:	nop
    c64c:	.word	0x2000701c

0000c650 <SdSpiCard::waitNotBusy(unsigned short)>:
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    c650:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c652:	ldr	r5, [pc, #52]	; (c688 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    c654:	sub	sp, #12
    c656:	ldr	r3, [r5, #0]
    c658:	str	r3, [sp, #0]
	return ret;
    c65a:	ldr	r4, [sp, #0]
    c65c:	mov	r7, r1
    c65e:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    c660:	uxth	r4, r4
    c662:	b.n	c672 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c664:	ldr	r3, [r5, #0]
    c666:	str	r3, [sp, #4]
	return ret;
    c668:	ldr	r3, [sp, #4]
    c66a:	uxth	r3, r3
    c66c:	subs	r3, r3, r4
    c66e:	cmp	r3, r7
    c670:	bgt.n	c682 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    c672:	mov	r0, r6
    c674:	bl	da74 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    c678:	cmp	r0, #255	; 0xff
    c67a:	bne.n	c664 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    c67c:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    c67e:	add	sp, #12
    c680:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    c682:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    c684:	add	sp, #12
    c686:	pop	{r4, r5, r6, r7, pc}
    c688:	.word	0x2000701c

0000c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    c68c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c690:	sub	sp, #8
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c692:	ldrb	r3, [r0, #16]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    c694:	str	r2, [sp, #4]
    c696:	mov	r4, r0
    c698:	mov	r7, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c69a:	cbnz	r3, c6fc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
    return 0XFF;
  }
#endif  // ENABLE_DEDICATED_SPI
  // select card
  if (!m_spiActive) {
    c69c:	ldrb	r3, [r4, #20]
    c69e:	cmp	r3, #0
    c6a0:	beq.n	c71a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    c6a2:	cmp	r7, #0
    c6a4:	bne.n	c70e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x82>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c6a6:	adds	r5, r4, #4
    c6a8:	mov	r0, r5
    c6aa:	orr.w	r1, r7, #64	; 0x40
    c6ae:	bl	dab0 <SdSpiArduinoDriver::send(unsigned char)>
    c6b2:	add.w	r8, sp, #4
    c6b6:	add	r6, sp, #8
    c6b8:	ldrb.w	r1, [r6, #-1]!
    c6bc:	mov	r0, r5
    c6be:	bl	dab0 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    c6c2:	cmp	r8, r6
    c6c4:	bne.n	c6b8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    c6c6:	cmp	r7, #0
    c6c8:	ite	eq
    c6ca:	moveq	r1, #149	; 0x95
    c6cc:	movne	r1, #135	; 0x87
    c6ce:	mov	r0, r5
    c6d0:	bl	dab0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c6d4:	mov	r0, r5
    c6d6:	bl	da74 <SdSpiArduinoDriver::receive()>
    c6da:	movs	r6, #11
    c6dc:	mov	r0, r5
    c6de:	bl	da74 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    c6e2:	lsls	r3, r0, #24
    c6e4:	strb	r0, [r4, #21]
    c6e6:	bmi.n	c6ee <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    c6e8:	add	sp, #8
    c6ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c6ee:	subs	r3, r6, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    c6f0:	ands.w	r6, r3, #255	; 0xff
    c6f4:	bne.n	c6dc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    c6f6:	add	sp, #8
    c6f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    c6fc:	ldr	r3, [r0, #0]
    c6fe:	ldr	r3, [r3, #24]
    c700:	blx	r3
    c702:	cmp	r0, #0
    c704:	bne.n	c69c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x10>
    return 0XFF;
    c706:	movs	r0, #255	; 0xff

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
  }
  return m_status;
}
    c708:	add	sp, #8
    c70a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    c70e:	mov.w	r1, #300	; 0x12c
    c712:	mov	r0, r4
    c714:	bl	c650 <SdSpiCard::waitNotBusy(unsigned short)>
    c718:	b.n	c6a6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    c71a:	mov	r0, r4
    c71c:	bl	c4c8 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    c720:	b.n	c6a2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x16>
    c722:	nop

0000c724 <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c724:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c728:	sub	sp, #40	; 0x28
    c72a:	add	r5, sp, #4
    c72c:	stmia.w	r5, {r1, r2, r3}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c730:	ldr	r7, [pc, #492]	; (c920 <SdSpiCard::begin(SdSpiConfig)+0x1fc>)
    c732:	ldrb.w	r3, [sp, #4]
    c736:	ldr	r2, [r7, #0]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    c738:	strb	r3, [r0, #18]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    c73a:	mov	r6, r0
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    c73c:	mov.w	sl, #0
    c740:	str	r2, [sp, #20]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    c742:	mov	r0, r3
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
  SdMillis_t t0 = SysCall::curTimeMS();
  m_spiActive = false;
    c744:	strb.w	sl, [r6, #20]
  m_errorCode = SD_CARD_ERROR_NONE;
    c748:	strb.w	sl, [r6, #19]
  m_type = 0;
    c74c:	strb.w	sl, [r6, #22]
    c750:	ldrb.w	r4, [sp, #5]
	return ret;
    c754:	ldr.w	r8, [sp, #20]
    c758:	ldr.w	r9, [sp, #8]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    c75c:	bl	db1c <sdCsInit(unsigned char)>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c760:	ldrb	r0, [r6, #18]
    c762:	movs	r1, #1
    c764:	bl	db24 <sdCsWrite(unsigned char, bool)>
    c768:	ldmia.w	r5, {r0, r1, r2}
    c76c:	add	r3, sp, #28
    c76e:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    c772:	adds	r5, r6, #4
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    c774:	ldr	r2, [pc, #428]	; (c924 <SdSpiCard::begin(SdSpiConfig)+0x200>)
    c776:	str	r2, [r6, #8]
    c778:	mov	r0, r5
    c77a:	ldmia	r3, {r1, r2, r3}
    c77c:	bl	d9dc <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
  m_sharedSpi = spiOptionShared(spiConfig.options);
    c780:	and.w	r3, r4, #1
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    c784:	ldrb	r2, [r6, #20]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_curState = IDLE_STATE;
    c786:	strb.w	sl, [r6, #16]
  m_sharedSpi = spiOptionShared(spiConfig.options);
    c78a:	eor.w	r3, r3, #1
    c78e:	strb	r3, [r6, #17]
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
  if (!m_spiActive) {
    c790:	cmp	r2, #0
    c792:	beq.w	c8ac <SdSpiCard::begin(SdSpiConfig)+0x188>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    c796:	movs	r1, #1
    c798:	ldrb	r0, [r6, #18]
    c79a:	bl	db24 <sdCsWrite(unsigned char, bool)>
    c79e:	movs	r4, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c7a0:	movs	r1, #255	; 0xff
    c7a2:	mov	r0, r5
    c7a4:	bl	dab0 <SdSpiArduinoDriver::send(unsigned char)>
    c7a8:	subs	r3, r4, #1
#endif  // ENABLE_DEDICATED_SPI
  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    c7aa:	ands.w	r4, r3, #255	; 0xff
    c7ae:	bne.n	c7a0 <SdSpiCard::begin(SdSpiConfig)+0x7c>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    c7b0:	mov	r1, r4
    c7b2:	ldrb	r0, [r6, #18]
    c7b4:	bl	db24 <sdCsWrite(unsigned char, bool)>
    c7b8:	mov.w	sl, #10
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    c7bc:	movs	r2, #0
    c7be:	mov	r1, r2
    c7c0:	mov	r0, r6
    c7c2:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c7c6:	cmp	r0, #1
    c7c8:	mov	r4, r0
    c7ca:	beq.n	c80a <SdSpiCard::begin(SdSpiConfig)+0xe6>
    c7cc:	add.w	r3, sl, #4294967295
      break;
    }
    if (i == SD_CMD0_RETRY) {
    c7d0:	ands.w	sl, r3, #255	; 0xff
    c7d4:	beq.n	c7ee <SdSpiCard::begin(SdSpiConfig)+0xca>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    c7d6:	movs	r1, #253	; 0xfd
    c7d8:	mov	r0, r5
    c7da:	bl	dab0 <SdSpiArduinoDriver::send(unsigned char)>
    c7de:	mov.w	r4, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c7e2:	mov	r0, r5
    c7e4:	bl	da74 <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    c7e8:	subs	r4, #1
    c7ea:	bne.n	c7e2 <SdSpiCard::begin(SdSpiConfig)+0xbe>
    c7ec:	b.n	c7bc <SdSpiCard::begin(SdSpiConfig)+0x98>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c7ee:	movs	r3, #1
    c7f0:	strb	r3, [r6, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c7f2:	ldrb	r0, [r6, #20]
    c7f4:	cbnz	r0, c7fc <SdSpiCard::begin(SdSpiConfig)+0xd8>
  return true;

 fail:
  spiStop();
  return false;
}
    c7f6:	add	sp, #40	; 0x28
    c7f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7fc:	mov	r0, r6
    c7fe:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

 fail:
  spiStop();
  return false;
    c802:	movs	r0, #0
}
    c804:	add	sp, #40	; 0x28
    c806:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    c80a:	mov.w	r2, #426	; 0x1aa
    c80e:	movs	r1, #8
    c810:	mov	r0, r6
    c812:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c816:	lsls	r3, r0, #29
    c818:	bpl.n	c8b4 <SdSpiCard::begin(SdSpiConfig)+0x190>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c81a:	strb	r4, [r6, #22]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c81c:	ldr	r3, [r6, #0]
    c81e:	ldr.w	sl, [pc, #276]	; c934 <SdSpiCard::begin(SdSpiConfig)+0x210>
    c822:	ldr	r3, [r3, #64]	; 0x40
    c824:	cmp	r3, sl
    c826:	bne.n	c8da <SdSpiCard::begin(SdSpiConfig)+0x1b6>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    c828:	ldrb	r0, [r6, #22]
    c82a:	cmp	r0, #2
    c82c:	ite	eq
    c82e:	moveq.w	r4, #1073741824	; 0x40000000
    c832:	movne	r4, #0
    c834:	b.n	c846 <SdSpiCard::begin(SdSpiConfig)+0x122>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c836:	ldr	r3, [r7, #0]
    c838:	str	r3, [sp, #24]
	return ret;
    c83a:	ldr	r3, [sp, #24]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    c83c:	uxth	r3, r3
    c83e:	subs	r3, r3, r2
    c840:	cmp.w	r3, #2000	; 0x7d0
    c844:	bgt.n	c8d4 <SdSpiCard::begin(SdSpiConfig)+0x1b0>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    c846:	movs	r2, #0
    c848:	movs	r1, #55	; 0x37
    c84a:	mov	r0, r6
    c84c:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    c850:	mov	r2, r4
    c852:	movs	r1, #41	; 0x29
    c854:	mov	r0, r6
    c856:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c85a:	uxth.w	r2, r8
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    c85e:	cmp	r0, #0
    c860:	bne.n	c836 <SdSpiCard::begin(SdSpiConfig)+0x112>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c862:	ldr	r3, [r6, #0]
    c864:	ldr	r3, [r3, #64]	; 0x40
    c866:	cmp	r3, sl
    c868:	bne.n	c8e0 <SdSpiCard::begin(SdSpiConfig)+0x1bc>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    c86a:	ldrb	r0, [r6, #22]
    c86c:	cmp	r0, #2
    c86e:	beq.n	c8e6 <SdSpiCard::begin(SdSpiConfig)+0x1c2>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c870:	ldrb	r3, [r6, #20]
    c872:	cbz	r3, c87a <SdSpiCard::begin(SdSpiConfig)+0x156>
    c874:	mov	r0, r6
    c876:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    c87a:	ldr	r1, [pc, #172]	; (c928 <SdSpiCard::begin(SdSpiConfig)+0x204>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c87c:	ldr	r4, [pc, #172]	; (c92c <SdSpiCard::begin(SdSpiConfig)+0x208>)
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c87e:	movs	r3, #0
    c880:	b.n	c888 <SdSpiCard::begin(SdSpiConfig)+0x164>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    c882:	cmp	r0, #23
    c884:	beq.n	c898 <SdSpiCard::begin(SdSpiConfig)+0x174>
    c886:	mov	r3, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c888:	ldrh.w	r2, [r1, #2]!
    c88c:	sdiv	r2, r4, r2
    c890:	cmp	r9, r2
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    c892:	add.w	r0, r3, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    c896:	bcc.n	c882 <SdSpiCard::begin(SdSpiConfig)+0x15e>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    c898:	ldr	r2, [pc, #148]	; (c930 <SdSpiCard::begin(SdSpiConfig)+0x20c>)
    c89a:	ldr.w	r3, [r2, r3, lsl #2]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    c89e:	movs	r0, #1
    c8a0:	orr.w	r3, r3, #939524096	; 0x38000000
    c8a4:	str	r3, [r6, #8]

 fail:
  spiStop();
  return false;
}
    c8a6:	add	sp, #40	; 0x28
    c8a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c8ac:	mov	r0, r6
    c8ae:	bl	c4c8 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.26]>
    c8b2:	b.n	c796 <SdSpiCard::begin(SdSpiConfig)+0x72>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c8b4:	movs	r3, #2
    c8b6:	strb	r3, [r6, #22]
    c8b8:	movs	r4, #4
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c8ba:	mov	r0, r5
    c8bc:	bl	da74 <SdSpiArduinoDriver::receive()>
    c8c0:	subs	r4, #1
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    c8c2:	ands.w	r4, r4, #255	; 0xff
      m_status = spiReceive();
    c8c6:	strb	r0, [r6, #21]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    c8c8:	bne.n	c8ba <SdSpiCard::begin(SdSpiConfig)+0x196>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    c8ca:	cmp	r0, #170	; 0xaa
    c8cc:	beq.n	c81c <SdSpiCard::begin(SdSpiConfig)+0xf8>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c8ce:	movs	r3, #6
    c8d0:	strb	r3, [r6, #19]
    c8d2:	b.n	c7f2 <SdSpiCard::begin(SdSpiConfig)+0xce>
    c8d4:	movs	r3, #23
    c8d6:	strb	r3, [r6, #19]
    c8d8:	b.n	c7f2 <SdSpiCard::begin(SdSpiConfig)+0xce>
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c8da:	mov	r0, r6
    c8dc:	blx	r3
    c8de:	b.n	c82a <SdSpiCard::begin(SdSpiConfig)+0x106>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c8e0:	mov	r0, r6
    c8e2:	blx	r3
    c8e4:	b.n	c86c <SdSpiCard::begin(SdSpiConfig)+0x148>
    if (cardCommand(CMD58, 0)) {
    c8e6:	movs	r2, #0
    c8e8:	movs	r1, #58	; 0x3a
    c8ea:	mov	r0, r6
    c8ec:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c8f0:	cbz	r0, c8f8 <SdSpiCard::begin(SdSpiConfig)+0x1d4>
    c8f2:	movs	r3, #18
    c8f4:	strb	r3, [r6, #19]
    c8f6:	b.n	c7f2 <SdSpiCard::begin(SdSpiConfig)+0xce>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c8f8:	mov	r0, r5
    c8fa:	bl	da74 <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    c8fe:	and.w	r0, r0, #192	; 0xc0
    c902:	cmp	r0, #192	; 0xc0
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    c904:	itt	eq
    c906:	moveq	r3, #3
    c908:	strbeq	r3, [r6, #22]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    c90a:	mov	r0, r5
    c90c:	bl	da74 <SdSpiArduinoDriver::receive()>
    c910:	mov	r0, r5
    c912:	bl	da74 <SdSpiArduinoDriver::receive()>
    c916:	mov	r0, r5
    c918:	bl	da74 <SdSpiArduinoDriver::receive()>
    c91c:	b.n	c870 <SdSpiCard::begin(SdSpiConfig)+0x14c>
    c91e:	nop
    c920:	.word	0x2000701c
    c924:	.word	0x38015006
    c928:	.word	0x0001501a
    c92c:	.word	0x03567e00
    c930:	.word	0x000150e0
    c934:	.word	0x0000c4b1

0000c938 <SdSpiCard::readOCR(unsigned long*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c938:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    c93a:	movs	r2, #0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c93c:	mov	r5, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    c93e:	movs	r1, #58	; 0x3a
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    c940:	mov	r6, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    c942:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c946:	cbnz	r0, c964 <SdSpiCard::readOCR(unsigned long*)+0x2c>
    c948:	adds	r7, r6, #4
    c94a:	adds	r4, r5, #4
    c94c:	mov	r0, r7
    c94e:	bl	da74 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    c952:	strb.w	r0, [r4, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    c956:	cmp	r5, r4
    c958:	bne.n	c94c <SdSpiCard::readOCR(unsigned long*)+0x14>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c95a:	ldrb	r4, [r6, #20]
    c95c:	cbnz	r4, c97a <SdSpiCard::readOCR(unsigned long*)+0x42>
    c95e:	movs	r4, #1
  return true;

 fail:
  spiStop();
  return false;
}
    c960:	mov	r0, r4
    c962:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c964:	ldrb	r4, [r6, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    c966:	movs	r3, #18
    c968:	strb	r3, [r6, #19]
    c96a:	cmp	r4, #0
    c96c:	beq.n	c960 <SdSpiCard::readOCR(unsigned long*)+0x28>
    c96e:	mov	r0, r6
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    c970:	movs	r4, #0
    c972:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
}
    c976:	mov	r0, r4
    c978:	pop	{r3, r4, r5, r6, r7, pc}
    c97a:	mov	r0, r6
    c97c:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    c980:	mov	r0, r4
    c982:	pop	{r3, r4, r5, r6, r7, pc}

0000c984 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    c984:	push	{r3, r4, r5, lr}
    c986:	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    c988:	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    c98a:	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    c98c:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    c990:	cbz	r0, c9a4 <SdSpiCard::readRegister(unsigned char, void*)+0x20>
    c992:	movs	r3, #27
    c994:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c996:	ldrb	r0, [r4, #20]
    c998:	cbz	r0, c9a2 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    c99a:	mov	r0, r4
    c99c:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    c9a0:	movs	r0, #0
}
    c9a2:	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    c9a4:	mov	r1, r5
    c9a6:	movs	r2, #16
    c9a8:	mov	r0, r4
    c9aa:	bl	c5d0 <SdSpiCard::readData(unsigned char*, unsigned int)>
    c9ae:	cmp	r0, #0
    c9b0:	beq.n	c996 <SdSpiCard::readRegister(unsigned char, void*)+0x12>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    c9b2:	ldrb	r5, [r4, #20]
    c9b4:	cmp	r5, #0
    c9b6:	beq.n	c9a2 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    c9b8:	mov	r0, r4
    c9ba:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    c9be:	mov	r0, r5
    c9c0:	pop	{r3, r4, r5, pc}
    c9c2:	nop

0000c9c4 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    c9c4:	mov	r2, r1
    c9c6:	movs	r1, #9
    c9c8:	b.w	c984 <SdSpiCard::readRegister(unsigned char, void*)>

0000c9cc <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    c9cc:	mov	r2, r1
    c9ce:	movs	r1, #10
    c9d0:	b.w	c984 <SdSpiCard::readRegister(unsigned char, void*)>

0000c9d4 <SdSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    c9d4:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    c9d6:	ldr	r3, [r0, #0]
    c9d8:	ldr	r2, [pc, #140]	; (ca68 <SdSpiCard::sectorCount()+0x94>)
    c9da:	ldr	r3, [r3, #52]	; 0x34
    c9dc:	cmp	r3, r2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    c9de:	sub	sp, #20
    c9e0:	bne.n	ca42 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    c9e2:	mov	r2, sp
    c9e4:	movs	r1, #9
    c9e6:	bl	c984 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    c9ea:	cbz	r0, c9fc <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    c9ec:	ldrb.w	r3, [sp]
    c9f0:	ands.w	r3, r3, #192	; 0xc0
    c9f4:	beq.n	ca00 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    c9f6:	cmp	r3, #64	; 0x40
    c9f8:	beq.n	ca48 <SdSpiCard::sectorCount()+0x74>
    c9fa:	movs	r0, #0
}
    c9fc:	add	sp, #20
    c9fe:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    ca00:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    ca04:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    ca08:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    ca0c:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    ca10:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ca14:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    ca18:	and.w	r4, r4, #3
    ca1c:	lsls	r4, r4, #1
    ca1e:	lsls	r2, r2, #2
    ca20:	and.w	r3, r3, #3
    ca24:	orr.w	r0, r4, r0, lsr #7
    ca28:	and.w	r1, r1, #15
    ca2c:	orr.w	r3, r2, r3, lsl #10
    ca30:	add	r0, r1
    ca32:	orr.w	r3, r3, r5, lsr #6
    ca36:	adds	r3, #1
    ca38:	subs	r0, #7
    ca3a:	lsl.w	r0, r3, r0
    ca3e:	add	sp, #20
    ca40:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    ca42:	mov	r1, sp
    ca44:	blx	r3
    ca46:	b.n	c9ea <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ca48:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    ca4c:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ca50:	ldrb.w	r0, [sp, #8]
    ca54:	adds	r2, r3, #1
    ca56:	and.w	r3, r1, #63	; 0x3f
    ca5a:	add.w	r3, r2, r3, lsl #16
    ca5e:	add.w	r0, r3, r0, lsl #8
    ca62:	lsls	r0, r0, #10
}
    ca64:	add	sp, #20
    ca66:	pop	{r4, r5, pc}
    ca68:	.word	0x0000c9c5

0000ca6c <SdSpiCard::readStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    ca6c:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    ca6e:	ldr	r3, [r0, #0]
    ca70:	ldr	r5, [pc, #68]	; (cab8 <SdSpiCard::readStart(unsigned long)+0x4c>)
    ca72:	ldr	r3, [r3, #64]	; 0x40
    ca74:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    ca76:	sub	sp, #12
    ca78:	mov	r4, r0
    ca7a:	mov	r2, r1
    ca7c:	bne.n	caae <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    ca7e:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    ca80:	cmp	r0, #3
    sector <<= 9;
    ca82:	it	ne
    ca84:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    ca86:	movs	r1, #18
    ca88:	mov	r0, r4
    ca8a:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    ca8e:	cbz	r0, caa8 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ca90:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    ca92:	movs	r3, #12
    ca94:	strb	r3, [r4, #19]
    ca96:	cbnz	r0, ca9c <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

 fail:
  spiStop();
  return false;
}
    ca98:	add	sp, #12
    ca9a:	pop	{r4, r5, pc}
    ca9c:	mov	r0, r4
    ca9e:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    caa2:	movs	r0, #0
    caa4:	add	sp, #12
    caa6:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    caa8:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    caaa:	add	sp, #12
    caac:	pop	{r4, r5, pc}
    caae:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    cab0:	blx	r3
    cab2:	ldr	r2, [sp, #4]
    cab4:	b.n	ca80 <SdSpiCard::readStart(unsigned long)+0x14>
    cab6:	nop
    cab8:	.word	0x0000c4b1

0000cabc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    cabc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cac0:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    cac2:	ldrb	r1, [r0, #16]
    cac4:	cmp	r1, #1
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    cac6:	mov	r6, r0
    cac8:	mov	r4, r2
    caca:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    cacc:	beq.n	cb04 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    if (!readStart(sector)) {
    cace:	mov	r1, r5
    cad0:	mov	r0, r6
    cad2:	bl	ca6c <SdSpiCard::readStart(unsigned long)>
    cad6:	cbz	r0, cafe <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    cad8:	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    cada:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    cadc:	strb	r3, [r6, #16]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    cade:	movs	r5, #0
    cae0:	cbnz	r7, cae8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    cae2:	b.n	cb0c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
    cae4:	cmp	r7, r5
    cae6:	beq.n	cb0c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
    if (!readData(dst, 512)) {
    cae8:	mov	r1, r4
    caea:	mov.w	r2, #512	; 0x200
    caee:	mov	r0, r6
    caf0:	bl	c5d0 <SdSpiCard::readData(unsigned char*, unsigned int)>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    caf4:	adds	r5, #1
    caf6:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    cafa:	cmp	r0, #0
    cafc:	bne.n	cae4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    cafe:	movs	r0, #0
    cb00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    cb04:	ldr	r3, [r0, #12]
    cb06:	cmp	r3, r5
    cb08:	bne.n	cace <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    cb0a:	b.n	cade <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    cb0c:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    cb0e:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    cb10:	add	r7, r3
    cb12:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    cb14:	cbnz	r2, cb1c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x60>
    cb16:	movs	r0, #1
    cb18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb1c:	ldr	r3, [r6, #0]
    cb1e:	mov	r0, r6
    cb20:	ldr	r3, [r3, #24]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    cb22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    cb26:	bx	r3

0000cb28 <SdSpiCard::readStop()>:
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    cb28:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    cb2a:	movs	r2, #0
    cb2c:	movs	r1, #12
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    cb2e:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    cb30:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cb34:	ldrb	r4, [r5, #20]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    cb36:	cbz	r0, cb42 <SdSpiCard::readStop()+0x1a>
    cb38:	movs	r3, #9
    cb3a:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cb3c:	cbnz	r4, cb54 <SdSpiCard::readStop()+0x2c>
  return true;

 fail:
  spiStop();
  return false;
}
    cb3e:	mov	r0, r4
    cb40:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cb42:	cbnz	r4, cb4a <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    cb44:	movs	r4, #1

 fail:
  spiStop();
  return false;
}
    cb46:	mov	r0, r4
    cb48:	pop	{r3, r4, r5, pc}
    cb4a:	mov	r0, r5
    cb4c:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    cb50:	mov	r0, r4
    cb52:	pop	{r3, r4, r5, pc}
    cb54:	mov	r0, r5
    cb56:	movs	r4, #0
    cb58:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    cb5c:	mov	r0, r4
    cb5e:	pop	{r3, r4, r5, pc}

0000cb60 <SdSpiCard::syncDevice()>:
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
    cb60:	ldrb	r2, [r0, #16]
  m_curState = IDLE_STATE;
    cb62:	movs	r1, #0
  if (state == WRITE_STATE) {
    cb64:	cmp	r2, #2
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
    cb66:	strb	r1, [r0, #16]
  if (state == WRITE_STATE) {
    cb68:	beq.n	cb76 <SdSpiCard::syncDevice()+0x16>
    return writeStop();
  }
  if (state == READ_STATE) {
    cb6a:	cmp	r2, #1
    cb6c:	beq.n	cb72 <SdSpiCard::syncDevice()+0x12>
    return readStop();
  }
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    cb6e:	movs	r0, #1
    cb70:	bx	lr
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
  }
  if (state == READ_STATE) {
    return readStop();
    cb72:	b.w	cb28 <SdSpiCard::readStop()>
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
    cb76:	ldr	r3, [r0, #0]
    cb78:	ldr	r3, [r3, #76]	; 0x4c
    cb7a:	bx	r3

0000cb7c <SdSpiCard::writeStart(unsigned long)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    cb7c:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cb7e:	ldr	r3, [r0, #0]
    cb80:	ldr	r5, [pc, #68]	; (cbc8 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    cb82:	ldr	r3, [r3, #64]	; 0x40
    cb84:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    cb86:	sub	sp, #12
    cb88:	mov	r4, r0
    cb8a:	mov	r2, r1
    cb8c:	bne.n	cbbe <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    cb8e:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cb90:	cmp	r0, #3
    sector <<= 9;
    cb92:	it	ne
    cb94:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    cb96:	movs	r1, #25
    cb98:	mov	r0, r4
    cb9a:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cb9e:	cbz	r0, cbb8 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cba0:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cba2:	movs	r3, #14
    cba4:	strb	r3, [r4, #19]
    cba6:	cbnz	r0, cbac <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

 fail:
  spiStop();
  return false;
}
    cba8:	add	sp, #12
    cbaa:	pop	{r4, r5, pc}
    cbac:	mov	r0, r4
    cbae:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    cbb2:	movs	r0, #0
    cbb4:	add	sp, #12
    cbb6:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    cbb8:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    cbba:	add	sp, #12
    cbbc:	pop	{r4, r5, pc}
    cbbe:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cbc0:	blx	r3
    cbc2:	ldr	r2, [sp, #4]
    cbc4:	b.n	cb90 <SdSpiCard::writeStart(unsigned long)+0x14>
    cbc6:	nop
    cbc8:	.word	0x0000c4b1

0000cbcc <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    cbcc:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    cbce:	ldr	r3, [r0, #0]
    cbd0:	ldr	r7, [pc, #172]	; (cc80 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    cbd2:	ldr	r3, [r3, #52]	; 0x34
    cbd4:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    cbd6:	sub	sp, #20
    cbd8:	mov	r4, r0
    cbda:	mov	r5, r1
    cbdc:	mov	r6, r2
    cbde:	bne.n	cc3c <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    cbe0:	mov	r2, sp
    cbe2:	movs	r1, #9
    cbe4:	bl	c984 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    cbe8:	cbz	r0, cc10 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    cbea:	ldrb.w	r3, [sp, #10]
    cbee:	lsls	r2, r3, #25
    cbf0:	bpl.n	cc20 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    cbf2:	ldrb	r3, [r4, #22]
    cbf4:	cmp	r3, #3
    firstSector <<= 9;
    cbf6:	it	ne
    cbf8:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    cbfa:	mov	r2, r5
    cbfc:	mov.w	r1, #32
    cc00:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    cc02:	it	ne
    cc04:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    cc06:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    cc0a:	cbz	r0, cc42 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cc0c:	movs	r3, #38	; 0x26
    cc0e:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cc10:	ldrb	r0, [r4, #20]
    cc12:	cbz	r0, cc1c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    cc14:	mov	r0, r4
    cc16:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    cc1a:	movs	r0, #0
}
    cc1c:	add	sp, #20
    cc1e:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    cc20:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    cc24:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    cc28:	lsls	r3, r3, #1
    cc2a:	adds	r2, r6, #1
    cc2c:	orr.w	r3, r3, r1, lsr #7
    cc30:	orrs	r2, r5
    cc32:	tst	r3, r2
    cc34:	beq.n	cbf2 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    cc36:	movs	r3, #39	; 0x27
    cc38:	strb	r3, [r4, #19]
    cc3a:	b.n	cc10 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    cc3c:	mov	r1, sp
    cc3e:	blx	r3
    cc40:	b.n	cbe8 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    cc42:	mov	r2, r6
    cc44:	movs	r1, #33	; 0x21
    cc46:	mov	r0, r4
    cc48:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cc4c:	cmp	r0, #0
    cc4e:	bne.n	cc0c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    cc50:	mov	r2, r0
    cc52:	movs	r1, #38	; 0x26
    cc54:	mov	r0, r4
    cc56:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cc5a:	cmp	r0, #0
    cc5c:	bne.n	cc0c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    cc5e:	movw	r1, #10000	; 0x2710
    cc62:	mov	r0, r4
    cc64:	bl	c650 <SdSpiCard::waitNotBusy(unsigned short)>
    cc68:	cbnz	r0, cc70 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    cc6a:	movs	r3, #40	; 0x28
    cc6c:	strb	r3, [r4, #19]
    cc6e:	b.n	cc10 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cc70:	ldrb	r5, [r4, #20]
    cc72:	cmp	r5, #0
    cc74:	beq.n	cc1c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    cc76:	mov	r0, r4
    cc78:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    cc7c:	mov	r0, r5
    cc7e:	b.n	cc1c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    cc80:	.word	0x0000c9c5

0000cc84 <SdSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    cc84:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    cc86:	mov.w	r1, #600	; 0x258
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    cc8a:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    cc8c:	bl	c650 <SdSpiCard::waitNotBusy(unsigned short)>
    cc90:	mov	r6, r0
    cc92:	cbnz	r0, ccac <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cc94:	ldrb	r4, [r5, #20]
    cc96:	movs	r3, #30
    cc98:	strb	r3, [r5, #19]
    cc9a:	cbnz	r4, cca0 <SdSpiCard::writeStop()+0x1c>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    cc9c:	mov	r0, r4
    cc9e:	pop	{r4, r5, r6, pc}
    cca0:	mov	r0, r5
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    cca2:	mov	r4, r6
    cca4:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
}
    cca8:	mov	r0, r4
    ccaa:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    ccac:	movs	r1, #253	; 0xfd
    ccae:	adds	r0, r5, #4
    ccb0:	bl	dab0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    ccb4:	ldrb	r4, [r5, #20]
    ccb6:	cbnz	r4, ccbe <SdSpiCard::writeStop()+0x3a>
    ccb8:	mov	r4, r6

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    ccba:	mov	r0, r4
    ccbc:	pop	{r4, r5, r6, pc}
    ccbe:	mov	r0, r5
    ccc0:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    ccc4:	b.n	cc9c <SdSpiCard::writeStop()+0x18>
    ccc6:	nop

0000ccc8 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    ccc8:	push	{r4, r5, r6, lr}
    ccca:	adds	r4, r0, #4
    cccc:	mov	r6, r2
    ccce:	mov	r5, r0
    ccd0:	mov	r0, r4
    ccd2:	bl	dab0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    ccd6:	mov.w	r2, #512	; 0x200
    ccda:	mov	r1, r6
    ccdc:	mov	r0, r4
    ccde:	bl	dac8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    cce2:	mov	r0, r4
    cce4:	movs	r1, #255	; 0xff
    cce6:	bl	dab0 <SdSpiArduinoDriver::send(unsigned char)>
    ccea:	mov	r0, r4
    ccec:	movs	r1, #255	; 0xff
    ccee:	bl	dab0 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    ccf2:	mov	r0, r4
    ccf4:	bl	da74 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    ccf8:	and.w	r3, r0, #31
    ccfc:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    ccfe:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    cd00:	beq.n	cd16 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cd02:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cd04:	movs	r3, #32
    cd06:	strb	r3, [r5, #19]
    cd08:	cbnz	r0, cd0c <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

 fail:
  spiStop();
  return false;
}
    cd0a:	pop	{r4, r5, r6, pc}
    cd0c:	mov	r0, r5
    cd0e:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  }
  return true;

 fail:
  spiStop();
  return false;
    cd12:	movs	r0, #0
    cd14:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    cd16:	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    cd18:	pop	{r4, r5, r6, pc}
    cd1a:	nop

0000cd1c <SdSpiCard::writeData(unsigned char const*)>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    cd1c:	push	{r3, r4, r5, lr}
    cd1e:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    cd20:	mov.w	r1, #600	; 0x258
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    cd24:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    cd26:	bl	c650 <SdSpiCard::waitNotBusy(unsigned short)>
    cd2a:	cbnz	r0, cd3e <SdSpiCard::writeData(unsigned char const*)+0x22>
    cd2c:	movs	r3, #36	; 0x24
    cd2e:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cd30:	ldrb	r0, [r4, #20]
    cd32:	cbz	r0, cd3c <SdSpiCard::writeData(unsigned char const*)+0x20>
    cd34:	mov	r0, r4
    cd36:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  }
  return true;

 fail:
  spiStop();
  return false;
    cd3a:	movs	r0, #0
}
    cd3c:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    cd3e:	mov	r2, r5
    cd40:	movs	r1, #252	; 0xfc
    cd42:	mov	r0, r4
    cd44:	bl	ccc8 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    cd48:	cmp	r0, #0
    cd4a:	beq.n	cd30 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

 fail:
  spiStop();
  return false;
}
    cd4c:	pop	{r3, r4, r5, pc}
    cd4e:	nop

0000cd50 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    cd50:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cd52:	ldr	r3, [r0, #0]
    cd54:	ldr	r5, [pc, #88]	; (cdb0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x60>)
    cd56:	ldr	r3, [r3, #64]	; 0x40
    cd58:	cmp	r3, r5
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    cd5a:	sub	sp, #8
    cd5c:	mov	r4, r0
    cd5e:	mov	r6, r2
    cd60:	bne.n	cda8 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x58>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    cd62:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cd64:	cmp	r0, #3
    sector <<= 9;
    cd66:	it	ne
    cd68:	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, sector)) {
    cd6a:	mov	r2, r1
    cd6c:	mov	r0, r4
    cd6e:	movs	r1, #24
    cd70:	bl	c68c <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    cd74:	cbz	r0, cd8a <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    cd76:	movs	r3, #13
    cd78:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cd7a:	ldrb	r0, [r4, #20]
    cd7c:	cbz	r0, cd86 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    cd7e:	mov	r0, r4
    cd80:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    cd84:	movs	r0, #0
}
    cd86:	add	sp, #8
    cd88:	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    cd8a:	mov	r2, r6
    cd8c:	movs	r1, #254	; 0xfe
    cd8e:	mov	r0, r4
    cd90:	bl	ccc8 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    cd94:	cmp	r0, #0
    cd96:	beq.n	cd7a <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    cd98:	ldrb	r5, [r4, #20]
    cd9a:	cmp	r5, #0
    cd9c:	beq.n	cd86 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    cd9e:	mov	r0, r4
    cda0:	bl	c4e0 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.28]>
    cda4:	mov	r0, r5
    cda6:	b.n	cd86 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    cda8:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    cdaa:	blx	r3
    cdac:	ldr	r1, [sp, #4]
    cdae:	b.n	cd64 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x14>
    cdb0:	.word	0x0000c4b1

0000cdb4 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    cdb4:	push	{r4}
    if (m_sharedSpi) {
    cdb6:	ldrb	r4, [r0, #17]
    cdb8:	cbnz	r4, cdc8 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    cdba:	ldr	r4, [r0, #0]
    cdbc:	ldr	r4, [r4, #32]
    cdbe:	movs	r3, #1
    cdc0:	mov	ip, r4
    }
  }
    cdc2:	ldr.w	r4, [sp], #4
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    cdc6:	bx	ip
    }
  }
    cdc8:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    cdcc:	b.w	cd50 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>

0000cdd0 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    cdd0:	ldr	r3, [pc, #12]	; (cde0 <isBusyCommandComplete()+0x10>)
    cdd2:	ldr	r0, [pc, #16]	; (cde4 <isBusyCommandComplete()+0x14>)
    cdd4:	ldr	r3, [r3, #0]
    cdd6:	ands	r0, r3
}
    cdd8:	clz	r0, r0
    cddc:	lsrs	r0, r0, #5
    cdde:	bx	lr
    cde0:	.word	0x400b1030
    cde4:	.word	0x000f0001

0000cde8 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    cde8:	ldr	r3, [pc, #8]	; (cdf4 <isBusyCommandInhibit()+0xc>)
    cdea:	ldr	r0, [r3, #0]
}
    cdec:	and.w	r0, r0, #1
    cdf0:	bx	lr
    cdf2:	nop
    cdf4:	.word	0x400b1024

0000cdf8 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    cdf8:	ldr	r3, [pc, #12]	; (ce08 <isBusyDat()+0x10>)
    cdfa:	ldr	r0, [r3, #0]
    cdfc:	eor.w	r0, r0, #16777216	; 0x1000000
}
    ce00:	ubfx	r0, r0, #24, #1
    ce04:	bx	lr
    ce06:	nop
    ce08:	.word	0x400b1024

0000ce0c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    ce0c:	ldr	r3, [pc, #4]	; (ce14 <isBusyDMA()+0x8>)
    ce0e:	ldrb	r0, [r3, #0]
}
    ce10:	bx	lr
    ce12:	nop
    ce14:	.word	0x20006b48

0000ce18 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    ce18:	ldr	r3, [pc, #12]	; (ce28 <isBusyFifoRead()+0x10>)
    ce1a:	ldr	r0, [r3, #0]
    ce1c:	eor.w	r0, r0, #2048	; 0x800
}
    ce20:	ubfx	r0, r0, #11, #1
    ce24:	bx	lr
    ce26:	nop
    ce28:	.word	0x400b1024

0000ce2c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    ce2c:	ldr	r3, [pc, #12]	; (ce3c <isBusyFifoWrite()+0x10>)
    ce2e:	ldr	r0, [r3, #0]
    ce30:	eor.w	r0, r0, #1024	; 0x400
}
    ce34:	ubfx	r0, r0, #10, #1
    ce38:	bx	lr
    ce3a:	nop
    ce3c:	.word	0x400b1024

0000ce40 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ce40:	ldr	r3, [pc, #12]	; (ce50 <isBusyTransferComplete()+0x10>)
    ce42:	ldr	r0, [pc, #16]	; (ce54 <isBusyTransferComplete()+0x14>)
    ce44:	ldr	r3, [r3, #0]
    ce46:	ands	r0, r3
}
    ce48:	clz	r0, r0
    ce4c:	lsrs	r0, r0, #5
    ce4e:	bx	lr
    ce50:	.word	0x400b1030
    ce54:	.word	0x117f0002

0000ce58 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    ce58:	ldr	r3, [pc, #4]	; (ce60 <SdioCard::errorCode() const+0x8>)
}
    ce5a:	ldrb	r0, [r3, #0]
    ce5c:	bx	lr
    ce5e:	nop
    ce60:	.word	0x1fff0b5c

0000ce64 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    ce64:	ldr	r3, [pc, #4]	; (ce6c <SdioCard::errorData() const+0x8>)
    ce66:	ldr	r0, [r3, #0]
}
    ce68:	bx	lr
    ce6a:	nop
    ce6c:	.word	0x20006b30

0000ce70 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    ce70:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    ce72:	ldr	r4, [pc, #20]	; (ce88 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    ce74:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    ce76:	ldmia	r4!, {r0, r1, r2, r3}
    ce78:	str	r0, [r5, #0]
    ce7a:	str	r1, [r5, #4]
    ce7c:	str	r2, [r5, #8]
    ce7e:	str	r3, [r5, #12]
  return true;
}
    ce80:	movs	r0, #1
    ce82:	pop	{r4, r5}
    ce84:	bx	lr
    ce86:	nop
    ce88:	.word	0x20006b0c

0000ce8c <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    ce8c:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    ce8e:	ldr	r4, [pc, #20]	; (cea4 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    ce90:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    ce92:	ldmia	r4!, {r0, r1, r2, r3}
    ce94:	str	r0, [r5, #0]
    ce96:	str	r1, [r5, #4]
    ce98:	str	r2, [r5, #8]
    ce9a:	str	r3, [r5, #12]
  return true;
}
    ce9c:	movs	r0, #1
    ce9e:	pop	{r4, r5}
    cea0:	bx	lr
    cea2:	nop
    cea4:	.word	0x20006b38

0000cea8 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    cea8:	ldr	r3, [pc, #8]	; (ceb4 <SdioCard::readOCR(unsigned long*)+0xc>)
    ceaa:	ldr	r3, [r3, #0]
    ceac:	str	r3, [r1, #0]
  return true;
}
    ceae:	movs	r0, #1
    ceb0:	bx	lr
    ceb2:	nop
    ceb4:	.word	0x20006b24

0000ceb8 <SdioCard::~SdioCard()>:
    ceb8:	bx	lr
    ceba:	nop

0000cebc <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    cebc:	push	{r3, r4, r5, r6, r7, lr}
    cebe:	mov	r5, r0
  uint32_t m = micros();
    cec0:	bl	e714 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    cec4:	ldr	r7, [pc, #24]	; (cee0 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    cec6:	mov	r6, r0
    cec8:	b.n	ced4 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ceca:	bl	e714 <micros>
    cece:	subs	r0, r0, r6
    ced0:	cmp	r0, r7
    ced2:	bhi.n	cedc <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    ced4:	blx	r5
    ced6:	mov	r4, r0
    ced8:	cmp	r0, #0
    ceda:	bne.n	ceca <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    cedc:	mov	r0, r4
    cede:	pop	{r3, r4, r5, r6, r7, pc}
    cee0:	.word	0x000f4240

0000cee4 <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    cee4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    cee8:	ldr.w	r8, [pc, #64]	; cf2c <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ceec:	ldr	r7, [pc, #56]	; (cf28 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    ceee:	str.w	r0, [r8]
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    cef2:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    cef4:	bl	e714 <micros>
    cef8:	mov	r6, r0
    cefa:	b.n	cf0a <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    cefc:	bl	e714 <micros>
    cf00:	subs	r0, r0, r6
    cf02:	cmp	r0, r7
    cf04:	bhi.n	cf1c <yieldTimeout(bool (*)())+0x38>
  }
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    cf06:	bl	f49c <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    cf0a:	blx	r5
    cf0c:	mov	r4, r0
    cf0e:	cmp	r0, #0
    cf10:	bne.n	cefc <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    cf12:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    cf16:	mov	r0, r4
    cf18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    cf1c:	movs	r3, #0
    cf1e:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    cf22:	mov	r0, r4
    cf24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf28:	.word	0x000f4240
    cf2c:	.word	0x20006b1c

0000cf30 <SdioCard::~SdioCard()>:
    cf30:	push	{r4, lr}
    cf32:	movs	r1, #12
    cf34:	mov	r4, r0
    cf36:	bl	f95c <operator delete(void*, unsigned int)>
    cf3a:	mov	r0, r4
    cf3c:	pop	{r4, pc}
    cf3e:	nop

0000cf40 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    cf40:	ldr	r3, [pc, #20]	; (cf58 <SdioCard::type() const+0x18>)
    cf42:	ldrb	r3, [r3, #0]
    cf44:	cbz	r3, cf54 <SdioCard::type() const+0x14>
    cf46:	ldr	r3, [pc, #20]	; (cf5c <SdioCard::type() const+0x1c>)
    cf48:	ldrb	r3, [r3, #0]
    cf4a:	cmp	r3, #0
    cf4c:	ite	ne
    cf4e:	movne	r0, #3
    cf50:	moveq	r0, #2
    cf52:	bx	lr
    cf54:	movs	r0, #1
}
    cf56:	bx	lr
    cf58:	.word	0x20006b08
    cf5c:	.word	0x20006b20

0000cf60 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    cf60:	push	{r3, r4, r5, lr}
    cf62:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    cf64:	ldr	r0, [pc, #60]	; (cfa4 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    cf66:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    cf68:	bl	cebc <waitTimeout(bool (*)())>
    cf6c:	cbz	r0, cf72 <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    cf6e:	movs	r0, #0
    cf70:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    cf72:	ldr	r2, [pc, #52]	; (cfa8 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    cf74:	ldr	r3, [pc, #52]	; (cfac <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    cf76:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    cf78:	ldr	r0, [pc, #52]	; (cfb0 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    cf7a:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    cf7c:	bl	cebc <waitTimeout(bool (*)())>
    cf80:	cmp	r0, #0
    cf82:	bne.n	cf6e <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    cf84:	ldr	r2, [pc, #44]	; (cfb4 <cardCommand(unsigned long, unsigned long)+0x54>)
    cf86:	ldr	r3, [pc, #48]	; (cfb8 <cardCommand(unsigned long, unsigned long)+0x58>)
    cf88:	ldr	r1, [r2, #0]
    cf8a:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    cf8c:	ldr	r1, [r3, #0]
    cf8e:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    cf90:	ldr	r2, [r3, #0]
    cf92:	lsls	r2, r2, #31
    cf94:	bpl.n	cf6e <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    cf96:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    cf98:	tst.w	r3, #983040	; 0xf0000
    cf9c:	bne.n	cf6e <cardCommand(unsigned long, unsigned long)+0xe>
    cf9e:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    cfa0:	pop	{r3, r4, r5, pc}
    cfa2:	nop
    cfa4:	.word	0x0000cde9
    cfa8:	.word	0x400b1008
    cfac:	.word	0x400b100c
    cfb0:	.word	0x0000cdd1
    cfb4:	.word	0x400b1030
    cfb8:	.word	0x20006b30

0000cfbc <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    cfbc:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    cfbe:	ldr	r3, [pc, #28]	; (cfdc <isBusyCMD13()+0x20>)
    cfc0:	ldr	r0, [pc, #28]	; (cfe0 <isBusyCMD13()+0x24>)
    cfc2:	ldr	r1, [r3, #0]
    cfc4:	bl	cf60 <cardCommand(unsigned long, unsigned long)>
    cfc8:	cbz	r0, cfd8 <isBusyCMD13()+0x1c>
    cfca:	ldr	r3, [pc, #24]	; (cfe4 <isBusyCMD13()+0x28>)
    cfcc:	ldr	r0, [r3, #0]
    cfce:	eor.w	r0, r0, #256	; 0x100
    cfd2:	ubfx	r0, r0, #8, #1
    cfd6:	pop	{r3, pc}
    cfd8:	movs	r0, #1
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
    cfda:	pop	{r3, pc}
    cfdc:	.word	0x20006b28
    cfe0:	.word	0x0d1a0000
    cfe4:	.word	0x400b1010

0000cfe8 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    cfe8:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    cfea:	ldr	r3, [pc, #16]	; (cffc <SdioCard::status()+0x14>)
    cfec:	ldr	r0, [pc, #16]	; (d000 <SdioCard::status()+0x18>)
    cfee:	ldr	r1, [r3, #0]
    cff0:	bl	cf60 <cardCommand(unsigned long, unsigned long)>
    cff4:	cbz	r0, cffa <SdioCard::status()+0x12>
    cff6:	ldr	r3, [pc, #12]	; (d004 <SdioCard::status()+0x1c>)
    cff8:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    cffa:	pop	{r3, pc}
    cffc:	.word	0x20006b28
    d000:	.word	0x0d1a0000
    d004:	.word	0x400b1010

0000d008 <waitDmaStatus() [clone .part.4]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    d008:	ldr	r3, [pc, #20]	; (d020 <waitDmaStatus() [clone .part.4]+0x18>)
    d00a:	ldr	r0, [r3, #0]
    d00c:	ands.w	r0, r0, #2
    d010:	beq.n	d01e <waitDmaStatus() [clone .part.4]+0x16>
    d012:	ldr	r3, [r3, #0]
    d014:	ldr	r0, [pc, #12]	; (d024 <waitDmaStatus() [clone .part.4]+0x1c>)
    d016:	ands	r0, r3
    d018:	clz	r0, r0
    d01c:	lsrs	r0, r0, #5
}
    d01e:	bx	lr
    d020:	.word	0x20006b30
    d024:	.word	0x117f0000

0000d028 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    d028:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    d02a:	lsls	r4, r2, #30
    d02c:	bne.n	d030 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    d02e:	cbnz	r3, d042 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d030:	ldr	r1, [pc, #124]	; (d0b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    d032:	ldr	r3, [pc, #128]	; (d0b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d034:	movs	r0, #37	; 0x25
  m_errorLine = line;
    d036:	movw	r2, #503	; 0x1f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d03a:	strb	r0, [r1, #0]
  m_errorLine = line;
    d03c:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    d03e:	movs	r0, #0
    d040:	pop	{r3, r4, r5, r6, r7, pc}
    d042:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    d044:	ldr	r0, [pc, #112]	; (d0b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    d046:	mov	r4, r3
    d048:	mov	r7, r1
    d04a:	mov	r5, r2
    d04c:	bl	cee4 <yieldTimeout(bool (*)())>
    d050:	cbnz	r0, d09a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    d052:	ldr	r1, [pc, #104]	; (d0bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    d054:	ldr	r2, [pc, #104]	; (d0c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    d056:	ldr.w	lr, [pc, #128]	; d0d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    d05a:	mov.w	ip, #1
    d05e:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    d062:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    d064:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    d066:	ldr	r4, [pc, #92]	; (d0c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    d068:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d06a:	ldr	r2, [pc, #92]	; (d0c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    d06c:	ldr	r1, [pc, #92]	; (d0cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    d06e:	ldr	r0, [pc, #96]	; (d0d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    d070:	orr.w	r3, r3, #512	; 0x200
    d074:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d076:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    d078:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d07a:	cbnz	r3, d0aa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    d07c:	lsls	r1, r7, #9
    d07e:	mov	r0, r6
    d080:	bl	cf60 <cardCommand(unsigned long, unsigned long)>
    d084:	cmp	r0, #0
    d086:	beq.n	d03e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    d088:	ldr	r0, [pc, #72]	; (d0d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    d08a:	bl	cee4 <yieldTimeout(bool (*)())>
    d08e:	cmp	r0, #0
    d090:	bne.n	d03e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    d092:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d096:	b.w	d008 <waitDmaStatus() [clone .part.4]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d09a:	ldr	r1, [pc, #20]	; (d0b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    d09c:	ldr	r3, [pc, #20]	; (d0b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d09e:	movs	r0, #10
  m_errorLine = line;
    d0a0:	mov.w	r2, #506	; 0x1fa
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d0a4:	strb	r0, [r1, #0]
  m_errorLine = line;
    d0a6:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d0a8:	b.n	d03e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    d0aa:	mov	r1, r7
    d0ac:	b.n	d07e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    d0ae:	nop
    d0b0:	.word	0x1fff0b5c
    d0b4:	.word	0x20006b4c
    d0b8:	.word	0x0000cfbd
    d0bc:	.word	0x20006b30
    d0c0:	.word	0x400b1000
    d0c4:	.word	0x400b1004
    d0c8:	.word	0x20006b20
    d0cc:	.word	0x400b1038
    d0d0:	.word	0x117f0002
    d0d4:	.word	0x0000ce0d
    d0d8:	.word	0x20006b48

0000d0dc <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    d0dc:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    d0de:	ldr	r1, [pc, #100]	; (d144 <SdioCard::sectorCount()+0x68>)
    d0e0:	ldrb	r3, [r1, #0]
    d0e2:	ands.w	r3, r3, #192	; 0xc0
    d0e6:	beq.n	d10c <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    d0e8:	cmp	r3, #64	; 0x40
    d0ea:	beq.n	d0f2 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    d0ec:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    d0ee:	pop	{r4, r5, r6}
    d0f0:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    d0f2:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    d0f4:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    d0f6:	ldrb	r0, [r1, #8]
    d0f8:	adds	r2, r3, #1
    d0fa:	and.w	r3, r4, #63	; 0x3f
    d0fe:	add.w	r3, r2, r3, lsl #16
    d102:	add.w	r0, r3, r0, lsl #8
    d106:	lsls	r0, r0, #10
    d108:	pop	{r4, r5, r6}
    d10a:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    d10c:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    d10e:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    d110:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    d112:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    d114:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    d116:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    d118:	and.w	r1, r5, #3
    d11c:	lsls	r1, r1, #1
    d11e:	and.w	r3, r3, #3
    d122:	lsls	r2, r2, #2
    d124:	orr.w	r0, r1, r0, lsr #7
    d128:	orr.w	r3, r2, r3, lsl #10
    d12c:	and.w	r1, r4, #15
    d130:	orr.w	r3, r3, r6, lsr #6
    d134:	add	r0, r1
    d136:	subs	r0, #7
    d138:	adds	r3, #1
    d13a:	lsl.w	r0, r3, r0
    d13e:	pop	{r4, r5, r6}
    d140:	bx	lr
    d142:	nop
    d144:	.word	0x20006b38

0000d148 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    d148:	push	{r4, r5, r6, lr}
    d14a:	mov	r5, r1
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    d14c:	ldrb	r1, [r0, #9]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    d14e:	mov	r6, r2
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    d150:	cbnz	r1, d1ae <SdioCard::erase(unsigned long, unsigned long)+0x66>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    d152:	ldr	r2, [pc, #192]	; (d214 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    d154:	ldrb	r3, [r2, #10]
    d156:	and.w	r0, r3, #64	; 0x40
    d15a:	and.w	r4, r0, #255	; 0xff
    d15e:	cbz	r0, d188 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    d160:	ldr	r3, [pc, #180]	; (d218 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    d162:	ldrb	r3, [r3, #0]
    d164:	cbnz	r3, d16a <SdioCard::erase(unsigned long, unsigned long)+0x22>
    firstSector <<= 9;
    d166:	lsls	r5, r5, #9
    lastSector <<= 9;
    d168:	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    d16a:	mov	r1, r5
    d16c:	ldr	r0, [pc, #172]	; (d21c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    d16e:	bl	cf60 <cardCommand(unsigned long, unsigned long)>
    d172:	mov	r4, r0
    d174:	cbnz	r0, d1be <SdioCard::erase(unsigned long, unsigned long)+0x76>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d176:	ldr	r1, [pc, #168]	; (d220 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    d178:	ldr	r3, [pc, #168]	; (d224 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d17a:	movs	r0, #15
  m_errorLine = line;
    d17c:	mov.w	r2, #752	; 0x2f0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d180:	strb	r0, [r1, #0]
  m_errorLine = line;
    d182:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    d184:	mov	r0, r4
    d186:	pop	{r4, r5, r6, pc}
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    d188:	ldrb	r1, [r2, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    d18a:	and.w	r3, r3, #63	; 0x3f
    d18e:	lsls	r3, r3, #1
    d190:	adds	r2, r6, #1
    d192:	orr.w	r3, r3, r1, lsr #7
    d196:	orrs	r2, r5
    d198:	tst	r3, r2
    d19a:	beq.n	d160 <SdioCard::erase(unsigned long, unsigned long)+0x18>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d19c:	ldr	r1, [pc, #128]	; (d220 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    d19e:	ldr	r3, [pc, #132]	; (d224 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1a0:	movs	r0, #39	; 0x27
  m_errorLine = line;
    d1a2:	mov.w	r2, #744	; 0x2e8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1a6:	strb	r0, [r1, #0]
  m_errorLine = line;
    d1a8:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    d1aa:	mov	r0, r4
    d1ac:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    d1ae:	ldr	r3, [r0, #0]
    d1b0:	ldr	r3, [r3, #24]
    d1b2:	blx	r3
    d1b4:	mov	r4, r0
    d1b6:	cmp	r0, #0
    d1b8:	bne.n	d152 <SdioCard::erase(unsigned long, unsigned long)+0xa>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    d1ba:	mov	r0, r4
    d1bc:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    d1be:	mov	r1, r6
    d1c0:	ldr	r0, [pc, #100]	; (d228 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    d1c2:	bl	cf60 <cardCommand(unsigned long, unsigned long)>
    d1c6:	mov	r4, r0
    d1c8:	cbnz	r0, d1da <SdioCard::erase(unsigned long, unsigned long)+0x92>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1ca:	ldr	r1, [pc, #84]	; (d220 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    d1cc:	ldr	r3, [pc, #84]	; (d224 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1ce:	movs	r0, #16
  m_errorLine = line;
    d1d0:	movw	r2, #755	; 0x2f3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1d4:	strb	r0, [r1, #0]
  m_errorLine = line;
    d1d6:	str	r2, [r3, #0]
    d1d8:	b.n	d184 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    d1da:	movs	r1, #0
    d1dc:	ldr	r0, [pc, #76]	; (d22c <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    d1de:	bl	cf60 <cardCommand(unsigned long, unsigned long)>
    d1e2:	mov	r4, r0
    d1e4:	cbnz	r0, d1f6 <SdioCard::erase(unsigned long, unsigned long)+0xae>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1e6:	ldr	r1, [pc, #56]	; (d220 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    d1e8:	ldr	r3, [pc, #56]	; (d224 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1ea:	movs	r0, #17
  m_errorLine = line;
    d1ec:	movw	r2, #758	; 0x2f6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d1f0:	strb	r0, [r1, #0]
  m_errorLine = line;
    d1f2:	str	r2, [r3, #0]
    d1f4:	b.n	d184 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    d1f6:	ldr	r0, [pc, #56]	; (d230 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    d1f8:	bl	cebc <waitTimeout(bool (*)())>
    d1fc:	cmp	r0, #0
    d1fe:	beq.n	d184 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d200:	ldr	r1, [pc, #28]	; (d220 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
  m_errorLine = line;
    d202:	ldr	r3, [pc, #32]	; (d224 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d204:	movs	r0, #40	; 0x28
  m_errorLine = line;
    d206:	movw	r2, #761	; 0x2f9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d20a:	strb	r0, [r1, #0]
  m_errorLine = line;
    d20c:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    d20e:	movs	r4, #0
    d210:	b.n	d184 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    d212:	nop
    d214:	.word	0x20006b38
    d218:	.word	0x20006b20
    d21c:	.word	0x201a0000
    d220:	.word	0x1fff0b5c
    d224:	.word	0x20006b4c
    d228:	.word	0x211a0000
    d22c:	.word	0x261b0000
    d230:	.word	0x0000cfbd

0000d234 <waitTransferComplete() [clone .part.8]>:
  }
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    d234:	push	{r4, lr}
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    d236:	ldr	r0, [pc, #56]	; (d270 <waitTransferComplete() [clone .part.8]+0x3c>)
    d238:	bl	cebc <waitTimeout(bool (*)())>
  m_transferActive = false;
    d23c:	ldr	r1, [pc, #52]	; (d274 <waitTransferComplete() [clone .part.8]+0x40>)
  m_irqstat = SDHC_IRQSTAT;
    d23e:	ldr	r2, [pc, #56]	; (d278 <waitTransferComplete() [clone .part.8]+0x44>)
    d240:	ldr	r3, [pc, #56]	; (d27c <waitTransferComplete() [clone .part.8]+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    d242:	movs	r4, #0
    d244:	strb	r4, [r1, #0]
  m_irqstat = SDHC_IRQSTAT;
    d246:	ldr	r1, [r2, #0]
    d248:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    d24a:	ldr	r1, [r3, #0]
    d24c:	str	r1, [r2, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    d24e:	cbnz	r0, d258 <waitTransferComplete() [clone .part.8]+0x24>
    d250:	ldr	r2, [r3, #0]
    d252:	ldr	r3, [pc, #44]	; (d280 <waitTransferComplete() [clone .part.8]+0x4c>)
    d254:	ands	r3, r2
    d256:	cbz	r3, d26a <waitTransferComplete() [clone .part.8]+0x36>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d258:	ldr	r1, [pc, #40]	; (d284 <waitTransferComplete() [clone .part.8]+0x50>)
  m_errorLine = line;
    d25a:	ldr	r3, [pc, #44]	; (d288 <waitTransferComplete() [clone .part.8]+0x54>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d25c:	movs	r0, #31
  m_errorLine = line;
    d25e:	movw	r2, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d262:	strb	r0, [r1, #0]
  m_errorLine = line;
    d264:	str	r2, [r3, #0]
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    d266:	movs	r0, #0
  }
  return true;
}
    d268:	pop	{r4, pc}
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
    d26a:	movs	r0, #1
    d26c:	pop	{r4, pc}
    d26e:	nop
    d270:	.word	0x0000ce41
    d274:	.word	0x20006b2c
    d278:	.word	0x400b1030
    d27c:	.word	0x20006b30
    d280:	.word	0x117f0000
    d284:	.word	0x1fff0b5c
    d288:	.word	0x20006b4c

0000d28c <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    d28c:	push	{r4, r5, r6, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d28e:	ldr	r4, [pc, #104]	; (d2f8 <SdioCard::readStop()+0x6c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d290:	ldr	r0, [pc, #104]	; (d2fc <SdioCard::readStop()+0x70>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d292:	ldr	r3, [r4, #0]
    d294:	bic.w	r3, r3, #65536	; 0x10000
    d298:	str	r3, [r4, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d29a:	movs	r1, #0
    d29c:	bl	cf60 <cardCommand(unsigned long, unsigned long)>
    d2a0:	mov	r5, r0
    d2a2:	cbnz	r0, d2b6 <SdioCard::readStop()+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2a4:	ldr	r1, [pc, #88]	; (d300 <SdioCard::readStop()+0x74>)
  m_errorLine = line;
    d2a6:	ldr	r3, [pc, #92]	; (d304 <SdioCard::readStop()+0x78>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2a8:	movs	r0, #9
  m_errorLine = line;
    d2aa:	movw	r2, #575	; 0x23f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2ae:	strb	r0, [r1, #0]
  m_errorLine = line;
    d2b0:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d2b2:	mov	r0, r5
    d2b4:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    d2b6:	ldr	r0, [pc, #80]	; (d308 <SdioCard::readStop()+0x7c>)
    d2b8:	bl	cee4 <yieldTimeout(bool (*)())>
    d2bc:	cbnz	r0, d2e2 <SdioCard::readStop()+0x56>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    d2be:	ldr	r3, [pc, #76]	; (d30c <SdioCard::readStop()+0x80>)
    d2c0:	ldr	r3, [r3, #0]
    d2c2:	lsls	r3, r3, #30
    d2c4:	bpl.n	d2b2 <SdioCard::readStop()+0x26>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    d2c6:	ldr	r1, [pc, #72]	; (d310 <SdioCard::readStop()+0x84>)
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    d2c8:	ldr	r0, [pc, #72]	; (d314 <SdioCard::readStop()+0x88>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    d2ca:	ldr	r6, [r1, #0]
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    d2cc:	ldr	r3, [r4, #0]
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    d2ce:	ldr	r2, [r0, #0]
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    d2d0:	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    d2d4:	orr.w	r2, r2, #67108864	; 0x4000000
    d2d8:	str	r2, [r0, #0]
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    d2da:	str	r6, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d2dc:	mov	r0, r5
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    SDHC_PROCTL = proctl;
    d2de:	str	r3, [r4, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d2e0:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2e2:	ldr	r1, [pc, #28]	; (d300 <SdioCard::readStop()+0x74>)
  m_errorLine = line;
    d2e4:	ldr	r3, [pc, #28]	; (d304 <SdioCard::readStop()+0x78>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2e6:	movs	r0, #10
  m_errorLine = line;
    d2e8:	movw	r2, #579	; 0x243
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d2ec:	strb	r0, [r1, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d2ee:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    d2f0:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    d2f2:	mov	r0, r5
    d2f4:	pop	{r4, r5, r6, pc}
    d2f6:	nop
    d2f8:	.word	0x400b1028
    d2fc:	.word	0x0cdb0000
    d300:	.word	0x1fff0b5c
    d304:	.word	0x20006b4c
    d308:	.word	0x0000cdf9
    d30c:	.word	0x400b1024
    d310:	.word	0x400b1034
    d314:	.word	0x400b102c

0000d318 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    d318:	push	{r4, r5, r6, lr}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d31a:	ldr	r6, [pc, #124]	; (d398 <SdioCard::writeData(unsigned char const*)+0x80>)
    d31c:	ldrb	r3, [r6, #0]
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    d31e:	mov	r5, r1
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d320:	cmp	r3, #0
    d322:	bne.n	d38c <SdioCard::writeData(unsigned char const*)+0x74>
  if (!waitTransferComplete()) {
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    d324:	ldr	r3, [pc, #116]	; (d39c <SdioCard::writeData(unsigned char const*)+0x84>)
    d326:	ldr	r3, [r3, #0]
    d328:	lsls	r1, r3, #23
    d32a:	bmi.n	d33e <SdioCard::writeData(unsigned char const*)+0x26>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d32c:	ldr	r3, [pc, #112]	; (d3a0 <SdioCard::writeData(unsigned char const*)+0x88>)
    d32e:	ldr	r2, [r3, #0]
    d330:	bic.w	r2, r2, #65536	; 0x10000
    d334:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    d336:	ldr	r2, [r3, #0]
    d338:	orr.w	r2, r2, #131072	; 0x20000
    d33c:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d33e:	ldr	r2, [pc, #96]	; (d3a0 <SdioCard::writeData(unsigned char const*)+0x88>)
  if (waitTimeout(isBusyFifoWrite)) {
    d340:	ldr	r0, [pc, #96]	; (d3a4 <SdioCard::writeData(unsigned char const*)+0x8c>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d342:	ldr	r3, [r2, #0]
    d344:	orr.w	r3, r3, #65536	; 0x10000
    d348:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    d34a:	bl	cebc <waitTimeout(bool (*)())>
    d34e:	cbnz	r0, d37a <SdioCard::writeData(unsigned char const*)+0x62>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    d350:	ldr	r4, [pc, #72]	; (d39c <SdioCard::writeData(unsigned char const*)+0x84>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    d352:	ldr	r0, [pc, #84]	; (d3a8 <SdioCard::writeData(unsigned char const*)+0x90>)
    d354:	subs	r3, r5, #4
    d356:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    d35a:	ldr	r2, [r4, #0]
    d35c:	lsls	r2, r2, #21
    d35e:	bpl.n	d35a <SdioCard::writeData(unsigned char const*)+0x42>
    d360:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    d364:	ldr.w	r2, [r3, #4]!
    d368:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    d36a:	cmp	r1, r3
    d36c:	bne.n	d364 <SdioCard::writeData(unsigned char const*)+0x4c>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    d36e:	cmp	r5, r1
    d370:	mov	r3, r1
    d372:	bne.n	d35a <SdioCard::writeData(unsigned char const*)+0x42>
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
#if ENABLE_TEENSY_SDIO_MOD
  m_transferActive = true;
    d374:	movs	r0, #1
    d376:	strb	r0, [r6, #0]
    d378:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d37a:	ldr	r1, [pc, #48]	; (d3ac <SdioCard::writeData(unsigned char const*)+0x94>)
  m_errorLine = line;
    d37c:	ldr	r3, [pc, #48]	; (d3b0 <SdioCard::writeData(unsigned char const*)+0x98>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d37e:	movs	r0, #33	; 0x21
  m_errorLine = line;
    d380:	mov.w	r2, #1012	; 0x3f4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d384:	strb	r0, [r1, #0]
  m_errorLine = line;
    d386:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    d388:	movs	r0, #0
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d38a:	pop	{r4, r5, r6, pc}
    d38c:	bl	d234 <waitTransferComplete() [clone .part.8]>
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    d390:	cmp	r0, #0
    d392:	bne.n	d324 <SdioCard::writeData(unsigned char const*)+0xc>
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d394:	pop	{r4, r5, r6, pc}
    d396:	nop
    d398:	.word	0x20006b2c
    d39c:	.word	0x400b1024
    d3a0:	.word	0x400b1028
    d3a4:	.word	0x0000ce2d
    d3a8:	.word	0x400b1020
    d3ac:	.word	0x1fff0b5c
    d3b0:	.word	0x20006b4c

0000d3b4 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    d3b4:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    d3b6:	ldr	r0, [pc, #80]	; (d408 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    d3b8:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    d3ba:	bl	cee4 <yieldTimeout(bool (*)())>
    d3be:	cbnz	r0, d3f4 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d3c0:	ldr	r2, [pc, #72]	; (d40c <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d3c2:	ldr	r1, [pc, #76]	; (d410 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d3c4:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    d3c6:	ldr	r0, [pc, #76]	; (d414 <SdioCard::writeStart(unsigned long)+0x60>)
    d3c8:	ldr	r5, [pc, #76]	; (d418 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d3ca:	bic.w	r3, r3, #65536	; 0x10000
    d3ce:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d3d0:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    d3d2:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d3d4:	cbnz	r3, d3f0 <SdioCard::writeStart(unsigned long)+0x3c>
    d3d6:	lsls	r1, r4, #9
    d3d8:	ldr	r0, [pc, #64]	; (d41c <SdioCard::writeStart(unsigned long)+0x68>)
    d3da:	bl	cf60 <cardCommand(unsigned long, unsigned long)>
    d3de:	cbnz	r0, d3ee <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3e0:	ldr	r1, [pc, #60]	; (d420 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    d3e2:	ldr	r3, [pc, #64]	; (d424 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3e4:	movs	r4, #14
  m_errorLine = line;
    d3e6:	mov.w	r2, #1128	; 0x468
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3ea:	strb	r4, [r1, #0]
  m_errorLine = line;
    d3ec:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    d3ee:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d3f0:	mov	r1, r4
    d3f2:	b.n	d3d8 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3f4:	ldr	r1, [pc, #40]	; (d420 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    d3f6:	ldr	r3, [pc, #44]	; (d424 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3f8:	movs	r0, #10
  m_errorLine = line;
    d3fa:	movw	r2, #1116	; 0x45c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d3fe:	strb	r0, [r1, #0]
  m_errorLine = line;
    d400:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d402:	movs	r0, #0
    d404:	pop	{r3, r4, r5, pc}
    d406:	nop
    d408:	.word	0x0000cfbd
    d40c:	.word	0x400b1028
    d410:	.word	0x20006b20
    d414:	.word	0x400b1004
    d418:	.word	0xffff0200
    d41c:	.word	0x193a0022
    d420:	.word	0x1fff0b5c
    d424:	.word	0x20006b4c

0000d428 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    d428:	push	{r3, r4, r5, r6, r7, lr}
    d42a:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    d42c:	ldrb	r0, [r0, #8]
    d42e:	lsls	r0, r0, #31
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    d430:	mov	r4, r1
    d432:	mov	r5, r2
    d434:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    d436:	bmi.n	d460 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    d438:	cbz	r3, d45c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    d43a:	add	r7, r1
    d43c:	b.n	d442 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    d43e:	cmp	r4, r7
    d440:	beq.n	d45c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    d442:	ldr	r3, [r6, #0]
    d444:	mov	r2, r5
    d446:	mov	r1, r4
    d448:	ldr	r3, [r3, #28]
    d44a:	mov	r0, r6
    d44c:	blx	r3
    d44e:	adds	r4, #1
    d450:	add.w	r5, r5, #512	; 0x200
    d454:	cmp	r0, #0
    d456:	bne.n	d43e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    d458:	movs	r0, #0
    d45a:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    d45c:	movs	r0, #1
    d45e:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    d460:	lsls	r0, r2, #30
    d462:	beq.n	d48a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    d464:	cmp	r3, #0
    d466:	beq.n	d45c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    d468:	add	r7, r1
    d46a:	b.n	d470 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    d46c:	cmp	r7, r4
    d46e:	beq.n	d45c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    d470:	ldr	r3, [r6, #0]
    d472:	mov	r2, r5
    d474:	mov	r1, r4
    d476:	ldr	r3, [r3, #28]
    d478:	mov	r0, r6
    d47a:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    d47c:	adds	r4, #1
    d47e:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    d482:	cmp	r0, #0
    d484:	bne.n	d46c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    d486:	movs	r0, #0
    d488:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    d48a:	ldr	r0, [pc, #24]	; (d4a4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    d48c:	bl	d028 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d490:	cmp	r0, #0
    d492:	bne.n	d45c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d494:	ldr	r1, [pc, #16]	; (d4a8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    d496:	ldr	r3, [pc, #20]	; (d4ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d498:	movs	r4, #14
  m_errorLine = line;
    d49a:	movw	r2, #1102	; 0x44e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d49e:	strb	r4, [r1, #0]
  m_errorLine = line;
    d4a0:	str	r2, [r3, #0]
    d4a2:	pop	{r3, r4, r5, r6, r7, pc}
    d4a4:	.word	0x193a0027
    d4a8:	.word	0x1fff0b5c
    d4ac:	.word	0x20006b4c

0000d4b0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    d4b0:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    d4b2:	ldrb	r3, [r0, #8]
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    d4b4:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    d4b6:	lsls	r2, r3, #31
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    d4b8:	sub.w	sp, sp, #512	; 0x200
    d4bc:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    d4be:	bpl.n	d4f4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    d4c0:	lsls	r3, r5, #30
    d4c2:	beq.n	d4d2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    d4c4:	mov	r1, r5
    d4c6:	mov	r0, sp
    d4c8:	mov.w	r2, #512	; 0x200
    d4cc:	bl	db90 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    d4d0:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    d4d2:	mov	r2, r5
    d4d4:	mov	r1, r6
    d4d6:	movs	r3, #1
    d4d8:	ldr	r0, [pc, #144]	; (d56c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xbc>)
    d4da:	bl	d028 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d4de:	cbnz	r0, d4ee <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4e0:	ldr	r1, [pc, #140]	; (d570 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc0>)
  m_errorLine = line;
    d4e2:	ldr	r3, [pc, #144]	; (d574 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4e4:	movs	r4, #13
  m_errorLine = line;
    d4e6:	movw	r2, #1046	; 0x416
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d4ea:	strb	r4, [r1, #0]
  m_errorLine = line;
    d4ec:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    d4ee:	add.w	sp, sp, #512	; 0x200
    d4f2:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d4f4:	ldr	r3, [pc, #128]	; (d578 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>)
    d4f6:	ldrb	r3, [r3, #0]
    d4f8:	mov	r4, r0
    d4fa:	cbnz	r3, d51e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x6e>
    if (!waitTransferComplete()) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    d4fc:	ldr	r3, [pc, #124]	; (d57c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xcc>)
    d4fe:	ldr	r3, [r3, #0]
    d500:	lsrs	r3, r3, #16
    d502:	lsls	r3, r3, #16
    d504:	cbz	r3, d55c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    d506:	ldrb	r3, [r4, #9]
    d508:	cmp	r3, #2
    d50a:	beq.n	d52a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7a>
      if (!syncDevice()) {
    d50c:	ldr	r3, [r4, #0]
    d50e:	mov	r0, r4
    d510:	ldr	r3, [r3, #24]
    d512:	blx	r3
    d514:	cbnz	r0, d532 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    d516:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    d518:	add.w	sp, sp, #512	; 0x200
    d51c:	pop	{r4, r5, r6, pc}
    d51e:	bl	d234 <waitTransferComplete() [clone .part.8]>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    d522:	cmp	r0, #0
    d524:	bne.n	d4fc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
      return false;
    d526:	movs	r0, #0
    d528:	b.n	d518 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x68>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    d52a:	ldr	r3, [r4, #4]
    d52c:	cmp	r6, r3
    d52e:	bne.n	d50c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    d530:	b.n	d546 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x96>
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    d532:	ldr	r3, [r4, #0]
    d534:	mov	r1, r6
    d536:	ldr	r3, [r3, #72]	; 0x48
    d538:	mov	r0, r4
    d53a:	blx	r3
    d53c:	cmp	r0, #0
    d53e:	beq.n	d516 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    d540:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    d542:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    d544:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    d546:	ldr	r3, [r4, #0]
    d548:	mov	r1, r5
    d54a:	ldr	r3, [r3, #68]	; 0x44
    d54c:	mov	r0, r4
    d54e:	blx	r3
    d550:	cmp	r0, #0
    d552:	beq.n	d516 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
      return false;
    }
    m_curSector++;
    d554:	ldr	r3, [r4, #4]
    d556:	adds	r3, #1
    d558:	str	r3, [r4, #4]
    d55a:	b.n	d4ee <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    d55c:	ldr	r3, [r4, #0]
    d55e:	mov	r0, r4
    d560:	ldr	r3, [r3, #24]
    d562:	blx	r3
    d564:	cmp	r0, #0
    d566:	bne.n	d506 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
    d568:	b.n	d516 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x66>
    d56a:	nop
    d56c:	.word	0x183a0001
    d570:	.word	0x1fff0b5c
    d574:	.word	0x20006b4c
    d578:	.word	0x20006b2c
    d57c:	.word	0x400b1004

0000d580 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    d580:	push	{r3, r4, r5, r6, r7, lr}
    d582:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    d584:	ldrb	r0, [r0, #8]
    d586:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    d588:	mov	r4, r1
    d58a:	mov	r5, r2
    d58c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    d58e:	bmi.n	d5b8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    d590:	cbz	r3, d5b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    d592:	add	r7, r1
    d594:	b.n	d59a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    d596:	cmp	r4, r7
    d598:	beq.n	d5b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    d59a:	ldr	r3, [r6, #0]
    d59c:	mov	r2, r5
    d59e:	mov	r1, r4
    d5a0:	ldr	r3, [r3, #12]
    d5a2:	mov	r0, r6
    d5a4:	blx	r3
    d5a6:	adds	r4, #1
    d5a8:	add.w	r5, r5, #512	; 0x200
    d5ac:	cmp	r0, #0
    d5ae:	bne.n	d596 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    d5b0:	movs	r0, #0
    d5b2:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    d5b4:	movs	r0, #1
    d5b6:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    d5b8:	lsls	r0, r2, #30
    d5ba:	beq.n	d5e2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    d5bc:	cmp	r3, #0
    d5be:	beq.n	d5b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    d5c0:	add	r7, r1
    d5c2:	b.n	d5c8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    d5c4:	cmp	r7, r4
    d5c6:	beq.n	d5b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    d5c8:	ldr	r3, [r6, #0]
    d5ca:	mov	r2, r5
    d5cc:	mov	r1, r4
    d5ce:	ldr	r3, [r3, #12]
    d5d0:	mov	r0, r6
    d5d2:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    d5d4:	adds	r4, #1
    d5d6:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    d5da:	cmp	r0, #0
    d5dc:	bne.n	d5c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    d5de:	movs	r0, #0
    d5e0:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    d5e2:	ldr	r0, [pc, #24]	; (d5fc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    d5e4:	bl	d028 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d5e8:	cmp	r0, #0
    d5ea:	bne.n	d5b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5ec:	ldr	r1, [pc, #16]	; (d600 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    d5ee:	ldr	r3, [pc, #20]	; (d604 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5f0:	movs	r4, #12
  m_errorLine = line;
    d5f2:	movw	r2, #909	; 0x38d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d5f6:	strb	r4, [r1, #0]
  m_errorLine = line;
    d5f8:	str	r2, [r3, #0]
    d5fa:	pop	{r3, r4, r5, r6, r7, pc}
    d5fc:	.word	0x123a0037
    d600:	.word	0x1fff0b5c
    d604:	.word	0x20006b4c

0000d608 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    d608:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    d60a:	ldr	r3, [pc, #160]	; (d6ac <SdioCard::readData(unsigned char*)+0xa4>)
    d60c:	ldr	r3, [r3, #0]
    d60e:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    d610:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    d612:	bmi.n	d632 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d614:	ldr	r3, [pc, #152]	; (d6b0 <SdioCard::readData(unsigned char*)+0xa8>)
    d616:	ldr	r2, [r3, #0]
    d618:	bic.w	r2, r2, #65536	; 0x10000
    d61c:	str	r2, [r3, #0]
    noInterrupts();
    d61e:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    d620:	ldr	r2, [r3, #0]
    d622:	orr.w	r2, r2, #131072	; 0x20000
    d626:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d628:	ldr	r2, [r3, #0]
    d62a:	orr.w	r2, r2, #65536	; 0x10000
    d62e:	str	r2, [r3, #0]
    interrupts();
    d630:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    d632:	ldr	r0, [pc, #128]	; (d6b4 <SdioCard::readData(unsigned char*)+0xac>)
    d634:	bl	cebc <waitTimeout(bool (*)())>
    d638:	cmp	r0, #0
    d63a:	bne.n	d69a <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    d63c:	ldr	r4, [pc, #108]	; (d6ac <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    d63e:	ldr	r0, [pc, #120]	; (d6b8 <SdioCard::readData(unsigned char*)+0xb0>)
    d640:	subs	r3, r5, #4
    d642:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    d646:	ldr	r2, [r4, #0]
    d648:	lsls	r1, r2, #20
    d64a:	bpl.n	d646 <SdioCard::readData(unsigned char*)+0x3e>
    d64c:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    d650:	ldr	r2, [r0, #0]
    d652:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    d656:	cmp	r1, r3
    d658:	bne.n	d650 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    d65a:	cmp	r5, r1
    d65c:	mov	r3, r1
    d65e:	bne.n	d646 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    d660:	ldr	r0, [pc, #88]	; (d6bc <SdioCard::readData(unsigned char*)+0xb4>)
    d662:	bl	cebc <waitTimeout(bool (*)())>
    d666:	cbnz	r0, d688 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    d668:	ldr	r2, [pc, #84]	; (d6c0 <SdioCard::readData(unsigned char*)+0xb8>)
    d66a:	ldr	r3, [pc, #88]	; (d6c4 <SdioCard::readData(unsigned char*)+0xbc>)
    d66c:	ldr	r1, [r2, #0]
    d66e:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    d670:	ldr	r1, [r3, #0]
    d672:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    d674:	ldr	r2, [r3, #0]
    d676:	lsls	r2, r2, #30
    d678:	bpl.n	d6aa <SdioCard::readData(unsigned char*)+0xa2>
    d67a:	ldr	r3, [r3, #0]
    d67c:	ldr	r0, [pc, #72]	; (d6c8 <SdioCard::readData(unsigned char*)+0xc0>)
    d67e:	ands	r0, r3
    d680:	clz	r0, r0
    d684:	lsrs	r0, r0, #5
    d686:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d688:	ldr	r1, [pc, #64]	; (d6cc <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    d68a:	ldr	r3, [pc, #68]	; (d6d0 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d68c:	movs	r0, #29
  m_errorLine = line;
    d68e:	movw	r2, #843	; 0x34b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d692:	strb	r0, [r1, #0]
  m_errorLine = line;
    d694:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    d696:	movs	r0, #0
    d698:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d69a:	ldr	r1, [pc, #48]	; (d6cc <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    d69c:	ldr	r3, [pc, #48]	; (d6d0 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d69e:	movs	r0, #26
  m_errorLine = line;
    d6a0:	mov.w	r2, #832	; 0x340
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d6a4:	strb	r0, [r1, #0]
  m_errorLine = line;
    d6a6:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    d6a8:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    d6aa:	pop	{r3, r4, r5, pc}
    d6ac:	.word	0x400b1024
    d6b0:	.word	0x400b1028
    d6b4:	.word	0x0000ce19
    d6b8:	.word	0x400b1020
    d6bc:	.word	0x0000ce41
    d6c0:	.word	0x400b1030
    d6c4:	.word	0x20006b30
    d6c8:	.word	0x117f0000
    d6cc:	.word	0x1fff0b5c
    d6d0:	.word	0x20006b4c

0000d6d4 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    d6d4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    d6d6:	ldr	r0, [pc, #80]	; (d728 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    d6d8:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    d6da:	bl	cee4 <yieldTimeout(bool (*)())>
    d6de:	cbnz	r0, d714 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d6e0:	ldr	r2, [pc, #72]	; (d72c <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d6e2:	ldr	r1, [pc, #76]	; (d730 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d6e4:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    d6e6:	ldr	r0, [pc, #76]	; (d734 <SdioCard::readStart(unsigned long)+0x60>)
    d6e8:	ldr	r5, [pc, #76]	; (d738 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    d6ea:	orr.w	r3, r3, #65536	; 0x10000
    d6ee:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d6f0:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
    d6f2:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d6f4:	cbnz	r3, d710 <SdioCard::readStart(unsigned long)+0x3c>
    d6f6:	lsls	r1, r4, #9
    d6f8:	ldr	r0, [pc, #64]	; (d73c <SdioCard::readStart(unsigned long)+0x68>)
    d6fa:	bl	cf60 <cardCommand(unsigned long, unsigned long)>
    d6fe:	cbnz	r0, d70e <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d700:	ldr	r1, [pc, #60]	; (d740 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    d702:	ldr	r3, [pc, #64]	; (d744 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d704:	movs	r4, #12
  m_errorLine = line;
    d706:	movw	r2, #937	; 0x3a9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d70a:	strb	r4, [r1, #0]
  m_errorLine = line;
    d70c:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    d70e:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    d710:	mov	r1, r4
    d712:	b.n	d6f8 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d714:	ldr	r1, [pc, #40]	; (d740 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    d716:	ldr	r3, [pc, #44]	; (d744 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d718:	movs	r0, #10
  m_errorLine = line;
    d71a:	movw	r2, #925	; 0x39d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d71e:	strb	r0, [r1, #0]
  m_errorLine = line;
    d720:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    d722:	movs	r0, #0
    d724:	pop	{r3, r4, r5, pc}
    d726:	nop
    d728:	.word	0x0000cfbd
    d72c:	.word	0x400b1028
    d730:	.word	0x20006b20
    d734:	.word	0x400b1004
    d738:	.word	0xffff0200
    d73c:	.word	0x123a0032
    d740:	.word	0x1fff0b5c
    d744:	.word	0x20006b4c

0000d748 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    d748:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    d74a:	ldrb	r3, [r0, #8]
    d74c:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    d74e:	sub.w	sp, sp, #512	; 0x200
    d752:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    d754:	bpl.n	d77c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    d756:	lsls	r3, r2, #30
    d758:	beq.n	d7a0 <SdioCard::readSector(unsigned long, unsigned char*)+0x58>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    d75a:	mov	r2, sp
    d75c:	movs	r3, #1
    d75e:	ldr	r0, [pc, #196]	; (d824 <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    d760:	bl	d028 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d764:	cbz	r0, d7ac <SdioCard::readSector(unsigned long, unsigned char*)+0x64>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    d766:	mov	r1, sp
    d768:	mov	r0, r5
    d76a:	mov.w	r2, #512	; 0x200
    d76e:	bl	db90 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    d772:	movs	r5, #1
}
    d774:	mov	r0, r5
    d776:	add.w	sp, sp, #512	; 0x200
    d77a:	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d77c:	ldr	r3, [pc, #168]	; (d828 <SdioCard::readSector(unsigned long, unsigned char*)+0xe0>)
    d77e:	ldrb	r3, [r3, #0]
    d780:	mov	r4, r0
    d782:	mov	r6, r1
    d784:	cbnz	r3, d7d8 <SdioCard::readSector(unsigned long, unsigned char*)+0x90>
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    d786:	ldrb	r3, [r4, #9]
    d788:	cmp	r3, #1
    d78a:	beq.n	d7c4 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    d78c:	ldr	r3, [r4, #0]
    d78e:	mov	r0, r4
    d790:	ldr	r3, [r3, #24]
    d792:	blx	r3
    d794:	cbnz	r0, d7e4 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    d796:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    d798:	mov	r0, r5
    d79a:	add.w	sp, sp, #512	; 0x200
    d79e:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    d7a0:	movs	r3, #1
    d7a2:	ldr	r0, [pc, #128]	; (d824 <SdioCard::readSector(unsigned long, unsigned char*)+0xdc>)
    d7a4:	bl	d028 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    d7a8:	cmp	r0, #0
    d7aa:	bne.n	d772 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d7ac:	ldr	r1, [pc, #124]	; (d82c <SdioCard::readSector(unsigned long, unsigned char*)+0xe4>)
  m_errorLine = line;
    d7ae:	ldr	r3, [pc, #128]	; (d830 <SdioCard::readSector(unsigned long, unsigned char*)+0xe8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d7b0:	movs	r0, #11
  m_errorLine = line;
    d7b2:	movw	r2, #862	; 0x35e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d7b6:	strb	r0, [r1, #0]
  m_errorLine = line;
    d7b8:	str	r2, [r3, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    d7ba:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    d7bc:	mov	r0, r5
    d7be:	add.w	sp, sp, #512	; 0x200
    d7c2:	pop	{r4, r5, r6, pc}
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    d7c4:	ldr	r3, [r4, #4]
    d7c6:	cmp	r6, r3
    d7c8:	beq.n	d7f6 <SdioCard::readSector(unsigned long, unsigned char*)+0xae>
      if (!syncDevice()) {
    d7ca:	ldr	r3, [r4, #0]
    d7cc:	mov	r0, r4
    d7ce:	ldr	r3, [r3, #24]
    d7d0:	blx	r3
    d7d2:	cmp	r0, #0
    d7d4:	beq.n	d796 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    d7d6:	b.n	d7e4 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
    d7d8:	bl	d234 <waitTransferComplete() [clone .part.8]>
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    d7dc:	cmp	r0, #0
    d7de:	bne.n	d786 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
      return false;
    d7e0:	movs	r5, #0
    d7e2:	b.n	d798 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    d7e4:	mov	r1, r6
    d7e6:	mov	r0, r4
    d7e8:	bl	d6d4 <SdioCard::readStart(unsigned long)>
    d7ec:	cmp	r0, #0
    d7ee:	beq.n	d796 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    d7f0:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    d7f2:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    d7f4:	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    d7f6:	mov	r1, r5
    d7f8:	mov	r0, r4
    d7fa:	bl	d608 <SdioCard::readData(unsigned char*)>
    d7fe:	mov	r5, r0
    d800:	cmp	r0, #0
    d802:	beq.n	d796 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    d804:	ldr	r3, [pc, #44]	; (d834 <SdioCard::readSector(unsigned long, unsigned char*)+0xec>)
    d806:	ldr	r3, [r3, #0]
    d808:	lsrs	r3, r3, #16
    d80a:	lsls	r3, r3, #16
    d80c:	cbz	r3, d816 <SdioCard::readSector(unsigned long, unsigned char*)+0xce>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    d80e:	ldr	r3, [r4, #4]
    d810:	adds	r3, #1
    d812:	str	r3, [r4, #4]
    d814:	b.n	d7bc <SdioCard::readSector(unsigned long, unsigned char*)+0x74>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    d816:	ldr	r3, [r4, #0]
    d818:	mov	r0, r4
    d81a:	ldr	r3, [r3, #24]
    d81c:	blx	r3
    d81e:	cmp	r0, #0
    d820:	bne.n	d80e <SdioCard::readSector(unsigned long, unsigned char*)+0xc6>
    d822:	b.n	d796 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    d824:	.word	0x113a0011
    d828:	.word	0x20006b2c
    d82c:	.word	0x1fff0b5c
    d830:	.word	0x20006b4c
    d834:	.word	0x400b1004

0000d838 <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    d838:	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d83a:	ldr	r2, [pc, #80]	; (d88c <SdioCard::stopTransmission(bool)+0x54>)
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    d83c:	movs	r5, #0
    d83e:	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d840:	ldr	r3, [r2, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d842:	ldr	r0, [pc, #76]	; (d890 <SdioCard::stopTransmission(bool)+0x58>)
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d844:	bic.w	r3, r3, #65536	; 0x10000
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    d848:	mov	r6, r1
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    d84a:	str	r3, [r2, #0]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    d84c:	mov	r1, r5
    d84e:	bl	cf60 <cardCommand(unsigned long, unsigned long)>
    d852:	mov	r4, r0
    d854:	cbz	r0, d87a <SdioCard::stopTransmission(bool)+0x42>
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    d856:	cbnz	r6, d85c <SdioCard::stopTransmission(bool)+0x24>
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d858:	mov	r0, r4
    d85a:	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
    d85c:	ldr	r0, [pc, #52]	; (d894 <SdioCard::stopTransmission(bool)+0x5c>)
    d85e:	bl	cee4 <yieldTimeout(bool (*)())>
    d862:	cmp	r0, #0
    d864:	beq.n	d858 <SdioCard::stopTransmission(bool)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d866:	ldr	r1, [pc, #48]	; (d898 <SdioCard::stopTransmission(bool)+0x60>)
  m_errorLine = line;
    d868:	ldr	r3, [pc, #48]	; (d89c <SdioCard::stopTransmission(bool)+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d86a:	movs	r0, #10
  m_errorLine = line;
    d86c:	movw	r2, #963	; 0x3c3
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    d870:	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d872:	strb	r0, [r1, #0]
  m_errorLine = line;
    d874:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d876:	mov	r0, r4
    d878:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d87a:	ldr	r1, [pc, #28]	; (d898 <SdioCard::stopTransmission(bool)+0x60>)
  m_errorLine = line;
    d87c:	ldr	r3, [pc, #28]	; (d89c <SdioCard::stopTransmission(bool)+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d87e:	movs	r0, #9
  m_errorLine = line;
    d880:	movw	r2, #959	; 0x3bf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    d884:	strb	r0, [r1, #0]
  m_errorLine = line;
    d886:	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    d888:	mov	r0, r4
    d88a:	pop	{r4, r5, r6, pc}
    d88c:	.word	0x400b1028
    d890:	.word	0x0cdb0000
    d894:	.word	0x0000cdf9
    d898:	.word	0x1fff0b5c
    d89c:	.word	0x20006b4c

0000d8a0 <SdioCard::isBusy()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
    d8a0:	push	{r4, r5, r6, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    d8a2:	ldrb	r3, [r0, #8]
    d8a4:	ands.w	r3, r3, #1
    d8a8:	beq.n	d8b6 <SdioCard::isBusy()+0x16>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d8aa:	ldr	r3, [pc, #88]	; (d904 <SdioCard::isBusy()+0x64>)
    d8ac:	ldr	r3, [r3, #0]
    d8ae:	cbz	r3, d8e8 <SdioCard::isBusy()+0x48>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d8b0:	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d8b4:	bx	r3
  } else {
    if (m_transferActive) {
    d8b6:	ldr	r2, [pc, #80]	; (d908 <SdioCard::isBusy()+0x68>)
    d8b8:	ldrb	r4, [r2, #0]
    d8ba:	cbnz	r4, d8cc <SdioCard::isBusy()+0x2c>
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    d8bc:	ldr	r3, [pc, #76]	; (d90c <SdioCard::isBusy()+0x6c>)
    d8be:	ldr	r4, [r3, #0]
    d8c0:	eor.w	r4, r4, #16777216	; 0x1000000
    d8c4:	ubfx	r4, r4, #24, #1
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d8c8:	mov	r0, r4
    d8ca:	pop	{r4, r5, r6, pc}
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    d8cc:	ldr	r5, [pc, #64]	; (d910 <SdioCard::isBusy()+0x70>)
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    d8ce:	ldr	r1, [pc, #68]	; (d914 <SdioCard::isBusy()+0x74>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    d8d0:	ldr	r5, [r5, #0]
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    d8d2:	ands	r1, r5
    d8d4:	cmp	r1, #0
    d8d6:	beq.n	d8c8 <SdioCard::isBusy()+0x28>
        return true;
      }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
    d8d8:	ldr	r1, [pc, #60]	; (d918 <SdioCard::isBusy()+0x78>)
    d8da:	ldr	r5, [r1, #0]
    d8dc:	lsrs	r5, r5, #16
    d8de:	lsls	r5, r5, #16
    d8e0:	cbz	r5, d8f8 <SdioCard::isBusy()+0x58>
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d8e2:	mov	r4, r3
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d8e4:	mov	r0, r4
    d8e6:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d8e8:	ldr	r3, [pc, #48]	; (d91c <SdioCard::isBusy()+0x7c>)
    d8ea:	ldrb	r4, [r3, #0]
    d8ec:	cmp	r4, #0
    d8ee:	beq.n	d8c8 <SdioCard::isBusy()+0x28>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    d8f0:	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    d8f4:	b.w	cfbc <isBusyCMD13()>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
        return false;
      }
      m_transferActive = false;
      stopTransmission(false);
    d8f8:	mov	r1, r5
      }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
      if ((SDHC_BLKATTR & 0XFFFF0000) != 0) {
        return false;
      }
      m_transferActive = false;
    d8fa:	strb	r5, [r2, #0]
      stopTransmission(false);
    d8fc:	bl	d838 <SdioCard::stopTransmission(bool)>
    d900:	b.n	d8c8 <SdioCard::isBusy()+0x28>
    d902:	nop
    d904:	.word	0x20006b1c
    d908:	.word	0x20006b2c
    d90c:	.word	0x400b1024
    d910:	.word	0x400b1030
    d914:	.word	0x117f0002
    d918:	.word	0x400b1004
    d91c:	.word	0x20006b34

0000d920 <SdioCard::syncDevice()>:
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d920:	ldr	r3, [pc, #36]	; (d948 <SdioCard::syncDevice()+0x28>)
    d922:	ldrb	r3, [r3, #0]
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    d924:	push	{r4, lr}
    d926:	mov	r4, r0
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    d928:	cbnz	r3, d93e <SdioCard::syncDevice()+0x1e>
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    d92a:	ldrb	r3, [r4, #9]
    d92c:	cbnz	r3, d932 <SdioCard::syncDevice()+0x12>
    if (!writeStop()) {
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
    d92e:	movs	r0, #1
    d930:	pop	{r4, pc}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    d932:	mov	r0, r4
    d934:	movs	r1, #1
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    d936:	ldmia.w	sp!, {r4, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    d93a:	b.w	d838 <SdioCard::stopTransmission(bool)>
    d93e:	bl	d234 <waitTransferComplete() [clone .part.8]>
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    d942:	cmp	r0, #0
    d944:	bne.n	d92a <SdioCard::syncDevice()+0xa>
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    d946:	pop	{r4, pc}
    d948:	.word	0x20006b2c

0000d94c <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    d94c:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    d94e:	ldr	r3, [r0, #0]
    d950:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    d952:	ldrb	r1, [r3, #11]
    d954:	cbz	r1, d996 <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    d956:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    d958:	ldrb	r1, [r3, #11]
    d95a:	lsls	r0, r1, #31
    d95c:	bpl.n	d96c <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    d95e:	ldr	r0, [pc, #100]	; (d9c4 <SdSpiArduinoDriver::activate()+0x78>)
    d960:	ldr	r1, [r3, #12]
    d962:	ldr	r4, [r0, #0]
    d964:	ands	r1, r4
    d966:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    d968:	str	r1, [r0, #0]
    d96a:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    d96c:	lsls	r4, r1, #30
    d96e:	bpl.n	d97e <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    d970:	ldr	r0, [pc, #84]	; (d9c8 <SdSpiArduinoDriver::activate()+0x7c>)
    d972:	ldr	r1, [r3, #16]
    d974:	ldr	r4, [r0, #0]
    d976:	ands	r1, r4
    d978:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    d97a:	str	r1, [r0, #0]
    d97c:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    d97e:	lsls	r0, r1, #29
    d980:	bpl.n	d990 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    d982:	ldr	r0, [pc, #72]	; (d9cc <SdSpiArduinoDriver::activate()+0x80>)
    d984:	ldr	r1, [r3, #20]
    d986:	ldr	r4, [r0, #0]
    d988:	ands	r1, r4
    d98a:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    d98c:	str	r1, [r0, #0]
    d98e:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    d990:	lsls	r1, r1, #28
    d992:	bmi.n	d9b4 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    d994:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    d996:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    d998:	ldr	r1, [r3, #12]
    d99a:	cmp	r1, r2
    d99c:	beq.n	d9ae <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    d99e:	ldr	r0, [pc, #48]	; (d9d0 <SdSpiArduinoDriver::activate()+0x84>)
    d9a0:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    d9a2:	ldr	r1, [pc, #48]	; (d9d4 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    d9a4:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    d9a6:	orr.w	r0, r2, #1073741824	; 0x40000000
    d9aa:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    d9ac:	str	r1, [r3, #0]
}
    d9ae:	ldr.w	r4, [sp], #4
    d9b2:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    d9b4:	ldr	r0, [pc, #32]	; (d9d8 <SdSpiArduinoDriver::activate()+0x8c>)
    d9b6:	ldr	r1, [r3, #24]
    d9b8:	ldr	r4, [r0, #0]
    d9ba:	ands	r1, r4
    d9bc:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    d9be:	str	r1, [r0, #0]
    d9c0:	b.n	d994 <SdSpiArduinoDriver::activate()+0x48>
    d9c2:	nop
    d9c4:	.word	0xe000e180
    d9c8:	.word	0xe000e184
    d9cc:	.word	0xe000e188
    d9d0:	.word	0x003f4001
    d9d4:	.word	0x803f0000
    d9d8:	.word	0xe000e18c

0000d9dc <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    d9dc:	push	{r4, lr}
    d9de:	sub	sp, #16
    d9e0:	add	r4, sp, #16
    d9e2:	stmdb	r4, {r1, r2, r3}
    d9e6:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    d9e8:	cbz	r3, d9f8 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1c>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    d9ea:	str	r3, [r0, #0]
    d9ec:	mov	r0, r3
  }
  m_spi->begin();
}
    d9ee:	add	sp, #16
    d9f0:	ldmia.w	sp!, {r4, lr}
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    d9f4:	b.w	7bfc <SPIClass::begin()>
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
  if (spiConfig.spiPort) {
    m_spi = spiConfig.spiPort;
#if defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else if (spiConfig.csPin == SDCARD_SS_PIN) {
    d9f8:	ldrb.w	r3, [sp, #4]
    d9fc:	cmp	r3, #62	; 0x3e
    d9fe:	beq.n	da04 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x28>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    da00:	ldr	r3, [pc, #32]	; (da24 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x48>)
    da02:	b.n	d9ea <SdSpiArduinoDriver::begin(SdSpiConfig)+0xe>
    da04:	mov	r4, r0
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
  if (spiConfig.spiPort) {
    m_spi = spiConfig.spiPort;
#if defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else if (spiConfig.csPin == SDCARD_SS_PIN) {
    m_spi = &SDCARD_SPI;
    da06:	ldr	r0, [pc, #32]	; (da28 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x4c>)
    da08:	str	r0, [r4, #0]
    m_spi->setMISO(SDCARD_MISO_PIN);
    da0a:	movs	r1, #59	; 0x3b
    da0c:	bl	7d1c <SPIClass::setMISO(unsigned char)>
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    da10:	movs	r1, #61	; 0x3d
    da12:	ldr	r0, [r4, #0]
    da14:	bl	7c78 <SPIClass::setMOSI(unsigned char)>
    m_spi->setSCK(SDCARD_SCK_PIN);
    da18:	ldr	r0, [r4, #0]
    da1a:	movs	r1, #60	; 0x3c
    da1c:	bl	7dbc <SPIClass::setSCK(unsigned char)>
    da20:	ldr	r0, [r4, #0]
    da22:	b.n	d9ee <SdSpiArduinoDriver::begin(SdSpiConfig)+0x12>
    da24:	.word	0x1fff0994
    da28:	.word	0x1fff09d4

0000da2c <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    da2c:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    da2e:	ldrb	r3, [r2, #11]
    da30:	cbz	r3, da60 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    da32:	lsls	r1, r3, #31
    da34:	bpl.n	da3e <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    da36:	ldr	r3, [pc, #44]	; (da64 <SdSpiArduinoDriver::deactivate()+0x38>)
    da38:	ldr	r1, [r2, #28]
    da3a:	str	r1, [r3, #0]
    da3c:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    da3e:	lsls	r0, r3, #30
    da40:	bpl.n	da4a <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    da42:	ldr	r3, [pc, #36]	; (da68 <SdSpiArduinoDriver::deactivate()+0x3c>)
    da44:	ldr	r1, [r2, #32]
    da46:	str	r1, [r3, #0]
    da48:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    da4a:	lsls	r1, r3, #29
    da4c:	bpl.n	da56 <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    da4e:	ldr	r3, [pc, #28]	; (da6c <SdSpiArduinoDriver::deactivate()+0x40>)
    da50:	ldr	r1, [r2, #36]	; 0x24
    da52:	str	r1, [r3, #0]
    da54:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    da56:	lsls	r3, r3, #28
    da58:	bpl.n	da60 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    da5a:	ldr	r3, [pc, #20]	; (da70 <SdSpiArduinoDriver::deactivate()+0x44>)
    da5c:	ldr	r2, [r2, #40]	; 0x28
    da5e:	str	r2, [r3, #0]
    da60:	bx	lr
    da62:	nop
    da64:	.word	0xe000e100
    da68:	.word	0xe000e104
    da6c:	.word	0xe000e108
    da70:	.word	0xe000e10c

0000da74 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    da74:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    da76:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    da78:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    da7c:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    da7e:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    da80:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    da82:	ldr	r3, [r2, #44]	; 0x2c
    da84:	cmp	r3, #0
    da86:	bge.n	da82 <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    da88:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    da8a:	uxtb	r0, r0
    da8c:	bx	lr
    da8e:	nop

0000da90 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    da90:	push	{r4, r5, r6, lr}
    da92:	mov	r5, r0
    da94:	mov	r4, r1
    da96:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    da98:	mov	r0, r1
    da9a:	movs	r1, #255	; 0xff
    da9c:	bl	1109c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    daa0:	ldr	r0, [r5, #0]
    daa2:	mov	r3, r6
    daa4:	mov	r2, r4
    daa6:	mov	r1, r4
    daa8:	bl	7e6c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    daac:	movs	r0, #0
    daae:	pop	{r4, r5, r6, pc}

0000dab0 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    dab0:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    dab2:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    dab4:	mov.w	r3, #2147483648	; 0x80000000
    dab8:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    daba:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    dabc:	ldr	r3, [r2, #44]	; 0x2c
    dabe:	cmp	r3, #0
    dac0:	bge.n	dabc <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    dac2:	ldr	r3, [r2, #56]	; 0x38
    dac4:	bx	lr
    dac6:	nop

0000dac8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    dac8:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    daca:	subs	r5, r2, #1
    dacc:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    dad0:	sub.w	sp, sp, #516	; 0x204
    dad4:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    dad6:	bcc.n	dafe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    dad8:	cbz	r2, daf8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    dada:	ldr	r2, [r0, #0]
    dadc:	ldr	r2, [r2, #0]
    dade:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    dae0:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    dae4:	ldrb.w	r3, [r1], #1
    dae8:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    daea:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    daec:	ldr	r3, [r2, #44]	; 0x2c
    daee:	cmp	r3, #0
    daf0:	bge.n	daec <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    daf2:	cmp	r1, r0
		return port().POPR;
    daf4:	ldr	r3, [r2, #56]	; 0x38
    daf6:	bne.n	dae4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    daf8:	add.w	sp, sp, #516	; 0x204
    dafc:	pop	{r4, r5, pc}
    dafe:	mov	r5, r0
    db00:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    db02:	mov	r0, sp
    db04:	bl	db90 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    db08:	mov	r3, r4
    db0a:	mov	r2, sp
    db0c:	mov	r1, sp
    db0e:	ldr	r0, [r5, #0]
    db10:	bl	7e6c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    db14:	add.w	sp, sp, #516	; 0x204
    db18:	pop	{r4, r5, pc}
    db1a:	nop

0000db1c <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    db1c:	movs	r1, #1
    db1e:	b.w	e708 <pinMode>
    db22:	nop

0000db24 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    db24:	b.w	e6fc <digitalWrite>

0000db28 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    db28:	bx	lr
    db2a:	nop

0000db2c <_GLOBAL__sub_I_SD>:
 */

#include <Arduino.h>
#include <SD.h>

SDClass SD;
    db2c:	push	{r4, r5, r6, r7}
{
public:
	SDClass() { }
    db2e:	ldr	r3, [pc, #68]	; (db74 <_GLOBAL__sub_I_SD+0x48>)
    db30:	ldr	r5, [pc, #68]	; (db78 <_GLOBAL__sub_I_SD+0x4c>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    db32:	ldr	r4, [pc, #72]	; (db7c <_GLOBAL__sub_I_SD+0x50>)
    db34:	str	r5, [r3, #0]
    db36:	str.w	r4, [r3, #1184]	; 0x4a0
    db3a:	movs	r5, #41	; 0x29
    db3c:	movs	r4, #0
    db3e:	ldr	r0, [pc, #64]	; (db80 <_GLOBAL__sub_I_SD+0x54>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    db40:	ldr	r7, [pc, #64]	; (db84 <_GLOBAL__sub_I_SD+0x58>)
    db42:	strb.w	r5, [r3, #1203]	; 0x4b3
    db46:	movs	r6, #1
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    db48:	strb.w	r4, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    db4c:	strb.w	r4, [r3, #1181]	; 0x49d
    db50:	strb.w	r4, [r3, #1206]	; 0x4b6
    db54:	str.w	r0, [r3, #1172]	; 0x494
    db58:	str.w	r7, [r3, #1192]	; 0x4a8
    db5c:	strb.w	r6, [r3, #1201]	; 0x4b1
    db60:	str.w	r4, [r3, #1156]	; 0x484
    db64:	str.w	r4, [r3, #1160]	; 0x488
    db68:	ldr	r2, [pc, #28]	; (db88 <_GLOBAL__sub_I_SD+0x5c>)
    db6a:	ldr	r1, [pc, #32]	; (db8c <_GLOBAL__sub_I_SD+0x60>)
    db6c:	mov	r0, r3
    db6e:	pop	{r4, r5, r6, r7}
    db70:	b.w	fb40 <__aeabi_atexit>
    db74:	.word	0x20006b50
    db78:	.word	0x00014c9c
    db7c:	.word	0x000151f8
    db80:	.word	0x00015250
    db84:	.word	0x38002003
    db88:	.word	0x1fff0970
    db8c:	.word	0x0000db29

0000db90 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    db90:	push	{r0}
#endif
	orr	r3, r1, r0
    db92:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    db96:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    db9a:	bne.n	dc7c <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    db9c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    db9e:	bcc.n	dc24 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    dba0:	ldr.w	r3, [r1], #4
    dba4:	str.w	r3, [r0], #4
    dba8:	ldr.w	r3, [r1], #4
    dbac:	str.w	r3, [r0], #4
    dbb0:	ldr.w	r3, [r1], #4
    dbb4:	str.w	r3, [r0], #4
    dbb8:	ldr.w	r3, [r1], #4
    dbbc:	str.w	r3, [r0], #4
    dbc0:	ldr.w	r3, [r1], #4
    dbc4:	str.w	r3, [r0], #4
    dbc8:	ldr.w	r3, [r1], #4
    dbcc:	str.w	r3, [r0], #4
    dbd0:	ldr.w	r3, [r1], #4
    dbd4:	str.w	r3, [r0], #4
    dbd8:	ldr.w	r3, [r1], #4
    dbdc:	str.w	r3, [r0], #4
    dbe0:	ldr.w	r3, [r1], #4
    dbe4:	str.w	r3, [r0], #4
    dbe8:	ldr.w	r3, [r1], #4
    dbec:	str.w	r3, [r0], #4
    dbf0:	ldr.w	r3, [r1], #4
    dbf4:	str.w	r3, [r0], #4
    dbf8:	ldr.w	r3, [r1], #4
    dbfc:	str.w	r3, [r0], #4
    dc00:	ldr.w	r3, [r1], #4
    dc04:	str.w	r3, [r0], #4
    dc08:	ldr.w	r3, [r1], #4
    dc0c:	str.w	r3, [r0], #4
    dc10:	ldr.w	r3, [r1], #4
    dc14:	str.w	r3, [r0], #4
    dc18:	ldr.w	r3, [r1], #4
    dc1c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    dc20:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    dc22:	bcs.n	dba0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    dc24:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    dc26:	bcc.n	dc4c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    dc28:	ldr.w	r3, [r1], #4
    dc2c:	str.w	r3, [r0], #4
    dc30:	ldr.w	r3, [r1], #4
    dc34:	str.w	r3, [r0], #4
    dc38:	ldr.w	r3, [r1], #4
    dc3c:	str.w	r3, [r0], #4
    dc40:	ldr.w	r3, [r1], #4
    dc44:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    dc48:	subs	r2, #16
	bhs	.Lmid_block_loop
    dc4a:	bcs.n	dc28 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    dc4c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    dc4e:	bcc.n	dc5c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    dc50:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    dc54:	str.w	r3, [r0], #4
	subs	r2, #4
    dc58:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    dc5a:	bcs.n	dc50 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    dc5c:	adds	r2, #4
	beq	.Ldone
    dc5e:	beq.n	dc76 <memcpy+0xe6>

	lsls	r2, r2, #31
    dc60:	lsls	r2, r2, #31
	itt ne
    dc62:	itt	ne
	ldrbne  r3, [r1], #1
    dc64:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    dc68:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    dc6c:	bcc.n	dc76 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    dc6e:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    dc70:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    dc72:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    dc74:	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    dc76:	pop	{r0}
#endif
	bx	lr
    dc78:	bx	lr
    dc7a:	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    dc7c:	cmp	r2, #12
	blo	.Lbyte_copy
    dc7e:	bcc.n	dd16 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    dc80:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    dc84:	beq.n	dcaa <memcpy+0x11a>

	rsb	r3, #4
    dc86:	rsb	r3, r3, #4
	subs	r2, r3
    dc8a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    dc8c:	lsls	r3, r3, #31
	itt ne
    dc8e:	itt	ne
	ldrbne  r3, [r1], #1
    dc90:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    dc94:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    dc98:	bcc.n	dcaa <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    dc9a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    dc9e:	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    dca2:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    dca6:	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    dcaa:	ands.w	r3, r1, #3
	beq	.Lbig_block
    dcae:	beq.w	db9c <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    dcb2:	push	{r4, r5}
	subs	r2, #4
    dcb4:	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    dcb6:	subs	r1, r1, r3
	rsb	ip, r3, #4
    dcb8:	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    dcbc:	ldr.w	r4, [r1], #4

	cmp	r3, #2
    dcc0:	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    dcc2:	beq.n	dcf8 <memcpy+0x168>
	cmp	r3, #3
    dcc4:	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    dcc6:	beq.n	dce0 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    dcc8:	lsrs	r4, r4, #8
    dcca:	ldr.w	r3, [r1], #4
    dcce:	lsls	r5, r3, #24
    dcd0:	orr.w	r4, r4, r5
    dcd4:	str.w	r4, [r0], #4
    dcd8:	mov	r4, r3
    dcda:	subs	r2, #4
    dcdc:	bcs.n	dcc8 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    dcde:	b.n	dd0e <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    dce0:	lsrs	r4, r4, #24
    dce2:	ldr.w	r3, [r1], #4
    dce6:	lsls	r5, r3, #8
    dce8:	orr.w	r4, r4, r5
    dcec:	str.w	r4, [r0], #4
    dcf0:	mov	r4, r3
    dcf2:	subs	r2, #4
    dcf4:	bcs.n	dce0 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    dcf6:	b.n	dd0e <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    dcf8:	lsrs	r4, r4, #16
    dcfa:	ldr.w	r3, [r1], #4
    dcfe:	lsls	r5, r3, #16
    dd00:	orr.w	r4, r4, r5
    dd04:	str.w	r4, [r0], #4
    dd08:	mov	r4, r3
    dd0a:	subs	r2, #4
    dd0c:	bcs.n	dcf8 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    dd0e:	adds	r2, #4
	subs	r1, ip
    dd10:	subs.w	r1, r1, ip
	pop	{r4, r5}
    dd14:	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    dd16:	subs	r2, #4
	blo	.Lcopy_less_than_4
    dd18:	bcc.n	dc5c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    dd1a:	subs	r2, #1
	ldrb    r3, [r1], #1
    dd1c:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    dd20:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    dd24:	bcs.n	dd1a <memcpy+0x18a>

	ldrb	r3, [r1]
    dd26:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    dd28:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    dd2a:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    dd2c:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    dd2e:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    dd30:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    dd32:	pop	{r0}
#endif
	bx	lr
    dd34:	bx	lr
    dd36:	nop

0000dd38 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    dd38:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    dd3a:	ldr	r5, [pc, #60]	; (dd78 <usb_serial_getchar+0x40>)
    dd3c:	ldr	r0, [r5, #0]
    dd3e:	cbz	r0, dd60 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    dd40:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    dd42:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    dd44:	adds	r1, r0, r3
    dd46:	adds	r3, #1
	if (i >= rx_packet->len) {
    dd48:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    dd4a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    dd4c:	bcs.n	dd54 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    dd4e:	strh	r3, [r0, #2]
	}
	return c;
    dd50:	mov	r0, r4
}
    dd52:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    dd54:	bl	e9a8 <usb_free>
		rx_packet = NULL;
    dd58:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    dd5a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    dd5c:	str	r3, [r5, #0]
    dd5e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    dd60:	ldr	r3, [pc, #24]	; (dd7c <usb_serial_getchar+0x44>)
    dd62:	ldrb	r3, [r3, #0]
    dd64:	cbz	r3, dd72 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    dd66:	movs	r0, #2
    dd68:	bl	e9f4 <usb_rx>
    dd6c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    dd6e:	cmp	r0, #0
    dd70:	bne.n	dd40 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    dd72:	mov.w	r0, #4294967295
    dd76:	pop	{r3, r4, r5, pc}
    dd78:	.word	0x20007014
    dd7c:	.word	0x20007120

0000dd80 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    dd80:	push	{r4, lr}
	if (!rx_packet) {
    dd82:	ldr	r4, [pc, #36]	; (dda8 <usb_serial_peekchar+0x28>)
    dd84:	ldr	r0, [r4, #0]
    dd86:	cbz	r0, dd90 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    dd88:	ldrh	r3, [r0, #2]
    dd8a:	add	r0, r3
    dd8c:	ldrb	r0, [r0, #8]
}
    dd8e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    dd90:	ldr	r3, [pc, #24]	; (ddac <usb_serial_peekchar+0x2c>)
    dd92:	ldrb	r3, [r3, #0]
    dd94:	cbz	r3, dda2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    dd96:	movs	r0, #2
    dd98:	bl	e9f4 <usb_rx>
    dd9c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    dd9e:	cmp	r0, #0
    dda0:	bne.n	dd88 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    dda2:	mov.w	r0, #4294967295
    dda6:	pop	{r4, pc}
    dda8:	.word	0x20007014
    ddac:	.word	0x20007120

0000ddb0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    ddb0:	ldr	r3, [pc, #16]	; (ddc4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    ddb2:	ldr	r2, [pc, #20]	; (ddc8 <usb_serial_available+0x18>)
    ddb4:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    ddb6:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    ddb8:	cbz	r3, ddc2 <usb_serial_available+0x12>
    ddba:	ldrh	r2, [r3, #0]
    ddbc:	ldrh	r3, [r3, #2]
    ddbe:	subs	r3, r2, r3
    ddc0:	add	r0, r3
	return count;
}
    ddc2:	bx	lr
    ddc4:	.word	0x20007014
    ddc8:	.word	0x200071a8

0000ddcc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    ddcc:	ldr	r3, [pc, #44]	; (ddfc <usb_serial_flush_input+0x30>)
    ddce:	ldrb	r3, [r3, #0]
    ddd0:	cbz	r3, ddfa <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    ddd2:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    ddd4:	ldr	r4, [pc, #40]	; (de00 <usb_serial_flush_input+0x34>)
    ddd6:	ldr	r0, [r4, #0]
    ddd8:	cbz	r0, ddee <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    ddda:	bl	e9a8 <usb_free>
		rx_packet = NULL;
    ddde:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    dde0:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    dde2:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    dde4:	bl	e9f4 <usb_rx>
		if (!rx) break;
    dde8:	cbz	r0, ddf8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    ddea:	bl	e9a8 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    ddee:	movs	r0, #2
    ddf0:	bl	e9f4 <usb_rx>
		if (!rx) break;
    ddf4:	cmp	r0, #0
    ddf6:	bne.n	ddea <usb_serial_flush_input+0x1e>
    ddf8:	pop	{r4, pc}
    ddfa:	bx	lr
    ddfc:	.word	0x20007120
    de00:	.word	0x20007014

0000de04 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    de04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    de08:	ldr.w	r9, [pc, #248]	; df04 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    de0c:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    de0e:	movs	r2, #1
    de10:	strb.w	r2, [r9]
	while (size > 0) {
    de14:	str	r1, [sp, #4]
    de16:	cbz	r1, de74 <usb_serial_write+0x70>
    de18:	ldr.w	r8, [pc, #236]	; df08 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    de1c:	ldr	r7, [pc, #212]	; (def4 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    de1e:	ldr	r6, [sp, #4]
    de20:	mov	fp, r0
		if (!tx_packet) {
    de22:	ldr.w	r0, [r8]
    de26:	cbz	r0, de96 <usb_serial_write+0x92>
    de28:	ldr	r5, [pc, #204]	; (def8 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    de2a:	ldrh	r4, [r0, #2]
    de2c:	rsb	r1, r4, #64	; 0x40
    de30:	cmp	r1, r6
    de32:	it	cs
    de34:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    de36:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    de3a:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    de3c:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    de40:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    de42:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    de44:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    de48:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    de4c:	cbz	r1, de64 <usb_serial_write+0x60>
    de4e:	subs	r4, #1
    de50:	add	r2, r4
    de52:	add	r1, fp
    de54:	ldrb.w	r4, [fp], #1
    de58:	strb.w	r4, [r2, #1]!
    de5c:	cmp	fp, r1
    de5e:	bne.n	de54 <usb_serial_write+0x50>
    de60:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    de64:	cmp.w	lr, #63	; 0x3f
    de68:	bhi.n	de82 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    de6a:	ldr	r2, [pc, #144]	; (defc <usb_serial_write+0xf8>)
    de6c:	movs	r1, #5
    de6e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    de70:	cmp	r6, #0
    de72:	bne.n	de22 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    de74:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    de76:	movs	r3, #0
    de78:	strb.w	r3, [r9]
	return ret;
}
    de7c:	add	sp, #12
    de7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    de82:	movs	r2, #64	; 0x40
    de84:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    de86:	mov	r1, r0
    de88:	movs	r0, #3
    de8a:	bl	eae0 <usb_tx>
			tx_packet = NULL;
    de8e:	movs	r2, #0
    de90:	str.w	r2, [r8]
    de94:	b.n	de6a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    de96:	ldrb	r2, [r7, #0]
    de98:	cbz	r2, dee4 <usb_serial_write+0xe0>
    de9a:	ldr	r4, [pc, #100]	; (df00 <usb_serial_write+0xfc>)
    de9c:	ldr	r5, [pc, #88]	; (def8 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    de9e:	mov.w	sl, #1
    dea2:	b.n	deb4 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    dea4:	subs	r4, #1
    dea6:	beq.n	ded6 <usb_serial_write+0xd2>
    dea8:	ldrb	r2, [r5, #0]
    deaa:	cbnz	r2, ded6 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    deac:	bl	f49c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    deb0:	ldrb	r2, [r7, #0]
    deb2:	cbz	r2, dee4 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    deb4:	movs	r0, #3
    deb6:	bl	ea30 <usb_tx_packet_count>
    deba:	cmp	r0, #7
    debc:	bhi.n	dea4 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    debe:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    dec2:	bl	e968 <usb_malloc>
    dec6:	str.w	r0, [r8]
					if (tx_packet) break;
    deca:	cmp	r0, #0
    decc:	bne.n	de2a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    dece:	ldr	r3, [pc, #52]	; (df04 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    ded0:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    ded2:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    ded4:	bne.n	dea8 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    ded6:	movs	r3, #1
					return -1;
    ded8:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    dedc:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    dede:	add	sp, #12
    dee0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    dee4:	movs	r3, #0
					return -1;
    dee6:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    deea:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    deee:	add	sp, #12
    def0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    def4:	.word	0x20007120
    def8:	.word	0x20007010
    defc:	.word	0x20007008
    df00:	.word	0x00012cc9
    df04:	.word	0x20007009
    df08:	.word	0x2000700c

0000df0c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    df0c:	push	{lr}
    df0e:	sub	sp, #12
    df10:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    df12:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    df14:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    df18:	mov	r0, r3
    df1a:	bl	de04 <usb_serial_write>
}
    df1e:	add	sp, #12
    df20:	ldr.w	pc, [sp], #4

0000df24 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    df24:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    df26:	ldr	r5, [pc, #56]	; (df60 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    df28:	ldr	r4, [pc, #56]	; (df64 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    df2a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    df2c:	movs	r3, #1
    df2e:	strb	r3, [r4, #0]
	if (!tx_packet) {
    df30:	cbz	r0, df3e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    df32:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    df34:	movs	r3, #0
    df36:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    df38:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    df3c:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    df3e:	ldr	r3, [pc, #40]	; (df68 <usb_serial_write_buffer_free+0x44>)
    df40:	ldrb	r3, [r3, #0]
    df42:	cbnz	r3, df4a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    df44:	movs	r0, #0
    df46:	strb	r0, [r4, #0]
			return 0;
    df48:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    df4a:	movs	r0, #3
    df4c:	bl	ea30 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    df50:	cmp	r0, #7
    df52:	bhi.n	df44 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    df54:	bl	e968 <usb_malloc>
    df58:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    df5a:	cmp	r0, #0
    df5c:	bne.n	df32 <usb_serial_write_buffer_free+0xe>
    df5e:	b.n	df44 <usb_serial_write_buffer_free+0x20>
    df60:	.word	0x2000700c
    df64:	.word	0x20007009
    df68:	.word	0x20007120

0000df6c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    df6c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    df6e:	ldr	r3, [pc, #68]	; (dfb4 <usb_serial_flush_output+0x48>)
    df70:	ldrb	r3, [r3, #0]
    df72:	cbz	r3, df98 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    df74:	ldr	r6, [pc, #64]	; (dfb8 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    df76:	ldr	r5, [pc, #68]	; (dfbc <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    df78:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    df7a:	movs	r7, #1
    df7c:	strb	r7, [r5, #0]
	if (tx_packet) {
    df7e:	cbz	r4, df9a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    df80:	ldr	r2, [pc, #60]	; (dfc0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    df82:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    df84:	movs	r7, #0
    df86:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    df88:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    df8a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    df8c:	movs	r0, #3
    df8e:	bl	eae0 <usb_tx>
		tx_packet = NULL;
    df92:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    df94:	movs	r3, #0
    df96:	strb	r3, [r5, #0]
    df98:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    df9a:	bl	e968 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    df9e:	ldr	r3, [pc, #32]	; (dfc0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    dfa0:	cbz	r0, dfae <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    dfa2:	mov	r1, r0
    dfa4:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    dfa6:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    dfa8:	bl	eae0 <usb_tx>
    dfac:	b.n	df94 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    dfae:	strb	r7, [r3, #0]
    dfb0:	b.n	df94 <usb_serial_flush_output+0x28>
    dfb2:	nop
    dfb4:	.word	0x20007120
    dfb8:	.word	0x2000700c
    dfbc:	.word	0x20007009
    dfc0:	.word	0x20007008

0000dfc4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    dfc4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    dfc6:	ldr	r3, [pc, #56]	; (e000 <usb_serial_flush_callback+0x3c>)
    dfc8:	ldrb	r3, [r3, #0]
    dfca:	cbnz	r3, dfea <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    dfcc:	ldr	r4, [pc, #52]	; (e004 <usb_serial_flush_callback+0x40>)
    dfce:	ldr	r1, [r4, #0]
    dfd0:	cbz	r1, dfec <usb_serial_flush_callback+0x28>
    dfd2:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    dfd6:	ldrh	r3, [r1, #2]
    dfd8:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    dfda:	movs	r0, #3
    dfdc:	bl	eae0 <usb_tx>
		tx_packet = NULL;
    dfe0:	str	r5, [r4, #0]
    dfe2:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    dfe4:	ldr	r3, [pc, #32]	; (e008 <usb_serial_flush_callback+0x44>)
    dfe6:	movs	r2, #1
    dfe8:	strb	r2, [r3, #0]
    dfea:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    dfec:	bl	e968 <usb_malloc>
		if (tx) {
    dff0:	cmp	r0, #0
    dff2:	beq.n	dfe4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    dff4:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    dff6:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    dffa:	movs	r0, #3
    dffc:	b.w	eae0 <usb_tx>
    e000:	.word	0x20007009
    e004:	.word	0x2000700c
    e008:	.word	0x20007008

0000e00c <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    e00c:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    e00e:	ldr	r0, [pc, #164]	; (e0b4 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    e010:	ldr	r2, [pc, #164]	; (e0b8 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    e012:	ldr	r3, [pc, #168]	; (e0bc <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e014:	ldr	r5, [pc, #168]	; (e0c0 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    e016:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    e018:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    e01a:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    e01c:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    e01e:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e020:	ldr	r4, [pc, #160]	; (e0c4 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    e022:	cmp	r3, #8
    e024:	beq.n	e088 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    e026:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e028:	ldr	r0, [pc, #156]	; (e0c8 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e02a:	ldr	r1, [pc, #160]	; (e0cc <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    e02c:	beq.n	e09e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    e02e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    e030:	ite	eq
    e032:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e034:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e036:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e038:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e03a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e03c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e03e:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    e040:	ldr	r3, [pc, #140]	; (e0d0 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e042:	ldr	r1, [pc, #144]	; (e0d4 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    e044:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e046:	ldr	r2, [pc, #144]	; (e0d8 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    e048:	cbz	r3, e07a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e04a:	movs	r3, #1
    e04c:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e04e:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    e050:	ldr	r3, [pc, #136]	; (e0dc <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    e052:	ldr	r1, [pc, #140]	; (e0e0 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    e054:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    e056:	ldr	r2, [pc, #140]	; (e0e4 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    e058:	cmp	r3, #1
    e05a:	bls.n	e0aa <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    e05c:	cmp	r3, #4
    e05e:	bls.n	e080 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    e060:	cmp	r3, #8
    e062:	bls.n	e0a2 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    e064:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    e066:	ite	ls
    e068:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    e06a:	movhi	r3, #135	; 0x87
    e06c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    e06e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    e070:	ldr	r3, [pc, #116]	; (e0e8 <analog_init+0xdc>)
    e072:	movs	r2, #1
    e074:	strb	r2, [r3, #0]
}
    e076:	pop	{r4, r5}
    e078:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    e07a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    e07c:	str	r3, [r2, #0]
    e07e:	b.n	e050 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    e080:	movs	r3, #132	; 0x84
    e082:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    e084:	str	r3, [r2, #0]
    e086:	b.n	e070 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e088:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e08c:	ldr	r1, [pc, #60]	; (e0cc <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e08e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e090:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e092:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e094:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e096:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e098:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e09a:	str	r3, [r1, #0]
    e09c:	b.n	e040 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e09e:	movs	r2, #57	; 0x39
    e0a0:	b.n	e092 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    e0a2:	movs	r3, #133	; 0x85
    e0a4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    e0a6:	str	r3, [r2, #0]
    e0a8:	b.n	e070 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    e0aa:	movs	r3, #128	; 0x80
    e0ac:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    e0ae:	str	r3, [r2, #0]
    e0b0:	b.n	e070 <analog_init+0x64>
    e0b2:	nop
    e0b4:	.word	0x40074000
    e0b8:	.word	0x40074001
    e0bc:	.word	0x1fff0b5d
    e0c0:	.word	0x4003b008
    e0c4:	.word	0x4003b00c
    e0c8:	.word	0x400bb008
    e0cc:	.word	0x400bb00c
    e0d0:	.word	0x2000701a
    e0d4:	.word	0x4003b020
    e0d8:	.word	0x400bb020
    e0dc:	.word	0x1fff0b5e
    e0e0:	.word	0x4003b024
    e0e4:	.word	0x400bb024
    e0e8:	.word	0x20007019

0000e0ec <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    e0ec:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    e0ee:	ldr	r4, [pc, #64]	; (e130 <fault_isr+0x44>)
    e0f0:	b.n	e104 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    e0f2:	ldr	r3, [r4, #0]
    e0f4:	lsls	r1, r3, #21
    e0f6:	bmi.n	e114 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    e0f8:	ldr	r3, [r4, #0]
    e0fa:	lsls	r2, r3, #20
    e0fc:	bmi.n	e11e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    e0fe:	ldr	r3, [r4, #0]
    e100:	lsls	r3, r3, #19
    e102:	bmi.n	e128 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    e104:	ldr	r3, [r4, #0]
    e106:	lsls	r0, r3, #13
    e108:	bpl.n	e0f2 <fault_isr+0x6>
    e10a:	bl	eb64 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    e10e:	ldr	r3, [r4, #0]
    e110:	lsls	r1, r3, #21
    e112:	bpl.n	e0f8 <fault_isr+0xc>
    e114:	bl	e134 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    e118:	ldr	r3, [r4, #0]
    e11a:	lsls	r2, r3, #20
    e11c:	bpl.n	e0fe <fault_isr+0x12>
    e11e:	bl	e134 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    e122:	ldr	r3, [r4, #0]
    e124:	lsls	r3, r3, #19
    e126:	bpl.n	e104 <fault_isr+0x18>
    e128:	bl	e134 <unused_isr>
    e12c:	b.n	e104 <fault_isr+0x18>
    e12e:	nop
    e130:	.word	0x40048034

0000e134 <unused_isr>:
	}
}

void unused_isr(void)
{
    e134:	push	{r3, lr}
	fault_isr();
    e136:	bl	e0ec <fault_isr>
    e13a:	nop

0000e13c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    e13c:	ldr	r3, [pc, #4]	; (e144 <startup_early_hook+0x8>)
    e13e:	movs	r2, #16
    e140:	strh	r2, [r3, #0]
    e142:	bx	lr
    e144:	.word	0x40052000

0000e148 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    e148:	bx	lr
    e14a:	nop

0000e14c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    e14c:	ldr	r1, [pc, #36]	; (e174 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    e14e:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    e150:	ldr	r3, [r1, #0]
	if (incr != 0) {
    e152:	cbz	r0, e162 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    e154:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    e156:	add	r0, r3
    e158:	sub.w	r2, r2, #8192	; 0x2000
    e15c:	cmp	r0, r2
    e15e:	bcs.n	e166 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    e160:	str	r0, [r1, #0]
	}
	return prev;
    e162:	mov	r0, r3
}
    e164:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    e166:	bl	108b4 <__errno>
    e16a:	movs	r3, #12
    e16c:	str	r3, [r0, #0]
			return (void *)-1;
    e16e:	mov.w	r0, #4294967295
    e172:	pop	{r3, pc}
    e174:	.word	0x1fff0b60

0000e178 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    e178:	b.n	e178 <__cxa_pure_virtual>
    e17a:	nop

0000e17c <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    e17c:	ldr	r2, [pc, #32]	; (e1a0 <kinetis_hsrun_disable+0x24>)
    e17e:	ldrb	r3, [r2, #0]
    e180:	cmp	r3, #128	; 0x80
    e182:	beq.n	e188 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    e184:	movs	r0, #0
}
    e186:	bx	lr
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 180000000 && F_BUS == 90000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 168000000 && F_BUS == 56000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 5); // ok
    e188:	ldr	r1, [pc, #24]	; (e1a4 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    e18a:	ldr	r3, [pc, #28]	; (e1a8 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 180000000 && F_BUS == 90000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 168000000 && F_BUS == 56000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 5); // ok
    e18c:	ldr	r0, [pc, #28]	; (e1ac <kinetis_hsrun_disable+0x30>)
    e18e:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    e190:	movs	r1, #0
    e192:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    e194:	ldrb	r3, [r2, #0]
    e196:	cmp	r3, #128	; 0x80
    e198:	beq.n	e194 <kinetis_hsrun_disable+0x18>
		return 1;
    e19a:	movs	r0, #1
    e19c:	bx	lr
    e19e:	nop
    e1a0:	.word	0x4007e003
    e1a4:	.word	0x40048044
    e1a8:	.word	0x4007e001
    e1ac:	.word	0x22250000

0000e1b0 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    e1b0:	ldr	r2, [pc, #36]	; (e1d8 <kinetis_hsrun_enable+0x28>)
    e1b2:	ldrb	r3, [r2, #0]
    e1b4:	cmp	r3, #1
    e1b6:	beq.n	e1bc <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    e1b8:	movs	r0, #0
}
    e1ba:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    e1bc:	add.w	r3, r3, #1073741824	; 0x40000000
    e1c0:	add.w	r3, r3, #516096	; 0x7e000
    e1c4:	movs	r1, #96	; 0x60
    e1c6:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    e1c8:	ldrb	r3, [r2, #0]
    e1ca:	cmp	r3, #128	; 0x80
    e1cc:	bne.n	e1c8 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 90000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 168000000 && F_BUS == 56000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 5);
    e1ce:	ldr	r3, [pc, #12]	; (e1dc <kinetis_hsrun_enable+0x2c>)
    e1d0:	ldr	r2, [pc, #12]	; (e1e0 <kinetis_hsrun_enable+0x30>)
    e1d2:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    e1d4:	movs	r0, #1
    e1d6:	bx	lr
    e1d8:	.word	0x4007e003
    e1dc:	.word	0x40048044
    e1e0:	.word	0x02050000

0000e1e4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    e1e4:	push	{r4, lr}
    e1e6:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    e1e8:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    e1ea:	bl	e17c <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    e1ee:	ldr	r2, [pc, #96]	; (e250 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    e1f0:	ldr	r3, [pc, #96]	; (e254 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    e1f2:	ldr	r1, [pc, #100]	; (e258 <usb_init_serialnumber+0x74>)
    e1f4:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    e1f6:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    e1f8:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    e1fa:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    e1fc:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    e1fe:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    e200:	ldrb	r3, [r2, #0]
    e202:	lsls	r3, r3, #24
    e204:	bpl.n	e200 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    e206:	ldr	r3, [pc, #84]	; (e25c <usb_init_serialnumber+0x78>)
    e208:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    e20a:	bl	e1b0 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    e20e:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e210:	ldr	r3, [pc, #76]	; (e260 <usb_init_serialnumber+0x7c>)
    e212:	cmp	r4, r3
    e214:	itt	ls
    e216:	addls.w	r4, r4, r4, lsl #2
    e21a:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    e21c:	mov	r0, r4
    e21e:	ldr	r4, [pc, #68]	; (e264 <usb_init_serialnumber+0x80>)
    e220:	add	r1, sp, #4
    e222:	movs	r2, #10
    e224:	bl	e268 <ultoa>
    e228:	add	r1, sp, #4
    e22a:	mov	r0, r4
	for (i=0; i<10; i++) {
    e22c:	movs	r3, #0
		char c = buf[i];
    e22e:	ldrb.w	r2, [r1], #1
    e232:	adds	r3, #1
		if (!c) break;
    e234:	cbz	r2, e246 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    e236:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    e238:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    e23c:	bne.n	e22e <usb_init_serialnumber+0x4a>
    e23e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e240:	strb	r3, [r4, #0]
}
    e242:	add	sp, #16
    e244:	pop	{r4, pc}
    e246:	lsls	r3, r3, #1
    e248:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e24a:	strb	r3, [r4, #0]
}
    e24c:	add	sp, #16
    e24e:	pop	{r4, pc}
    e250:	.word	0x40020004
    e254:	.word	0x40020000
    e258:	.word	0x41070000
    e25c:	.word	0x4002000c
    e260:	.word	0x0098967f
    e264:	.word	0x1fff0c38

0000e268 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    e268:	push	{r4, r5, r6, r7}
    e26a:	subs	r5, r1, #1
    e26c:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    e26e:	movs	r4, #0
    e270:	b.n	e274 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    e272:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    e274:	udiv	r3, r0, r2
    e278:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e27c:	cmp	r0, #9
    e27e:	add.w	r7, r0, #48	; 0x30
    e282:	itet	hi
    e284:	addhi	r0, #55	; 0x37
    e286:	uxtbls	r0, r7
    e288:	uxtbhi	r0, r0
    e28a:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    e28e:	mov	r0, r3
    e290:	cmp	r3, #0
    e292:	bne.n	e272 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    e294:	adds	r2, r1, r4
    e296:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    e298:	cbz	r4, e2ae <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    e29a:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    e29c:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    e2a0:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e2a2:	adds	r3, #1
    e2a4:	subs	r0, r4, r3
    e2a6:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    e2a8:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e2ac:	blt.n	e29a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    e2ae:	mov	r0, r1
    e2b0:	pop	{r4, r5, r6, r7}
    e2b2:	bx	lr

0000e2b4 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    e2b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e2b8:	vpush	{d8}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    e2bc:	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    e2c0:	eor.w	r3, r0, r0, asr #31
	if (isnanf(val)) {
    e2c4:	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    e2c8:	sub	sp, #16
    e2ca:	vmov.f32	s16, s0
    e2ce:	mov	r5, r0
    e2d0:	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    e2d2:	sub.w	r3, r3, r0, asr #31
	if (isnanf(val)) {
    e2d6:	bvs.w	e534 <dtostrf+0x280>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    e2da:	vldr	s15, [pc, #800]	; e5fc <dtostrf+0x348>
    e2de:	vabs.f32	s14, s0
    e2e2:	vcmp.f32	s14, s15
    e2e6:	vmrs	APSR_nzcv, fpscr
    e2ea:	ble.n	e372 <dtostrf+0xbe>
		int ndigs = (val<0) ? 4 : 3;
    e2ec:	vcmpe.f32	s0, #0.0
    e2f0:	vmrs	APSR_nzcv, fpscr
    e2f4:	ite	mi
    e2f6:	movmi	r0, #4
    e2f8:	movpl	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e2fa:	cmp	r0, r3
    e2fc:	blt.n	e342 <dtostrf+0x8e>
		if (width<0) {
    e2fe:	cmp	r5, #0
    e300:	blt.w	e5ea <dtostrf+0x336>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e304:	movs	r0, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e306:	vcmpe.f32	s16, #0.0
    e30a:	vmrs	APSR_nzcv, fpscr
    e30e:	it	mi
    e310:	movmi	r3, r4
    e312:	bmi.n	e36a <dtostrf+0xb6>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e314:	movs	r1, #73	; 0x49
    e316:	movs	r2, #78	; 0x4e
    e318:	movs	r3, #70	; 0x46
    e31a:	strb	r1, [r4, #0]
    e31c:	strb	r2, [r4, #1]
    e31e:	strb	r3, [r4, #2]
    e320:	adds	r4, #3
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    e322:	cmp	r0, #0
    e324:	beq.w	e5f2 <dtostrf+0x33e>
    e328:	add	r0, r4
			*buf++ = ' ';
    e32a:	movs	r3, #32
    e32c:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    e330:	cmp	r0, r4
    e332:	bne.n	e32c <dtostrf+0x78>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    e334:	movs	r3, #0
    e336:	strb	r3, [r0, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    e338:	add	sp, #16
    e33a:	vpop	{d8}
    e33e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    e342:	cmp	r5, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e344:	sub.w	r0, r3, r0
		if (width<0) {
    e348:	bge.n	e306 <dtostrf+0x52>
			while (awidth) {
    e34a:	cmp	r0, #0
    e34c:	beq.w	e5ea <dtostrf+0x336>
    e350:	adds	r3, r2, r0
				*buf++ = ' ';
    e352:	movs	r2, #32
    e354:	strb.w	r2, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    e358:	cmp	r4, r3
    e35a:	bne.n	e354 <dtostrf+0xa0>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e35c:	vcmpe.f32	s16, #0.0
    e360:	vmrs	APSR_nzcv, fpscr
    e364:	bpl.w	e5a0 <dtostrf+0x2ec>
    e368:	movs	r0, #0
    e36a:	movs	r2, #45	; 0x2d
    e36c:	strb	r2, [r3, #0]
    e36e:	adds	r4, r3, #1
    e370:	b.n	e314 <dtostrf+0x60>
    e372:	mov	r7, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    e374:	add	r2, sp, #8
    e376:	add	r1, sp, #4
    e378:	mov	r0, r7
    e37a:	bl	10890 <fcvtf>
    e37e:	mov	sl, r7
    e380:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    e382:	ldr.w	r9, [sp, #4]
    e386:	cmp	r7, #0
    e388:	beq.n	e43e <dtostrf+0x18a>
    e38a:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
    e38e:	cmp	r3, r7
    e390:	bgt.w	e4c0 <dtostrf+0x20c>
    e394:	mov	r0, r8
    e396:	bl	11700 <strlen>
    e39a:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    e39c:	cmp	r9, r6
    e39e:	it	lt
    e3a0:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    e3a2:	cmp.w	r9, #0
    e3a6:	bne.w	e4de <dtostrf+0x22a>
    e3aa:	adds	r6, #1
			if (newDecimalPoint - decpt == precision + 1) decpt++;
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    e3ac:	ldr.w	lr, [sp, #8]
    e3b0:	cmp.w	lr, #0
    e3b4:	beq.n	e462 <dtostrf+0x1ae>
    e3b6:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    e3b8:	subs	r0, r5, r6
	if (pad > 0) {
    e3ba:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    e3bc:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    e3c0:	bgt.n	e46e <dtostrf+0x1ba>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    e3c2:	mov	r3, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
    e3c4:	movs	r2, #45	; 0x2d
    e3c6:	strb	r2, [r3, #0]
    e3c8:	adds	r3, #1
	if (decpt == 0 && precision > 0) {
    e3ca:	cmp.w	r9, #0
    e3ce:	bne.n	e49c <dtostrf+0x1e8>
    e3d0:	cbz	r7, e3e0 <dtostrf+0x12c>
		*p++ = '0';
    e3d2:	mov	r2, r3
    e3d4:	movs	r0, #48	; 0x30
    e3d6:	strb.w	r0, [r2], #2
		*p++ = '.';
    e3da:	movs	r0, #46	; 0x2e
    e3dc:	strb	r0, [r3, #1]
    e3de:	mov	r3, r2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e3e0:	cmp	r3, r1
    e3e2:	bcs.n	e426 <dtostrf+0x172>
		*p++ = *s++;
    e3e4:	adds	r7, r3, #1
    e3e6:	ldrb.w	r2, [r8]
    e3ea:	strb	r2, [r3, #0]
		if (p == e) break;
    e3ec:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    e3ee:	add.w	r8, r8, #1
		if (p == e) break;
    e3f2:	beq.n	e428 <dtostrf+0x174>
    e3f4:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    e3f6:	mov.w	lr, #46	; 0x2e
    e3fa:	b.n	e414 <dtostrf+0x160>
    e3fc:	strb.w	lr, [r3, #1]
    e400:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e402:	cmp	r3, r1
		*p++ = *s++;
    e404:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e408:	bcs.n	e426 <dtostrf+0x172>
		*p++ = *s++;
    e40a:	ldrb.w	r0, [r8], #1
    e40e:	strb	r0, [r3, #0]
		if (p == e) break;
    e410:	cmp	r7, r1
    e412:	beq.n	e428 <dtostrf+0x174>
		if (--decpt == 0) *p++ = '.';
    e414:	subs	r2, #1
    e416:	str	r2, [sp, #4]
    e418:	cmp	r2, #0
    e41a:	beq.n	e3fc <dtostrf+0x148>
    e41c:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e41e:	cmp	r3, r1
		*p++ = *s++;
    e420:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    e424:	bcc.n	e40a <dtostrf+0x156>
    e426:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
    e428:	cmp	r5, #0
    e42a:	blt.w	e574 <dtostrf+0x2c0>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    e42e:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    e430:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    e432:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    e434:	add	sp, #16
    e436:	vpop	{d8}
    e43a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    e43e:	cmp.w	r9, #0
    e442:	bne.n	e38a <dtostrf+0xd6>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    e444:	ldrb.w	r8, [r0]
    e448:	ldr	r1, [pc, #436]	; (e600 <dtostrf+0x34c>)
    e44a:	ldr	r2, [pc, #440]	; (e604 <dtostrf+0x350>)
		decpt++;
    e44c:	movs	r3, #1
    e44e:	str	r3, [sp, #4]
    e450:	mov	r9, r3
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    e452:	cmp.w	r8, #52	; 0x34
    e456:	ite	hi
    e458:	movhi	r8, r1
    e45a:	movls	r8, r2
		decpt++;
    e45c:	mov.w	r3, #4294967295
    e460:	b.n	e38e <dtostrf+0xda>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    e462:	subs	r0, r5, r6
	if (pad > 0) {
    e464:	cmp	r0, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    e466:	add.w	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    e46a:	ble.w	e5f6 <dtostrf+0x342>
		e += pad;
    e46e:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    e470:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    e472:	subs	r0, #1
    e474:	mov.w	ip, #32
    e478:	strb.w	ip, [r2], #1
    e47c:	rsb	r3, r2, #1
    e480:	add	r3, r0
    e482:	add	r3, r4
    e484:	cmp	r3, #0
    e486:	bgt.n	e478 <dtostrf+0x1c4>
    e488:	bic.w	r3, r0, r0, asr #31
    e48c:	adds	r3, #1
    e48e:	add	r3, r4
	}
	if (sign) *p++ = '-';
    e490:	cmp.w	lr, #0
    e494:	bne.n	e3c4 <dtostrf+0x110>
	if (decpt == 0 && precision > 0) {
    e496:	cmp.w	r9, #0
    e49a:	beq.n	e3d0 <dtostrf+0x11c>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    e49c:	bge.n	e3e0 <dtostrf+0x12c>
    e49e:	cmp	r7, #0
    e4a0:	beq.n	e3e0 <dtostrf+0x12c>
		*p++ = '0';
    e4a2:	mov	r2, r3
    e4a4:	movs	r0, #48	; 0x30
    e4a6:	strb.w	r0, [r2], #2
		*p++ = '.';
    e4aa:	movs	r7, #46	; 0x2e
    e4ac:	strb	r7, [r3, #1]
    e4ae:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
    e4b2:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
    e4b6:	cmp	r3, r2
    e4b8:	bne.n	e4b2 <dtostrf+0x1fe>
    e4ba:	movs	r2, #0
    e4bc:	str	r2, [sp, #4]
    e4be:	b.n	e3e0 <dtostrf+0x12c>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    e4c0:	rsb	r9, r7, #0
    e4c4:	movs	r6, #1
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    e4c6:	cmp	r9, r6
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    e4c8:	mov	r0, r6
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    e4ca:	it	lt
    e4cc:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    e4ce:	cmp.w	r9, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    e4d2:	ldr.w	r8, [pc, #304]	; e604 <dtostrf+0x350>
		decpt = -precision;
    e4d6:	str.w	r9, [sp, #4]

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    e4da:	beq.w	e3aa <dtostrf+0xf6>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    e4de:	bge.w	e3ac <dtostrf+0xf8>
    e4e2:	cmp	r7, #0
    e4e4:	beq.w	e3ac <dtostrf+0xf8>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
    e4e8:	add.w	r3, r9, r7
    e4ec:	cmp	r0, r3
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    e4ee:	add.w	r6, r7, #2

		if (strlen(s) > precision + decpt) {
    e4f2:	bls.w	e3ac <dtostrf+0xf8>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    e4f6:	cmp	r7, #0
    e4f8:	ble.n	e508 <dtostrf+0x254>
				val *= 10.0;
    e4fa:	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    e4fe:	subs.w	sl, sl, #1
				val *= 10.0;
    e502:	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    e506:	bne.n	e4fe <dtostrf+0x24a>
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e508:	add	r2, sp, #8
    e50a:	mov	r0, sl
    e50c:	vmov.f32	s0, s16
    e510:	add	r1, sp, #12
    e512:	bl	10890 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e516:	ldr.w	r9, [sp, #4]
    e51a:	ldr	r2, [sp, #12]
    e51c:	adds	r3, r7, #1
    e51e:	rsb	r2, r9, r2
    e522:	cmp	r2, r3
    e524:	it	eq
    e526:	addeq.w	r9, r9, #1
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e52a:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e52c:	it	eq
    e52e:	streq.w	r9, [sp, #4]
    e532:	b.n	e3ac <dtostrf+0xf8>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
    e534:	vcmpe.f32	s0, #0.0
    e538:	vmrs	APSR_nzcv, fpscr
    e53c:	ite	mi
    e53e:	movmi	r0, #4
    e540:	movpl	r0, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e542:	cmp	r0, r3
    e544:	bge.n	e5b0 <dtostrf+0x2fc>
		if (width<0) {
    e546:	cmp	r5, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e548:	sub.w	r3, r3, r0
		if (width<0) {
    e54c:	blt.n	e5c2 <dtostrf+0x30e>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e54e:	vmov	r2, s16
    e552:	cmp	r2, #0
    e554:	blt.n	e5b8 <dtostrf+0x304>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e556:	movs	r2, #78	; 0x4e
    e558:	movs	r1, #65	; 0x41
    e55a:	strb	r2, [r4, #0]
    e55c:	strb	r2, [r4, #2]
    e55e:	strb	r1, [r4, #1]
    e560:	adds	r4, #3
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    e562:	cmp	r3, #0
    e564:	beq.n	e5f2 <dtostrf+0x33e>
    e566:	adds	r0, r4, r3
			*buf++ = ' ';
    e568:	movs	r3, #32
    e56a:	strb.w	r3, [r4], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    e56e:	cmp	r4, r0
    e570:	bne.n	e56a <dtostrf+0x2b6>
    e572:	b.n	e334 <dtostrf+0x80>
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
    e574:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
    e576:	negs	r3, r0
    e578:	cmp	r3, #0
    e57a:	mvn.w	r0, r0
    e57e:	ble.w	e42e <dtostrf+0x17a>
    e582:	mov	r2, r1
    e584:	movs	r5, #32
    e586:	strb.w	r5, [r2], #1
    e58a:	rsb	r3, r2, #1
    e58e:	add	r3, r0
    e590:	add	r3, r1
    e592:	cmp	r3, #0
    e594:	bgt.n	e586 <dtostrf+0x2d2>
    e596:	bic.w	r3, r0, r0, asr #31
    e59a:	adds	r3, #1
    e59c:	add	r1, r3
    e59e:	b.n	e42e <dtostrf+0x17a>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e5a0:	movs	r0, #73	; 0x49
    e5a2:	movs	r1, #78	; 0x4e
    e5a4:	movs	r2, #70	; 0x46
    e5a6:	strb	r0, [r3, #0]
    e5a8:	strb	r1, [r3, #1]
    e5aa:	strb	r2, [r3, #2]
    e5ac:	adds	r0, r3, #3
    e5ae:	b.n	e334 <dtostrf+0x80>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    e5b0:	cmp	r5, #0
    e5b2:	blt.n	e5e6 <dtostrf+0x332>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e5b4:	movs	r3, #0
    e5b6:	b.n	e54e <dtostrf+0x29a>
    e5b8:	mov	r0, r4
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e5ba:	movs	r2, #45	; 0x2d
    e5bc:	strb	r2, [r0, #0]
    e5be:	adds	r4, r0, #1
    e5c0:	b.n	e556 <dtostrf+0x2a2>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    e5c2:	cbz	r3, e5e6 <dtostrf+0x332>
    e5c4:	adds	r0, r2, r3
				*buf++ = ' ';
    e5c6:	movs	r3, #32
    e5c8:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    e5cc:	cmp	r4, r0
    e5ce:	bne.n	e5c8 <dtostrf+0x314>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e5d0:	vmov	r3, s16
    e5d4:	cmp	r3, #0
    e5d6:	blt.n	e5ee <dtostrf+0x33a>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e5d8:	movs	r3, #78	; 0x4e
    e5da:	movs	r2, #65	; 0x41
    e5dc:	strb	r3, [r0, #0]
    e5de:	strb	r3, [r0, #2]
    e5e0:	strb	r2, [r0, #1]
    e5e2:	adds	r0, #3
    e5e4:	b.n	e334 <dtostrf+0x80>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    e5e6:	mov	r0, r4
    e5e8:	b.n	e5d0 <dtostrf+0x31c>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    e5ea:	mov	r3, r4
    e5ec:	b.n	e35c <dtostrf+0xa8>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e5ee:	movs	r3, #0
    e5f0:	b.n	e5ba <dtostrf+0x306>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e5f2:	mov	r0, r4
    e5f4:	b.n	e334 <dtostrf+0x80>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    e5f6:	mov	r3, r4
    e5f8:	b.n	e3ca <dtostrf+0x116>
    e5fa:	nop
    e5fc:	.word	0x7f7fffff
    e600:	.word	0x0001530c
    e604:	.word	0x00015308

0000e608 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    e608:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    e60a:	ldr	r3, [pc, #68]	; (e650 <digitalWrite.part.1+0x48>)
    e60c:	ldr.w	r2, [r3, r0, lsl #3]
    e610:	ldrb.w	r4, [r2, #640]	; 0x280
    e614:	cbz	r4, e624 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    e616:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    e618:	cbz	r1, e63a <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    e61a:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    e61e:	ldr.w	r4, [sp], #4
    e622:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    e624:	add.w	r3, r3, r0, lsl #3
    e628:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    e62a:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    e62c:	cbnz	r1, e644 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    e62e:	bic.w	r2, r2, #2
    e632:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    e634:	ldr.w	r4, [sp], #4
    e638:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    e63a:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    e63e:	ldr.w	r4, [sp], #4
    e642:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    e644:	orr.w	r2, r2, #3
    e648:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    e64a:	ldr.w	r4, [sp], #4
    e64e:	bx	lr
    e650:	.word	0x00015310

0000e654 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    e654:	ldr	r2, [pc, #112]	; (e6c8 <pinMode.part.2+0x74>)
    e656:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    e65a:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    e65c:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    e65e:	beq.n	e684 <pinMode.part.2+0x30>
    e660:	cmp	r1, #4
    e662:	beq.n	e69c <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    e664:	ldr.w	r0, [r2, r0, lsl #3]
    e668:	movs	r2, #0
    e66a:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    e66e:	cbz	r1, e67c <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    e670:	cmp	r1, #2
    e672:	beq.n	e6b6 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    e674:	cmp	r1, #3
    e676:	beq.n	e6be <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    e678:	str	r2, [r3, #0]
    e67a:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    e67c:	mov.w	r2, #256	; 0x100
    e680:	str	r2, [r3, #0]
    e682:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    e684:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    e688:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    e68c:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    e690:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    e692:	ldr	r2, [r3, #0]
    e694:	bic.w	r2, r2, #32
    e698:	str	r2, [r3, #0]
    e69a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    e69c:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    e6a0:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    e6a4:	movs	r0, #1
    e6a6:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    e6aa:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    e6ac:	ldr	r2, [r3, #0]
    e6ae:	orr.w	r2, r2, #32
    e6b2:	str	r2, [r3, #0]
    e6b4:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    e6b6:	movw	r2, #259	; 0x103
    e6ba:	str	r2, [r3, #0]
    e6bc:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    e6be:	mov.w	r2, #258	; 0x102
    e6c2:	str	r2, [r3, #0]
    e6c4:	bx	lr
    e6c6:	nop
    e6c8:	.word	0x00015310

0000e6cc <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    e6cc:	ldr	r3, [pc, #4]	; (e6d4 <rtc_get+0x8>)
    e6ce:	ldr	r0, [r3, #0]
}
    e6d0:	bx	lr
    e6d2:	nop
    e6d4:	.word	0x4003d000

0000e6d8 <rtc_set>:

void rtc_set(unsigned long t)
{
    e6d8:	push	{r4, r5}
	RTC_SR = 0;
    e6da:	ldr	r3, [pc, #20]	; (e6f0 <rtc_set+0x18>)
	RTC_TPR = 0;
    e6dc:	ldr	r5, [pc, #20]	; (e6f4 <rtc_set+0x1c>)
	RTC_TSR = t;
    e6de:	ldr	r4, [pc, #24]	; (e6f8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    e6e0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    e6e2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    e6e4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    e6e6:	str	r2, [r5, #0]
	RTC_TSR = t;
    e6e8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    e6ea:	str	r1, [r3, #0]
}
    e6ec:	pop	{r4, r5}
    e6ee:	bx	lr
    e6f0:	.word	0x4003d014
    e6f4:	.word	0x4003d004
    e6f8:	.word	0x4003d000

0000e6fc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    e6fc:	cmp	r0, #63	; 0x3f
    e6fe:	bhi.n	e704 <digitalWrite+0x8>
    e700:	b.w	e608 <digitalWrite.part.1>
    e704:	bx	lr
    e706:	nop

0000e708 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    e708:	cmp	r0, #63	; 0x3f
    e70a:	bhi.n	e710 <pinMode+0x8>
    e70c:	b.w	e654 <pinMode.part.2>
    e710:	bx	lr
    e712:	nop

0000e714 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    e714:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    e716:	ldr	r1, [pc, #52]	; (e74c <micros+0x38>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    e718:	ldr	r3, [pc, #52]	; (e750 <micros+0x3c>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e71a:	ldr	r2, [pc, #56]	; (e754 <micros+0x40>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    e71c:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    e71e:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e720:	ldr	r2, [r2, #0]
	__enable_irq();
    e722:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    e724:	lsls	r2, r2, #5
    e726:	bpl.n	e72e <micros+0x1a>
    e728:	cmp	r3, #50	; 0x32
    e72a:	it	hi
    e72c:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    e72e:	rsb	r3, r3, #167936	; 0x29000
    e732:	ldr	r1, [pc, #36]	; (e758 <micros+0x44>)
    e734:	adds	r3, #63	; 0x3f
    e736:	mov.w	r2, #1000	; 0x3e8
    e73a:	lsrs	r3, r3, #3
    e73c:	umull	r1, r3, r1, r3
    e740:	mul.w	r0, r2, r0
}
    e744:	add.w	r0, r0, r3, lsr #1
    e748:	bx	lr
    e74a:	nop
    e74c:	.word	0x2000701c
    e750:	.word	0xe000e018
    e754:	.word	0xe000ed04
    e758:	.word	0x18618619

0000e75c <delay>:

void delay(uint32_t ms)
{
    e75c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e760:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    e762:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    e764:	ldr	r7, [pc, #132]	; (e7ec <delay+0x90>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    e766:	ldr	r3, [pc, #136]	; (e7f0 <delay+0x94>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e768:	ldr	r2, [pc, #136]	; (e7f4 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    e76a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    e76c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e76e:	ldr	r2, [r2, #0]
	__enable_irq();
    e770:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    e772:	lsls	r2, r2, #5
    e774:	bpl.n	e77c <delay+0x20>
    e776:	cmp	r3, #50	; 0x32
    e778:	it	hi
    e77a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    e77c:	cbz	r5, e7e8 <delay+0x8c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    e77e:	rsb	r3, r3, #167936	; 0x29000
    e782:	adds	r3, #63	; 0x3f
    e784:	ldr	r6, [pc, #112]	; (e7f8 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    e786:	ldr.w	r9, [pc, #104]	; e7f0 <delay+0x94>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e78a:	ldr.w	r8, [pc, #104]	; e7f4 <delay+0x98>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    e78e:	lsrs	r3, r3, #3
    e790:	mov.w	r2, #1000	; 0x3e8
    e794:	umull	r1, r3, r6, r3
    e798:	mul.w	r4, r2, r4
    e79c:	add.w	r4, r4, r3, lsr #1

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    e7a0:	cpsid	i
	current = SYST_CVR;
    e7a2:	ldr.w	r1, [r9]
	count = systick_millis_count;
    e7a6:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    e7a8:	ldr.w	lr, [r8]
	__enable_irq();
    e7ac:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    e7ae:	rsb	r3, r1, #167936	; 0x29000
    e7b2:	adds	r3, #63	; 0x3f
    e7b4:	lsrs	r3, r3, #3
    e7b6:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    e7ba:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    e7be:	rsb	r3, r4, r3, lsr #1
    e7c2:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    e7c6:	beq.n	e7ce <delay+0x72>
    e7c8:	cmp	r1, #50	; 0x32
    e7ca:	it	hi
    e7cc:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    e7ce:	mla	r3, r0, r2, r3
    e7d2:	cmp.w	r3, #1000	; 0x3e8
    e7d6:	bcc.n	e7e2 <delay+0x86>
				ms--;
				if (ms == 0) return;
    e7d8:	subs	r5, #1
    e7da:	beq.n	e7e8 <delay+0x8c>
				start += 1000;
    e7dc:	add.w	r4, r4, #1000	; 0x3e8
    e7e0:	b.n	e7a0 <delay+0x44>
			}
			yield();
    e7e2:	bl	f49c <yield>
		}
    e7e6:	b.n	e7a0 <delay+0x44>
    e7e8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e7ec:	.word	0x2000701c
    e7f0:	.word	0xe000e018
    e7f4:	.word	0xe000ed04
    e7f8:	.word	0x18618619

0000e7fc <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    e7fc:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    e7fe:	ldr	r3, [pc, #312]	; (e938 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    e800:	ldr	r0, [pc, #312]	; (e93c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    e802:	ldr.w	ip, [pc, #348]	; e960 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    e806:	ldr	r4, [pc, #312]	; (e940 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    e808:	ldr	r1, [pc, #312]	; (e944 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    e80a:	ldr.w	lr, [pc, #344]	; e964 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    e80e:	ldr	r6, [pc, #312]	; (e948 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    e810:	ldr	r5, [pc, #312]	; (e94c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    e812:	ldr	r7, [pc, #316]	; (e950 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    e814:	mov.w	r2, #134217728	; 0x8000000
    e818:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    e81a:	mov.w	r2, #268435456	; 0x10000000
    e81e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    e820:	mov.w	r2, #536870912	; 0x20000000
    e824:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    e826:	mov.w	r2, #1073741824	; 0x40000000
    e82a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    e82c:	mov.w	r2, #2147483648	; 0x80000000
    e830:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    e832:	movs	r2, #0
    e834:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    e836:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    e838:	movw	r0, #57343	; 0xdfff
    e83c:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    e840:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    e844:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    e846:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    e84a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    e84c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    e84e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    e850:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    e854:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    e856:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    e85a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    e85c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    e860:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    e862:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    e866:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    e86a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    e86e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    e872:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    e876:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    e878:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    e87c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    e87e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    e880:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    e882:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    e886:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    e888:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    e88a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e88c:	ldr	r4, [pc, #196]	; (e954 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    e88e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    e890:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e892:	movs	r1, #9
    e894:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    e896:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    e89a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    e89e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    e8a0:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    e8a2:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    e8a4:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    e8a6:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    e8a8:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e8aa:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    e8ae:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    e8b2:	add.w	r7, r7, #520192	; 0x7f000
    e8b6:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    e8b8:	addw	r4, r4, #2044	; 0x7fc
    e8bc:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    e8be:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    e8c0:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    e8c2:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e8c4:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    e8c8:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    e8ca:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    e8ce:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    e8d2:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    e8d4:	sub.w	r4, r4, #460800	; 0x70800
    e8d8:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    e8dc:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    e8de:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    e8e0:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    e8e4:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    e8e6:	ldr	r0, [pc, #112]	; (e958 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    e8e8:	orr.w	r1, r1, #512	; 0x200
    e8ec:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    e8ee:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    e8f0:	ldr	r4, [pc, #104]	; (e95c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    e8f2:	add.w	lr, lr, #65280	; 0xff00
    e8f6:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    e8fa:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    e8fe:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    e902:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    e906:	orr.w	r1, r1, #33554432	; 0x2000000
    e90a:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    e90c:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    e910:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    e914:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    e916:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    e918:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    e91a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    e91c:	str	r2, [r4, #0]
#endif
	analog_init();
    e91e:	bl	e00c <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    e922:	movs	r0, #25
    e924:	bl	e75c <delay>
	usb_init();
    e928:	bl	f3d8 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    e92c:	movw	r0, #275	; 0x113
}
    e930:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    e934:	b.w	e75c <delay>
    e938:	.word	0xe000e104
    e93c:	.word	0x40038004
    e940:	.word	0x40038014
    e944:	.word	0x4003801c
    e948:	.word	0x40038024
    e94c:	.word	0x4003802c
    e950:	.word	0x40038034
    e954:	.word	0x40038000
    e958:	.word	0x40048004
    e95c:	.word	0x400c9000
    e960:	.word	0x40038008
    e964:	.word	0x4003800c

0000e968 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    e968:	cpsid	i
	avail = usb_buffer_available;
    e96a:	ldr	r0, [pc, #52]	; (e9a0 <usb_malloc+0x38>)
    e96c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    e96e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    e972:	cmp	r3, #19
    e974:	bgt.n	e998 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    e976:	mov.w	r1, #2147483648	; 0x80000000
    e97a:	lsrs	r1, r3
    e97c:	bic.w	r2, r2, r1
    e980:	str	r2, [r0, #0]
	__enable_irq();
    e982:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    e984:	ldr	r0, [pc, #28]	; (e9a4 <usb_malloc+0x3c>)
    e986:	add.w	r3, r3, r3, lsl #3
    e98a:	lsls	r3, r3, #3
    e98c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    e98e:	movs	r1, #0
    e990:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    e992:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    e994:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    e996:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    e998:	cpsie	i
		return NULL;
    e99a:	movs	r0, #0
    e99c:	bx	lr
    e99e:	nop
    e9a0:	.word	0x1fff0c50
    e9a4:	.word	0x1fff03d0

0000e9a8 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    e9a8:	ldr	r3, [pc, #52]	; (e9e0 <usb_free+0x38>)
    e9aa:	ldr	r2, [pc, #56]	; (e9e4 <usb_free+0x3c>)
    e9ac:	subs	r3, r0, r3
    e9ae:	umull	r2, r3, r2, r3
    e9b2:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    e9b4:	cmp	r3, #19
    e9b6:	bhi.n	e9d2 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    e9b8:	ldr	r2, [pc, #44]	; (e9e8 <usb_free+0x40>)
    e9ba:	ldrb	r2, [r2, #0]
    e9bc:	cbnz	r2, e9d4 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    e9be:	cpsid	i
	usb_buffer_available |= mask;
    e9c0:	ldr	r0, [pc, #40]	; (e9ec <usb_free+0x44>)
    e9c2:	mov.w	r1, #2147483648	; 0x80000000
    e9c6:	ldr	r2, [r0, #0]
    e9c8:	lsr.w	r3, r1, r3
    e9cc:	orrs	r2, r3
    e9ce:	str	r2, [r0, #0]
	__enable_irq();
    e9d0:	cpsie	i
    e9d2:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    e9d4:	ldr	r2, [pc, #24]	; (e9f0 <usb_free+0x48>)
    e9d6:	ldrb	r2, [r2, #0]
    e9d8:	cmp	r2, #0
    e9da:	beq.n	e9be <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    e9dc:	b.w	ea5c <usb_rx_memory>
    e9e0:	.word	0x1fff03d0
    e9e4:	.word	0x38e38e39
    e9e8:	.word	0x20007115
    e9ec:	.word	0x1fff0c50
    e9f0:	.word	0x20007120

0000e9f4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    e9f4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    e9f6:	cmp	r3, #5
    e9f8:	bhi.n	ea24 <usb_rx+0x30>
	__disable_irq();
    e9fa:	cpsid	i
	ret = rx_first[endpoint];
    e9fc:	ldr	r1, [pc, #40]	; (ea28 <usb_rx+0x34>)
    e9fe:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    ea02:	cbz	r0, ea20 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    ea04:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    ea06:	ldr	r4, [pc, #36]	; (ea2c <usb_rx+0x38>)
    ea08:	ldrh	r5, [r0, #0]
    ea0a:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    ea0e:	ldr	r6, [r0, #4]
    ea10:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    ea14:	subs	r2, r2, r5
    ea16:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    ea1a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    ea1c:	pop	{r4, r5, r6}
    ea1e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    ea20:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    ea22:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    ea24:	movs	r0, #0
    ea26:	bx	lr
    ea28:	.word	0x20007080
    ea2c:	.word	0x200071a8

0000ea30 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    ea30:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    ea32:	cmp	r0, #5
    ea34:	bhi.n	ea4e <usb_tx_packet_count+0x1e>
	__disable_irq();
    ea36:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    ea38:	ldr	r3, [pc, #28]	; (ea58 <usb_tx_packet_count+0x28>)
    ea3a:	ldr.w	r3, [r3, r0, lsl #2]
    ea3e:	cbz	r3, ea52 <usb_tx_packet_count+0x22>
    ea40:	movs	r0, #0
    ea42:	ldr	r3, [r3, #4]
    ea44:	adds	r0, #1
    ea46:	cmp	r3, #0
    ea48:	bne.n	ea42 <usb_tx_packet_count+0x12>
	__enable_irq();
    ea4a:	cpsie	i
	return count;
    ea4c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    ea4e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    ea50:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    ea52:	mov	r0, r3
    ea54:	b.n	ea4a <usb_tx_packet_count+0x1a>
    ea56:	nop
    ea58:	.word	0x200070dc

0000ea5c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    ea5c:	push	{r4, r5, r6, r7}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    ea5e:	cpsid	i
void usb_rx_memory(usb_packet_t *packet)
{
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
    ea60:	ldr	r1, [pc, #104]	; (eacc <usb_rx_memory+0x70>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    ea62:	ldr	r6, [pc, #108]	; (ead0 <usb_rx_memory+0x74>)
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    ea64:	movs	r3, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ea66:	ldrb.w	r4, [r1], #1
			if (table[index(i, RX, EVEN)].desc == 0) {
    ea6a:	ldr	r7, [pc, #100]	; (ead0 <usb_rx_memory+0x74>)
    ea6c:	lsls	r2, r3, #2
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ea6e:	lsls	r4, r4, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ea70:	orr.w	r5, r2, #1
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    ea74:	bpl.n	ea82 <usb_rx_memory+0x26>
			if (table[index(i, RX, EVEN)].desc == 0) {
    ea76:	ldr.w	r4, [r6, r2, lsl #3]
    ea7a:	cbz	r4, ea96 <usb_rx_memory+0x3a>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    ea7c:	ldr.w	r2, [r6, r5, lsl #3]
    ea80:	cbz	r2, eab2 <usb_rx_memory+0x56>
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    ea82:	adds	r3, #1
    ea84:	cmp	r3, #7
    ea86:	bne.n	ea66 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    ea88:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    ea8a:	ldr	r3, [pc, #72]	; (ead4 <usb_rx_memory+0x78>)
    ea8c:	movs	r2, #0
    ea8e:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    ea90:	pop	{r4, r5, r6, r7}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    ea92:	b.w	e9a8 <usb_free>
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    ea96:	ldr	r4, [pc, #60]	; (ead4 <usb_rx_memory+0x78>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ea98:	ldr	r5, [pc, #60]	; (ead8 <usb_rx_memory+0x7c>)
				usb_rx_memory_needed--;
    ea9a:	ldrb	r1, [r4, #0]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    ea9c:	add.w	r3, r7, r3, lsl #5
    eaa0:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    eaa2:	subs	r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    eaa4:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    eaa6:	strb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    eaa8:	str.w	r5, [r7, r2, lsl #3]
				usb_rx_memory_needed--;
				__enable_irq();
    eaac:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    eaae:	pop	{r4, r5, r6, r7}
    eab0:	bx	lr
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    eab2:	ldr	r2, [pc, #32]	; (ead4 <usb_rx_memory+0x78>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    eab4:	ldr	r1, [pc, #36]	; (eadc <usb_rx_memory+0x80>)
				usb_rx_memory_needed--;
    eab6:	ldrb	r3, [r2, #0]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    eab8:	add.w	r4, r7, r5, lsl #3
    eabc:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    eabe:	subs	r3, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    eac0:	str	r0, [r4, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    eac2:	strb	r3, [r2, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    eac4:	str.w	r1, [r7, r5, lsl #3]
				usb_rx_memory_needed--;
				__enable_irq();
    eac8:	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    eaca:	b.n	eaae <usb_rx_memory+0x52>
    eacc:	.word	0x000152a0
    ead0:	.word	0x1fff0000
    ead4:	.word	0x20007115
    ead8:	.word	0x00400088
    eadc:	.word	0x004000c8

0000eae0 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    eae0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    eae2:	cmp	r3, #5
    eae4:	bhi.n	eb22 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    eae6:	ldr	r2, [pc, #108]	; (eb54 <usb_tx+0x74>)
    eae8:	lsls	r0, r0, #5
    eaea:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    eaee:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    eaf0:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    eaf2:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    eaf4:	ldr	r4, [pc, #96]	; (eb58 <usb_tx+0x78>)
    eaf6:	ldrb	r2, [r4, r3]
    eaf8:	cmp	r2, #3
    eafa:	bhi.n	eb34 <usb_tx+0x54>
    eafc:	tbb	[pc, r2]
    eb00:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    eb04:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    eb06:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    eb08:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    eb0a:	tst.w	r0, #8
    eb0e:	ite	ne
    eb10:	movne	r3, #200	; 0xc8
    eb12:	moveq	r3, #136	; 0x88
    eb14:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    eb18:	adds	r1, #8
    eb1a:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    eb1c:	str	r3, [r0, #0]
	__enable_irq();
    eb1e:	cpsie	i
}
    eb20:	pop	{r4, r5}
    eb22:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    eb24:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    eb26:	movs	r2, #2
		break;
    eb28:	b.n	eb06 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    eb2a:	movs	r2, #5
    eb2c:	b.n	eb06 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    eb2e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    eb30:	movs	r2, #4
		break;
    eb32:	b.n	eb06 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    eb34:	ldr	r2, [pc, #36]	; (eb5c <usb_tx+0x7c>)
    eb36:	ldr.w	r0, [r2, r3, lsl #2]
    eb3a:	cbz	r0, eb4c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    eb3c:	ldr	r2, [pc, #32]	; (eb60 <usb_tx+0x80>)
    eb3e:	ldr.w	r0, [r2, r3, lsl #2]
    eb42:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    eb44:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    eb48:	cpsie	i
		return;
    eb4a:	b.n	eb20 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    eb4c:	str.w	r1, [r2, r3, lsl #2]
    eb50:	ldr	r2, [pc, #12]	; (eb60 <usb_tx+0x80>)
    eb52:	b.n	eb44 <usb_tx+0x64>
    eb54:	.word	0x1fff0000
    eb58:	.word	0x20007124
    eb5c:	.word	0x200070dc
    eb60:	.word	0x200070f4

0000eb64 <usb_isr>:
}



void usb_isr(void)
{
    eb64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    eb68:	ldr.w	fp, [pc, #788]	; ee80 <usb_isr+0x31c>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    eb6c:	ldr.w	sl, [pc, #788]	; ee84 <usb_isr+0x320>
}



void usb_isr(void)
{
    eb70:	sub	sp, #28
    eb72:	b.n	ebfe <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    eb74:	ldr	r7, [pc, #700]	; (ee34 <usb_isr+0x2d0>)
    eb76:	mov.w	r8, r3, lsr #2
    eb7a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    eb7e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    eb80:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    eb84:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    eb88:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    eb8a:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    eb8e:	and.w	r4, r3, #255	; 0xff
    eb92:	cmp	r3, #0
    eb94:	bne.w	ee88 <usb_isr+0x324>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    eb98:	ldr.w	r3, [r7, r8, lsl #3]
    eb9c:	lsrs	r3, r3, #16
    eb9e:	uxth	r1, r3
    eba0:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    eba4:	cmp	r3, #0
    eba6:	beq.w	ee20 <usb_isr+0x2bc>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    ebaa:	ldr	r3, [pc, #652]	; (ee38 <usb_isr+0x2d4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    ebac:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    ebb0:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    ebb4:	ldr.w	r2, [r3, r6, lsl #2]
    ebb8:	cmp	r2, #0
    ebba:	beq.w	ef24 <usb_isr+0x3c0>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    ebbe:	ldr	r5, [pc, #636]	; (ee3c <usb_isr+0x2d8>)
    ebc0:	ldr.w	r3, [r5, r6, lsl #2]
    ebc4:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    ebc6:	ldr	r4, [pc, #632]	; (ee40 <usb_isr+0x2dc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    ebc8:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    ebcc:	ldrh.w	r3, [r4, r6, lsl #1]
    ebd0:	add	r1, r3
    ebd2:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    ebd6:	bl	e968 <usb_malloc>
					if (packet) {
    ebda:	cmp	r0, #0
    ebdc:	beq.w	ef16 <usb_isr+0x3b2>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    ebe0:	ldr	r2, [pc, #608]	; (ee44 <usb_isr+0x2e0>)
    ebe2:	ldr	r3, [pc, #612]	; (ee48 <usb_isr+0x2e4>)
    ebe4:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    ebe8:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    ebec:	it	ne
    ebee:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    ebf0:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    ebf4:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    ebf8:	movs	r3, #8
    ebfa:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    ebfe:	ldrb.w	r4, [fp]
    ec02:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    ec04:	lsls	r0, r4, #29
    ec06:	bpl.n	ec40 <usb_isr+0xdc>
		if (usb_configuration) {
    ec08:	ldr	r3, [pc, #576]	; (ee4c <usb_isr+0x2e8>)
    ec0a:	ldrb	r3, [r3, #0]
    ec0c:	cbz	r3, ec3a <usb_isr+0xd6>
			t = usb_reboot_timer;
    ec0e:	ldr	r1, [pc, #576]	; (ee50 <usb_isr+0x2ec>)
    ec10:	ldrb	r2, [r1, #0]
			if (t) {
    ec12:	and.w	r3, r2, #255	; 0xff
    ec16:	cbz	r2, ec24 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    ec18:	subs	r3, #1
    ec1a:	uxtb	r3, r3
    ec1c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    ec1e:	cmp	r3, #0
    ec20:	beq.w	f3a0 <usb_isr+0x83c>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    ec24:	ldr	r1, [pc, #556]	; (ee54 <usb_isr+0x2f0>)
    ec26:	ldrb	r2, [r1, #0]
			if (t) {
    ec28:	and.w	r3, r2, #255	; 0xff
    ec2c:	cbz	r2, ec3a <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    ec2e:	subs	r3, #1
    ec30:	uxtb	r3, r3
    ec32:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    ec34:	cmp	r3, #0
    ec36:	beq.w	ef10 <usb_isr+0x3ac>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    ec3a:	movs	r3, #4
    ec3c:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    ec40:	and.w	r3, r4, #8
    ec44:	and.w	r2, r3, #255	; 0xff
    ec48:	cmp	r3, #0
    ec4a:	beq.w	eee2 <usb_isr+0x37e>
		uint8_t endpoint;
		stat = USB0_STAT;
    ec4e:	ldrb.w	r3, [sl]
    ec52:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    ec54:	lsrs	r6, r3, #4
    ec56:	bne.n	eb74 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    ec58:	lsrs	r0, r3, #2
    ec5a:	ldr	r7, [pc, #472]	; (ee34 <usb_isr+0x2d0>)
	pid = BDT_PID(b->desc);
    ec5c:	ldr.w	r2, [r7, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    ec60:	add.w	r1, r7, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    ec64:	ubfx	r2, r2, #2, #4
    ec68:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    ec6a:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    ec6c:	cmp	r2, #12
    ec6e:	bhi.w	ee02 <usb_isr+0x29e>
    ec72:	tbh	[pc, r2, lsl #1]
    ec76:	.short	0x00ca
    ec78:	.word	0x00c600ca
    ec7c:	.word	0x00c600c6
    ec80:	.word	0x00c600c6
    ec84:	.word	0x008b00c6
    ec88:	.word	0x00c600c6
    ec8c:	.word	0x000d00c6
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    ec90:	ldr	r2, [r1, #0]
    ec92:	ldr	r5, [pc, #452]	; (ee58 <usb_isr+0x2f4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    ec94:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    ec96:	ldr	r3, [pc, #452]	; (ee5c <usb_isr+0x2f8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    ec98:	ldr	r6, [pc, #452]	; (ee60 <usb_isr+0x2fc>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    ec9a:	ldr	r4, [pc, #424]	; (ee44 <usb_isr+0x2e0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    ec9c:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    ec9e:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    eca0:	str.w	r4, [r7, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    eca4:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    eca6:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    eca8:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    ecaa:	cmp.w	r1, #2176	; 0x880
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    ecae:	str	r2, [r7, #16]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    ecb0:	str	r3, [sp, #4]
    ecb2:	str	r2, [r3, #0]
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    ecb4:	str	r2, [r7, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    ecb6:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    ecb8:	beq.w	f318 <usb_isr+0x7b4>
    ecbc:	bls.w	ef2c <usb_isr+0x3c8>
    ecc0:	movw	r4, #8993	; 0x2321
    ecc4:	cmp	r1, r4
    ecc6:	beq.w	f322 <usb_isr+0x7be>
    ecca:	bhi.w	f058 <usb_isr+0x4f4>
    ecce:	movw	r4, #8225	; 0x2021
    ecd2:	cmp	r1, r4
    ecd4:	beq.w	f06e <usb_isr+0x50a>
    ecd8:	movw	r4, #8737	; 0x2221
    ecdc:	cmp	r1, r4
    ecde:	beq.w	f1c0 <usb_isr+0x65c>
    ece2:	cmp.w	r1, #2304	; 0x900
    ece6:	bne.w	f068 <usb_isr+0x504>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    ecea:	ldr	r2, [pc, #352]	; (ee4c <usb_isr+0x2e8>)
    ecec:	ldrb	r1, [r5, #2]
    ecee:	strb	r1, [r2, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    ecf0:	ldr	r5, [pc, #320]	; (ee34 <usb_isr+0x2d0>)
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ecf2:	movs	r4, #4
    ecf4:	b.n	ecfc <usb_isr+0x198>
    ecf6:	adds	r4, #1
    ecf8:	cmp	r4, #28
    ecfa:	beq.n	ed16 <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    ecfc:	ldr.w	r3, [r7, r4, lsl #3]
    ed00:	lsls	r1, r3, #24
    ed02:	bpl.n	ecf6 <usb_isr+0x192>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    ed04:	add.w	r3, r5, r4, lsl #3
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ed08:	adds	r4, #1
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    ed0a:	ldr	r0, [r3, #4]
    ed0c:	subs	r0, #8
    ed0e:	bl	e9a8 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ed12:	cmp	r4, #28
    ed14:	bne.n	ecfc <usb_isr+0x198>
    ed16:	ldr	r3, [pc, #288]	; (ee38 <usb_isr+0x2d4>)
    ed18:	ldr	r2, [pc, #328]	; (ee64 <usb_isr+0x300>)
    ed1a:	ldr	r1, [pc, #332]	; (ee68 <usb_isr+0x304>)
    ed1c:	ldr	r5, [pc, #284]	; (ee3c <usb_isr+0x2d8>)
    ed1e:	ldr	r4, [pc, #288]	; (ee40 <usb_isr+0x2dc>)
    ed20:	ldr	r0, [pc, #328]	; (ee6c <usb_isr+0x308>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    ed22:	str	r5, [sp, #12]
    ed24:	str	r4, [sp, #16]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ed26:	mov.w	r9, #0
    ed2a:	str	r0, [sp, #8]
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    ed2c:	mov	r8, r1
    ed2e:	str	r6, [sp, #20]
    ed30:	mov	r5, r2
    ed32:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    ed34:	ldr	r0, [r4, #0]
			while (p) {
    ed36:	cbz	r0, ed44 <usb_isr+0x1e0>
				n = p->next;
    ed38:	ldr	r6, [r0, #4]
				usb_free(p);
    ed3a:	bl	e9a8 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    ed3e:	mov	r0, r6
    ed40:	cmp	r6, #0
    ed42:	bne.n	ed38 <usb_isr+0x1d4>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    ed44:	movs	r3, #0
    ed46:	str	r3, [r4, #0]
			rx_last[i] = NULL;
    ed48:	ldr	r3, [sp, #12]
			p = tx_first[i];
    ed4a:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    ed4c:	mov	r2, r3
    ed4e:	movs	r3, #0
    ed50:	str.w	r3, [r2, r9, lsl #2]
			p = tx_first[i];
			while (p) {
    ed54:	cbz	r0, ed62 <usb_isr+0x1fe>
				n = p->next;
    ed56:	ldr	r6, [r0, #4]
				usb_free(p);
    ed58:	bl	e9a8 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    ed5c:	mov	r0, r6
    ed5e:	cmp	r6, #0
    ed60:	bne.n	ed56 <usb_isr+0x1f2>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    ed62:	ldr	r3, [sp, #8]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    ed64:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    ed66:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    ed68:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    ed6a:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    ed6e:	ldr	r2, [sp, #16]
    ed70:	mov.w	r1, #0
			switch (tx_state[i]) {
    ed74:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    ed76:	strh.w	r1, [r2, r9, lsl #1]
			switch (tx_state[i]) {
    ed7a:	cmp	r3, #3
    ed7c:	bhi.w	f274 <usb_isr+0x710>
    ed80:	tbh	[pc, r3, lsl #1]
    ed84:	.word	0x027402c0
    ed88:	.word	0x027402c0
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    ed8c:	ldr	r3, [pc, #204]	; (ee5c <usb_isr+0x2f8>)
    ed8e:	str	r3, [sp, #4]
    ed90:	ldr	r2, [r3, #0]
		if (data) {
    ed92:	cbz	r2, edee <usb_isr+0x28a>
			size = ep0_tx_len;
    ed94:	ldr	r3, [pc, #216]	; (ee70 <usb_isr+0x30c>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ed96:	ldr	r1, [pc, #220]	; (ee74 <usb_isr+0x310>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ed98:	ldr	r6, [pc, #196]	; (ee60 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    ed9a:	ldrh	r0, [r3, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ed9c:	ldrb	r4, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ed9e:	ldrb.w	lr, [r6]
    eda2:	cmp	r0, #64	; 0x40
    eda4:	mov	r5, r0
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    eda6:	eor.w	ip, r4, #1
    edaa:	it	cs
    edac:	movcs	r5, #64	; 0x40
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    edae:	orr.w	r4, r4, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    edb2:	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    edb6:	strb.w	ip, [r1]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    edba:	sub.w	r0, r0, r5
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    edbe:	add.w	ip, r7, r4, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    edc2:	ite	eq
    edc4:	moveq	r1, #136	; 0x88
    edc6:	movne	r1, #200	; 0xc8
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    edc8:	uxth	r0, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    edca:	eor.w	lr, lr, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    edce:	orr.w	r1, r1, r5, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    edd2:	str.w	r2, [ip, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    edd6:	strh	r0, [r3, #0]
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    edd8:	strb.w	lr, [r6]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    eddc:	add	r2, r5
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    edde:	str.w	r1, [r7, r4, lsl #3]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    ede2:	cbnz	r0, edea <usb_isr+0x286>
    ede4:	cmp	r5, #64	; 0x40
    ede6:	it	ne
    ede8:	movne	r2, #0
    edea:	ldr	r3, [sp, #4]
    edec:	str	r2, [r3, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    edee:	ldr	r3, [pc, #104]	; (ee58 <usb_isr+0x2f4>)
    edf0:	ldrh	r2, [r3, #0]
    edf2:	cmp.w	r2, #1280	; 0x500
    edf6:	bne.n	ee02 <usb_isr+0x29e>
			setup.bRequest = 0;
    edf8:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    edfa:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    edfc:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    edfe:	ldr	r3, [pc, #120]	; (ee78 <usb_isr+0x314>)
    ee00:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    ee02:	ldr	r2, [pc, #120]	; (ee7c <usb_isr+0x318>)
    ee04:	movs	r3, #1
    ee06:	strb	r3, [r2, #0]
    ee08:	b.n	ebf8 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    ee0a:	ldr	r2, [pc, #76]	; (ee58 <usb_isr+0x2f4>)
    ee0c:	ldrh	r5, [r2, #0]
    ee0e:	movw	r4, #8225	; 0x2021
    ee12:	cmp	r5, r4
    ee14:	beq.w	f00c <usb_isr+0x4a8>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    ee18:	ldr	r2, [pc, #40]	; (ee44 <usb_isr+0x2e0>)
    ee1a:	str.w	r2, [r7, r0, lsl #3]
    ee1e:	b.n	ee02 <usb_isr+0x29e>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    ee20:	ldr	r2, [pc, #32]	; (ee44 <usb_isr+0x2e0>)
    ee22:	ldr	r3, [pc, #36]	; (ee48 <usb_isr+0x2e4>)
    ee24:	tst.w	r9, #8
    ee28:	it	ne
    ee2a:	movne	r3, r2
    ee2c:	str.w	r3, [r7, r8, lsl #3]
    ee30:	b.n	ebf8 <usb_isr+0x94>
    ee32:	nop
    ee34:	.word	0x1fff0000
    ee38:	.word	0x20007080
    ee3c:	.word	0x20007024
    ee40:	.word	0x200071a8
    ee44:	.word	0x004000c8
    ee48:	.word	0x00400088
    ee4c:	.word	0x20007120
    ee50:	.word	0x20007099
    ee54:	.word	0x20007008
    ee58:	.word	0x2000710c
    ee5c:	.word	0x20007020
    ee60:	.word	0x20007098
    ee64:	.word	0x200070dc
    ee68:	.word	0x200070f4
    ee6c:	.word	0x20007124
    ee70:	.word	0x2000703c
    ee74:	.word	0x20007114
    ee78:	.word	0x40072098
    ee7c:	.word	0x40072094
    ee80:	.word	0x40072080
    ee84:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    ee88:	bl	e9a8 <usb_free>
				packet = tx_first[endpoint];
    ee8c:	ldr	r2, [pc, #724]	; (f164 <usb_isr+0x600>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    ee8e:	ldr	r1, [pc, #728]	; (f168 <usb_isr+0x604>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    ee90:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    ee94:	cmp	r3, #0
    ee96:	beq.w	efee <usb_isr+0x48a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    ee9a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    ee9c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    ee9e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    eea2:	add.w	r2, r3, #8
    eea6:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    eeaa:	cmp	r4, #3
    eeac:	bhi.n	eeba <usb_isr+0x356>
    eeae:	tbb	[pc, r4]
    eeb2:	.short	0x0f12
    eeb4:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    eeb6:	movs	r2, #4
    eeb8:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    eeba:	ldrh	r2, [r3, #0]
    eebc:	tst.w	r9, #8
    eec0:	ite	eq
    eec2:	moveq	r3, #136	; 0x88
    eec4:	movne	r3, #200	; 0xc8
    eec6:	orr.w	r3, r3, r2, lsl #16
    eeca:	str.w	r3, [r7, r8, lsl #3]
    eece:	b.n	ebf8 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    eed0:	movs	r2, #2
    eed2:	strb	r2, [r1, r6]
						break;
    eed4:	b.n	eeba <usb_isr+0x356>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    eed6:	movs	r2, #3
    eed8:	strb	r2, [r1, r6]
						break;
    eeda:	b.n	eeba <usb_isr+0x356>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    eedc:	movs	r2, #5
    eede:	strb	r2, [r1, r6]
						break;
    eee0:	b.n	eeba <usb_isr+0x356>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    eee2:	lsls	r0, r4, #31
    eee4:	bmi.w	f076 <usb_isr+0x512>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    eee8:	lsls	r1, r4, #24
    eeea:	bmi.w	f112 <usb_isr+0x5ae>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    eeee:	lsls	r2, r4, #30
    eef0:	bpl.n	ef00 <usb_isr+0x39c>
		uint8_t err = USB0_ERRSTAT;
    eef2:	ldr	r2, [pc, #632]	; (f16c <usb_isr+0x608>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    eef4:	ldr	r1, [pc, #632]	; (f170 <usb_isr+0x60c>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    eef6:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    eef8:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    eefa:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    eefc:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    eefe:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    ef00:	lsls	r3, r4, #27
    ef02:	bpl.n	ef0a <usb_isr+0x3a6>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    ef04:	ldr	r3, [pc, #616]	; (f170 <usb_isr+0x60c>)
    ef06:	movs	r2, #16
    ef08:	strb	r2, [r3, #0]
	}

}
    ef0a:	add	sp, #28
    ef0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    ef10:	bl	dfc4 <usb_serial_flush_callback>
    ef14:	b.n	ec3a <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    ef16:	ldr	r2, [pc, #604]	; (f174 <usb_isr+0x610>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    ef18:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    ef1c:	ldrb	r3, [r2, #0]
    ef1e:	adds	r3, #1
    ef20:	strb	r3, [r2, #0]
    ef22:	b.n	ebf8 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    ef24:	str.w	r0, [r3, r6, lsl #2]
    ef28:	ldr	r5, [pc, #588]	; (f178 <usb_isr+0x614>)
    ef2a:	b.n	ebc6 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    ef2c:	movw	r4, #770	; 0x302
    ef30:	cmp	r1, r4
    ef32:	beq.w	f32a <usb_isr+0x7c6>
    ef36:	bhi.w	f0d0 <usb_isr+0x56c>
    ef3a:	cmp	r1, #130	; 0x82
    ef3c:	beq.w	f248 <usb_isr+0x6e4>
    ef40:	cmp.w	r1, #258	; 0x102
    ef44:	beq.w	f140 <usb_isr+0x5dc>
    ef48:	cmp	r1, #128	; 0x80
    ef4a:	bne.w	f068 <usb_isr+0x504>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    ef4e:	ldr	r4, [pc, #556]	; (f17c <usb_isr+0x618>)
		reply_buffer[1] = 0;
		datalen = 2;
    ef50:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    ef52:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    ef54:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    ef56:	ldrh	r2, [r5, #6]
    ef58:	cmp	r2, r0
    ef5a:	bcs.w	f380 <usb_isr+0x81c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ef5e:	ldr	r1, [pc, #544]	; (f180 <usb_isr+0x61c>)
    ef60:	ldrb	r5, [r1, #0]
    ef62:	orr.w	ip, r5, #2
    ef66:	add.w	r0, r7, ip, lsl #3
    ef6a:	cmp	r2, #64	; 0x40
    ef6c:	mov	lr, r2
    ef6e:	mov.w	r3, #1
    ef72:	it	cs
    ef74:	movcs.w	lr, #64	; 0x40
    ef78:	str	r4, [r0, #4]
    ef7a:	add.w	r9, r4, lr
    ef7e:	rsb	r0, lr, r2
    ef82:	mov.w	r8, lr, lsl #16
    ef86:	str	r3, [sp, #8]
    ef88:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ef8a:	movs	r4, #200	; 0xc8
    ef8c:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    ef90:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ef94:	str.w	r3, [r7, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    ef98:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    ef9a:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ef9c:	ldr.w	ip, [pc, #508]	; f19c <usb_isr+0x638>
	ep0_tx_data_toggle ^= 1;
    efa0:	ldr	r3, [pc, #480]	; (f184 <usb_isr+0x620>)
	ep0_tx_bdt_bank ^= 1;
    efa2:	ldr.w	r8, [pc, #476]	; f180 <usb_isr+0x61c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    efa6:	cmp	r0, #0
    efa8:	bne.w	f202 <usb_isr+0x69e>
    efac:	cmp.w	lr, #64	; 0x40
    efb0:	bne.n	f06e <usb_isr+0x50a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    efb2:	orr.w	r4, r4, #2
    efb6:	add.w	r3, r7, r4, lsl #3
    efba:	ldr.w	lr, [pc, #480]	; f19c <usb_isr+0x638>
    efbe:	str.w	r9, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    efc2:	cmp	r2, #0
    efc4:	bne.w	f22e <usb_isr+0x6ca>
    efc8:	lsls	r2, r0, #16
    efca:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    efce:	ldrb.w	r3, [sp, #8]
    efd2:	strb	r3, [r6, #0]
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    efd4:	cmp	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    efd6:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    efd8:	add.w	r3, r9, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    efdc:	str.w	r2, [lr, r4, lsl #3]
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    efe0:	bne.n	f06e <usb_isr+0x50a>
    efe2:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    efe4:	ldr	r2, [pc, #416]	; (f188 <usb_isr+0x624>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    efe6:	ldr	r1, [sp, #4]
	ep0_tx_len = datalen;
    efe8:	strh	r0, [r2, #0]
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    efea:	str	r3, [r1, #0]
    efec:	b.n	f06e <usb_isr+0x50a>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    efee:	ldrb	r3, [r1, r6]
    eff0:	cmp	r3, #3
    eff2:	bhi.w	f23a <usb_isr+0x6d6>
    eff6:	add	r2, pc, #4	; (adr r2, effc <usb_isr+0x498>)
    eff8:	ldr.w	pc, [r2, r3, lsl #2]
    effc:	.word	0x0000ebf9
    f000:	.word	0x0000ebf9
    f004:	.word	0x0000f0cb
    f008:	.word	0x0000f0c5
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    f00c:	ldrh	r2, [r2, #4]
    f00e:	cbnz	r2, f028 <usb_isr+0x4c4>
    f010:	ldr	r2, [pc, #376]	; (f18c <usb_isr+0x628>)
    f012:	adds	r5, r1, #7
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    f014:	ldrb.w	r3, [r1], #1
    f018:	strb.w	r3, [r2, #1]!
#endif
			}
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
    f01c:	cmp	r5, r1
    f01e:	bne.n	f014 <usb_isr+0x4b0>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    f020:	ldr	r2, [pc, #364]	; (f190 <usb_isr+0x62c>)
    f022:	ldr	r2, [r2, #0]
    f024:	cmp	r2, #134	; 0x86
    f026:	beq.n	f126 <usb_isr+0x5c2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f028:	ldr	r1, [pc, #340]	; (f180 <usb_isr+0x61c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f02a:	ldr	r6, [pc, #344]	; (f184 <usb_isr+0x620>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f02c:	ldrb	r4, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f02e:	ldrb	r2, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f030:	orr.w	r5, r4, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    f034:	eor.w	r4, r4, #1
    f038:	strb	r4, [r1, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f03a:	add.w	r1, r7, r5, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f03e:	cmp	r2, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f040:	mov.w	r4, #0
    f044:	str	r4, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    f046:	eor.w	r2, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f04a:	ite	eq
    f04c:	moveq	r1, #136	; 0x88
    f04e:	movne	r1, #200	; 0xc8
    f050:	str.w	r1, [r7, r5, lsl #3]
	ep0_tx_data_toggle ^= 1;
    f054:	strb	r2, [r6, #0]
    f056:	b.n	ee18 <usb_isr+0x2b4>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f058:	movw	r4, #26273	; 0x66a1
    f05c:	cmp	r1, r4
    f05e:	beq.n	f068 <usb_isr+0x504>
    f060:	movw	r4, #26529	; 0x67a1
    f064:	cmp	r1, r4
    f066:	beq.n	f12e <usb_isr+0x5ca>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f068:	ldr	r3, [pc, #296]	; (f194 <usb_isr+0x630>)
    f06a:	movs	r2, #15
    f06c:	strb	r2, [r3, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    f06e:	ldr	r2, [pc, #296]	; (f198 <usb_isr+0x634>)
    f070:	movs	r3, #1
    f072:	strb	r3, [r2, #0]
    f074:	b.n	ee02 <usb_isr+0x29e>

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    f076:	ldr	r1, [pc, #288]	; (f198 <usb_isr+0x634>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    f078:	ldr	r3, [pc, #288]	; (f19c <usb_isr+0x638>)
    f07a:	ldr	r0, [pc, #292]	; (f1a0 <usb_isr+0x63c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    f07c:	ldr	r6, [pc, #256]	; (f180 <usb_isr+0x61c>)
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f07e:	ldr.w	ip, [pc, #276]	; f194 <usb_isr+0x630>

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    f082:	ldr	r5, [pc, #232]	; (f16c <usb_isr+0x608>)
		USB0_ISTAT = 0xFF;
    f084:	ldr.w	lr, [pc, #232]	; f170 <usb_isr+0x60c>

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    f088:	ldr	r7, [pc, #280]	; (f1a4 <usb_isr+0x640>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    f08a:	movs	r4, #2
    f08c:	strb	r4, [r1, #0]
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    f08e:	ldr	r4, [pc, #280]	; (f1a8 <usb_isr+0x644>)
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    f090:	str	r0, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    f092:	str	r4, [r3, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    f094:	str	r0, [r3, #8]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    f096:	ldr	r0, [pc, #276]	; (f1ac <usb_isr+0x648>)
    f098:	str	r0, [r3, #12]
		table[index(0, TX, EVEN)].desc = 0;
    f09a:	str	r2, [r3, #16]
		table[index(0, TX, ODD)].desc = 0;
    f09c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f09e:	movs	r3, #13
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    f0a0:	strb	r2, [r6, #0]
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    f0a2:	ldr	r4, [pc, #268]	; (f1b0 <usb_isr+0x64c>)
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f0a4:	strb.w	r3, [ip]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    f0a8:	ldr	r6, [pc, #264]	; (f1b4 <usb_isr+0x650>)

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    f0aa:	movs	r3, #255	; 0xff
    f0ac:	strb	r3, [r5, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    f0ae:	movs	r0, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    f0b0:	movs	r5, #159	; 0x9f
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    f0b2:	strb.w	r3, [lr]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    f0b6:	strb	r2, [r7, #0]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    f0b8:	strb	r3, [r6, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    f0ba:	strb	r5, [r4, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    f0bc:	strb	r0, [r1, #0]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    f0be:	add	sp, #28
    f0c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    f0c4:	movs	r3, #1
    f0c6:	strb	r3, [r1, r6]
						break;
    f0c8:	b.n	ebf8 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    f0ca:	movs	r3, #0
    f0cc:	strb	r3, [r1, r6]
						break;
    f0ce:	b.n	ebf8 <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f0d0:	cmp.w	r1, #1280	; 0x500
    f0d4:	beq.w	f322 <usb_isr+0x7be>
    f0d8:	bcc.n	f068 <usb_isr+0x504>
    f0da:	sub.w	r1, r1, #1664	; 0x680
    f0de:	cmp	r1, #1
    f0e0:	bhi.n	f068 <usb_isr+0x504>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    f0e2:	ldr	r2, [pc, #212]	; (f1b8 <usb_isr+0x654>)
    f0e4:	ldr	r4, [r2, #4]
    f0e6:	cmp	r4, #0
    f0e8:	beq.n	f068 <usb_isr+0x504>
    f0ea:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    f0ec:	ldrh.w	lr, [r5, #4]
    f0f0:	b.n	f0fa <usb_isr+0x596>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    f0f2:	adds	r2, #12
			if (list->addr == NULL) break;
    f0f4:	ldr	r4, [r2, #4]
    f0f6:	cmp	r4, #0
    f0f8:	beq.n	f068 <usb_isr+0x504>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    f0fa:	ldrh	r3, [r2, #0]
    f0fc:	cmp	r3, r0
    f0fe:	bne.n	f0f2 <usb_isr+0x58e>
    f100:	ldrh	r3, [r2, #2]
    f102:	cmp	r3, lr
    f104:	bne.n	f0f2 <usb_isr+0x58e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    f106:	lsrs	r0, r0, #8
    f108:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    f10a:	ite	eq
    f10c:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    f10e:	ldrhne	r0, [r2, #8]
    f110:	b.n	ef56 <usb_isr+0x3f2>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f112:	ldr	r1, [pc, #128]	; (f194 <usb_isr+0x630>)
		USB0_ISTAT = USB_ISTAT_STALL;
    f114:	ldr	r3, [pc, #88]	; (f170 <usb_isr+0x60c>)
    f116:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f118:	movs	r0, #13
    f11a:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    f11c:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    f11e:	lsls	r2, r4, #30
    f120:	bpl.w	ef00 <usb_isr+0x39c>
    f124:	b.n	eef2 <usb_isr+0x38e>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    f126:	ldr	r2, [pc, #148]	; (f1bc <usb_isr+0x658>)
    f128:	movs	r1, #15
    f12a:	strb	r1, [r2, #0]
    f12c:	b.n	f028 <usb_isr+0x4c4>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    f12e:	ldr	r4, [pc, #76]	; (f17c <usb_isr+0x618>)
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
    f130:	movs	r1, #32
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
		reply_buffer[1] = 0;
    f132:	strb	r2, [r4, #1]
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    f134:	movs	r2, #4
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
    f136:	strb	r0, [r4, #2]
		reply_buffer[3] = 0x20;
    f138:	strb	r1, [r4, #3]
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    f13a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    f13c:	mov	r0, r2
    f13e:	b.n	ef56 <usb_isr+0x3f2>
    f140:	ldrh	r1, [r5, #4]
    f142:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    f146:	cmp	r1, #6
    f148:	bhi.n	f068 <usb_isr+0x504>
    f14a:	ldrh	r2, [r5, #2]
    f14c:	cmp	r2, #0
    f14e:	bne.n	f068 <usb_isr+0x504>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    f150:	ldr	r4, [pc, #64]	; (f194 <usb_isr+0x630>)
    f152:	str	r0, [sp, #8]
    f154:	lsls	r1, r1, #2
    f156:	add	r4, r1
    f158:	ldrb	r1, [r4, #0]
    f15a:	bic.w	r1, r1, #2
    f15e:	strb	r1, [r4, #0]
    f160:	b.n	f1da <usb_isr+0x676>
    f162:	nop
    f164:	.word	0x200070dc
    f168:	.word	0x20007124
    f16c:	.word	0x40072088
    f170:	.word	0x40072080
    f174:	.word	0x20007115
    f178:	.word	0x20007024
    f17c:	.word	0x20007118
    f180:	.word	0x20007114
    f184:	.word	0x20007098
    f188:	.word	0x2000703c
    f18c:	.word	0x2000719b
    f190:	.word	0x2000719c
    f194:	.word	0x400720c0
    f198:	.word	0x40072094
    f19c:	.word	0x1fff0000
    f1a0:	.word	0x00400088
    f1a4:	.word	0x40072098
    f1a8:	.word	0x20007040
    f1ac:	.word	0x2000709c
    f1b0:	.word	0x40072084
    f1b4:	.word	0x4007208c
    f1b8:	.word	0x000152a8
    f1bc:	.word	0x20007099
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    f1c0:	ldrh	r1, [r5, #4]
    f1c2:	cmp	r1, #0
    f1c4:	bne.w	f350 <usb_isr+0x7ec>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f1c8:	ldr	r3, [pc, #472]	; (f3a4 <usb_isr+0x840>)
    f1ca:	ldr	r2, [pc, #476]	; (f3a8 <usb_isr+0x844>)
			usb_cdc_line_rtsdtr = setup.wValue;
    f1cc:	ldr	r4, [pc, #476]	; (f3ac <usb_isr+0x848>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f1ce:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    f1d0:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f1d2:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    f1d4:	str	r0, [sp, #8]
    f1d6:	mov	r2, r1
    f1d8:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    f1da:	movs	r0, #0
    f1dc:	mov	r9, r0
    f1de:	mov	r8, r0
    f1e0:	mov	lr, r0
    f1e2:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f1e4:	ldr	r1, [pc, #456]	; (f3b0 <usb_isr+0x84c>)
    f1e6:	ldrb	r5, [r1, #0]
    f1e8:	orr.w	ip, r5, #2
    f1ec:	add.w	r3, r7, ip, lsl #3
    f1f0:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f1f2:	ldr	r3, [sp, #8]
    f1f4:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f1f6:	ldr	r3, [sp, #12]
    f1f8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f1fa:	ite	eq
    f1fc:	moveq	r4, #136	; 0x88
    f1fe:	movne	r4, #200	; 0xc8
    f200:	b.n	ef8c <usb_isr+0x428>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    f202:	cmp	r0, #64	; 0x40
    f204:	bls.w	efb2 <usb_isr+0x44e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    f208:	orr.w	r4, r4, #2
    f20c:	add.w	r1, ip, r4, lsl #3
    f210:	str.w	r9, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f214:	cbz	r2, f236 <usb_isr+0x6d2>
    f216:	ldr	r2, [pc, #412]	; (f3b4 <usb_isr+0x850>)
	ep0_tx_data_toggle ^= 1;
    f218:	ldrb.w	r1, [sp, #8]
    f21c:	strb	r1, [r3, #0]
	ep0_tx_bdt_bank ^= 1;
    f21e:	strb.w	r5, [r8]
    f222:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    f224:	add.w	r3, r9, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    f228:	str.w	r2, [ip, r4, lsl #3]
    f22c:	b.n	efe4 <usb_isr+0x480>
    f22e:	lsls	r2, r0, #16
    f230:	orr.w	r2, r2, #200	; 0xc8
    f234:	b.n	efce <usb_isr+0x46a>
    f236:	ldr	r2, [pc, #384]	; (f3b8 <usb_isr+0x854>)
    f238:	b.n	f218 <usb_isr+0x6b4>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    f23a:	tst.w	r9, #8
    f23e:	ite	eq
    f240:	moveq	r3, #2
    f242:	movne	r3, #3
    f244:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    f246:	b.n	ebf8 <usb_isr+0x94>
    f248:	ldrh	r1, [r5, #4]
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    f24a:	ldr	r3, [pc, #368]	; (f3bc <usb_isr+0x858>)
    f24c:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    f250:	cmp	r1, #6
    f252:	bhi.w	f06a <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    f256:	ldr	r4, [pc, #360]	; (f3c0 <usb_isr+0x85c>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    f258:	lsls	r1, r1, #2
    f25a:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    f25c:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    f25e:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    f260:	ldrb	r2, [r3, #0]
    f262:	lsls	r3, r2, #30
    f264:	bpl.n	f354 <usb_isr+0x7f0>
    f266:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    f268:	movs	r0, #2
    f26a:	b.n	ef56 <usb_isr+0x3f2>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    f26c:	ldr	r3, [sp, #8]
    f26e:	mov.w	r2, #1
    f272:	strb	r2, [r3, #0]
    f274:	ldr	r3, [sp, #8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    f276:	add.w	r9, r9, #1
    f27a:	adds	r3, #1
    f27c:	cmp.w	r9, #6
    f280:	add.w	r4, r4, #4
    f284:	add.w	r5, r5, #4
    f288:	str	r3, [sp, #8]
    f28a:	bne.w	ed34 <usb_isr+0x1d0>
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    f28e:	ldr	r3, [pc, #308]	; (f3c4 <usb_isr+0x860>)
    f290:	ldr	r6, [sp, #20]
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
    f292:	ldr	r5, [pc, #308]	; (f3c8 <usb_isr+0x864>)
		cfg = usb_endpoint_config_table;
    f294:	ldr.w	r8, [pc, #316]	; f3d4 <usb_isr+0x870>
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    f298:	movs	r0, #0
    f29a:	strb	r0, [r3, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    f29c:	mov.w	r9, #1
    f2a0:	b.n	f2c2 <usb_isr+0x75e>
    f2a2:	mov.w	r4, r9, lsl #2
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    f2a6:	orr.w	r2, r4, #2
			table[index(i, TX, ODD)].desc = 0;
    f2aa:	orr.w	r4, r4, #3
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    f2ae:	movs	r3, #0
    f2b0:	str.w	r3, [r7, r2, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    f2b4:	str.w	r3, [r7, r4, lsl #3]
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    f2b8:	ldr	r3, [pc, #272]	; (f3cc <usb_isr+0x868>)
    f2ba:	cmp	r5, r3
    f2bc:	add.w	r9, r9, #1
    f2c0:	beq.n	f30e <usb_isr+0x7aa>
			epconf = *cfg++;
    f2c2:	ldrb.w	r3, [r8], #1
			*reg = epconf;
    f2c6:	strb.w	r3, [r5], #4
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    f2ca:	lsls	r2, r3, #28
    f2cc:	bpl.n	f2a2 <usb_isr+0x73e>
				usb_packet_t *p;
				p = usb_malloc();
    f2ce:	bl	e968 <usb_malloc>
				if (p) {
    f2d2:	cmp	r0, #0
    f2d4:	beq.n	f36c <usb_isr+0x808>
					table[index(i, RX, EVEN)].addr = p->buf;
    f2d6:	add.w	r3, r7, r9, lsl #5
    f2da:	mov.w	r4, r9, lsl #2
    f2de:	adds	r0, #8
    f2e0:	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    f2e2:	ldr	r3, [pc, #212]	; (f3b8 <usb_isr+0x854>)
    f2e4:	str.w	r3, [r7, r4, lsl #3]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    f2e8:	bl	e968 <usb_malloc>
				if (p) {
    f2ec:	cmp	r0, #0
    f2ee:	beq.n	f358 <usb_isr+0x7f4>
					table[index(i, RX, ODD)].addr = p->buf;
    f2f0:	orr.w	r3, r4, #1
    f2f4:	add.w	r2, r7, r3, lsl #3
    f2f8:	adds	r0, #8
    f2fa:	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    f2fc:	ldr	r2, [pc, #180]	; (f3b4 <usb_isr+0x850>)
    f2fe:	str.w	r2, [r7, r3, lsl #3]
    f302:	b.n	f2a6 <usb_isr+0x742>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    f304:	ldr	r3, [sp, #8]
    f306:	mov.w	r2, #0
    f30a:	strb	r2, [r3, #0]
    f30c:	b.n	f274 <usb_isr+0x710>
    f30e:	ldrb	r3, [r6, #0]
    f310:	str	r3, [sp, #8]
    f312:	eor.w	r2, r3, #1
    f316:	b.n	f1da <usb_isr+0x676>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    f318:	ldr	r2, [pc, #180]	; (f3d0 <usb_isr+0x86c>)
    f31a:	ldr	r4, [pc, #164]	; (f3c0 <usb_isr+0x85c>)
    f31c:	ldrb	r2, [r2, #0]
    f31e:	strb	r2, [r4, #0]
    f320:	b.n	ef56 <usb_isr+0x3f2>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    f322:	movs	r3, #1
    f324:	movs	r2, #0
    f326:	str	r3, [sp, #8]
    f328:	b.n	f1da <usb_isr+0x676>
    f32a:	ldrh	r1, [r5, #4]
    f32c:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    f330:	cmp	r1, #6
    f332:	bhi.w	f068 <usb_isr+0x504>
    f336:	ldrh	r2, [r5, #2]
    f338:	cmp	r2, #0
    f33a:	bne.w	f068 <usb_isr+0x504>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    f33e:	ldr	r4, [pc, #124]	; (f3bc <usb_isr+0x858>)
    f340:	str	r0, [sp, #8]
    f342:	lsls	r1, r1, #2
    f344:	add	r4, r1
    f346:	ldrb	r1, [r4, #0]
    f348:	orr.w	r1, r1, #2
    f34c:	strb	r1, [r4, #0]
    f34e:	b.n	f1da <usb_isr+0x676>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    f350:	str	r0, [sp, #8]
    f352:	b.n	f1da <usb_isr+0x676>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    f354:	movs	r0, #2
    f356:	b.n	ef56 <usb_isr+0x3f2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    f358:	ldr	r3, [pc, #104]	; (f3c4 <usb_isr+0x860>)
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    f35a:	orr.w	r2, r4, #1
					usb_rx_memory_needed++;
    f35e:	ldrb	r3, [r3, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    f360:	str.w	r0, [r7, r2, lsl #3]
					usb_rx_memory_needed++;
    f364:	ldr	r2, [pc, #92]	; (f3c4 <usb_isr+0x860>)
    f366:	adds	r3, #1
    f368:	strb	r3, [r2, #0]
    f36a:	b.n	f2a6 <usb_isr+0x742>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    f36c:	ldr	r3, [pc, #84]	; (f3c4 <usb_isr+0x860>)
    f36e:	ldr	r2, [pc, #84]	; (f3c4 <usb_isr+0x860>)
    f370:	ldrb	r3, [r3, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    f372:	mov.w	r4, r9, lsl #2
					usb_rx_memory_needed++;
    f376:	adds	r3, #1
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    f378:	str.w	r0, [r7, r4, lsl #3]
					usb_rx_memory_needed++;
    f37c:	strb	r3, [r2, #0]
    f37e:	b.n	f2e8 <usb_isr+0x784>
    f380:	cmp	r0, #64	; 0x40
    f382:	mov	lr, r0
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    f384:	mov.w	r3, #1
    f388:	it	cs
    f38a:	movcs.w	lr, #64	; 0x40
    f38e:	rsb	r0, lr, r0
    f392:	mov.w	r8, lr, lsl #16
    f396:	add.w	r9, r4, lr
    f39a:	movs	r2, #0
    f39c:	str	r3, [sp, #8]
    f39e:	b.n	f1e4 <usb_isr+0x680>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    f3a0:	bkpt	0x0000
    f3a2:	nop
    f3a4:	.word	0x2000701c
    f3a8:	.word	0x200071a4
    f3ac:	.word	0x20007018
    f3b0:	.word	0x20007114
    f3b4:	.word	0x004000c8
    f3b8:	.word	0x00400088
    f3bc:	.word	0x400720c0
    f3c0:	.word	0x20007118
    f3c4:	.word	0x20007115
    f3c8:	.word	0x400720c4
    f3cc:	.word	0x400720dc
    f3d0:	.word	0x20007120
    f3d4:	.word	0x000152a0

0000f3d8 <usb_init>:
}



void usb_init(void)
{
    f3d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    f3dc:	bl	e1e4 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    f3e0:	movs	r3, #0
    f3e2:	ldr	r1, [pc, #140]	; (f470 <usb_init+0x98>)
		table[i].desc = 0;
    f3e4:	mov	r2, r3
		table[i].addr = 0;
    f3e6:	add.w	r0, r1, r3, lsl #3
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    f3ea:	str.w	r2, [r1, r3, lsl #3]
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    f3ee:	adds	r3, #1
    f3f0:	cmp	r3, #28
		table[i].desc = 0;
		table[i].addr = 0;
    f3f2:	str	r2, [r0, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    f3f4:	mov.w	r4, #0
    f3f8:	ldr	r0, [pc, #116]	; (f470 <usb_init+0x98>)
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    f3fa:	bne.n	f3e6 <usb_init+0xe>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    f3fc:	ldr	r1, [pc, #116]	; (f474 <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    f3fe:	ldr	r2, [pc, #120]	; (f478 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    f400:	ldr	r3, [r1, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    f402:	ldr.w	r8, [pc, #140]	; f490 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    f406:	ldr	r7, [pc, #116]	; (f47c <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    f408:	ldr	r5, [pc, #116]	; (f480 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    f40a:	ldr	r6, [pc, #120]	; (f484 <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    f40c:	ldr.w	ip, [pc, #132]	; f494 <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    f410:	ldr.w	lr, [pc, #132]	; f498 <usb_init+0xc0>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    f414:	orr.w	r3, r3, #262144	; 0x40000
    f418:	str	r3, [r1, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    f41a:	ldr	r3, [r2, #0]
    f41c:	orr.w	r3, r3, #50331648	; 0x3000000
    f420:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    f422:	ubfx	r3, r0, #8, #8
    f426:	strb.w	r3, [r8]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    f42a:	add.w	r1, r1, #172032	; 0x2a000
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    f42e:	ubfx	r3, r0, #16, #8
    f432:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    f434:	lsrs	r0, r0, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    f436:	movs	r3, #255	; 0xff

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    f438:	adds	r1, #204	; 0xcc
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    f43a:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    f43e:	strb	r0, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    f440:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    f444:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    f448:	ldr	r5, [pc, #60]	; (f488 <usb_init+0xb0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    f44a:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    f44e:	ldr	r0, [pc, #60]	; (f48c <usb_init+0xb4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    f450:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    f452:	movs	r3, #1
    f454:	strb.w	r3, [r8, #-8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    f458:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    f45a:	strb	r4, [r1, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    f45c:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    f460:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    f462:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    f466:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    f468:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    f46a:	strb	r1, [r2, #0]
    f46c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f470:	.word	0x1fff0000
    f474:	.word	0x40048034
    f478:	.word	0x4000d800
    f47c:	.word	0x400720b0
    f480:	.word	0x400720b4
    f484:	.word	0x40072010
    f488:	.word	0xe000e435
    f48c:	.word	0xe000e104
    f490:	.word	0x4007209c
    f494:	.word	0x40072080
    f498:	.word	0x40072088

0000f49c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    f49c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    f4a0:	ldr	r6, [pc, #196]	; (f568 <yield+0xcc>)
    f4a2:	ldrb	r3, [r6, #0]
    f4a4:	cbz	r3, f4cc <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    f4a6:	ldr	r7, [pc, #196]	; (f56c <yield+0xd0>)
    f4a8:	ldrb	r2, [r7, #0]
    f4aa:	cbnz	r2, f4cc <yield+0x30>
	running = 1;
    f4ac:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    f4ae:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    f4b0:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    f4b2:	bmi.n	f522 <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    f4b4:	lsls	r2, r3, #30
    f4b6:	bmi.n	f4ec <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    f4b8:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    f4ba:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    f4bc:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    f4be:	bpl.n	f4cc <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    f4c0:	ldr	r3, [pc, #172]	; (f570 <yield+0xd4>)
    f4c2:	ldr	r2, [r3, #0]
    f4c4:	cbz	r2, f4cc <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    f4c6:	mrs	r2, IPSR
		if (ipsr != 0) return;
    f4ca:	cbz	r2, f4d0 <yield+0x34>
    f4cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f4d0:	mrs	r1, PRIMASK
		__disable_irq();
    f4d4:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    f4d6:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    f4d8:	cbz	r0, f4e2 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    f4da:	ldr	r4, [pc, #152]	; (f574 <yield+0xd8>)
    f4dc:	ldrb	r2, [r4, #0]
    f4de:	cmp	r2, #0
    f4e0:	beq.n	f540 <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f4e2:	cmp	r1, #0
    f4e4:	bne.n	f4cc <yield+0x30>
    f4e6:	cpsie	i
    f4e8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f4ec:	ldr.w	r8, [pc, #144]	; f580 <yield+0xe4>
    f4f0:	ldrb.w	r2, [r8]
    f4f4:	cmp	r2, #0
    f4f6:	beq.n	f4b8 <yield+0x1c>
    f4f8:	ldr.w	r9, [pc, #136]	; f584 <yield+0xe8>
    f4fc:	movs	r4, #0
    f4fe:	b.n	f50c <yield+0x70>
    f500:	adds	r4, #1
    f502:	ldrb.w	r3, [r8]
    f506:	uxtb	r4, r4
    f508:	cmp	r3, r4
    f50a:	bls.n	f532 <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    f50c:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    f510:	ldr	r3, [r5, #0]
    f512:	mov	r0, r5
    f514:	ldr	r3, [r3, #16]
    f516:	blx	r3
    f518:	cmp	r0, #0
    f51a:	beq.n	f500 <yield+0x64>
    f51c:	ldr	r3, [r5, #16]
    f51e:	blx	r3
    f520:	b.n	f500 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    f522:	bl	ddb0 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    f526:	cbnz	r0, f55c <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    f528:	ldr	r3, [pc, #76]	; (f578 <yield+0xdc>)
    f52a:	ldrb	r3, [r3, #0]
    f52c:	cbnz	r3, f536 <yield+0x9a>
    f52e:	ldrb	r3, [r6, #0]
    f530:	b.n	f4b4 <yield+0x18>
    f532:	ldrb	r3, [r6, #0]
    f534:	b.n	f4b8 <yield+0x1c>
    f536:	ldrb	r3, [r6, #0]
    f538:	and.w	r3, r3, #254	; 0xfe
    f53c:	strb	r3, [r6, #0]
    f53e:	b.n	f4b4 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    f540:	ldr	r5, [r0, #20]
    f542:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    f544:	movs	r3, #1
    f546:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    f548:	cbz	r5, f562 <yield+0xc6>
			firstYield->_prev = nullptr;
    f54a:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f54c:	cbnz	r1, f550 <yield+0xb4>
    f54e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    f550:	movs	r5, #0
    f552:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    f554:	ldr	r3, [r0, #8]
    f556:	blx	r3
		runningFromYield = false;
    f558:	strb	r5, [r4, #0]
    f55a:	b.n	f4cc <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    f55c:	bl	f954 <serialEvent()>
    f560:	b.n	f528 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    f562:	ldr	r3, [pc, #24]	; (f57c <yield+0xe0>)
    f564:	str	r5, [r3, #0]
    f566:	b.n	f54c <yield+0xb0>
    f568:	.word	0x1fff0c54
    f56c:	.word	0x2000712a
    f570:	.word	0x2000713c
    f574:	.word	0x20007140
    f578:	.word	0x1fff0c68
    f57c:	.word	0x20007138
    f580:	.word	0x20007164
    f584:	.word	0x2000714c

0000f588 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    f588:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    f58a:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    f58c:	cbnz	r1, f5b6 <DMAChannel::begin(bool)+0x2e>
    f58e:	ldr	r2, [r0, #0]
    f590:	cbz	r2, f5b6 <DMAChannel::begin(bool)+0x2e>
    f592:	ldrb	r3, [r0, #4]
    f594:	cmp	r3, #15
    f596:	bhi.n	f5b6 <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    f598:	ldr	r4, [pc, #160]	; (f63c <DMAChannel::begin(bool)+0xb4>)
    f59a:	ldrh	r1, [r4, #0]
    f59c:	asr.w	r5, r1, r3
    f5a0:	lsls	r5, r5, #31
    f5a2:	bpl.n	f5ba <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    f5a4:	add.w	r3, r3, #33554432	; 0x2000000
    f5a8:	add.w	r3, r3, #1152	; 0x480
    f5ac:	cmp.w	r2, r3, lsl #5
    f5b0:	bne.n	f5ba <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    f5b2:	cpsie	i
		return;
    f5b4:	pop	{r4, r5, r6, r7, pc}
    f5b6:	ldr	r4, [pc, #132]	; (f63c <DMAChannel::begin(bool)+0xb4>)
    f5b8:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    f5ba:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    f5bc:	asr.w	r2, r1, r3
    f5c0:	ands.w	r2, r2, #1
    f5c4:	beq.n	f5d6 <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    f5c6:	adds	r3, #1
    f5c8:	cmp	r3, #16
    f5ca:	bne.n	f5bc <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    f5cc:	cpsie	i
			TCD = (TCD_t *)0;
    f5ce:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    f5d0:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    f5d2:	str	r2, [r0, #0]
    f5d4:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    f5d6:	movs	r5, #1
    f5d8:	lsls	r5, r3
    f5da:	orrs	r1, r5
    f5dc:	strh	r1, [r4, #0]
			__enable_irq();
    f5de:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    f5e0:	ldr	r6, [pc, #92]	; (f640 <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    f5e2:	ldr	r5, [pc, #96]	; (f644 <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    f5e4:	ldr	r7, [pc, #96]	; (f648 <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    f5e6:	ldr.w	lr, [pc, #104]	; f650 <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    f5ea:	uxtb	r1, r3
    f5ec:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    f5ee:	ldr	r4, [r6, #0]
    f5f0:	orr.w	r4, r4, #2
    f5f4:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    f5f6:	ldr	r4, [r5, #0]
    f5f8:	orr.w	r4, r4, #2
    f5fc:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    f5fe:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    f602:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    f606:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    f60a:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    f60e:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    f610:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    f614:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    f616:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    f618:	ldr	r4, [pc, #48]	; (f64c <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    f61a:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    f61e:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    f620:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    f622:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    f624:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    f626:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    f628:	str	r2, [r3, #0]
	*p++ = 0;
    f62a:	str	r2, [r3, #4]
	*p++ = 0;
    f62c:	str	r2, [r3, #8]
	*p++ = 0;
    f62e:	str	r2, [r3, #12]
	*p++ = 0;
    f630:	str	r2, [r3, #16]
	*p++ = 0;
    f632:	str	r2, [r3, #20]
	*p++ = 0;
    f634:	str	r2, [r3, #24]
	*p++ = 0;
    f636:	str	r2, [r3, #28]
    f638:	pop	{r4, r5, r6, r7, pc}
    f63a:	nop
    f63c:	.word	0x2000712c
    f640:	.word	0x40048040
    f644:	.word	0x4004803c
    f648:	.word	0x40008000
    f64c:	.word	0x4000801f
    f650:	.word	0x4000801a

0000f654 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    f654:	ldrb	r3, [r0, #4]
    f656:	cmp	r3, #15
    f658:	bhi.n	f680 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    f65a:	ldr	r2, [pc, #40]	; (f684 <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    f65c:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    f65e:	strb	r3, [r2, #0]
	__disable_irq();
    f660:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    f662:	ldr	r1, [pc, #36]	; (f688 <DMAChannel::release()+0x34>)
    f664:	ldrb	r4, [r0, #4]
    f666:	ldrh	r2, [r1, #0]
    f668:	movs	r3, #1
    f66a:	lsls	r3, r4
    f66c:	bic.w	r3, r2, r3
    f670:	strh	r3, [r1, #0]
	__enable_irq();
    f672:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    f674:	movs	r2, #16
	TCD = (TCD_t *)0;
    f676:	movs	r3, #0
}
    f678:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    f67c:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    f67e:	str	r3, [r0, #0]
}
    f680:	bx	lr
    f682:	nop
    f684:	.word	0x4000801a
    f688:	.word	0x2000712c

0000f68c <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    f68c:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f68e:	mrs	r2, PRIMASK
		__disable_irq();
    f692:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    f694:	ldrb	r3, [r0, #29]
    f696:	cbnz	r3, f6a6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    f698:	ldrb	r1, [r0, #28]
    f69a:	cmp	r1, #1
    f69c:	beq.n	f6b0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    f69e:	cmp	r1, #3
    f6a0:	beq.n	f6c4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    f6a2:	movs	r3, #1
    f6a4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f6a6:	cbnz	r2, f6aa <EventResponder::triggerEventNotImmediate()+0x1e>
    f6a8:	cpsie	i
	}
	enableInterrupts(irq);
}
    f6aa:	ldr.w	r4, [sp], #4
    f6ae:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    f6b0:	ldr	r4, [pc, #68]	; (f6f8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    f6b2:	ldr	r1, [r4, #0]
    f6b4:	cbz	r1, f6e0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    f6b6:	ldr	r1, [pc, #68]	; (f6fc <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    f6b8:	str	r3, [r0, #20]
				_prev = lastYield;
    f6ba:	ldr	r3, [r1, #0]
    f6bc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    f6be:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    f6c0:	str	r0, [r3, #20]
    f6c2:	b.n	f6a2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    f6c4:	ldr	r4, [pc, #56]	; (f700 <EventResponder::triggerEventNotImmediate()+0x74>)
    f6c6:	ldr	r1, [r4, #0]
    f6c8:	cbz	r1, f6ec <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    f6ca:	ldr	r1, [pc, #56]	; (f704 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    f6cc:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    f6ce:	ldr	r3, [r1, #0]
    f6d0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    f6d2:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    f6d4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    f6d6:	ldr	r3, [pc, #48]	; (f708 <EventResponder::triggerEventNotImmediate()+0x7c>)
    f6d8:	mov.w	r1, #268435456	; 0x10000000
    f6dc:	str	r1, [r3, #0]
    f6de:	b.n	f6a2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    f6e0:	ldr	r3, [pc, #24]	; (f6fc <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    f6e2:	str	r1, [r0, #20]
				_prev = nullptr;
    f6e4:	str	r1, [r0, #24]
				firstYield = this;
    f6e6:	str	r0, [r4, #0]
				lastYield = this;
    f6e8:	str	r0, [r3, #0]
    f6ea:	b.n	f6a2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    f6ec:	ldr	r3, [pc, #20]	; (f704 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    f6ee:	str	r1, [r0, #20]
				_prev = nullptr;
    f6f0:	str	r1, [r0, #24]
				firstInterrupt = this;
    f6f2:	str	r0, [r4, #0]
				lastInterrupt = this;
    f6f4:	str	r0, [r3, #0]
    f6f6:	b.n	f6d6 <EventResponder::triggerEventNotImmediate()+0x4a>
    f6f8:	.word	0x2000713c
    f6fc:	.word	0x20007138
    f700:	.word	0x20007130
    f704:	.word	0x20007134
    f708:	.word	0xe000ed04

0000f70c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    f70c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f70e:	mrs	r2, PRIMASK
		__disable_irq();
    f712:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    f714:	ldr	r4, [pc, #48]	; (f748 <EventResponder::runFromInterrupt()+0x3c>)
    f716:	ldr	r0, [r4, #0]
		if (first) {
    f718:	cbz	r0, f73c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    f71a:	ldr	r6, [pc, #48]	; (f74c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    f71c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    f71e:	ldr	r3, [r0, #20]
    f720:	str	r3, [r4, #0]
			if (firstInterrupt) {
    f722:	cbz	r3, f742 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    f724:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f726:	cbnz	r2, f72a <EventResponder::runFromInterrupt()+0x1e>
    f728:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    f72a:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    f72c:	ldr	r3, [r0, #8]
    f72e:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f730:	mrs	r2, PRIMASK
		__disable_irq();
    f734:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    f736:	ldr	r0, [r4, #0]
		if (first) {
    f738:	cmp	r0, #0
    f73a:	bne.n	f71e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    f73c:	cbnz	r2, f740 <EventResponder::runFromInterrupt()+0x34>
    f73e:	cpsie	i
    f740:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    f742:	str	r3, [r6, #0]
    f744:	b.n	f726 <EventResponder::runFromInterrupt()+0x1a>
    f746:	nop
    f748:	.word	0x20007130
    f74c:	.word	0x20007134

0000f750 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    f750:	b.w	f70c <EventResponder::runFromInterrupt()>

0000f754 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    f754:	ldr	r2, [pc, #8]	; (f760 <systick_isr+0xc>)
    f756:	ldr	r3, [r2, #0]
    f758:	adds	r3, #1
    f75a:	str	r3, [r2, #0]
    f75c:	bx	lr
    f75e:	nop
    f760:	.word	0x2000701c

0000f764 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    f764:	b.w	ddcc <usb_serial_flush_input>

0000f768 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    f768:	b.w	dd80 <usb_serial_peekchar>

0000f76c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    f76c:	b.w	dd38 <usb_serial_getchar>

0000f770 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    f770:	b.w	ddb0 <usb_serial_available>

0000f774 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    f774:	b.w	df6c <usb_serial_flush_output>

0000f778 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    f778:	b.w	df24 <usb_serial_write_buffer_free>

0000f77c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    f77c:	mov	r0, r1
    f77e:	mov	r1, r2
    f780:	b.w	de04 <usb_serial_write>

0000f784 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    f784:	mov	r0, r1
    f786:	b.w	df0c <usb_serial_putchar>
    f78a:	nop

0000f78c <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    f78c:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    f78e:	mov	r6, r1
    f790:	cbz	r1, f7b0 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    f792:	cbz	r2, f7b4 <Print::write(unsigned char const*, unsigned int)+0x28>
    f794:	mov	r7, r0
    f796:	mov	r4, r2
    f798:	movs	r5, #0
    f79a:	ldr	r3, [r7, #0]
    f79c:	ldrb.w	r1, [r6], #1
    f7a0:	ldr	r3, [r3, #0]
    f7a2:	mov	r0, r7
    f7a4:	blx	r3
    f7a6:	subs	r4, #1
    f7a8:	add	r5, r0
    f7aa:	bne.n	f79a <Print::write(unsigned char const*, unsigned int)+0xe>
    f7ac:	mov	r0, r5
    f7ae:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    f7b0:	mov	r0, r1
    f7b2:	pop	{r3, r4, r5, r6, r7, pc}
    f7b4:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    f7b6:	pop	{r3, r4, r5, r6, r7, pc}

0000f7b8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    f7b8:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    f7ba:	ldr	r2, [pc, #24]	; (f7d4 <Print::println()+0x1c>)
	return write(buf, 2);
    f7bc:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    f7be:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    f7c0:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    f7c2:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    f7c4:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    f7c6:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    f7ca:	movs	r2, #2
    f7cc:	blx	r3
}
    f7ce:	add	sp, #12
    f7d0:	ldr.w	pc, [sp], #4
    f7d4:	.word	0x00015538

0000f7d8 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    f7d8:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    f7da:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    f7dc:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    f7de:	ldr	r3, [r3, #4]
    f7e0:	blx	r3
	return len;
}
    f7e2:	mov	r0, r4
    f7e4:	pop	{r4, pc}
    f7e6:	nop

0000f7e8 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    f7e8:	push	{r1, r2, r3}
    f7ea:	push	{lr}
    f7ec:	sub	sp, #8
    f7ee:	add	r2, sp, #12
    f7f0:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    f7f4:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    f7f6:	bl	12fb0 <vdprintf>
#endif
}
    f7fa:	add	sp, #8
    f7fc:	ldr.w	lr, [sp], #4
    f800:	add	sp, #12
    f802:	bx	lr

0000f804 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    f804:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f808:	sub	sp, #72	; 0x48
    f80a:	ldrb.w	r6, [sp, #104]	; 0x68
    f80e:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    f812:	cmp	r6, #1
    f814:	bls.n	f8b6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xb2>
    f816:	mov	r4, r2
    f818:	mov	r5, r3
	if (n == 0) {
    f81a:	orrs.w	r3, r4, r5
    f81e:	mov	r9, r0
    f820:	beq.n	f8aa <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa6>
    f822:	uxtb	r6, r6
    f824:	movs	r7, #0
    f826:	mov.w	r8, #65	; 0x41
    f82a:	b.n	f830 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x2c>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    f82c:	uxtb.w	r8, r3
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    f830:	mov	r0, r4
    f832:	mov	r1, r5
    f834:	mov	r2, r6
    f836:	mov	r3, r7
    f838:	bl	1050c <__aeabi_uldivmod>
    f83c:	mov	r1, r3
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f83e:	cmp	r1, #0
    f840:	it	eq
    f842:	cmpeq	r2, #10
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    f844:	uxtb	r3, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
    f846:	mov	r0, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f848:	add	r4, sp, #72	; 0x48
    f84a:	add.w	lr, r3, #48	; 0x30
    f84e:	add	r4, r8
    f850:	itte	cs
    f852:	addcs	r3, #55	; 0x37
    f854:	uxtbcs.w	lr, r3
    f858:	uxtbcc.w	lr, lr
			n /= base;
    f85c:	mov	r3, r7
    f85e:	mov	r1, r5
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f860:	strb.w	lr, [r4, #-68]
			n /= base;
    f864:	mov	r2, r6
    f866:	bl	1050c <__aeabi_uldivmod>
    f86a:	mov	r4, r0
    f86c:	mov	r5, r1
			if (n == 0) break;
    f86e:	orrs.w	r3, r4, r5
			i--;
    f872:	add.w	r3, r8, #4294967295
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    f876:	bne.n	f82c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
		}
	}
	if (sign) {
    f878:	cmp.w	sl, #0
    f87c:	beq.n	f890 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
		i--;
    f87e:	add.w	r8, r8, #4294967295
    f882:	uxtb.w	r8, r8
		buf[i] = '-';
    f886:	add	r3, sp, #72	; 0x48
    f888:	add	r3, r8
    f88a:	movs	r2, #45	; 0x2d
    f88c:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    f890:	ldr.w	r3, [r9]
    f894:	add	r2, sp, #4
    f896:	add.w	r1, r2, r8
    f89a:	ldr	r3, [r3, #4]
    f89c:	mov	r0, r9
    f89e:	rsb	r2, r8, #66	; 0x42
    f8a2:	blx	r3
}
    f8a4:	add	sp, #72	; 0x48
    f8a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    f8aa:	movs	r3, #48	; 0x30
    f8ac:	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    f8b0:	mov.w	r8, #65	; 0x41
    f8b4:	b.n	f878 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x74>
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    f8b6:	movs	r0, #0
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    f8b8:	add	sp, #72	; 0x48
    f8ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8be:	nop

0000f8c0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    f8c0:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    f8c2:	bl	1d1c <setup>
	while (1) {
		loop();
    f8c6:	bl	1adc <loop>
		yield();
    f8ca:	bl	f49c <yield>
    f8ce:	b.n	f8c6 <main+0x6>

0000f8d0 <software_isr>:
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    f8d0:	ldr	r1, [pc, #104]	; (f93c <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    f8d2:	ldr	r2, [pc, #108]	; (f940 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    f8d4:	ldr	r0, [pc, #108]	; (f944 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    f8d6:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    f8d8:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    f8da:	ldr	r5, [pc, #108]	; (f948 <software_isr+0x78>)
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    f8dc:	ldr	r4, [r0, #0]
void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

#if defined(KINETISK)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    f8de:	orr.w	r3, r3, #16777216	; 0x1000000
    f8e2:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    f8e4:	ldr	r3, [r2, #0]
    f8e6:	orr.w	r3, r3, #1
    f8ea:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    f8ec:	ldr	r6, [r5, #0]
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    f8ee:	cbnz	r4, f8f6 <software_isr+0x26>
    f8f0:	b.n	f91e <software_isr+0x4e>
    f8f2:	ldr	r4, [r4, #20]
    f8f4:	cbz	r4, f91e <software_isr+0x4e>
		if (p->active) {
    f8f6:	ldrb	r3, [r4, #8]
    f8f8:	cmp	r3, #0
    f8fa:	beq.n	f8f2 <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    f8fc:	ldr	r3, [r4, #0]
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    f8fe:	ldr	r7, [r5, #0]
			p->update();
    f900:	ldr	r3, [r3, #0]
    f902:	mov	r0, r4
    f904:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    f906:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    f908:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    f90a:	subs	r3, r3, r7
    f90c:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    f90e:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    f910:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    f912:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    f914:	it	hi
    f916:	strhhi	r2, [r4, #6]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
#elif defined(KINETISL)
	uint32_t totalcycles = micros();
#endif
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    f918:	ldr	r4, [r4, #20]
    f91a:	cmp	r4, #0
    f91c:	bne.n	f8f6 <software_isr+0x26>
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    f91e:	ldr	r3, [pc, #40]	; (f948 <software_isr+0x78>)
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    f920:	ldr	r2, [pc, #40]	; (f94c <software_isr+0x7c>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    f922:	ldr	r3, [r3, #0]
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    f924:	ldrh	r0, [r2, #0]
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    f926:	ldr	r4, [pc, #40]	; (f950 <software_isr+0x80>)
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
    f928:	subs	r3, r3, r6
    f92a:	lsrs	r3, r3, #4
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    f92c:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    f92e:	cmp	r3, r0
#if defined(KINETISK)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;
#elif defined(KINETISL)
	totalcycles = micros() - totalcycles;
#endif
	AudioStream::cpu_cycles_total = totalcycles;
    f930:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    f932:	bls.n	f938 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    f934:	strh	r1, [r2, #0]
    f936:	pop	{r3, r4, r5, r6, r7, pc}
    f938:	pop	{r3, r4, r5, r6, r7, pc}
    f93a:	nop
    f93c:	.word	0xe000edfc
    f940:	.word	0xe0001000
    f944:	.word	0x20007144
    f948:	.word	0xe0001004
    f94c:	.word	0x20007148
    f950:	.word	0x2000714a

0000f954 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    f954:	bx	lr
    f956:	nop

0000f958 <operator new(unsigned int)>:
    f958:	b.w	10910 <malloc>

0000f95c <operator delete(void*, unsigned int)>:
    f95c:	b.w	10920 <free>

0000f960 <fmodf>:
    f960:	push	{r4, r6, r7, lr}
    f962:	vpush	{d8}
    f966:	sub	sp, #40	; 0x28
    f968:	vmov.f32	s17, s0
    f96c:	vmov.f32	s16, s1
    f970:	bl	fa20 <__ieee754_fmodf>
    f974:	ldr	r3, [pc, #160]	; (fa18 <fmodf+0xb8>)
    f976:	ldrsb.w	r4, [r3]
    f97a:	adds	r3, r4, #1
    f97c:	beq.n	f9e2 <fmodf+0x82>
    f97e:	vcmp.f32	s16, s16
    f982:	vmrs	APSR_nzcv, fpscr
    f986:	bvs.n	f9e2 <fmodf+0x82>
    f988:	vcmp.f32	s17, s17
    f98c:	vmrs	APSR_nzcv, fpscr
    f990:	bvs.n	f9e2 <fmodf+0x82>
    f992:	vcmp.f32	s16, #0.0
    f996:	vmrs	APSR_nzcv, fpscr
    f99a:	bne.n	f9e2 <fmodf+0x82>
    f99c:	movs	r3, #1
    f99e:	ldr	r2, [pc, #124]	; (fa1c <fmodf+0xbc>)
    f9a0:	str	r3, [sp, #0]
    f9a2:	vmov	r0, s17
    f9a6:	movs	r3, #0
    f9a8:	str	r2, [sp, #4]
    f9aa:	str	r3, [sp, #32]
    f9ac:	bl	fe14 <__aeabi_f2d>
    f9b0:	mov	r6, r0
    f9b2:	mov	r7, r1
    f9b4:	vmov	r0, s16
    f9b8:	strd	r6, r7, [sp, #8]
    f9bc:	bl	fe14 <__aeabi_f2d>
    f9c0:	strd	r0, r1, [sp, #16]
    f9c4:	cbnz	r4, f9ea <fmodf+0x8a>
    f9c6:	strd	r6, r7, [sp, #24]
    f9ca:	mov	r0, sp
    f9cc:	bl	fb3c <matherr>
    f9d0:	cbz	r0, f9fe <fmodf+0x9e>
    f9d2:	ldr	r3, [sp, #32]
    f9d4:	cbnz	r3, fa0c <fmodf+0xac>
    f9d6:	ldrd	r0, r1, [sp, #24]
    f9da:	bl	1046c <__aeabi_d2f>
    f9de:	vmov	s0, r0
    f9e2:	add	sp, #40	; 0x28
    f9e4:	vpop	{d8}
    f9e8:	pop	{r4, r6, r7, pc}
    f9ea:	movs	r2, #0
    f9ec:	movs	r3, #0
    f9ee:	mov	r0, r2
    f9f0:	mov	r1, r3
    f9f2:	bl	10110 <__aeabi_ddiv>
    f9f6:	cmp	r4, #2
    f9f8:	strd	r0, r1, [sp, #24]
    f9fc:	bne.n	f9ca <fmodf+0x6a>
    f9fe:	bl	108b4 <__errno>
    fa02:	movs	r3, #33	; 0x21
    fa04:	str	r3, [r0, #0]
    fa06:	ldr	r3, [sp, #32]
    fa08:	cmp	r3, #0
    fa0a:	beq.n	f9d6 <fmodf+0x76>
    fa0c:	bl	108b4 <__errno>
    fa10:	ldr	r3, [sp, #32]
    fa12:	str	r3, [r0, #0]
    fa14:	b.n	f9d6 <fmodf+0x76>
    fa16:	nop
    fa18:	.word	0x1fff0c69
    fa1c:	.word	0x0001553c

0000fa20 <__ieee754_fmodf>:
    fa20:	push	{r4, r5, r6}
    fa22:	sub	sp, #12
    fa24:	vstr	s1, [sp, #4]
    fa28:	ldr	r2, [sp, #4]
    fa2a:	bics.w	r5, r2, #2147483648	; 0x80000000
    fa2e:	beq.n	faa2 <__ieee754_fmodf+0x82>
    fa30:	vmov	r3, s0
    fa34:	and.w	r0, r3, #2147483648	; 0x80000000
    fa38:	eors	r3, r0
    fa3a:	cmp.w	r3, #2139095040	; 0x7f800000
    fa3e:	bge.n	faa2 <__ieee754_fmodf+0x82>
    fa40:	cmp.w	r5, #2139095040	; 0x7f800000
    fa44:	bgt.n	faa2 <__ieee754_fmodf+0x82>
    fa46:	cmp	r3, r5
    fa48:	blt.n	faae <__ieee754_fmodf+0x8e>
    fa4a:	beq.n	fabc <__ieee754_fmodf+0x9c>
    fa4c:	cmp.w	r3, #8388608	; 0x800000
    fa50:	bge.n	faca <__ieee754_fmodf+0xaa>
    fa52:	lsls	r4, r3, #8
    fa54:	cmp	r4, #0
    fa56:	mvn.w	r1, #125	; 0x7d
    fa5a:	ble.n	fa66 <__ieee754_fmodf+0x46>
    fa5c:	lsls	r4, r4, #1
    fa5e:	cmp	r4, #0
    fa60:	add.w	r1, r1, #4294967295
    fa64:	bgt.n	fa5c <__ieee754_fmodf+0x3c>
    fa66:	cmp.w	r5, #8388608	; 0x800000
    fa6a:	blt.n	fae6 <__ieee754_fmodf+0xc6>
    fa6c:	asrs	r4, r5, #23
    fa6e:	subs	r4, #127	; 0x7f
    fa70:	cmn.w	r1, #126	; 0x7e
    fa74:	blt.n	fadc <__ieee754_fmodf+0xbc>
    fa76:	ubfx	r3, r3, #0, #23
    fa7a:	orr.w	r3, r3, #8388608	; 0x800000
    fa7e:	cmn.w	r4, #126	; 0x7e
    fa82:	blt.n	fad0 <__ieee754_fmodf+0xb0>
    fa84:	ubfx	r2, r2, #0, #23
    fa88:	orr.w	r2, r2, #8388608	; 0x800000
    fa8c:	subs	r1, r1, r4
    fa8e:	b.n	fa96 <__ieee754_fmodf+0x76>
    fa90:	beq.n	fabc <__ieee754_fmodf+0x9c>
    fa92:	lsls	r3, r5, #1
    fa94:	subs	r1, #1
    fa96:	subs	r5, r3, r2
    fa98:	cbz	r1, fab4 <__ieee754_fmodf+0x94>
    fa9a:	cmp	r5, #0
    fa9c:	bge.n	fa90 <__ieee754_fmodf+0x70>
    fa9e:	lsls	r3, r3, #1
    faa0:	b.n	fa94 <__ieee754_fmodf+0x74>
    faa2:	vldr	s15, [sp, #4]
    faa6:	vmul.f32	s15, s0, s15
    faaa:	vdiv.f32	s0, s15, s15
    faae:	add	sp, #12
    fab0:	pop	{r4, r5, r6}
    fab2:	bx	lr
    fab4:	subs	r2, r3, r2
    fab6:	it	mi
    fab8:	movmi	r2, r3
    faba:	cbnz	r2, faf6 <__ieee754_fmodf+0xd6>
    fabc:	ldr	r2, [pc, #116]	; (fb34 <__ieee754_fmodf+0x114>)
    fabe:	lsrs	r3, r0, #31
    fac0:	add.w	r3, r2, r3, lsl #2
    fac4:	vldr	s0, [r3]
    fac8:	b.n	faae <__ieee754_fmodf+0x8e>
    faca:	asrs	r1, r3, #23
    facc:	subs	r1, #127	; 0x7f
    face:	b.n	fa66 <__ieee754_fmodf+0x46>
    fad0:	mvn.w	r2, #125	; 0x7d
    fad4:	subs	r2, r2, r4
    fad6:	lsl.w	r2, r5, r2
    fada:	b.n	fa8c <__ieee754_fmodf+0x6c>
    fadc:	mvn.w	r6, #125	; 0x7d
    fae0:	subs	r6, r6, r1
    fae2:	lsls	r3, r6
    fae4:	b.n	fa7e <__ieee754_fmodf+0x5e>
    fae6:	lsls	r6, r5, #8
    fae8:	mvn.w	r4, #125	; 0x7d
    faec:	lsls	r6, r6, #1
    faee:	add.w	r4, r4, #4294967295
    faf2:	bpl.n	faec <__ieee754_fmodf+0xcc>
    faf4:	b.n	fa70 <__ieee754_fmodf+0x50>
    faf6:	ldr	r3, [pc, #64]	; (fb38 <__ieee754_fmodf+0x118>)
    faf8:	cmp	r2, r3
    fafa:	bgt.n	fb06 <__ieee754_fmodf+0xe6>
    fafc:	lsls	r2, r2, #1
    fafe:	cmp	r2, r3
    fb00:	add.w	r4, r4, #4294967295
    fb04:	ble.n	fafc <__ieee754_fmodf+0xdc>
    fb06:	cmn.w	r4, #126	; 0x7e
    fb0a:	bge.n	fb1e <__ieee754_fmodf+0xfe>
    fb0c:	mvn.w	r3, #125	; 0x7d
    fb10:	subs	r3, r3, r4
    fb12:	asrs	r2, r3
    fb14:	orr.w	r3, r2, r0
    fb18:	vmov	s0, r3
    fb1c:	b.n	faae <__ieee754_fmodf+0x8e>
    fb1e:	sub.w	r2, r2, #8388608	; 0x800000
    fb22:	orr.w	r3, r2, r0
    fb26:	adds	r4, #127	; 0x7f
    fb28:	orr.w	r3, r3, r4, lsl #23
    fb2c:	vmov	s0, r3
    fb30:	b.n	faae <__ieee754_fmodf+0x8e>
    fb32:	nop
    fb34:	.word	0x00015544
    fb38:	.word	0x007fffff

0000fb3c <matherr>:
    fb3c:	movs	r0, #0
    fb3e:	bx	lr

0000fb40 <__aeabi_atexit>:
    fb40:	mov	r3, r1
    fb42:	mov	r1, r0
    fb44:	mov	r0, r3
    fb46:	b.w	10884 <__cxa_atexit>
    fb4a:	nop

0000fb4c <__aeabi_drsub>:
    fb4c:	eor.w	r1, r1, #2147483648	; 0x80000000
    fb50:	b.n	fb58 <__adddf3>
    fb52:	nop

0000fb54 <__aeabi_dsub>:
    fb54:	eor.w	r3, r3, #2147483648	; 0x80000000

0000fb58 <__adddf3>:
    fb58:	push	{r4, r5, lr}
    fb5a:	mov.w	r4, r1, lsl #1
    fb5e:	mov.w	r5, r3, lsl #1
    fb62:	teq	r4, r5
    fb66:	it	eq
    fb68:	teqeq	r0, r2
    fb6c:	itttt	ne
    fb6e:	orrsne.w	ip, r4, r0
    fb72:	orrsne.w	ip, r5, r2
    fb76:	mvnsne.w	ip, r4, asr #21
    fb7a:	mvnsne.w	ip, r5, asr #21
    fb7e:	beq.w	fd46 <__adddf3+0x1ee>
    fb82:	mov.w	r4, r4, lsr #21
    fb86:	rsbs	r5, r4, r5, lsr #21
    fb8a:	it	lt
    fb8c:	neglt	r5, r5
    fb8e:	ble.n	fbaa <__adddf3+0x52>
    fb90:	add	r4, r5
    fb92:	eor.w	r2, r0, r2
    fb96:	eor.w	r3, r1, r3
    fb9a:	eor.w	r0, r2, r0
    fb9e:	eor.w	r1, r3, r1
    fba2:	eor.w	r2, r0, r2
    fba6:	eor.w	r3, r1, r3
    fbaa:	cmp	r5, #54	; 0x36
    fbac:	it	hi
    fbae:	pophi	{r4, r5, pc}
    fbb0:	tst.w	r1, #2147483648	; 0x80000000
    fbb4:	mov.w	r1, r1, lsl #12
    fbb8:	mov.w	ip, #1048576	; 0x100000
    fbbc:	orr.w	r1, ip, r1, lsr #12
    fbc0:	beq.n	fbc8 <__adddf3+0x70>
    fbc2:	negs	r0, r0
    fbc4:	sbc.w	r1, r1, r1, lsl #1
    fbc8:	tst.w	r3, #2147483648	; 0x80000000
    fbcc:	mov.w	r3, r3, lsl #12
    fbd0:	orr.w	r3, ip, r3, lsr #12
    fbd4:	beq.n	fbdc <__adddf3+0x84>
    fbd6:	negs	r2, r2
    fbd8:	sbc.w	r3, r3, r3, lsl #1
    fbdc:	teq	r4, r5
    fbe0:	beq.w	fd32 <__adddf3+0x1da>
    fbe4:	sub.w	r4, r4, #1
    fbe8:	rsbs	lr, r5, #32
    fbec:	blt.n	fc0a <__adddf3+0xb2>
    fbee:	lsl.w	ip, r2, lr
    fbf2:	lsr.w	r2, r2, r5
    fbf6:	adds	r0, r0, r2
    fbf8:	adc.w	r1, r1, #0
    fbfc:	lsl.w	r2, r3, lr
    fc00:	adds	r0, r0, r2
    fc02:	asr.w	r3, r3, r5
    fc06:	adcs	r1, r3
    fc08:	b.n	fc28 <__adddf3+0xd0>
    fc0a:	sub.w	r5, r5, #32
    fc0e:	add.w	lr, lr, #32
    fc12:	cmp	r2, #1
    fc14:	lsl.w	ip, r3, lr
    fc18:	it	cs
    fc1a:	orrcs.w	ip, ip, #2
    fc1e:	asr.w	r3, r3, r5
    fc22:	adds	r0, r0, r3
    fc24:	adcs.w	r1, r1, r3, asr #31
    fc28:	and.w	r5, r1, #2147483648	; 0x80000000
    fc2c:	bpl.n	fc3e <__adddf3+0xe6>
    fc2e:	mov.w	lr, #0
    fc32:	rsbs	ip, ip, #0
    fc36:	sbcs.w	r0, lr, r0
    fc3a:	sbc.w	r1, lr, r1
    fc3e:	cmp.w	r1, #1048576	; 0x100000
    fc42:	bcc.n	fc7c <__adddf3+0x124>
    fc44:	cmp.w	r1, #2097152	; 0x200000
    fc48:	bcc.n	fc64 <__adddf3+0x10c>
    fc4a:	lsrs	r1, r1, #1
    fc4c:	movs.w	r0, r0, rrx
    fc50:	mov.w	ip, ip, rrx
    fc54:	add.w	r4, r4, #1
    fc58:	mov.w	r2, r4, lsl #21
    fc5c:	cmn.w	r2, #4194304	; 0x400000
    fc60:	bcs.w	fd98 <__adddf3+0x240>
    fc64:	cmp.w	ip, #2147483648	; 0x80000000
    fc68:	it	eq
    fc6a:	movseq.w	ip, r0, lsr #1
    fc6e:	adcs.w	r0, r0, #0
    fc72:	adc.w	r1, r1, r4, lsl #20
    fc76:	orr.w	r1, r1, r5
    fc7a:	pop	{r4, r5, pc}
    fc7c:	movs.w	ip, ip, lsl #1
    fc80:	adcs	r0, r0
    fc82:	adc.w	r1, r1, r1
    fc86:	tst.w	r1, #1048576	; 0x100000
    fc8a:	sub.w	r4, r4, #1
    fc8e:	bne.n	fc64 <__adddf3+0x10c>
    fc90:	teq	r1, #0
    fc94:	itt	eq
    fc96:	moveq	r1, r0
    fc98:	moveq	r0, #0
    fc9a:	clz	r3, r1
    fc9e:	it	eq
    fca0:	addeq	r3, #32
    fca2:	sub.w	r3, r3, #11
    fca6:	subs.w	r2, r3, #32
    fcaa:	bge.n	fcc6 <__adddf3+0x16e>
    fcac:	adds	r2, #12
    fcae:	ble.n	fcc2 <__adddf3+0x16a>
    fcb0:	add.w	ip, r2, #20
    fcb4:	rsb	r2, r2, #12
    fcb8:	lsl.w	r0, r1, ip
    fcbc:	lsr.w	r1, r1, r2
    fcc0:	b.n	fcdc <__adddf3+0x184>
    fcc2:	add.w	r2, r2, #20
    fcc6:	it	le
    fcc8:	rsble	ip, r2, #32
    fccc:	lsl.w	r1, r1, r2
    fcd0:	lsr.w	ip, r0, ip
    fcd4:	itt	le
    fcd6:	orrle.w	r1, r1, ip
    fcda:	lslle	r0, r2
    fcdc:	subs	r4, r4, r3
    fcde:	ittt	ge
    fce0:	addge.w	r1, r1, r4, lsl #20
    fce4:	orrge	r1, r5
    fce6:	popge	{r4, r5, pc}
    fce8:	mvn.w	r4, r4
    fcec:	subs	r4, #31
    fcee:	bge.n	fd2a <__adddf3+0x1d2>
    fcf0:	adds	r4, #12
    fcf2:	bgt.n	fd12 <__adddf3+0x1ba>
    fcf4:	add.w	r4, r4, #20
    fcf8:	rsb	r2, r4, #32
    fcfc:	lsr.w	r0, r0, r4
    fd00:	lsl.w	r3, r1, r2
    fd04:	orr.w	r0, r0, r3
    fd08:	lsr.w	r3, r1, r4
    fd0c:	orr.w	r1, r5, r3
    fd10:	pop	{r4, r5, pc}
    fd12:	rsb	r4, r4, #12
    fd16:	rsb	r2, r4, #32
    fd1a:	lsr.w	r0, r0, r2
    fd1e:	lsl.w	r3, r1, r4
    fd22:	orr.w	r0, r0, r3
    fd26:	mov	r1, r5
    fd28:	pop	{r4, r5, pc}
    fd2a:	lsr.w	r0, r1, r4
    fd2e:	mov	r1, r5
    fd30:	pop	{r4, r5, pc}
    fd32:	teq	r4, #0
    fd36:	eor.w	r3, r3, #1048576	; 0x100000
    fd3a:	itte	eq
    fd3c:	eoreq.w	r1, r1, #1048576	; 0x100000
    fd40:	addeq	r4, #1
    fd42:	subne	r5, #1
    fd44:	b.n	fbe4 <__adddf3+0x8c>
    fd46:	mvns.w	ip, r4, asr #21
    fd4a:	it	ne
    fd4c:	mvnsne.w	ip, r5, asr #21
    fd50:	beq.n	fda6 <__adddf3+0x24e>
    fd52:	teq	r4, r5
    fd56:	it	eq
    fd58:	teqeq	r0, r2
    fd5c:	beq.n	fd6a <__adddf3+0x212>
    fd5e:	orrs.w	ip, r4, r0
    fd62:	itt	eq
    fd64:	moveq	r1, r3
    fd66:	moveq	r0, r2
    fd68:	pop	{r4, r5, pc}
    fd6a:	teq	r1, r3
    fd6e:	ittt	ne
    fd70:	movne	r1, #0
    fd72:	movne	r0, #0
    fd74:	popne	{r4, r5, pc}
    fd76:	movs.w	ip, r4, lsr #21
    fd7a:	bne.n	fd88 <__adddf3+0x230>
    fd7c:	lsls	r0, r0, #1
    fd7e:	adcs	r1, r1
    fd80:	it	cs
    fd82:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    fd86:	pop	{r4, r5, pc}
    fd88:	adds.w	r4, r4, #4194304	; 0x400000
    fd8c:	itt	cc
    fd8e:	addcc.w	r1, r1, #1048576	; 0x100000
    fd92:	popcc	{r4, r5, pc}
    fd94:	and.w	r5, r1, #2147483648	; 0x80000000
    fd98:	orr.w	r1, r5, #2130706432	; 0x7f000000
    fd9c:	orr.w	r1, r1, #15728640	; 0xf00000
    fda0:	mov.w	r0, #0
    fda4:	pop	{r4, r5, pc}
    fda6:	mvns.w	ip, r4, asr #21
    fdaa:	itte	ne
    fdac:	movne	r1, r3
    fdae:	movne	r0, r2
    fdb0:	mvnseq.w	ip, r5, asr #21
    fdb4:	itt	ne
    fdb6:	movne	r3, r1
    fdb8:	movne	r2, r0
    fdba:	orrs.w	r4, r0, r1, lsl #12
    fdbe:	itte	eq
    fdc0:	orrseq.w	r5, r2, r3, lsl #12
    fdc4:	teqeq	r1, r3
    fdc8:	orrne.w	r1, r1, #524288	; 0x80000
    fdcc:	pop	{r4, r5, pc}
    fdce:	nop

0000fdd0 <__aeabi_ui2d>:
    fdd0:	teq	r0, #0
    fdd4:	itt	eq
    fdd6:	moveq	r1, #0
    fdd8:	bxeq	lr
    fdda:	push	{r4, r5, lr}
    fddc:	mov.w	r4, #1024	; 0x400
    fde0:	add.w	r4, r4, #50	; 0x32
    fde4:	mov.w	r5, #0
    fde8:	mov.w	r1, #0
    fdec:	b.n	fc90 <__adddf3+0x138>
    fdee:	nop

0000fdf0 <__aeabi_i2d>:
    fdf0:	teq	r0, #0
    fdf4:	itt	eq
    fdf6:	moveq	r1, #0
    fdf8:	bxeq	lr
    fdfa:	push	{r4, r5, lr}
    fdfc:	mov.w	r4, #1024	; 0x400
    fe00:	add.w	r4, r4, #50	; 0x32
    fe04:	ands.w	r5, r0, #2147483648	; 0x80000000
    fe08:	it	mi
    fe0a:	negmi	r0, r0
    fe0c:	mov.w	r1, #0
    fe10:	b.n	fc90 <__adddf3+0x138>
    fe12:	nop

0000fe14 <__aeabi_f2d>:
    fe14:	lsls	r2, r0, #1
    fe16:	mov.w	r1, r2, asr #3
    fe1a:	mov.w	r1, r1, rrx
    fe1e:	mov.w	r0, r2, lsl #28
    fe22:	itttt	ne
    fe24:	andsne.w	r3, r2, #4278190080	; 0xff000000
    fe28:	teqne	r3, #4278190080	; 0xff000000
    fe2c:	eorne.w	r1, r1, #939524096	; 0x38000000
    fe30:	bxne	lr
    fe32:	teq	r2, #0
    fe36:	ite	ne
    fe38:	teqne	r3, #4278190080	; 0xff000000
    fe3c:	bxeq	lr
    fe3e:	push	{r4, r5, lr}
    fe40:	mov.w	r4, #896	; 0x380
    fe44:	and.w	r5, r1, #2147483648	; 0x80000000
    fe48:	bic.w	r1, r1, #2147483648	; 0x80000000
    fe4c:	b.n	fc90 <__adddf3+0x138>
    fe4e:	nop

0000fe50 <__aeabi_ul2d>:
    fe50:	orrs.w	r2, r0, r1
    fe54:	it	eq
    fe56:	bxeq	lr
    fe58:	push	{r4, r5, lr}
    fe5a:	mov.w	r5, #0
    fe5e:	b.n	fe76 <__aeabi_l2d+0x16>

0000fe60 <__aeabi_l2d>:
    fe60:	orrs.w	r2, r0, r1
    fe64:	it	eq
    fe66:	bxeq	lr
    fe68:	push	{r4, r5, lr}
    fe6a:	ands.w	r5, r1, #2147483648	; 0x80000000
    fe6e:	bpl.n	fe76 <__aeabi_l2d+0x16>
    fe70:	negs	r0, r0
    fe72:	sbc.w	r1, r1, r1, lsl #1
    fe76:	mov.w	r4, #1024	; 0x400
    fe7a:	add.w	r4, r4, #50	; 0x32
    fe7e:	movs.w	ip, r1, lsr #22
    fe82:	beq.w	fc3e <__adddf3+0xe6>
    fe86:	mov.w	r2, #3
    fe8a:	movs.w	ip, ip, lsr #3
    fe8e:	it	ne
    fe90:	addne	r2, #3
    fe92:	movs.w	ip, ip, lsr #3
    fe96:	it	ne
    fe98:	addne	r2, #3
    fe9a:	add.w	r2, r2, ip, lsr #3
    fe9e:	rsb	r3, r2, #32
    fea2:	lsl.w	ip, r0, r3
    fea6:	lsr.w	r0, r0, r2
    feaa:	lsl.w	lr, r1, r3
    feae:	orr.w	r0, r0, lr
    feb2:	lsr.w	r1, r1, r2
    feb6:	add	r4, r2
    feb8:	b.n	fc3e <__adddf3+0xe6>
    feba:	nop

0000febc <__aeabi_dmul>:
    febc:	push	{r4, r5, r6, lr}
    febe:	mov.w	ip, #255	; 0xff
    fec2:	orr.w	ip, ip, #1792	; 0x700
    fec6:	ands.w	r4, ip, r1, lsr #20
    feca:	ittte	ne
    fecc:	andsne.w	r5, ip, r3, lsr #20
    fed0:	teqne	r4, ip
    fed4:	teqne	r5, ip
    fed8:	bleq	10098 <__aeabi_dmul+0x1dc>
    fedc:	add	r4, r5
    fede:	eor.w	r6, r1, r3
    fee2:	bic.w	r1, r1, ip, lsl #21
    fee6:	bic.w	r3, r3, ip, lsl #21
    feea:	orrs.w	r5, r0, r1, lsl #12
    feee:	it	ne
    fef0:	orrsne.w	r5, r2, r3, lsl #12
    fef4:	orr.w	r1, r1, #1048576	; 0x100000
    fef8:	orr.w	r3, r3, #1048576	; 0x100000
    fefc:	beq.n	ff70 <__aeabi_dmul+0xb4>
    fefe:	umull	ip, lr, r0, r2
    ff02:	mov.w	r5, #0
    ff06:	umlal	lr, r5, r1, r2
    ff0a:	and.w	r2, r6, #2147483648	; 0x80000000
    ff0e:	umlal	lr, r5, r0, r3
    ff12:	mov.w	r6, #0
    ff16:	umlal	r5, r6, r1, r3
    ff1a:	teq	ip, #0
    ff1e:	it	ne
    ff20:	orrne.w	lr, lr, #1
    ff24:	sub.w	r4, r4, #255	; 0xff
    ff28:	cmp.w	r6, #512	; 0x200
    ff2c:	sbc.w	r4, r4, #768	; 0x300
    ff30:	bcs.n	ff3c <__aeabi_dmul+0x80>
    ff32:	movs.w	lr, lr, lsl #1
    ff36:	adcs	r5, r5
    ff38:	adc.w	r6, r6, r6
    ff3c:	orr.w	r1, r2, r6, lsl #11
    ff40:	orr.w	r1, r1, r5, lsr #21
    ff44:	mov.w	r0, r5, lsl #11
    ff48:	orr.w	r0, r0, lr, lsr #21
    ff4c:	mov.w	lr, lr, lsl #11
    ff50:	subs.w	ip, r4, #253	; 0xfd
    ff54:	it	hi
    ff56:	cmphi.w	ip, #1792	; 0x700
    ff5a:	bhi.n	ff9a <__aeabi_dmul+0xde>
    ff5c:	cmp.w	lr, #2147483648	; 0x80000000
    ff60:	it	eq
    ff62:	movseq.w	lr, r0, lsr #1
    ff66:	adcs.w	r0, r0, #0
    ff6a:	adc.w	r1, r1, r4, lsl #20
    ff6e:	pop	{r4, r5, r6, pc}
    ff70:	and.w	r6, r6, #2147483648	; 0x80000000
    ff74:	orr.w	r1, r6, r1
    ff78:	orr.w	r0, r0, r2
    ff7c:	eor.w	r1, r1, r3
    ff80:	subs.w	r4, r4, ip, lsr #1
    ff84:	ittt	gt
    ff86:	rsbsgt	r5, r4, ip
    ff8a:	orrgt.w	r1, r1, r4, lsl #20
    ff8e:	popgt	{r4, r5, r6, pc}
    ff90:	orr.w	r1, r1, #1048576	; 0x100000
    ff94:	mov.w	lr, #0
    ff98:	subs	r4, #1
    ff9a:	bgt.w	100f4 <__aeabi_dmul+0x238>
    ff9e:	cmn.w	r4, #54	; 0x36
    ffa2:	ittt	le
    ffa4:	movle	r0, #0
    ffa6:	andle.w	r1, r1, #2147483648	; 0x80000000
    ffaa:	pople	{r4, r5, r6, pc}
    ffac:	rsb	r4, r4, #0
    ffb0:	subs	r4, #32
    ffb2:	bge.n	10020 <__aeabi_dmul+0x164>
    ffb4:	adds	r4, #12
    ffb6:	bgt.n	fff0 <__aeabi_dmul+0x134>
    ffb8:	add.w	r4, r4, #20
    ffbc:	rsb	r5, r4, #32
    ffc0:	lsl.w	r3, r0, r5
    ffc4:	lsr.w	r0, r0, r4
    ffc8:	lsl.w	r2, r1, r5
    ffcc:	orr.w	r0, r0, r2
    ffd0:	and.w	r2, r1, #2147483648	; 0x80000000
    ffd4:	bic.w	r1, r1, #2147483648	; 0x80000000
    ffd8:	adds.w	r0, r0, r3, lsr #31
    ffdc:	lsr.w	r6, r1, r4
    ffe0:	adc.w	r1, r2, r6
    ffe4:	orrs.w	lr, lr, r3, lsl #1
    ffe8:	it	eq
    ffea:	biceq.w	r0, r0, r3, lsr #31
    ffee:	pop	{r4, r5, r6, pc}
    fff0:	rsb	r4, r4, #12
    fff4:	rsb	r5, r4, #32
    fff8:	lsl.w	r3, r0, r4
    fffc:	lsr.w	r0, r0, r5
   10000:	lsl.w	r2, r1, r4
   10004:	orr.w	r0, r0, r2
   10008:	and.w	r1, r1, #2147483648	; 0x80000000
   1000c:	adds.w	r0, r0, r3, lsr #31
   10010:	adc.w	r1, r1, #0
   10014:	orrs.w	lr, lr, r3, lsl #1
   10018:	it	eq
   1001a:	biceq.w	r0, r0, r3, lsr #31
   1001e:	pop	{r4, r5, r6, pc}
   10020:	rsb	r5, r4, #32
   10024:	lsl.w	r2, r0, r5
   10028:	orr.w	lr, lr, r2
   1002c:	lsr.w	r3, r0, r4
   10030:	lsl.w	r2, r1, r5
   10034:	orr.w	r3, r3, r2
   10038:	lsr.w	r0, r1, r4
   1003c:	and.w	r1, r1, #2147483648	; 0x80000000
   10040:	lsr.w	r2, r1, r4
   10044:	bic.w	r0, r0, r2
   10048:	add.w	r0, r0, r3, lsr #31
   1004c:	orrs.w	lr, lr, r3, lsl #1
   10050:	it	eq
   10052:	biceq.w	r0, r0, r3, lsr #31
   10056:	pop	{r4, r5, r6, pc}
   10058:	teq	r4, #0
   1005c:	bne.n	1007e <__aeabi_dmul+0x1c2>
   1005e:	and.w	r6, r1, #2147483648	; 0x80000000
   10062:	lsls	r0, r0, #1
   10064:	adc.w	r1, r1, r1
   10068:	tst.w	r1, #1048576	; 0x100000
   1006c:	it	eq
   1006e:	subeq	r4, #1
   10070:	beq.n	10062 <__aeabi_dmul+0x1a6>
   10072:	orr.w	r1, r1, r6
   10076:	teq	r5, #0
   1007a:	it	ne
   1007c:	bxne	lr
   1007e:	and.w	r6, r3, #2147483648	; 0x80000000
   10082:	lsls	r2, r2, #1
   10084:	adc.w	r3, r3, r3
   10088:	tst.w	r3, #1048576	; 0x100000
   1008c:	it	eq
   1008e:	subeq	r5, #1
   10090:	beq.n	10082 <__aeabi_dmul+0x1c6>
   10092:	orr.w	r3, r3, r6
   10096:	bx	lr
   10098:	teq	r4, ip
   1009c:	and.w	r5, ip, r3, lsr #20
   100a0:	it	ne
   100a2:	teqne	r5, ip
   100a6:	beq.n	100c2 <__aeabi_dmul+0x206>
   100a8:	orrs.w	r6, r0, r1, lsl #1
   100ac:	it	ne
   100ae:	orrsne.w	r6, r2, r3, lsl #1
   100b2:	bne.n	10058 <__aeabi_dmul+0x19c>
   100b4:	eor.w	r1, r1, r3
   100b8:	and.w	r1, r1, #2147483648	; 0x80000000
   100bc:	mov.w	r0, #0
   100c0:	pop	{r4, r5, r6, pc}
   100c2:	orrs.w	r6, r0, r1, lsl #1
   100c6:	itte	eq
   100c8:	moveq	r0, r2
   100ca:	moveq	r1, r3
   100cc:	orrsne.w	r6, r2, r3, lsl #1
   100d0:	beq.n	10106 <__aeabi_dmul+0x24a>
   100d2:	teq	r4, ip
   100d6:	bne.n	100de <__aeabi_dmul+0x222>
   100d8:	orrs.w	r6, r0, r1, lsl #12
   100dc:	bne.n	10106 <__aeabi_dmul+0x24a>
   100de:	teq	r5, ip
   100e2:	bne.n	100f0 <__aeabi_dmul+0x234>
   100e4:	orrs.w	r6, r2, r3, lsl #12
   100e8:	itt	ne
   100ea:	movne	r0, r2
   100ec:	movne	r1, r3
   100ee:	bne.n	10106 <__aeabi_dmul+0x24a>
   100f0:	eor.w	r1, r1, r3
   100f4:	and.w	r1, r1, #2147483648	; 0x80000000
   100f8:	orr.w	r1, r1, #2130706432	; 0x7f000000
   100fc:	orr.w	r1, r1, #15728640	; 0xf00000
   10100:	mov.w	r0, #0
   10104:	pop	{r4, r5, r6, pc}
   10106:	orr.w	r1, r1, #2130706432	; 0x7f000000
   1010a:	orr.w	r1, r1, #16252928	; 0xf80000
   1010e:	pop	{r4, r5, r6, pc}

00010110 <__aeabi_ddiv>:
   10110:	push	{r4, r5, r6, lr}
   10112:	mov.w	ip, #255	; 0xff
   10116:	orr.w	ip, ip, #1792	; 0x700
   1011a:	ands.w	r4, ip, r1, lsr #20
   1011e:	ittte	ne
   10120:	andsne.w	r5, ip, r3, lsr #20
   10124:	teqne	r4, ip
   10128:	teqne	r5, ip
   1012c:	bleq	1027e <__aeabi_ddiv+0x16e>
   10130:	sub.w	r4, r4, r5
   10134:	eor.w	lr, r1, r3
   10138:	orrs.w	r5, r2, r3, lsl #12
   1013c:	mov.w	r1, r1, lsl #12
   10140:	beq.w	10254 <__aeabi_ddiv+0x144>
   10144:	mov.w	r3, r3, lsl #12
   10148:	mov.w	r5, #268435456	; 0x10000000
   1014c:	orr.w	r3, r5, r3, lsr #4
   10150:	orr.w	r3, r3, r2, lsr #24
   10154:	mov.w	r2, r2, lsl #8
   10158:	orr.w	r5, r5, r1, lsr #4
   1015c:	orr.w	r5, r5, r0, lsr #24
   10160:	mov.w	r6, r0, lsl #8
   10164:	and.w	r1, lr, #2147483648	; 0x80000000
   10168:	cmp	r5, r3
   1016a:	it	eq
   1016c:	cmpeq	r6, r2
   1016e:	adc.w	r4, r4, #253	; 0xfd
   10172:	add.w	r4, r4, #768	; 0x300
   10176:	bcs.n	1017e <__aeabi_ddiv+0x6e>
   10178:	lsrs	r3, r3, #1
   1017a:	mov.w	r2, r2, rrx
   1017e:	subs	r6, r6, r2
   10180:	sbc.w	r5, r5, r3
   10184:	lsrs	r3, r3, #1
   10186:	mov.w	r2, r2, rrx
   1018a:	mov.w	r0, #1048576	; 0x100000
   1018e:	mov.w	ip, #524288	; 0x80000
   10192:	subs.w	lr, r6, r2
   10196:	sbcs.w	lr, r5, r3
   1019a:	ittt	cs
   1019c:	subcs	r6, r6, r2
   1019e:	movcs	r5, lr
   101a0:	orrcs.w	r0, r0, ip
   101a4:	lsrs	r3, r3, #1
   101a6:	mov.w	r2, r2, rrx
   101aa:	subs.w	lr, r6, r2
   101ae:	sbcs.w	lr, r5, r3
   101b2:	ittt	cs
   101b4:	subcs	r6, r6, r2
   101b6:	movcs	r5, lr
   101b8:	orrcs.w	r0, r0, ip, lsr #1
   101bc:	lsrs	r3, r3, #1
   101be:	mov.w	r2, r2, rrx
   101c2:	subs.w	lr, r6, r2
   101c6:	sbcs.w	lr, r5, r3
   101ca:	ittt	cs
   101cc:	subcs	r6, r6, r2
   101ce:	movcs	r5, lr
   101d0:	orrcs.w	r0, r0, ip, lsr #2
   101d4:	lsrs	r3, r3, #1
   101d6:	mov.w	r2, r2, rrx
   101da:	subs.w	lr, r6, r2
   101de:	sbcs.w	lr, r5, r3
   101e2:	ittt	cs
   101e4:	subcs	r6, r6, r2
   101e6:	movcs	r5, lr
   101e8:	orrcs.w	r0, r0, ip, lsr #3
   101ec:	orrs.w	lr, r5, r6
   101f0:	beq.n	10224 <__aeabi_ddiv+0x114>
   101f2:	mov.w	r5, r5, lsl #4
   101f6:	orr.w	r5, r5, r6, lsr #28
   101fa:	mov.w	r6, r6, lsl #4
   101fe:	mov.w	r3, r3, lsl #3
   10202:	orr.w	r3, r3, r2, lsr #29
   10206:	mov.w	r2, r2, lsl #3
   1020a:	movs.w	ip, ip, lsr #4
   1020e:	bne.n	10192 <__aeabi_ddiv+0x82>
   10210:	tst.w	r1, #1048576	; 0x100000
   10214:	bne.n	1022e <__aeabi_ddiv+0x11e>
   10216:	orr.w	r1, r1, r0
   1021a:	mov.w	r0, #0
   1021e:	mov.w	ip, #2147483648	; 0x80000000
   10222:	b.n	10192 <__aeabi_ddiv+0x82>
   10224:	tst.w	r1, #1048576	; 0x100000
   10228:	itt	eq
   1022a:	orreq	r1, r0
   1022c:	moveq	r0, #0
   1022e:	subs.w	ip, r4, #253	; 0xfd
   10232:	it	hi
   10234:	cmphi.w	ip, #1792	; 0x700
   10238:	bhi.w	ff9a <__aeabi_dmul+0xde>
   1023c:	subs.w	ip, r5, r3
   10240:	itt	eq
   10242:	subseq.w	ip, r6, r2
   10246:	movseq.w	ip, r0, lsr #1
   1024a:	adcs.w	r0, r0, #0
   1024e:	adc.w	r1, r1, r4, lsl #20
   10252:	pop	{r4, r5, r6, pc}
   10254:	and.w	lr, lr, #2147483648	; 0x80000000
   10258:	orr.w	r1, lr, r1, lsr #12
   1025c:	adds.w	r4, r4, ip, lsr #1
   10260:	ittt	gt
   10262:	rsbsgt	r5, r4, ip
   10266:	orrgt.w	r1, r1, r4, lsl #20
   1026a:	popgt	{r4, r5, r6, pc}
   1026c:	orr.w	r1, r1, #1048576	; 0x100000
   10270:	mov.w	lr, #0
   10274:	subs	r4, #1
   10276:	b.n	ff9a <__aeabi_dmul+0xde>
   10278:	orr.w	lr, r5, r6
   1027c:	b.n	ff9a <__aeabi_dmul+0xde>
   1027e:	and.w	r5, ip, r3, lsr #20
   10282:	teq	r4, ip
   10286:	it	eq
   10288:	teqeq	r5, ip
   1028c:	beq.w	10106 <__aeabi_dmul+0x24a>
   10290:	teq	r4, ip
   10294:	bne.n	102ac <__aeabi_ddiv+0x19c>
   10296:	orrs.w	r4, r0, r1, lsl #12
   1029a:	bne.w	10106 <__aeabi_dmul+0x24a>
   1029e:	teq	r5, ip
   102a2:	bne.w	100f0 <__aeabi_dmul+0x234>
   102a6:	mov	r0, r2
   102a8:	mov	r1, r3
   102aa:	b.n	10106 <__aeabi_dmul+0x24a>
   102ac:	teq	r5, ip
   102b0:	bne.n	102c0 <__aeabi_ddiv+0x1b0>
   102b2:	orrs.w	r5, r2, r3, lsl #12
   102b6:	beq.w	100b4 <__aeabi_dmul+0x1f8>
   102ba:	mov	r0, r2
   102bc:	mov	r1, r3
   102be:	b.n	10106 <__aeabi_dmul+0x24a>
   102c0:	orrs.w	r6, r0, r1, lsl #1
   102c4:	it	ne
   102c6:	orrsne.w	r6, r2, r3, lsl #1
   102ca:	bne.w	10058 <__aeabi_dmul+0x19c>
   102ce:	orrs.w	r4, r0, r1, lsl #1
   102d2:	bne.w	100f0 <__aeabi_dmul+0x234>
   102d6:	orrs.w	r5, r2, r3, lsl #1
   102da:	bne.w	100b4 <__aeabi_dmul+0x1f8>
   102de:	b.n	10106 <__aeabi_dmul+0x24a>

000102e0 <__gedf2>:
   102e0:	mov.w	ip, #4294967295
   102e4:	b.n	102f4 <__cmpdf2+0x4>
   102e6:	nop

000102e8 <__ledf2>:
   102e8:	mov.w	ip, #1
   102ec:	b.n	102f4 <__cmpdf2+0x4>
   102ee:	nop

000102f0 <__cmpdf2>:
   102f0:	mov.w	ip, #1
   102f4:	str.w	ip, [sp, #-4]!
   102f8:	mov.w	ip, r1, lsl #1
   102fc:	mvns.w	ip, ip, asr #21
   10300:	mov.w	ip, r3, lsl #1
   10304:	it	ne
   10306:	mvnsne.w	ip, ip, asr #21
   1030a:	beq.n	10344 <__cmpdf2+0x54>
   1030c:	add	sp, #4
   1030e:	orrs.w	ip, r0, r1, lsl #1
   10312:	ite	eq
   10314:	orrseq.w	ip, r2, r3, lsl #1
   10318:	teqne	r1, r3
   1031c:	ittt	eq
   1031e:	teqeq	r0, r2
   10322:	moveq	r0, #0
   10324:	bxeq	lr
   10326:	cmn.w	r0, #0
   1032a:	teq	r1, r3
   1032e:	it	pl
   10330:	cmppl	r1, r3
   10332:	it	eq
   10334:	cmpeq	r0, r2
   10336:	ite	cs
   10338:	asrcs	r0, r3, #31
   1033a:	mvncc.w	r0, r3, asr #31
   1033e:	orr.w	r0, r0, #1
   10342:	bx	lr
   10344:	mov.w	ip, r1, lsl #1
   10348:	mvns.w	ip, ip, asr #21
   1034c:	bne.n	10354 <__cmpdf2+0x64>
   1034e:	orrs.w	ip, r0, r1, lsl #12
   10352:	bne.n	10364 <__cmpdf2+0x74>
   10354:	mov.w	ip, r3, lsl #1
   10358:	mvns.w	ip, ip, asr #21
   1035c:	bne.n	1030c <__cmpdf2+0x1c>
   1035e:	orrs.w	ip, r2, r3, lsl #12
   10362:	beq.n	1030c <__cmpdf2+0x1c>
   10364:	ldr.w	r0, [sp], #4
   10368:	bx	lr
   1036a:	nop

0001036c <__aeabi_cdrcmple>:
   1036c:	mov	ip, r0
   1036e:	mov	r0, r2
   10370:	mov	r2, ip
   10372:	mov	ip, r1
   10374:	mov	r1, r3
   10376:	mov	r3, ip
   10378:	b.n	1037c <__aeabi_cdcmpeq>
   1037a:	nop

0001037c <__aeabi_cdcmpeq>:
   1037c:	push	{r0, lr}
   1037e:	bl	102f0 <__cmpdf2>
   10382:	cmp	r0, #0
   10384:	it	mi
   10386:	cmnmi.w	r0, #0
   1038a:	pop	{r0, pc}

0001038c <__aeabi_dcmpeq>:
   1038c:	str.w	lr, [sp, #-8]!
   10390:	bl	1037c <__aeabi_cdcmpeq>
   10394:	ite	eq
   10396:	moveq	r0, #1
   10398:	movne	r0, #0
   1039a:	ldr.w	pc, [sp], #8
   1039e:	nop

000103a0 <__aeabi_dcmplt>:
   103a0:	str.w	lr, [sp, #-8]!
   103a4:	bl	1037c <__aeabi_cdcmpeq>
   103a8:	ite	cc
   103aa:	movcc	r0, #1
   103ac:	movcs	r0, #0
   103ae:	ldr.w	pc, [sp], #8
   103b2:	nop

000103b4 <__aeabi_dcmple>:
   103b4:	str.w	lr, [sp, #-8]!
   103b8:	bl	1037c <__aeabi_cdcmpeq>
   103bc:	ite	ls
   103be:	movls	r0, #1
   103c0:	movhi	r0, #0
   103c2:	ldr.w	pc, [sp], #8
   103c6:	nop

000103c8 <__aeabi_dcmpge>:
   103c8:	str.w	lr, [sp, #-8]!
   103cc:	bl	1036c <__aeabi_cdrcmple>
   103d0:	ite	ls
   103d2:	movls	r0, #1
   103d4:	movhi	r0, #0
   103d6:	ldr.w	pc, [sp], #8
   103da:	nop

000103dc <__aeabi_dcmpgt>:
   103dc:	str.w	lr, [sp, #-8]!
   103e0:	bl	1036c <__aeabi_cdrcmple>
   103e4:	ite	cc
   103e6:	movcc	r0, #1
   103e8:	movcs	r0, #0
   103ea:	ldr.w	pc, [sp], #8
   103ee:	nop

000103f0 <__aeabi_dcmpun>:
   103f0:	mov.w	ip, r1, lsl #1
   103f4:	mvns.w	ip, ip, asr #21
   103f8:	bne.n	10400 <__aeabi_dcmpun+0x10>
   103fa:	orrs.w	ip, r0, r1, lsl #12
   103fe:	bne.n	10416 <__aeabi_dcmpun+0x26>
   10400:	mov.w	ip, r3, lsl #1
   10404:	mvns.w	ip, ip, asr #21
   10408:	bne.n	10410 <__aeabi_dcmpun+0x20>
   1040a:	orrs.w	ip, r2, r3, lsl #12
   1040e:	bne.n	10416 <__aeabi_dcmpun+0x26>
   10410:	mov.w	r0, #0
   10414:	bx	lr
   10416:	mov.w	r0, #1
   1041a:	bx	lr

0001041c <__aeabi_d2iz>:
   1041c:	mov.w	r2, r1, lsl #1
   10420:	adds.w	r2, r2, #2097152	; 0x200000
   10424:	bcs.n	10452 <__aeabi_d2iz+0x36>
   10426:	bpl.n	1044c <__aeabi_d2iz+0x30>
   10428:	mvn.w	r3, #992	; 0x3e0
   1042c:	subs.w	r2, r3, r2, asr #21
   10430:	bls.n	10458 <__aeabi_d2iz+0x3c>
   10432:	mov.w	r3, r1, lsl #11
   10436:	orr.w	r3, r3, #2147483648	; 0x80000000
   1043a:	orr.w	r3, r3, r0, lsr #21
   1043e:	tst.w	r1, #2147483648	; 0x80000000
   10442:	lsr.w	r0, r3, r2
   10446:	it	ne
   10448:	negne	r0, r0
   1044a:	bx	lr
   1044c:	mov.w	r0, #0
   10450:	bx	lr
   10452:	orrs.w	r0, r0, r1, lsl #12
   10456:	bne.n	10464 <__aeabi_d2iz+0x48>
   10458:	ands.w	r0, r1, #2147483648	; 0x80000000
   1045c:	it	eq
   1045e:	mvneq.w	r0, #2147483648	; 0x80000000
   10462:	bx	lr
   10464:	mov.w	r0, #0
   10468:	bx	lr
   1046a:	nop

0001046c <__aeabi_d2f>:
   1046c:	mov.w	r2, r1, lsl #1
   10470:	subs.w	r3, r2, #1879048192	; 0x70000000
   10474:	itt	cs
   10476:	subscs.w	ip, r3, #2097152	; 0x200000
   1047a:	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1047e:	bls.n	1049c <__aeabi_d2f+0x30>
   10480:	and.w	ip, r1, #2147483648	; 0x80000000
   10484:	mov.w	r2, r0, lsl #3
   10488:	orr.w	r0, ip, r0, lsr #29
   1048c:	cmp.w	r2, #2147483648	; 0x80000000
   10490:	adc.w	r0, r0, r3, lsl #2
   10494:	it	eq
   10496:	biceq.w	r0, r0, #1
   1049a:	bx	lr
   1049c:	tst.w	r1, #1073741824	; 0x40000000
   104a0:	bne.n	104e6 <__aeabi_d2f+0x7a>
   104a2:	adds.w	r2, r3, #48234496	; 0x2e00000
   104a6:	itt	lt
   104a8:	andlt.w	r0, r1, #2147483648	; 0x80000000
   104ac:	bxlt	lr
   104ae:	orr.w	r1, r1, #1048576	; 0x100000
   104b2:	mov.w	r2, r2, lsr #21
   104b6:	rsb	r2, r2, #24
   104ba:	rsb	ip, r2, #32
   104be:	lsls.w	r3, r0, ip
   104c2:	lsr.w	r0, r0, r2
   104c6:	it	ne
   104c8:	orrne.w	r0, r0, #1
   104cc:	mov.w	r3, r1, lsl #11
   104d0:	mov.w	r3, r3, lsr #11
   104d4:	lsl.w	ip, r3, ip
   104d8:	orr.w	r0, r0, ip
   104dc:	lsr.w	r3, r3, r2
   104e0:	mov.w	r3, r3, lsl #1
   104e4:	b.n	10480 <__aeabi_d2f+0x14>
   104e6:	mvns.w	r3, r2, asr #21
   104ea:	bne.n	104fc <__aeabi_d2f+0x90>
   104ec:	orrs.w	r3, r0, r1, lsl #12
   104f0:	ittt	ne
   104f2:	movne.w	r0, #2130706432	; 0x7f000000
   104f6:	orrne.w	r0, r0, #12582912	; 0xc00000
   104fa:	bxne	lr
   104fc:	and.w	r0, r1, #2147483648	; 0x80000000
   10500:	orr.w	r0, r0, #2130706432	; 0x7f000000
   10504:	orr.w	r0, r0, #8388608	; 0x800000
   10508:	bx	lr
   1050a:	nop

0001050c <__aeabi_uldivmod>:
   1050c:	cbnz	r3, 10524 <__aeabi_uldivmod+0x18>
   1050e:	cbnz	r2, 10524 <__aeabi_uldivmod+0x18>
   10510:	cmp	r1, #0
   10512:	it	eq
   10514:	cmpeq	r0, #0
   10516:	itt	ne
   10518:	movne.w	r1, #4294967295
   1051c:	movne.w	r0, #4294967295
   10520:	b.w	10820 <__aeabi_idiv0>
   10524:	sub.w	ip, sp, #8
   10528:	strd	ip, lr, [sp, #-16]!
   1052c:	bl	1053c <__udivmoddi4>
   10530:	ldr.w	lr, [sp, #4]
   10534:	ldrd	r2, r3, [sp, #8]
   10538:	add	sp, #16
   1053a:	bx	lr

0001053c <__udivmoddi4>:
   1053c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10540:	mov	ip, r1
   10542:	mov	r6, r1
   10544:	mov	r4, r0
   10546:	ldr	r5, [sp, #32]
   10548:	cmp	r3, #0
   1054a:	bne.n	105ee <__udivmoddi4+0xb2>
   1054c:	cmp	r2, r1
   1054e:	mov	r7, r2
   10550:	bls.n	1062c <__udivmoddi4+0xf0>
   10552:	clz	lr, r2
   10556:	cmp.w	lr, #0
   1055a:	beq.n	10574 <__udivmoddi4+0x38>
   1055c:	rsb	r4, lr, #32
   10560:	lsr.w	r4, r0, r4
   10564:	lsl.w	r6, r1, lr
   10568:	orr.w	ip, r4, r6
   1056c:	lsl.w	r7, r2, lr
   10570:	lsl.w	r4, r0, lr
   10574:	mov.w	r9, r7, lsr #16
   10578:	lsrs	r2, r4, #16
   1057a:	udiv	r0, ip, r9
   1057e:	uxth.w	r8, r7
   10582:	mls	r6, r9, r0, ip
   10586:	orr.w	r6, r2, r6, lsl #16
   1058a:	mul.w	r3, r0, r8
   1058e:	cmp	r3, r6
   10590:	bls.n	105a6 <__udivmoddi4+0x6a>
   10592:	adds	r6, r6, r7
   10594:	add.w	r2, r0, #4294967295
   10598:	bcs.w	107e0 <__udivmoddi4+0x2a4>
   1059c:	cmp	r3, r6
   1059e:	bls.w	107e0 <__udivmoddi4+0x2a4>
   105a2:	subs	r0, #2
   105a4:	add	r6, r7
   105a6:	subs	r6, r6, r3
   105a8:	uxth	r2, r4
   105aa:	udiv	r3, r6, r9
   105ae:	mls	r6, r9, r3, r6
   105b2:	orr.w	r4, r2, r6, lsl #16
   105b6:	mul.w	r8, r3, r8
   105ba:	cmp	r8, r4
   105bc:	bls.n	105d2 <__udivmoddi4+0x96>
   105be:	adds	r4, r4, r7
   105c0:	add.w	r2, r3, #4294967295
   105c4:	bcs.w	107dc <__udivmoddi4+0x2a0>
   105c8:	cmp	r8, r4
   105ca:	bls.w	107dc <__udivmoddi4+0x2a0>
   105ce:	subs	r3, #2
   105d0:	add	r4, r7
   105d2:	rsb	r4, r8, r4
   105d6:	orr.w	r0, r3, r0, lsl #16
   105da:	movs	r1, #0
   105dc:	cmp	r5, #0
   105de:	beq.n	106a6 <__udivmoddi4+0x16a>
   105e0:	lsr.w	r4, r4, lr
   105e4:	movs	r3, #0
   105e6:	str	r4, [r5, #0]
   105e8:	str	r3, [r5, #4]
   105ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   105ee:	cmp	r3, r1
   105f0:	bls.n	10602 <__udivmoddi4+0xc6>
   105f2:	cmp	r5, #0
   105f4:	beq.n	106a2 <__udivmoddi4+0x166>
   105f6:	movs	r1, #0
   105f8:	stmia.w	r5, {r0, r6}
   105fc:	mov	r0, r1
   105fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10602:	clz	r1, r3
   10606:	cmp	r1, #0
   10608:	bne.w	1072c <__udivmoddi4+0x1f0>
   1060c:	cmp	r3, r6
   1060e:	bcc.n	10616 <__udivmoddi4+0xda>
   10610:	cmp	r2, r0
   10612:	bhi.w	10806 <__udivmoddi4+0x2ca>
   10616:	subs	r4, r0, r2
   10618:	sbc.w	r6, r6, r3
   1061c:	movs	r0, #1
   1061e:	mov	ip, r6
   10620:	cmp	r5, #0
   10622:	beq.n	106a6 <__udivmoddi4+0x16a>
   10624:	stmia.w	r5, {r4, ip}
   10628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1062c:	cbnz	r2, 10634 <__udivmoddi4+0xf8>
   1062e:	movs	r7, #1
   10630:	udiv	r7, r7, r2
   10634:	clz	lr, r7
   10638:	cmp.w	lr, #0
   1063c:	bne.n	106aa <__udivmoddi4+0x16e>
   1063e:	subs	r3, r6, r7
   10640:	mov.w	r8, r7, lsr #16
   10644:	uxth.w	ip, r7
   10648:	movs	r1, #1
   1064a:	udiv	r0, r3, r8
   1064e:	lsrs	r2, r4, #16
   10650:	mls	r6, r8, r0, r3
   10654:	orr.w	r6, r2, r6, lsl #16
   10658:	mul.w	r3, ip, r0
   1065c:	cmp	r3, r6
   1065e:	bls.n	10670 <__udivmoddi4+0x134>
   10660:	adds	r6, r6, r7
   10662:	add.w	r2, r0, #4294967295
   10666:	bcs.n	1066e <__udivmoddi4+0x132>
   10668:	cmp	r3, r6
   1066a:	bhi.w	1080a <__udivmoddi4+0x2ce>
   1066e:	mov	r0, r2
   10670:	subs	r6, r6, r3
   10672:	uxth	r2, r4
   10674:	udiv	r3, r6, r8
   10678:	mls	r6, r8, r3, r6
   1067c:	orr.w	r4, r2, r6, lsl #16
   10680:	mul.w	ip, ip, r3
   10684:	cmp	ip, r4
   10686:	bls.n	10698 <__udivmoddi4+0x15c>
   10688:	adds	r4, r4, r7
   1068a:	add.w	r2, r3, #4294967295
   1068e:	bcs.n	10696 <__udivmoddi4+0x15a>
   10690:	cmp	ip, r4
   10692:	bhi.w	10800 <__udivmoddi4+0x2c4>
   10696:	mov	r3, r2
   10698:	rsb	r4, ip, r4
   1069c:	orr.w	r0, r3, r0, lsl #16
   106a0:	b.n	105dc <__udivmoddi4+0xa0>
   106a2:	mov	r1, r5
   106a4:	mov	r0, r5
   106a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   106aa:	rsb	r1, lr, #32
   106ae:	lsl.w	r3, r6, lr
   106b2:	lsl.w	r7, r7, lr
   106b6:	lsr.w	r9, r0, r1
   106ba:	mov.w	r8, r7, lsr #16
   106be:	lsrs	r6, r1
   106c0:	orr.w	r9, r9, r3
   106c4:	udiv	sl, r6, r8
   106c8:	mov.w	r4, r9, lsr #16
   106cc:	mls	r6, r8, sl, r6
   106d0:	uxth.w	ip, r7
   106d4:	orr.w	r3, r4, r6, lsl #16
   106d8:	mul.w	r2, sl, ip
   106dc:	cmp	r2, r3
   106de:	lsl.w	r4, r0, lr
   106e2:	bls.n	106fa <__udivmoddi4+0x1be>
   106e4:	adds	r3, r3, r7
   106e6:	add.w	r1, sl, #4294967295
   106ea:	bcs.w	107fc <__udivmoddi4+0x2c0>
   106ee:	cmp	r2, r3
   106f0:	bls.w	107fc <__udivmoddi4+0x2c0>
   106f4:	sub.w	sl, sl, #2
   106f8:	add	r3, r7
   106fa:	subs	r3, r3, r2
   106fc:	uxth.w	r9, r9
   10700:	udiv	r1, r3, r8
   10704:	mls	r3, r8, r1, r3
   10708:	orr.w	r3, r9, r3, lsl #16
   1070c:	mul.w	r6, r1, ip
   10710:	cmp	r6, r3
   10712:	bls.n	10724 <__udivmoddi4+0x1e8>
   10714:	adds	r3, r3, r7
   10716:	add.w	r2, r1, #4294967295
   1071a:	bcs.n	107f4 <__udivmoddi4+0x2b8>
   1071c:	cmp	r6, r3
   1071e:	bls.n	107f4 <__udivmoddi4+0x2b8>
   10720:	subs	r1, #2
   10722:	add	r3, r7
   10724:	subs	r3, r3, r6
   10726:	orr.w	r1, r1, sl, lsl #16
   1072a:	b.n	1064a <__udivmoddi4+0x10e>
   1072c:	rsb	lr, r1, #32
   10730:	lsr.w	r4, r2, lr
   10734:	lsls	r3, r1
   10736:	orrs	r3, r4
   10738:	lsr.w	r7, r0, lr
   1073c:	lsl.w	r4, r6, r1
   10740:	mov.w	ip, r3, lsr #16
   10744:	lsr.w	r6, r6, lr
   10748:	orrs	r4, r7
   1074a:	udiv	r9, r6, ip
   1074e:	lsrs	r7, r4, #16
   10750:	mls	r6, ip, r9, r6
   10754:	uxth.w	r8, r3
   10758:	orr.w	r6, r7, r6, lsl #16
   1075c:	mul.w	r7, r9, r8
   10760:	cmp	r7, r6
   10762:	lsl.w	r2, r2, r1
   10766:	lsl.w	sl, r0, r1
   1076a:	bls.n	1077e <__udivmoddi4+0x242>
   1076c:	adds	r6, r6, r3
   1076e:	add.w	r0, r9, #4294967295
   10772:	bcs.n	107f8 <__udivmoddi4+0x2bc>
   10774:	cmp	r7, r6
   10776:	bls.n	107f8 <__udivmoddi4+0x2bc>
   10778:	sub.w	r9, r9, #2
   1077c:	add	r6, r3
   1077e:	subs	r6, r6, r7
   10780:	uxth	r0, r4
   10782:	udiv	r4, r6, ip
   10786:	mls	r6, ip, r4, r6
   1078a:	orr.w	r7, r0, r6, lsl #16
   1078e:	mul.w	r8, r4, r8
   10792:	cmp	r8, r7
   10794:	bls.n	107a6 <__udivmoddi4+0x26a>
   10796:	adds	r7, r7, r3
   10798:	add.w	r0, r4, #4294967295
   1079c:	bcs.n	107f0 <__udivmoddi4+0x2b4>
   1079e:	cmp	r8, r7
   107a0:	bls.n	107f0 <__udivmoddi4+0x2b4>
   107a2:	subs	r4, #2
   107a4:	add	r7, r3
   107a6:	orr.w	r0, r4, r9, lsl #16
   107aa:	rsb	r7, r8, r7
   107ae:	umull	r8, r9, r0, r2
   107b2:	cmp	r7, r9
   107b4:	mov	r4, r8
   107b6:	mov	r6, r9
   107b8:	bcc.n	107e4 <__udivmoddi4+0x2a8>
   107ba:	beq.n	10810 <__udivmoddi4+0x2d4>
   107bc:	cbz	r5, 10818 <__udivmoddi4+0x2dc>
   107be:	subs.w	r3, sl, r4
   107c2:	sbc.w	r7, r7, r6
   107c6:	lsl.w	lr, r7, lr
   107ca:	lsrs	r3, r1
   107cc:	lsrs	r7, r1
   107ce:	orr.w	r3, lr, r3
   107d2:	stmia.w	r5, {r3, r7}
   107d6:	movs	r1, #0
   107d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   107dc:	mov	r3, r2
   107de:	b.n	105d2 <__udivmoddi4+0x96>
   107e0:	mov	r0, r2
   107e2:	b.n	105a6 <__udivmoddi4+0x6a>
   107e4:	subs.w	r4, r8, r2
   107e8:	sbc.w	r6, r9, r3
   107ec:	subs	r0, #1
   107ee:	b.n	107bc <__udivmoddi4+0x280>
   107f0:	mov	r4, r0
   107f2:	b.n	107a6 <__udivmoddi4+0x26a>
   107f4:	mov	r1, r2
   107f6:	b.n	10724 <__udivmoddi4+0x1e8>
   107f8:	mov	r9, r0
   107fa:	b.n	1077e <__udivmoddi4+0x242>
   107fc:	mov	sl, r1
   107fe:	b.n	106fa <__udivmoddi4+0x1be>
   10800:	subs	r3, #2
   10802:	add	r4, r7
   10804:	b.n	10698 <__udivmoddi4+0x15c>
   10806:	mov	r0, r1
   10808:	b.n	10620 <__udivmoddi4+0xe4>
   1080a:	subs	r0, #2
   1080c:	add	r6, r7
   1080e:	b.n	10670 <__udivmoddi4+0x134>
   10810:	cmp	sl, r8
   10812:	bcc.n	107e4 <__udivmoddi4+0x2a8>
   10814:	mov	r6, r7
   10816:	b.n	107bc <__udivmoddi4+0x280>
   10818:	mov	r1, r5
   1081a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1081e:	nop

00010820 <__aeabi_idiv0>:
   10820:	bx	lr
   10822:	nop

00010824 <_calloc_r>:
   10824:	push	{r4, lr}
   10826:	mul.w	r1, r2, r1
   1082a:	bl	10930 <_malloc_r>
   1082e:	mov	r4, r0
   10830:	cbz	r0, 1086a <_calloc_r+0x46>
   10832:	ldr.w	r2, [r0, #-4]
   10836:	bic.w	r2, r2, #3
   1083a:	subs	r2, #4
   1083c:	cmp	r2, #36	; 0x24
   1083e:	bhi.n	10872 <_calloc_r+0x4e>
   10840:	cmp	r2, #19
   10842:	bls.n	1086e <_calloc_r+0x4a>
   10844:	movs	r3, #0
   10846:	cmp	r2, #27
   10848:	str	r3, [r0, #0]
   1084a:	str	r3, [r0, #4]
   1084c:	bls.n	1087c <_calloc_r+0x58>
   1084e:	cmp	r2, #36	; 0x24
   10850:	str	r3, [r0, #8]
   10852:	str	r3, [r0, #12]
   10854:	iteee	ne
   10856:	addne.w	r2, r0, #16
   1085a:	streq	r3, [r0, #16]
   1085c:	streq	r3, [r0, #20]
   1085e:	addeq.w	r2, r0, #24
   10862:	movs	r3, #0
   10864:	str	r3, [r2, #0]
   10866:	str	r3, [r2, #4]
   10868:	str	r3, [r2, #8]
   1086a:	mov	r0, r4
   1086c:	pop	{r4, pc}
   1086e:	mov	r2, r0
   10870:	b.n	10862 <_calloc_r+0x3e>
   10872:	movs	r1, #0
   10874:	bl	1109c <memset>
   10878:	mov	r0, r4
   1087a:	pop	{r4, pc}
   1087c:	add.w	r2, r0, #8
   10880:	b.n	10862 <_calloc_r+0x3e>
   10882:	nop

00010884 <__cxa_atexit>:
   10884:	mov	r3, r2
   10886:	mov	r2, r1
   10888:	mov	r1, r0
   1088a:	movs	r0, #2
   1088c:	b.w	13010 <__register_exitproc>

00010890 <fcvtf>:
   10890:	push	{r4, r5, r6, lr}
   10892:	mov	r4, r0
   10894:	vmov	r0, s0
   10898:	mov	r5, r1
   1089a:	mov	r6, r2
   1089c:	bl	fe14 <__aeabi_f2d>
   108a0:	mov	r2, r6
   108a2:	vmov	d0, r0, r1
   108a6:	movs	r3, #0
   108a8:	mov	r1, r5
   108aa:	mov	r0, r4
   108ac:	ldmia.w	sp!, {r4, r5, r6, lr}
   108b0:	b.w	14034 <fcvtbuf>

000108b4 <__errno>:
   108b4:	ldr	r3, [pc, #4]	; (108bc <__errno+0x8>)
   108b6:	ldr	r0, [r3, #0]
   108b8:	bx	lr
   108ba:	nop
   108bc:	.word	0x1fff1098

000108c0 <__libc_init_array>:
   108c0:	push	{r4, r5, r6, lr}
   108c2:	ldr	r6, [pc, #60]	; (10900 <__libc_init_array+0x40>)
   108c4:	ldr	r5, [pc, #60]	; (10904 <__libc_init_array+0x44>)
   108c6:	subs	r6, r6, r5
   108c8:	asrs	r6, r6, #2
   108ca:	it	ne
   108cc:	movne	r4, #0
   108ce:	beq.n	108dc <__libc_init_array+0x1c>
   108d0:	adds	r4, #1
   108d2:	ldr.w	r3, [r5], #4
   108d6:	blx	r3
   108d8:	cmp	r6, r4
   108da:	bne.n	108d0 <__libc_init_array+0x10>
   108dc:	ldr	r6, [pc, #40]	; (10908 <__libc_init_array+0x48>)
   108de:	ldr	r5, [pc, #44]	; (1090c <__libc_init_array+0x4c>)
   108e0:	subs	r6, r6, r5
   108e2:	bl	157d4 <_init>
   108e6:	asrs	r6, r6, #2
   108e8:	it	ne
   108ea:	movne	r4, #0
   108ec:	beq.n	108fc <__libc_init_array+0x3c>
   108ee:	adds	r4, #1
   108f0:	ldr.w	r3, [r5], #4
   108f4:	blx	r3
   108f6:	cmp	r6, r4
   108f8:	bne.n	108ee <__libc_init_array+0x2e>
   108fa:	pop	{r4, r5, r6, pc}
   108fc:	pop	{r4, r5, r6, pc}
   108fe:	nop
   10900:	.word	0x000157e0
   10904:	.word	0x000157e0
   10908:	.word	0x00015834
   1090c:	.word	0x000157e0

00010910 <malloc>:
   10910:	ldr	r3, [pc, #8]	; (1091c <malloc+0xc>)
   10912:	mov	r1, r0
   10914:	ldr	r0, [r3, #0]
   10916:	b.w	10930 <_malloc_r>
   1091a:	nop
   1091c:	.word	0x1fff1098

00010920 <free>:
   10920:	ldr	r3, [pc, #8]	; (1092c <free+0xc>)
   10922:	mov	r1, r0
   10924:	ldr	r0, [r3, #0]
   10926:	b.w	141f8 <_free_r>
   1092a:	nop
   1092c:	.word	0x1fff1098

00010930 <_malloc_r>:
   10930:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10934:	add.w	r5, r1, #11
   10938:	cmp	r5, #22
   1093a:	sub	sp, #12
   1093c:	mov	r6, r0
   1093e:	bls.w	10a80 <_malloc_r+0x150>
   10942:	bics.w	r5, r5, #7
   10946:	bmi.w	10ac8 <_malloc_r+0x198>
   1094a:	cmp	r1, r5
   1094c:	bhi.w	10ac8 <_malloc_r+0x198>
   10950:	bl	11138 <__malloc_lock>
   10954:	cmp.w	r5, #504	; 0x1f8
   10958:	bcc.w	10e94 <_malloc_r+0x564>
   1095c:	lsrs	r3, r5, #9
   1095e:	beq.w	10ad6 <_malloc_r+0x1a6>
   10962:	cmp	r3, #4
   10964:	bhi.w	10c6e <_malloc_r+0x33e>
   10968:	lsrs	r0, r5, #6
   1096a:	add.w	lr, r0, #57	; 0x39
   1096e:	mov.w	r3, lr, lsl #1
   10972:	adds	r0, #56	; 0x38
   10974:	ldr	r7, [pc, #784]	; (10c88 <_malloc_r+0x358>)
   10976:	add.w	r3, r7, r3, lsl #2
   1097a:	sub.w	r1, r3, #8
   1097e:	ldr	r4, [r3, #4]
   10980:	cmp	r1, r4
   10982:	bne.n	10994 <_malloc_r+0x64>
   10984:	b.n	10ae0 <_malloc_r+0x1b0>
   10986:	cmp	r2, #0
   10988:	bge.w	10ae4 <_malloc_r+0x1b4>
   1098c:	ldr	r4, [r4, #12]
   1098e:	cmp	r1, r4
   10990:	beq.w	10ae0 <_malloc_r+0x1b0>
   10994:	ldr	r3, [r4, #4]
   10996:	bic.w	r3, r3, #3
   1099a:	subs	r2, r3, r5
   1099c:	cmp	r2, #15
   1099e:	ble.n	10986 <_malloc_r+0x56>
   109a0:	ldr	r1, [pc, #740]	; (10c88 <_malloc_r+0x358>)
   109a2:	ldr	r4, [r7, #16]
   109a4:	add.w	lr, r1, #8
   109a8:	cmp	r4, lr
   109aa:	beq.w	10d14 <_malloc_r+0x3e4>
   109ae:	ldr	r3, [r4, #4]
   109b0:	bic.w	r3, r3, #3
   109b4:	subs	r2, r3, r5
   109b6:	cmp	r2, #15
   109b8:	bgt.w	10cee <_malloc_r+0x3be>
   109bc:	cmp	r2, #0
   109be:	str.w	lr, [r1, #20]
   109c2:	str.w	lr, [r1, #16]
   109c6:	bge.w	10b06 <_malloc_r+0x1d6>
   109ca:	cmp.w	r3, #512	; 0x200
   109ce:	bcs.w	10ca0 <_malloc_r+0x370>
   109d2:	lsrs	r3, r3, #3
   109d4:	add.w	ip, r3, #1
   109d8:	movs	r2, #1
   109da:	asrs	r3, r3, #2
   109dc:	lsl.w	r3, r2, r3
   109e0:	ldr	r2, [r1, #4]
   109e2:	ldr.w	r8, [r1, ip, lsl #3]
   109e6:	str.w	r8, [r4, #8]
   109ea:	add.w	r9, r1, ip, lsl #3
   109ee:	orrs	r2, r3
   109f0:	sub.w	r3, r9, #8
   109f4:	str	r3, [r4, #12]
   109f6:	str	r2, [r1, #4]
   109f8:	str.w	r4, [r1, ip, lsl #3]
   109fc:	str.w	r4, [r8, #12]
   10a00:	asrs	r3, r0, #2
   10a02:	movs	r4, #1
   10a04:	lsls	r4, r3
   10a06:	cmp	r4, r2
   10a08:	bhi.w	10b20 <_malloc_r+0x1f0>
   10a0c:	tst	r4, r2
   10a0e:	bne.n	10a1e <_malloc_r+0xee>
   10a10:	bic.w	r0, r0, #3
   10a14:	lsls	r4, r4, #1
   10a16:	tst	r4, r2
   10a18:	add.w	r0, r0, #4
   10a1c:	beq.n	10a14 <_malloc_r+0xe4>
   10a1e:	add.w	r9, r7, r0, lsl #3
   10a22:	mov	ip, r9
   10a24:	mov	r8, r0
   10a26:	ldr.w	r1, [ip, #12]
   10a2a:	cmp	ip, r1
   10a2c:	bne.n	10a3e <_malloc_r+0x10e>
   10a2e:	b.n	10d18 <_malloc_r+0x3e8>
   10a30:	cmp	r2, #0
   10a32:	bge.w	10d38 <_malloc_r+0x408>
   10a36:	ldr	r1, [r1, #12]
   10a38:	cmp	ip, r1
   10a3a:	beq.w	10d18 <_malloc_r+0x3e8>
   10a3e:	ldr	r3, [r1, #4]
   10a40:	bic.w	r3, r3, #3
   10a44:	subs	r2, r3, r5
   10a46:	cmp	r2, #15
   10a48:	ble.n	10a30 <_malloc_r+0x100>
   10a4a:	mov	r4, r1
   10a4c:	ldr.w	ip, [r1, #12]
   10a50:	ldr.w	r8, [r4, #8]!
   10a54:	adds	r3, r1, r5
   10a56:	orr.w	r5, r5, #1
   10a5a:	str	r5, [r1, #4]
   10a5c:	orr.w	r1, r2, #1
   10a60:	str.w	ip, [r8, #12]
   10a64:	mov	r0, r6
   10a66:	str.w	r8, [ip, #8]
   10a6a:	str	r3, [r7, #20]
   10a6c:	str	r3, [r7, #16]
   10a6e:	str.w	lr, [r3, #12]
   10a72:	str.w	lr, [r3, #8]
   10a76:	str	r1, [r3, #4]
   10a78:	str	r2, [r3, r2]
   10a7a:	bl	1113c <__malloc_unlock>
   10a7e:	b.n	10ac0 <_malloc_r+0x190>
   10a80:	cmp	r1, #16
   10a82:	bhi.n	10ac8 <_malloc_r+0x198>
   10a84:	bl	11138 <__malloc_lock>
   10a88:	movs	r5, #16
   10a8a:	movs	r3, #6
   10a8c:	movs	r0, #2
   10a8e:	ldr	r7, [pc, #504]	; (10c88 <_malloc_r+0x358>)
   10a90:	add.w	r3, r7, r3, lsl #2
   10a94:	sub.w	r2, r3, #8
   10a98:	ldr	r4, [r3, #4]
   10a9a:	cmp	r4, r2
   10a9c:	beq.w	10d2a <_malloc_r+0x3fa>
   10aa0:	ldr	r3, [r4, #4]
   10aa2:	ldr	r1, [r4, #12]
   10aa4:	ldr	r5, [r4, #8]
   10aa6:	bic.w	r3, r3, #3
   10aaa:	add	r3, r4
   10aac:	mov	r0, r6
   10aae:	ldr	r2, [r3, #4]
   10ab0:	str	r1, [r5, #12]
   10ab2:	orr.w	r2, r2, #1
   10ab6:	str	r5, [r1, #8]
   10ab8:	str	r2, [r3, #4]
   10aba:	bl	1113c <__malloc_unlock>
   10abe:	adds	r4, #8
   10ac0:	mov	r0, r4
   10ac2:	add	sp, #12
   10ac4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ac8:	movs	r4, #0
   10aca:	movs	r3, #12
   10acc:	mov	r0, r4
   10ace:	str	r3, [r6, #0]
   10ad0:	add	sp, #12
   10ad2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ad6:	movs	r3, #128	; 0x80
   10ad8:	mov.w	lr, #64	; 0x40
   10adc:	movs	r0, #63	; 0x3f
   10ade:	b.n	10974 <_malloc_r+0x44>
   10ae0:	mov	r0, lr
   10ae2:	b.n	109a0 <_malloc_r+0x70>
   10ae4:	add	r3, r4
   10ae6:	ldr	r1, [r4, #12]
   10ae8:	ldr	r2, [r3, #4]
   10aea:	ldr	r5, [r4, #8]
   10aec:	orr.w	r2, r2, #1
   10af0:	str	r1, [r5, #12]
   10af2:	mov	r0, r6
   10af4:	str	r5, [r1, #8]
   10af6:	str	r2, [r3, #4]
   10af8:	bl	1113c <__malloc_unlock>
   10afc:	adds	r4, #8
   10afe:	mov	r0, r4
   10b00:	add	sp, #12
   10b02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b06:	add	r3, r4
   10b08:	mov	r0, r6
   10b0a:	ldr	r2, [r3, #4]
   10b0c:	orr.w	r2, r2, #1
   10b10:	str	r2, [r3, #4]
   10b12:	bl	1113c <__malloc_unlock>
   10b16:	adds	r4, #8
   10b18:	mov	r0, r4
   10b1a:	add	sp, #12
   10b1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b20:	ldr	r4, [r7, #8]
   10b22:	ldr	r3, [r4, #4]
   10b24:	bic.w	r8, r3, #3
   10b28:	cmp	r8, r5
   10b2a:	bcc.n	10b36 <_malloc_r+0x206>
   10b2c:	rsb	r3, r5, r8
   10b30:	cmp	r3, #15
   10b32:	bgt.w	10c4e <_malloc_r+0x31e>
   10b36:	ldr	r3, [pc, #340]	; (10c8c <_malloc_r+0x35c>)
   10b38:	ldr.w	r9, [pc, #352]	; 10c9c <_malloc_r+0x36c>
   10b3c:	ldr	r2, [r3, #0]
   10b3e:	ldr.w	r3, [r9]
   10b42:	adds	r3, #1
   10b44:	add	r2, r5
   10b46:	add.w	sl, r4, r8
   10b4a:	beq.w	10e0e <_malloc_r+0x4de>
   10b4e:	add.w	r2, r2, #4096	; 0x1000
   10b52:	adds	r2, #15
   10b54:	bic.w	r2, r2, #4080	; 0xff0
   10b58:	bic.w	r2, r2, #15
   10b5c:	mov	r1, r2
   10b5e:	mov	r0, r6
   10b60:	str	r2, [sp, #4]
   10b62:	bl	11520 <_sbrk_r>
   10b66:	cmp.w	r0, #4294967295
   10b6a:	mov	fp, r0
   10b6c:	ldr	r2, [sp, #4]
   10b6e:	beq.w	10e22 <_malloc_r+0x4f2>
   10b72:	cmp	sl, r0
   10b74:	bhi.w	10d70 <_malloc_r+0x440>
   10b78:	ldr	r3, [pc, #276]	; (10c90 <_malloc_r+0x360>)
   10b7a:	ldr	r1, [r3, #0]
   10b7c:	cmp	sl, fp
   10b7e:	add	r1, r2
   10b80:	str	r1, [r3, #0]
   10b82:	beq.w	10e2c <_malloc_r+0x4fc>
   10b86:	ldr.w	r0, [r9]
   10b8a:	ldr.w	lr, [pc, #272]	; 10c9c <_malloc_r+0x36c>
   10b8e:	adds	r0, #1
   10b90:	ittet	ne
   10b92:	rsbne	sl, sl, fp
   10b96:	addne	r1, sl
   10b98:	streq.w	fp, [lr]
   10b9c:	strne	r1, [r3, #0]
   10b9e:	ands.w	r1, fp, #7
   10ba2:	beq.w	10dd4 <_malloc_r+0x4a4>
   10ba6:	rsb	r0, r1, #8
   10baa:	rsb	r1, r1, #4096	; 0x1000
   10bae:	add	fp, r0
   10bb0:	adds	r1, #8
   10bb2:	add	r2, fp
   10bb4:	ubfx	r2, r2, #0, #12
   10bb8:	rsb	r9, r2, r1
   10bbc:	mov	r1, r9
   10bbe:	mov	r0, r6
   10bc0:	str	r3, [sp, #4]
   10bc2:	bl	11520 <_sbrk_r>
   10bc6:	adds	r3, r0, #1
   10bc8:	ldr	r3, [sp, #4]
   10bca:	beq.w	10e4c <_malloc_r+0x51c>
   10bce:	rsb	r2, fp, r0
   10bd2:	add	r2, r9
   10bd4:	orr.w	r2, r2, #1
   10bd8:	ldr	r1, [r3, #0]
   10bda:	str.w	fp, [r7, #8]
   10bde:	add	r1, r9
   10be0:	cmp	r4, r7
   10be2:	str.w	r2, [fp, #4]
   10be6:	str	r1, [r3, #0]
   10be8:	ldr.w	r9, [pc, #164]	; 10c90 <_malloc_r+0x360>
   10bec:	beq.n	10c1c <_malloc_r+0x2ec>
   10bee:	cmp.w	r8, #15
   10bf2:	bls.w	10df0 <_malloc_r+0x4c0>
   10bf6:	ldr	r2, [r4, #4]
   10bf8:	sub.w	r3, r8, #12
   10bfc:	bic.w	r3, r3, #7
   10c00:	adds	r0, r4, r3
   10c02:	and.w	r2, r2, #1
   10c06:	mov.w	lr, #5
   10c0a:	orrs	r2, r3
   10c0c:	cmp	r3, #15
   10c0e:	str	r2, [r4, #4]
   10c10:	str.w	lr, [r0, #4]
   10c14:	str.w	lr, [r0, #8]
   10c18:	bhi.w	10e54 <_malloc_r+0x524>
   10c1c:	ldr	r3, [pc, #116]	; (10c94 <_malloc_r+0x364>)
   10c1e:	ldr	r4, [r7, #8]
   10c20:	ldr	r2, [r3, #0]
   10c22:	cmp	r1, r2
   10c24:	it	hi
   10c26:	strhi	r1, [r3, #0]
   10c28:	ldr	r3, [pc, #108]	; (10c98 <_malloc_r+0x368>)
   10c2a:	ldr	r2, [r3, #0]
   10c2c:	cmp	r1, r2
   10c2e:	ldr	r2, [r4, #4]
   10c30:	it	hi
   10c32:	strhi	r1, [r3, #0]
   10c34:	bic.w	r2, r2, #3
   10c38:	cmp	r5, r2
   10c3a:	sub.w	r3, r2, r5
   10c3e:	bhi.n	10c44 <_malloc_r+0x314>
   10c40:	cmp	r3, #15
   10c42:	bgt.n	10c4e <_malloc_r+0x31e>
   10c44:	mov	r0, r6
   10c46:	bl	1113c <__malloc_unlock>
   10c4a:	movs	r4, #0
   10c4c:	b.n	10ac0 <_malloc_r+0x190>
   10c4e:	adds	r2, r4, r5
   10c50:	orr.w	r3, r3, #1
   10c54:	orr.w	r5, r5, #1
   10c58:	str	r5, [r4, #4]
   10c5a:	mov	r0, r6
   10c5c:	str	r2, [r7, #8]
   10c5e:	str	r3, [r2, #4]
   10c60:	bl	1113c <__malloc_unlock>
   10c64:	adds	r4, #8
   10c66:	mov	r0, r4
   10c68:	add	sp, #12
   10c6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c6e:	cmp	r3, #20
   10c70:	bls.n	10d56 <_malloc_r+0x426>
   10c72:	cmp	r3, #84	; 0x54
   10c74:	bhi.w	10dc0 <_malloc_r+0x490>
   10c78:	lsrs	r0, r5, #12
   10c7a:	add.w	lr, r0, #111	; 0x6f
   10c7e:	mov.w	r3, lr, lsl #1
   10c82:	adds	r0, #110	; 0x6e
   10c84:	b.n	10974 <_malloc_r+0x44>
   10c86:	nop
   10c88:	.word	0x1fff1208
   10c8c:	.word	0x20007170
   10c90:	.word	0x20007174
   10c94:	.word	0x2000716c
   10c98:	.word	0x20007168
   10c9c:	.word	0x1fff1614
   10ca0:	lsrs	r2, r3, #9
   10ca2:	cmp	r2, #4
   10ca4:	bls.n	10d64 <_malloc_r+0x434>
   10ca6:	cmp	r2, #20
   10ca8:	bhi.w	10e12 <_malloc_r+0x4e2>
   10cac:	add.w	r1, r2, #92	; 0x5c
   10cb0:	lsls	r1, r1, #1
   10cb2:	adds	r2, #91	; 0x5b
   10cb4:	add.w	ip, r7, r1, lsl #2
   10cb8:	ldr.w	r1, [r7, r1, lsl #2]
   10cbc:	ldr.w	r8, [pc, #476]	; 10e9c <_malloc_r+0x56c>
   10cc0:	sub.w	ip, ip, #8
   10cc4:	cmp	ip, r1
   10cc6:	beq.w	10dda <_malloc_r+0x4aa>
   10cca:	ldr	r2, [r1, #4]
   10ccc:	bic.w	r2, r2, #3
   10cd0:	cmp	r3, r2
   10cd2:	bcs.n	10cda <_malloc_r+0x3aa>
   10cd4:	ldr	r1, [r1, #8]
   10cd6:	cmp	ip, r1
   10cd8:	bne.n	10cca <_malloc_r+0x39a>
   10cda:	ldr.w	ip, [r1, #12]
   10cde:	ldr	r2, [r7, #4]
   10ce0:	str.w	ip, [r4, #12]
   10ce4:	str	r1, [r4, #8]
   10ce6:	str.w	r4, [ip, #8]
   10cea:	str	r4, [r1, #12]
   10cec:	b.n	10a00 <_malloc_r+0xd0>
   10cee:	adds	r3, r4, r5
   10cf0:	orr.w	r7, r2, #1
   10cf4:	orr.w	r5, r5, #1
   10cf8:	str	r5, [r4, #4]
   10cfa:	mov	r0, r6
   10cfc:	str	r3, [r1, #20]
   10cfe:	str	r3, [r1, #16]
   10d00:	str.w	lr, [r3, #12]
   10d04:	str.w	lr, [r3, #8]
   10d08:	str	r7, [r3, #4]
   10d0a:	str	r2, [r3, r2]
   10d0c:	adds	r4, #8
   10d0e:	bl	1113c <__malloc_unlock>
   10d12:	b.n	10ac0 <_malloc_r+0x190>
   10d14:	ldr	r2, [r1, #4]
   10d16:	b.n	10a00 <_malloc_r+0xd0>
   10d18:	add.w	r8, r8, #1
   10d1c:	tst.w	r8, #3
   10d20:	add.w	ip, ip, #8
   10d24:	bne.w	10a26 <_malloc_r+0xf6>
   10d28:	b.n	10d8c <_malloc_r+0x45c>
   10d2a:	ldr	r4, [r3, #12]
   10d2c:	cmp	r3, r4
   10d2e:	it	eq
   10d30:	addeq	r0, #2
   10d32:	beq.w	109a0 <_malloc_r+0x70>
   10d36:	b.n	10aa0 <_malloc_r+0x170>
   10d38:	add	r3, r1
   10d3a:	mov	r4, r1
   10d3c:	ldr	r2, [r3, #4]
   10d3e:	ldr	r1, [r1, #12]
   10d40:	ldr.w	r5, [r4, #8]!
   10d44:	orr.w	r2, r2, #1
   10d48:	str	r2, [r3, #4]
   10d4a:	mov	r0, r6
   10d4c:	str	r1, [r5, #12]
   10d4e:	str	r5, [r1, #8]
   10d50:	bl	1113c <__malloc_unlock>
   10d54:	b.n	10ac0 <_malloc_r+0x190>
   10d56:	add.w	lr, r3, #92	; 0x5c
   10d5a:	add.w	r0, r3, #91	; 0x5b
   10d5e:	mov.w	r3, lr, lsl #1
   10d62:	b.n	10974 <_malloc_r+0x44>
   10d64:	lsrs	r2, r3, #6
   10d66:	add.w	r1, r2, #57	; 0x39
   10d6a:	lsls	r1, r1, #1
   10d6c:	adds	r2, #56	; 0x38
   10d6e:	b.n	10cb4 <_malloc_r+0x384>
   10d70:	cmp	r4, r7
   10d72:	ldr	r3, [pc, #296]	; (10e9c <_malloc_r+0x56c>)
   10d74:	beq.w	10b78 <_malloc_r+0x248>
   10d78:	ldr	r4, [r3, #8]
   10d7a:	ldr	r2, [r4, #4]
   10d7c:	bic.w	r2, r2, #3
   10d80:	b.n	10c38 <_malloc_r+0x308>
   10d82:	ldr.w	r3, [r9], #-8
   10d86:	cmp	r9, r3
   10d88:	bne.w	10e90 <_malloc_r+0x560>
   10d8c:	tst.w	r0, #3
   10d90:	add.w	r0, r0, #4294967295
   10d94:	bne.n	10d82 <_malloc_r+0x452>
   10d96:	ldr	r3, [r7, #4]
   10d98:	bic.w	r3, r3, r4
   10d9c:	str	r3, [r7, #4]
   10d9e:	lsls	r4, r4, #1
   10da0:	cmp	r4, r3
   10da2:	bhi.w	10b20 <_malloc_r+0x1f0>
   10da6:	cmp	r4, #0
   10da8:	beq.w	10b20 <_malloc_r+0x1f0>
   10dac:	tst	r4, r3
   10dae:	mov	r0, r8
   10db0:	bne.w	10a1e <_malloc_r+0xee>
   10db4:	lsls	r4, r4, #1
   10db6:	tst	r4, r3
   10db8:	add.w	r0, r0, #4
   10dbc:	beq.n	10db4 <_malloc_r+0x484>
   10dbe:	b.n	10a1e <_malloc_r+0xee>
   10dc0:	cmp.w	r3, #340	; 0x154
   10dc4:	bhi.n	10df8 <_malloc_r+0x4c8>
   10dc6:	lsrs	r0, r5, #15
   10dc8:	add.w	lr, r0, #120	; 0x78
   10dcc:	mov.w	r3, lr, lsl #1
   10dd0:	adds	r0, #119	; 0x77
   10dd2:	b.n	10974 <_malloc_r+0x44>
   10dd4:	mov.w	r1, #4096	; 0x1000
   10dd8:	b.n	10bb2 <_malloc_r+0x282>
   10dda:	movs	r1, #1
   10ddc:	ldr.w	r3, [r8, #4]
   10de0:	asrs	r2, r2, #2
   10de2:	lsl.w	r2, r1, r2
   10de6:	orrs	r2, r3
   10de8:	str.w	r2, [r8, #4]
   10dec:	mov	r1, ip
   10dee:	b.n	10ce0 <_malloc_r+0x3b0>
   10df0:	movs	r3, #1
   10df2:	str.w	r3, [fp, #4]
   10df6:	b.n	10c44 <_malloc_r+0x314>
   10df8:	movw	r2, #1364	; 0x554
   10dfc:	cmp	r3, r2
   10dfe:	bhi.n	10e42 <_malloc_r+0x512>
   10e00:	lsrs	r0, r5, #18
   10e02:	add.w	lr, r0, #125	; 0x7d
   10e06:	mov.w	r3, lr, lsl #1
   10e0a:	adds	r0, #124	; 0x7c
   10e0c:	b.n	10974 <_malloc_r+0x44>
   10e0e:	adds	r2, #16
   10e10:	b.n	10b5c <_malloc_r+0x22c>
   10e12:	cmp	r2, #84	; 0x54
   10e14:	bhi.n	10e64 <_malloc_r+0x534>
   10e16:	lsrs	r2, r3, #12
   10e18:	add.w	r1, r2, #111	; 0x6f
   10e1c:	lsls	r1, r1, #1
   10e1e:	adds	r2, #110	; 0x6e
   10e20:	b.n	10cb4 <_malloc_r+0x384>
   10e22:	ldr	r4, [r7, #8]
   10e24:	ldr	r2, [r4, #4]
   10e26:	bic.w	r2, r2, #3
   10e2a:	b.n	10c38 <_malloc_r+0x308>
   10e2c:	ubfx	r0, sl, #0, #12
   10e30:	cmp	r0, #0
   10e32:	bne.w	10b86 <_malloc_r+0x256>
   10e36:	add	r2, r8
   10e38:	ldr	r3, [r7, #8]
   10e3a:	orr.w	r2, r2, #1
   10e3e:	str	r2, [r3, #4]
   10e40:	b.n	10c1c <_malloc_r+0x2ec>
   10e42:	movs	r3, #254	; 0xfe
   10e44:	mov.w	lr, #127	; 0x7f
   10e48:	movs	r0, #126	; 0x7e
   10e4a:	b.n	10974 <_malloc_r+0x44>
   10e4c:	movs	r2, #1
   10e4e:	mov.w	r9, #0
   10e52:	b.n	10bd8 <_malloc_r+0x2a8>
   10e54:	add.w	r1, r4, #8
   10e58:	mov	r0, r6
   10e5a:	bl	141f8 <_free_r>
   10e5e:	ldr.w	r1, [r9]
   10e62:	b.n	10c1c <_malloc_r+0x2ec>
   10e64:	cmp.w	r2, #340	; 0x154
   10e68:	bhi.n	10e76 <_malloc_r+0x546>
   10e6a:	lsrs	r2, r3, #15
   10e6c:	add.w	r1, r2, #120	; 0x78
   10e70:	lsls	r1, r1, #1
   10e72:	adds	r2, #119	; 0x77
   10e74:	b.n	10cb4 <_malloc_r+0x384>
   10e76:	movw	r1, #1364	; 0x554
   10e7a:	cmp	r2, r1
   10e7c:	bhi.n	10e8a <_malloc_r+0x55a>
   10e7e:	lsrs	r2, r3, #18
   10e80:	add.w	r1, r2, #125	; 0x7d
   10e84:	lsls	r1, r1, #1
   10e86:	adds	r2, #124	; 0x7c
   10e88:	b.n	10cb4 <_malloc_r+0x384>
   10e8a:	movs	r1, #254	; 0xfe
   10e8c:	movs	r2, #126	; 0x7e
   10e8e:	b.n	10cb4 <_malloc_r+0x384>
   10e90:	ldr	r3, [r7, #4]
   10e92:	b.n	10d9e <_malloc_r+0x46e>
   10e94:	lsrs	r0, r5, #3
   10e96:	adds	r3, r0, #1
   10e98:	lsls	r3, r3, #1
   10e9a:	b.n	10a8e <_malloc_r+0x15e>
   10e9c:	.word	0x1fff1208

00010ea0 <__ascii_mbtowc>:
   10ea0:	sub	sp, #8
   10ea2:	cbz	r1, 10eb8 <__ascii_mbtowc+0x18>
   10ea4:	cbz	r2, 10ebe <__ascii_mbtowc+0x1e>
   10ea6:	cbz	r3, 10ec4 <__ascii_mbtowc+0x24>
   10ea8:	ldrb	r3, [r2, #0]
   10eaa:	str	r3, [r1, #0]
   10eac:	ldrb	r2, [r2, #0]
   10eae:	adds	r0, r2, #0
   10eb0:	it	ne
   10eb2:	movne	r0, #1
   10eb4:	add	sp, #8
   10eb6:	bx	lr
   10eb8:	add	r1, sp, #4
   10eba:	cmp	r2, #0
   10ebc:	bne.n	10ea6 <__ascii_mbtowc+0x6>
   10ebe:	mov	r0, r2
   10ec0:	add	sp, #8
   10ec2:	bx	lr
   10ec4:	mvn.w	r0, #1
   10ec8:	b.n	10eb4 <__ascii_mbtowc+0x14>
   10eca:	nop
   10ecc:			; <UNDEFINED> instruction: 0xffffffff

00010ed0 <memchr>:
   10ed0:	and.w	r1, r1, #255	; 0xff
   10ed4:	cmp	r2, #16
   10ed6:	blt.n	10f30 <memchr+0x60>
   10ed8:	tst.w	r0, #7
   10edc:	beq.n	10ef0 <memchr+0x20>
   10ede:	ldrb.w	r3, [r0], #1
   10ee2:	subs	r2, #1
   10ee4:	cmp	r3, r1
   10ee6:	beq.n	10f44 <memchr+0x74>
   10ee8:	tst.w	r0, #7
   10eec:	cbz	r2, 10f40 <memchr+0x70>
   10eee:	bne.n	10ede <memchr+0xe>
   10ef0:	push	{r4, r5, r6, r7}
   10ef2:	orr.w	r1, r1, r1, lsl #8
   10ef6:	orr.w	r1, r1, r1, lsl #16
   10efa:	bic.w	r4, r2, #7
   10efe:	mvns.w	r7, #0
   10f02:	movs	r3, #0
   10f04:	ldrd	r5, r6, [r0], #8
   10f08:	subs	r4, #8
   10f0a:	eor.w	r5, r5, r1
   10f0e:	eor.w	r6, r6, r1
   10f12:	uadd8	r5, r5, r7
   10f16:	sel	r5, r3, r7
   10f1a:	uadd8	r6, r6, r7
   10f1e:	sel	r6, r5, r7
   10f22:	cbnz	r6, 10f48 <memchr+0x78>
   10f24:	bne.n	10f04 <memchr+0x34>
   10f26:	pop	{r4, r5, r6, r7}
   10f28:	and.w	r1, r1, #255	; 0xff
   10f2c:	and.w	r2, r2, #7
   10f30:	cbz	r2, 10f40 <memchr+0x70>
   10f32:	ldrb.w	r3, [r0], #1
   10f36:	subs	r2, #1
   10f38:	eor.w	r3, r3, r1
   10f3c:	cbz	r3, 10f44 <memchr+0x74>
   10f3e:	bne.n	10f32 <memchr+0x62>
   10f40:	movs	r0, #0
   10f42:	bx	lr
   10f44:	subs	r0, #1
   10f46:	bx	lr
   10f48:	cmp	r5, #0
   10f4a:	itte	eq
   10f4c:	moveq	r5, r6
   10f4e:	subeq	r0, #3
   10f50:	subne	r0, #7
   10f52:	tst.w	r5, #1
   10f56:	bne.n	10f68 <memchr+0x98>
   10f58:	adds	r0, #1
   10f5a:	tst.w	r5, #256	; 0x100
   10f5e:	ittt	eq
   10f60:	addeq	r0, #1
   10f62:	tsteq.w	r5, #98304	; 0x18000
   10f66:	addeq	r0, #1
   10f68:	pop	{r4, r5, r6, r7}
   10f6a:	subs	r0, #1
   10f6c:	bx	lr
   10f6e:	nop

00010f70 <memcmp>:
   10f70:	cmp	r2, #3
   10f72:	push	{r4, r5, r6}
   10f74:	bls.n	10fc4 <memcmp+0x54>
   10f76:	orr.w	r3, r0, r1
   10f7a:	lsls	r3, r3, #30
   10f7c:	beq.n	10fa2 <memcmp+0x32>
   10f7e:	ldrb	r4, [r0, #0]
   10f80:	ldrb	r5, [r1, #0]
   10f82:	cmp	r4, r5
   10f84:	bne.n	10fcc <memcmp+0x5c>
   10f86:	add	r2, r0
   10f88:	adds	r3, r0, #1
   10f8a:	b.n	10f98 <memcmp+0x28>
   10f8c:	ldrb.w	r4, [r3], #1
   10f90:	ldrb.w	r5, [r1, #1]!
   10f94:	cmp	r4, r5
   10f96:	bne.n	10fcc <memcmp+0x5c>
   10f98:	cmp	r3, r2
   10f9a:	bne.n	10f8c <memcmp+0x1c>
   10f9c:	movs	r0, #0
   10f9e:	pop	{r4, r5, r6}
   10fa0:	bx	lr
   10fa2:	mov	r4, r1
   10fa4:	mov	r3, r0
   10fa6:	ldr	r6, [r3, #0]
   10fa8:	ldr	r5, [r4, #0]
   10faa:	cmp	r6, r5
   10fac:	mov	r0, r3
   10fae:	mov	r1, r4
   10fb0:	add.w	r3, r3, #4
   10fb4:	add.w	r4, r4, #4
   10fb8:	bne.n	10f7e <memcmp+0xe>
   10fba:	subs	r2, #4
   10fbc:	cmp	r2, #3
   10fbe:	mov	r0, r3
   10fc0:	mov	r1, r4
   10fc2:	bhi.n	10fa6 <memcmp+0x36>
   10fc4:	cmp	r2, #0
   10fc6:	bne.n	10f7e <memcmp+0xe>
   10fc8:	mov	r0, r2
   10fca:	b.n	10f9e <memcmp+0x2e>
   10fcc:	subs	r0, r4, r5
   10fce:	pop	{r4, r5, r6}
   10fd0:	bx	lr
   10fd2:	nop

00010fd4 <memmove>:
   10fd4:	cmp	r0, r1
   10fd6:	push	{r4, r5, r6, r7, lr}
   10fd8:	bls.n	10ff6 <memmove+0x22>
   10fda:	adds	r3, r1, r2
   10fdc:	cmp	r0, r3
   10fde:	bcs.n	10ff6 <memmove+0x22>
   10fe0:	adds	r1, r0, r2
   10fe2:	cmp	r2, #0
   10fe4:	beq.n	1108a <memmove+0xb6>
   10fe6:	subs	r2, r3, r2
   10fe8:	ldrb.w	r4, [r3, #-1]!
   10fec:	strb.w	r4, [r1, #-1]!
   10ff0:	cmp	r3, r2
   10ff2:	bne.n	10fe8 <memmove+0x14>
   10ff4:	pop	{r4, r5, r6, r7, pc}
   10ff6:	cmp	r2, #15
   10ff8:	bls.n	1108c <memmove+0xb8>
   10ffa:	orr.w	r3, r1, r0
   10ffe:	lsls	r3, r3, #30
   11000:	bne.n	11090 <memmove+0xbc>
   11002:	add.w	r4, r0, #16
   11006:	add.w	r3, r1, #16
   1100a:	mov	r5, r2
   1100c:	ldr.w	r6, [r3, #-16]
   11010:	str.w	r6, [r4, #-16]
   11014:	ldr.w	r6, [r3, #-12]
   11018:	str.w	r6, [r4, #-12]
   1101c:	ldr.w	r6, [r3, #-8]
   11020:	str.w	r6, [r4, #-8]
   11024:	subs	r5, #16
   11026:	ldr.w	r6, [r3, #-4]
   1102a:	str.w	r6, [r4, #-4]
   1102e:	cmp	r5, #15
   11030:	add.w	r3, r3, #16
   11034:	add.w	r4, r4, #16
   11038:	bhi.n	1100c <memmove+0x38>
   1103a:	sub.w	r3, r2, #16
   1103e:	bic.w	r3, r3, #15
   11042:	and.w	lr, r2, #15
   11046:	adds	r3, #16
   11048:	cmp.w	lr, #3
   1104c:	add	r1, r3
   1104e:	add	r3, r0
   11050:	bls.n	11096 <memmove+0xc2>
   11052:	subs	r6, r3, #4
   11054:	mov	r5, r1
   11056:	mov	r4, lr
   11058:	subs	r4, #4
   1105a:	ldr.w	r7, [r5], #4
   1105e:	str.w	r7, [r6, #4]!
   11062:	cmp	r4, #3
   11064:	bhi.n	11058 <memmove+0x84>
   11066:	sub.w	r4, lr, #4
   1106a:	bic.w	r4, r4, #3
   1106e:	adds	r4, #4
   11070:	add	r3, r4
   11072:	add	r1, r4
   11074:	and.w	r2, r2, #3
   11078:	cbz	r2, 11094 <memmove+0xc0>
   1107a:	subs	r3, #1
   1107c:	add	r2, r1
   1107e:	ldrb.w	r4, [r1], #1
   11082:	strb.w	r4, [r3, #1]!
   11086:	cmp	r2, r1
   11088:	bne.n	1107e <memmove+0xaa>
   1108a:	pop	{r4, r5, r6, r7, pc}
   1108c:	mov	r3, r0
   1108e:	b.n	11078 <memmove+0xa4>
   11090:	mov	r3, r0
   11092:	b.n	1107a <memmove+0xa6>
   11094:	pop	{r4, r5, r6, r7, pc}
   11096:	mov	r2, lr
   11098:	b.n	11078 <memmove+0xa4>
   1109a:	nop

0001109c <memset>:
   1109c:	push	{r4, r5, r6}
   1109e:	lsls	r4, r0, #30
   110a0:	beq.n	11130 <memset+0x94>
   110a2:	subs	r4, r2, #1
   110a4:	cmp	r2, #0
   110a6:	beq.n	1112c <memset+0x90>
   110a8:	uxtb	r5, r1
   110aa:	mov	r3, r0
   110ac:	b.n	110b4 <memset+0x18>
   110ae:	subs	r2, r4, #1
   110b0:	cbz	r4, 1112c <memset+0x90>
   110b2:	mov	r4, r2
   110b4:	strb.w	r5, [r3], #1
   110b8:	lsls	r2, r3, #30
   110ba:	bne.n	110ae <memset+0x12>
   110bc:	cmp	r4, #3
   110be:	bls.n	1111e <memset+0x82>
   110c0:	uxtb	r5, r1
   110c2:	orr.w	r5, r5, r5, lsl #8
   110c6:	cmp	r4, #15
   110c8:	orr.w	r5, r5, r5, lsl #16
   110cc:	bls.n	11102 <memset+0x66>
   110ce:	add.w	r2, r3, #16
   110d2:	mov	r6, r4
   110d4:	subs	r6, #16
   110d6:	cmp	r6, #15
   110d8:	str.w	r5, [r2, #-16]
   110dc:	str.w	r5, [r2, #-12]
   110e0:	str.w	r5, [r2, #-8]
   110e4:	str.w	r5, [r2, #-4]
   110e8:	add.w	r2, r2, #16
   110ec:	bhi.n	110d4 <memset+0x38>
   110ee:	sub.w	r2, r4, #16
   110f2:	bic.w	r2, r2, #15
   110f6:	and.w	r4, r4, #15
   110fa:	adds	r2, #16
   110fc:	cmp	r4, #3
   110fe:	add	r3, r2
   11100:	bls.n	1111e <memset+0x82>
   11102:	mov	r6, r3
   11104:	mov	r2, r4
   11106:	subs	r2, #4
   11108:	cmp	r2, #3
   1110a:	str.w	r5, [r6], #4
   1110e:	bhi.n	11106 <memset+0x6a>
   11110:	subs	r2, r4, #4
   11112:	bic.w	r2, r2, #3
   11116:	adds	r2, #4
   11118:	add	r3, r2
   1111a:	and.w	r4, r4, #3
   1111e:	cbz	r4, 1112c <memset+0x90>
   11120:	uxtb	r1, r1
   11122:	add	r4, r3
   11124:	strb.w	r1, [r3], #1
   11128:	cmp	r3, r4
   1112a:	bne.n	11124 <memset+0x88>
   1112c:	pop	{r4, r5, r6}
   1112e:	bx	lr
   11130:	mov	r4, r2
   11132:	mov	r3, r0
   11134:	b.n	110bc <memset+0x20>
   11136:	nop

00011138 <__malloc_lock>:
   11138:	bx	lr
   1113a:	nop

0001113c <__malloc_unlock>:
   1113c:	bx	lr
   1113e:	nop

00011140 <_realloc_r>:
   11140:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11144:	mov	r7, r2
   11146:	sub	sp, #12
   11148:	cmp	r1, #0
   1114a:	beq.w	112d0 <_realloc_r+0x190>
   1114e:	mov	r6, r1
   11150:	mov	r9, r0
   11152:	add.w	r5, r7, #11
   11156:	bl	11138 <__malloc_lock>
   1115a:	ldr.w	lr, [r6, #-4]
   1115e:	cmp	r5, #22
   11160:	bic.w	r4, lr, #3
   11164:	sub.w	r8, r6, #8
   11168:	bhi.n	111ec <_realloc_r+0xac>
   1116a:	movs	r2, #16
   1116c:	mov	r5, r2
   1116e:	cmp	r7, r5
   11170:	bhi.n	111f6 <_realloc_r+0xb6>
   11172:	cmp	r4, r2
   11174:	bge.n	11262 <_realloc_r+0x122>
   11176:	ldr	r3, [pc, #804]	; (1149c <_realloc_r+0x35c>)
   11178:	ldr	r1, [r3, #8]
   1117a:	add.w	r0, r8, r4
   1117e:	cmp	r0, r1
   11180:	ldr	r1, [r0, #4]
   11182:	beq.w	11338 <_realloc_r+0x1f8>
   11186:	bic.w	r3, r1, #1
   1118a:	add	r3, r0
   1118c:	ldr	r3, [r3, #4]
   1118e:	lsls	r3, r3, #31
   11190:	bpl.n	1128e <_realloc_r+0x14e>
   11192:	tst.w	lr, #1
   11196:	beq.n	11204 <_realloc_r+0xc4>
   11198:	mov	r1, r7
   1119a:	mov	r0, r9
   1119c:	bl	10930 <_malloc_r>
   111a0:	mov	r7, r0
   111a2:	cbz	r0, 111de <_realloc_r+0x9e>
   111a4:	ldr.w	r3, [r6, #-4]
   111a8:	bic.w	r3, r3, #1
   111ac:	add	r3, r8
   111ae:	sub.w	r2, r0, #8
   111b2:	cmp	r2, r3
   111b4:	beq.w	11440 <_realloc_r+0x300>
   111b8:	subs	r2, r4, #4
   111ba:	cmp	r2, #36	; 0x24
   111bc:	bhi.w	11422 <_realloc_r+0x2e2>
   111c0:	cmp	r2, #19
   111c2:	bhi.w	113ce <_realloc_r+0x28e>
   111c6:	mov	r3, r0
   111c8:	mov	r2, r6
   111ca:	ldr	r1, [r2, #0]
   111cc:	str	r1, [r3, #0]
   111ce:	ldr	r1, [r2, #4]
   111d0:	str	r1, [r3, #4]
   111d2:	ldr	r2, [r2, #8]
   111d4:	str	r2, [r3, #8]
   111d6:	mov	r1, r6
   111d8:	mov	r0, r9
   111da:	bl	141f8 <_free_r>
   111de:	mov	r0, r9
   111e0:	bl	1113c <__malloc_unlock>
   111e4:	mov	r0, r7
   111e6:	add	sp, #12
   111e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111ec:	bic.w	r5, r5, #7
   111f0:	cmp	r5, #0
   111f2:	mov	r2, r5
   111f4:	bge.n	1116e <_realloc_r+0x2e>
   111f6:	movs	r3, #12
   111f8:	movs	r0, #0
   111fa:	str.w	r3, [r9]
   111fe:	add	sp, #12
   11200:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11204:	ldr.w	r3, [r6, #-8]
   11208:	rsb	sl, r3, r8
   1120c:	ldr.w	r3, [sl, #4]
   11210:	bic.w	ip, r3, #3
   11214:	add.w	r3, r4, ip
   11218:	cmp	r3, r2
   1121a:	blt.n	11198 <_realloc_r+0x58>
   1121c:	mov	r7, sl
   1121e:	ldr.w	r1, [sl, #12]
   11222:	ldr.w	r0, [r7, #8]!
   11226:	subs	r2, r4, #4
   11228:	cmp	r2, #36	; 0x24
   1122a:	str	r1, [r0, #12]
   1122c:	str	r0, [r1, #8]
   1122e:	bhi.w	11460 <_realloc_r+0x320>
   11232:	cmp	r2, #19
   11234:	bls.w	1145c <_realloc_r+0x31c>
   11238:	ldr	r1, [r6, #0]
   1123a:	str.w	r1, [sl, #8]
   1123e:	ldr	r1, [r6, #4]
   11240:	str.w	r1, [sl, #12]
   11244:	cmp	r2, #27
   11246:	bhi.w	114a0 <_realloc_r+0x360>
   1124a:	adds	r6, #8
   1124c:	add.w	r2, sl, #16
   11250:	ldr	r1, [r6, #0]
   11252:	str	r1, [r2, #0]
   11254:	ldr	r1, [r6, #4]
   11256:	str	r1, [r2, #4]
   11258:	ldr	r1, [r6, #8]
   1125a:	str	r1, [r2, #8]
   1125c:	mov	r6, r7
   1125e:	mov	r4, r3
   11260:	mov	r8, sl
   11262:	subs	r3, r4, r5
   11264:	cmp	r3, #15
   11266:	bhi.n	112a4 <_realloc_r+0x164>
   11268:	ldr.w	r3, [r8, #4]
   1126c:	and.w	r3, r3, #1
   11270:	orrs	r3, r4
   11272:	add	r4, r8
   11274:	str.w	r3, [r8, #4]
   11278:	ldr	r3, [r4, #4]
   1127a:	orr.w	r3, r3, #1
   1127e:	str	r3, [r4, #4]
   11280:	mov	r0, r9
   11282:	bl	1113c <__malloc_unlock>
   11286:	mov	r0, r6
   11288:	add	sp, #12
   1128a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1128e:	bic.w	r1, r1, #3
   11292:	add	r1, r4
   11294:	cmp	r1, r2
   11296:	blt.n	112dc <_realloc_r+0x19c>
   11298:	ldr	r3, [r0, #12]
   1129a:	ldr	r2, [r0, #8]
   1129c:	mov	r4, r1
   1129e:	str	r3, [r2, #12]
   112a0:	str	r2, [r3, #8]
   112a2:	b.n	11262 <_realloc_r+0x122>
   112a4:	ldr.w	r2, [r8, #4]
   112a8:	add.w	r1, r8, r5
   112ac:	and.w	r2, r2, #1
   112b0:	orrs	r5, r2
   112b2:	orr.w	r2, r3, #1
   112b6:	add	r3, r1
   112b8:	str.w	r5, [r8, #4]
   112bc:	str	r2, [r1, #4]
   112be:	ldr	r2, [r3, #4]
   112c0:	orr.w	r2, r2, #1
   112c4:	adds	r1, #8
   112c6:	str	r2, [r3, #4]
   112c8:	mov	r0, r9
   112ca:	bl	141f8 <_free_r>
   112ce:	b.n	11280 <_realloc_r+0x140>
   112d0:	mov	r1, r2
   112d2:	add	sp, #12
   112d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112d8:	b.w	10930 <_malloc_r>
   112dc:	tst.w	lr, #1
   112e0:	bne.w	11198 <_realloc_r+0x58>
   112e4:	ldr.w	r3, [r6, #-8]
   112e8:	rsb	sl, r3, r8
   112ec:	ldr.w	r3, [sl, #4]
   112f0:	bic.w	ip, r3, #3
   112f4:	add.w	lr, r1, ip
   112f8:	cmp	lr, r2
   112fa:	blt.n	11214 <_realloc_r+0xd4>
   112fc:	ldr	r3, [r0, #12]
   112fe:	ldr	r2, [r0, #8]
   11300:	mov	r7, sl
   11302:	str	r3, [r2, #12]
   11304:	str	r2, [r3, #8]
   11306:	ldr.w	r1, [r7, #8]!
   1130a:	ldr.w	r3, [sl, #12]
   1130e:	str	r3, [r1, #12]
   11310:	subs	r2, r4, #4
   11312:	cmp	r2, #36	; 0x24
   11314:	str	r1, [r3, #8]
   11316:	bhi.w	1144c <_realloc_r+0x30c>
   1131a:	cmp	r2, #19
   1131c:	bls.n	113e4 <_realloc_r+0x2a4>
   1131e:	ldr	r3, [r6, #0]
   11320:	str.w	r3, [sl, #8]
   11324:	ldr	r3, [r6, #4]
   11326:	str.w	r3, [sl, #12]
   1132a:	cmp	r2, #27
   1132c:	bhi.w	11470 <_realloc_r+0x330>
   11330:	adds	r6, #8
   11332:	add.w	r3, sl, #16
   11336:	b.n	113e6 <_realloc_r+0x2a6>
   11338:	bic.w	fp, r1, #3
   1133c:	add	fp, r4
   1133e:	add.w	r0, r5, #16
   11342:	cmp	fp, r0
   11344:	bge.n	113fa <_realloc_r+0x2ba>
   11346:	tst.w	lr, #1
   1134a:	bne.w	11198 <_realloc_r+0x58>
   1134e:	ldr.w	r1, [r6, #-8]
   11352:	rsb	sl, r1, r8
   11356:	ldr.w	r1, [sl, #4]
   1135a:	bic.w	ip, r1, #3
   1135e:	add	fp, ip
   11360:	cmp	r0, fp
   11362:	bgt.w	11214 <_realloc_r+0xd4>
   11366:	mov	r7, sl
   11368:	ldr.w	r1, [sl, #12]
   1136c:	ldr.w	r0, [r7, #8]!
   11370:	subs	r2, r4, #4
   11372:	cmp	r2, #36	; 0x24
   11374:	str	r1, [r0, #12]
   11376:	str	r0, [r1, #8]
   11378:	bhi.w	114e4 <_realloc_r+0x3a4>
   1137c:	cmp	r2, #19
   1137e:	bls.w	114cc <_realloc_r+0x38c>
   11382:	ldr	r1, [r6, #0]
   11384:	str.w	r1, [sl, #8]
   11388:	ldr	r1, [r6, #4]
   1138a:	str.w	r1, [sl, #12]
   1138e:	cmp	r2, #27
   11390:	bhi.w	114f2 <_realloc_r+0x3b2>
   11394:	adds	r6, #8
   11396:	add.w	r2, sl, #16
   1139a:	ldr	r1, [r6, #0]
   1139c:	str	r1, [r2, #0]
   1139e:	ldr	r1, [r6, #4]
   113a0:	str	r1, [r2, #4]
   113a2:	ldr	r1, [r6, #8]
   113a4:	str	r1, [r2, #8]
   113a6:	add.w	r1, sl, r5
   113aa:	rsb	r2, r5, fp
   113ae:	orr.w	r2, r2, #1
   113b2:	str	r1, [r3, #8]
   113b4:	str	r2, [r1, #4]
   113b6:	ldr.w	r3, [sl, #4]
   113ba:	and.w	r3, r3, #1
   113be:	orrs	r5, r3
   113c0:	mov	r0, r9
   113c2:	str.w	r5, [sl, #4]
   113c6:	bl	1113c <__malloc_unlock>
   113ca:	mov	r0, r7
   113cc:	b.n	11288 <_realloc_r+0x148>
   113ce:	ldr	r3, [r6, #0]
   113d0:	str	r3, [r0, #0]
   113d2:	ldr	r3, [r6, #4]
   113d4:	str	r3, [r0, #4]
   113d6:	cmp	r2, #27
   113d8:	bhi.n	1142a <_realloc_r+0x2ea>
   113da:	add.w	r3, r0, #8
   113de:	add.w	r2, r6, #8
   113e2:	b.n	111ca <_realloc_r+0x8a>
   113e4:	mov	r3, r7
   113e6:	ldr	r2, [r6, #0]
   113e8:	str	r2, [r3, #0]
   113ea:	ldr	r2, [r6, #4]
   113ec:	str	r2, [r3, #4]
   113ee:	ldr	r2, [r6, #8]
   113f0:	str	r2, [r3, #8]
   113f2:	mov	r6, r7
   113f4:	mov	r4, lr
   113f6:	mov	r8, sl
   113f8:	b.n	11262 <_realloc_r+0x122>
   113fa:	add.w	r1, r8, r5
   113fe:	rsb	fp, r5, fp
   11402:	orr.w	r2, fp, #1
   11406:	str	r1, [r3, #8]
   11408:	str	r2, [r1, #4]
   1140a:	ldr.w	r3, [r6, #-4]
   1140e:	and.w	r3, r3, #1
   11412:	orrs	r5, r3
   11414:	mov	r0, r9
   11416:	str.w	r5, [r6, #-4]
   1141a:	bl	1113c <__malloc_unlock>
   1141e:	mov	r0, r6
   11420:	b.n	11288 <_realloc_r+0x148>
   11422:	mov	r1, r6
   11424:	bl	10fd4 <memmove>
   11428:	b.n	111d6 <_realloc_r+0x96>
   1142a:	ldr	r3, [r6, #8]
   1142c:	str	r3, [r0, #8]
   1142e:	ldr	r3, [r6, #12]
   11430:	str	r3, [r0, #12]
   11432:	cmp	r2, #36	; 0x24
   11434:	beq.n	11488 <_realloc_r+0x348>
   11436:	add.w	r3, r0, #16
   1143a:	add.w	r2, r6, #16
   1143e:	b.n	111ca <_realloc_r+0x8a>
   11440:	ldr.w	r3, [r0, #-4]
   11444:	bic.w	r3, r3, #3
   11448:	add	r4, r3
   1144a:	b.n	11262 <_realloc_r+0x122>
   1144c:	mov	r1, r6
   1144e:	mov	r0, r7
   11450:	mov	r4, lr
   11452:	mov	r8, sl
   11454:	bl	10fd4 <memmove>
   11458:	mov	r6, r7
   1145a:	b.n	11262 <_realloc_r+0x122>
   1145c:	mov	r2, r7
   1145e:	b.n	11250 <_realloc_r+0x110>
   11460:	mov	r1, r6
   11462:	mov	r0, r7
   11464:	mov	r4, r3
   11466:	mov	r8, sl
   11468:	bl	10fd4 <memmove>
   1146c:	mov	r6, r7
   1146e:	b.n	11262 <_realloc_r+0x122>
   11470:	ldr	r3, [r6, #8]
   11472:	str.w	r3, [sl, #16]
   11476:	ldr	r3, [r6, #12]
   11478:	str.w	r3, [sl, #20]
   1147c:	cmp	r2, #36	; 0x24
   1147e:	beq.n	114b8 <_realloc_r+0x378>
   11480:	adds	r6, #16
   11482:	add.w	r3, sl, #24
   11486:	b.n	113e6 <_realloc_r+0x2a6>
   11488:	ldr	r3, [r6, #16]
   1148a:	str	r3, [r0, #16]
   1148c:	ldr	r3, [r6, #20]
   1148e:	str	r3, [r0, #20]
   11490:	add.w	r2, r6, #24
   11494:	add.w	r3, r0, #24
   11498:	b.n	111ca <_realloc_r+0x8a>
   1149a:	nop
   1149c:	.word	0x1fff1208
   114a0:	ldr	r1, [r6, #8]
   114a2:	str.w	r1, [sl, #16]
   114a6:	ldr	r1, [r6, #12]
   114a8:	str.w	r1, [sl, #20]
   114ac:	cmp	r2, #36	; 0x24
   114ae:	beq.n	114d0 <_realloc_r+0x390>
   114b0:	adds	r6, #16
   114b2:	add.w	r2, sl, #24
   114b6:	b.n	11250 <_realloc_r+0x110>
   114b8:	ldr	r3, [r6, #16]
   114ba:	str.w	r3, [sl, #24]
   114be:	ldr	r3, [r6, #20]
   114c0:	str.w	r3, [sl, #28]
   114c4:	adds	r6, #24
   114c6:	add.w	r3, sl, #32
   114ca:	b.n	113e6 <_realloc_r+0x2a6>
   114cc:	mov	r2, r7
   114ce:	b.n	1139a <_realloc_r+0x25a>
   114d0:	ldr	r2, [r6, #16]
   114d2:	str.w	r2, [sl, #24]
   114d6:	ldr	r2, [r6, #20]
   114d8:	str.w	r2, [sl, #28]
   114dc:	adds	r6, #24
   114de:	add.w	r2, sl, #32
   114e2:	b.n	11250 <_realloc_r+0x110>
   114e4:	mov	r1, r6
   114e6:	mov	r0, r7
   114e8:	str	r3, [sp, #4]
   114ea:	bl	10fd4 <memmove>
   114ee:	ldr	r3, [sp, #4]
   114f0:	b.n	113a6 <_realloc_r+0x266>
   114f2:	ldr	r1, [r6, #8]
   114f4:	str.w	r1, [sl, #16]
   114f8:	ldr	r1, [r6, #12]
   114fa:	str.w	r1, [sl, #20]
   114fe:	cmp	r2, #36	; 0x24
   11500:	beq.n	1150a <_realloc_r+0x3ca>
   11502:	adds	r6, #16
   11504:	add.w	r2, sl, #24
   11508:	b.n	1139a <_realloc_r+0x25a>
   1150a:	ldr	r2, [r6, #16]
   1150c:	str.w	r2, [sl, #24]
   11510:	ldr	r2, [r6, #20]
   11512:	str.w	r2, [sl, #28]
   11516:	adds	r6, #24
   11518:	add.w	r2, sl, #32
   1151c:	b.n	1139a <_realloc_r+0x25a>
   1151e:	nop

00011520 <_sbrk_r>:
   11520:	push	{r3, r4, r5, lr}
   11522:	ldr	r4, [pc, #28]	; (11540 <_sbrk_r+0x20>)
   11524:	movs	r3, #0
   11526:	mov	r5, r0
   11528:	mov	r0, r1
   1152a:	str	r3, [r4, #0]
   1152c:	bl	e14c <_sbrk>
   11530:	adds	r3, r0, #1
   11532:	beq.n	11536 <_sbrk_r+0x16>
   11534:	pop	{r3, r4, r5, pc}
   11536:	ldr	r3, [r4, #0]
   11538:	cmp	r3, #0
   1153a:	beq.n	11534 <_sbrk_r+0x14>
   1153c:	str	r3, [r5, #0]
   1153e:	pop	{r3, r4, r5, pc}
   11540:	.word	0x200071b4

00011544 <sprintf>:
   11544:	push	{r1, r2, r3}
   11546:	push	{r4, r5, r6, r7, lr}
   11548:	sub	sp, #112	; 0x70
   1154a:	add	r3, sp, #132	; 0x84
   1154c:	ldr	r1, [pc, #60]	; (1158c <sprintf+0x48>)
   1154e:	ldr.w	r2, [r3], #4
   11552:	str	r3, [sp, #4]
   11554:	mov	r5, r0
   11556:	mvn.w	r4, #2147483648	; 0x80000000
   1155a:	ldr	r0, [r1, #0]
   1155c:	str	r5, [sp, #8]
   1155e:	mov.w	r7, #520	; 0x208
   11562:	movw	r6, #65535	; 0xffff
   11566:	add	r1, sp, #8
   11568:	str	r5, [sp, #24]
   1156a:	strh.w	r7, [sp, #20]
   1156e:	str	r4, [sp, #16]
   11570:	str	r4, [sp, #28]
   11572:	strh.w	r6, [sp, #22]
   11576:	bl	11880 <_svfprintf_r>
   1157a:	ldr	r3, [sp, #8]
   1157c:	movs	r2, #0
   1157e:	strb	r2, [r3, #0]
   11580:	add	sp, #112	; 0x70
   11582:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   11586:	add	sp, #12
   11588:	bx	lr
   1158a:	nop
   1158c:	.word	0x1fff1098

00011590 <strcpy>:
   11590:	eor.w	r2, r0, r1
   11594:	mov	ip, r0
   11596:	tst.w	r2, #3
   1159a:	bne.n	1163c <strcpy+0xac>
   1159c:	tst.w	r1, #3
   115a0:	bne.n	11608 <strcpy+0x78>
   115a2:	str.w	r4, [sp, #-4]!
   115a6:	tst.w	r1, #4
   115aa:	ldr.w	r3, [r1], #4
   115ae:	beq.n	115c8 <strcpy+0x38>
   115b0:	sub.w	r2, r3, #16843009	; 0x1010101
   115b4:	bics	r2, r3
   115b6:	tst.w	r2, #2155905152	; 0x80808080
   115ba:	itt	eq
   115bc:	streq.w	r3, [ip], #4
   115c0:	ldreq.w	r3, [r1], #4
   115c4:	bne.n	115f4 <strcpy+0x64>
   115c6:	nop
   115c8:	ldr.w	r4, [r1], #4
   115cc:	sub.w	r2, r3, #16843009	; 0x1010101
   115d0:	bics	r2, r3
   115d2:	tst.w	r2, #2155905152	; 0x80808080
   115d6:	sub.w	r2, r4, #16843009	; 0x1010101
   115da:	bne.n	115f4 <strcpy+0x64>
   115dc:	str.w	r3, [ip], #4
   115e0:	bics	r2, r4
   115e2:	tst.w	r2, #2155905152	; 0x80808080
   115e6:	itt	eq
   115e8:	ldreq.w	r3, [r1], #4
   115ec:	streq.w	r4, [ip], #4
   115f0:	beq.n	115c8 <strcpy+0x38>
   115f2:	mov	r3, r4
   115f4:	strb.w	r3, [ip], #1
   115f8:	tst.w	r3, #255	; 0xff
   115fc:	mov.w	r3, r3, ror #8
   11600:	bne.n	115f4 <strcpy+0x64>
   11602:	ldr.w	r4, [sp], #4
   11606:	bx	lr
   11608:	tst.w	r1, #1
   1160c:	beq.n	1161c <strcpy+0x8c>
   1160e:	ldrb.w	r2, [r1], #1
   11612:	strb.w	r2, [ip], #1
   11616:	cmp	r2, #0
   11618:	it	eq
   1161a:	bxeq	lr
   1161c:	tst.w	r1, #2
   11620:	beq.n	115a2 <strcpy+0x12>
   11622:	ldrh.w	r2, [r1], #2
   11626:	tst.w	r2, #255	; 0xff
   1162a:	itet	ne
   1162c:	strhne.w	r2, [ip], #2
   11630:	strbeq.w	r2, [ip]
   11634:	tstne.w	r2, #65280	; 0xff00
   11638:	bne.n	115a2 <strcpy+0x12>
   1163a:	bx	lr
   1163c:	ldrb.w	r2, [r1], #1
   11640:	strb.w	r2, [ip], #1
   11644:	cmp	r2, #0
   11646:	bne.n	1163c <strcpy+0xac>
   11648:	bx	lr
   1164a:	nop

0001164c <strlcat>:
   1164c:	push	{r4, r5, r6, lr}
   1164e:	cbz	r2, 1168e <strlcat+0x42>
   11650:	ldrb	r6, [r0, #0]
   11652:	cbz	r6, 1169a <strlcat+0x4e>
   11654:	adds	r3, r0, #1
   11656:	adds	r6, r0, r2
   11658:	b.n	11660 <strlcat+0x14>
   1165a:	ldrb	r5, [r3, #0]
   1165c:	adds	r3, #1
   1165e:	cbz	r5, 11666 <strlcat+0x1a>
   11660:	cmp	r6, r3
   11662:	mov	r4, r3
   11664:	bne.n	1165a <strlcat+0xe>
   11666:	subs	r6, r4, r0
   11668:	subs	r2, r2, r6
   1166a:	beq.n	11690 <strlcat+0x44>
   1166c:	ldrb	r3, [r1, #0]
   1166e:	mov	r5, r1
   11670:	cbz	r3, 11686 <strlcat+0x3a>
   11672:	cmp	r2, #1
   11674:	beq.n	1167c <strlcat+0x30>
   11676:	strb	r3, [r4, #0]
   11678:	subs	r2, #1
   1167a:	adds	r4, #1
   1167c:	ldrb.w	r3, [r5, #1]!
   11680:	cmp	r3, #0
   11682:	bne.n	11672 <strlcat+0x26>
   11684:	subs	r3, r5, r1
   11686:	movs	r2, #0
   11688:	strb	r2, [r4, #0]
   1168a:	adds	r0, r6, r3
   1168c:	pop	{r4, r5, r6, pc}
   1168e:	mov	r6, r2
   11690:	mov	r0, r1
   11692:	bl	11700 <strlen>
   11696:	add	r0, r6
   11698:	pop	{r4, r5, r6, pc}
   1169a:	mov	r4, r0
   1169c:	b.n	1166c <strlcat+0x20>
   1169e:	nop

000116a0 <strlcpy>:
   116a0:	push	{r4}
   116a2:	mov	r3, r1
   116a4:	cbz	r2, 116ba <strlcpy+0x1a>
   116a6:	b.n	116b2 <strlcpy+0x12>
   116a8:	ldrb.w	r4, [r3], #1
   116ac:	strb.w	r4, [r0], #1
   116b0:	cbz	r4, 116c2 <strlcpy+0x22>
   116b2:	subs	r2, #1
   116b4:	bne.n	116a8 <strlcpy+0x8>
   116b6:	movs	r2, #0
   116b8:	strb	r2, [r0, #0]
   116ba:	ldrb.w	r2, [r3], #1
   116be:	cmp	r2, #0
   116c0:	bne.n	116ba <strlcpy+0x1a>
   116c2:	subs	r0, r3, r1
   116c4:	subs	r0, #1
   116c6:	ldr.w	r4, [sp], #4
   116ca:	bx	lr
   116cc:			; <UNDEFINED> instruction: 0xffffffff
   116d0:			; <UNDEFINED> instruction: 0xffffffff
   116d4:			; <UNDEFINED> instruction: 0xffffffff
   116d8:			; <UNDEFINED> instruction: 0xffffffff
   116dc:			; <UNDEFINED> instruction: 0xffffffff
   116e0:			; <UNDEFINED> instruction: 0xffffffff
   116e4:			; <UNDEFINED> instruction: 0xffffffff
   116e8:			; <UNDEFINED> instruction: 0xffffffff
   116ec:			; <UNDEFINED> instruction: 0xffffffff
   116f0:			; <UNDEFINED> instruction: 0xffffffff
   116f4:			; <UNDEFINED> instruction: 0xffffffff
   116f8:			; <UNDEFINED> instruction: 0xffffffff
   116fc:			; <UNDEFINED> instruction: 0xffffffff

00011700 <strlen>:
   11700:	pld	[r0]
   11704:	strd	r4, r5, [sp, #-8]!
   11708:	bic.w	r1, r0, #7
   1170c:	mvn.w	ip, #0
   11710:	ands.w	r4, r0, #7
   11714:	pld	[r1, #32]
   11718:	bne.w	117ae <strlen+0xae>
   1171c:	mov.w	r4, #0
   11720:	mvn.w	r0, #7
   11724:	ldrd	r2, r3, [r1]
   11728:	pld	[r1, #64]	; 0x40
   1172c:	add.w	r0, r0, #8
   11730:	uadd8	r2, r2, ip
   11734:	sel	r2, r4, ip
   11738:	uadd8	r3, r3, ip
   1173c:	sel	r3, r2, ip
   11740:	cbnz	r3, 11796 <strlen+0x96>
   11742:	ldrd	r2, r3, [r1, #8]
   11746:	uadd8	r2, r2, ip
   1174a:	add.w	r0, r0, #8
   1174e:	sel	r2, r4, ip
   11752:	uadd8	r3, r3, ip
   11756:	sel	r3, r2, ip
   1175a:	cbnz	r3, 11796 <strlen+0x96>
   1175c:	ldrd	r2, r3, [r1, #16]
   11760:	uadd8	r2, r2, ip
   11764:	add.w	r0, r0, #8
   11768:	sel	r2, r4, ip
   1176c:	uadd8	r3, r3, ip
   11770:	sel	r3, r2, ip
   11774:	cbnz	r3, 11796 <strlen+0x96>
   11776:	ldrd	r2, r3, [r1, #24]
   1177a:	add.w	r1, r1, #32
   1177e:	uadd8	r2, r2, ip
   11782:	add.w	r0, r0, #8
   11786:	sel	r2, r4, ip
   1178a:	uadd8	r3, r3, ip
   1178e:	sel	r3, r2, ip
   11792:	cmp	r3, #0
   11794:	beq.n	11724 <strlen+0x24>
   11796:	cmp	r2, #0
   11798:	itt	eq
   1179a:	addeq	r0, #4
   1179c:	moveq	r2, r3
   1179e:	rev	r2, r2
   117a0:	clz	r2, r2
   117a4:	ldrd	r4, r5, [sp], #8
   117a8:	add.w	r0, r0, r2, lsr #3
   117ac:	bx	lr
   117ae:	ldrd	r2, r3, [r1]
   117b2:	and.w	r5, r4, #3
   117b6:	rsb	r0, r4, #0
   117ba:	mov.w	r5, r5, lsl #3
   117be:	tst.w	r4, #4
   117c2:	pld	[r1, #64]	; 0x40
   117c6:	lsl.w	r5, ip, r5
   117ca:	orn	r2, r2, r5
   117ce:	itt	ne
   117d0:	ornne	r3, r3, r5
   117d4:	movne	r2, ip
   117d6:	mov.w	r4, #0
   117da:	b.n	11730 <strlen+0x30>

000117dc <strncmp>:
   117dc:	cmp	r2, #0
   117de:	beq.n	11864 <strncmp+0x88>
   117e0:	orr.w	r3, r0, r1
   117e4:	ands.w	r3, r3, #3
   117e8:	push	{r4, r5, r6, r7}
   117ea:	bne.n	11838 <strncmp+0x5c>
   117ec:	cmp	r2, #3
   117ee:	bls.n	11838 <strncmp+0x5c>
   117f0:	ldr	r4, [r0, #0]
   117f2:	ldr	r5, [r1, #0]
   117f4:	cmp	r4, r5
   117f6:	bne.n	11838 <strncmp+0x5c>
   117f8:	subs	r2, #4
   117fa:	beq.n	11868 <strncmp+0x8c>
   117fc:	sub.w	r5, r4, #16843009	; 0x1010101
   11800:	bic.w	r4, r5, r4
   11804:	tst.w	r4, #2155905152	; 0x80808080
   11808:	bne.n	1186e <strncmp+0x92>
   1180a:	adds	r7, r0, #4
   1180c:	adds	r5, r1, #4
   1180e:	b.n	1182c <strncmp+0x50>
   11810:	ldr.w	r3, [r7], #4
   11814:	ldr	r6, [r1, #0]
   11816:	sub.w	r4, r3, #16843009	; 0x1010101
   1181a:	cmp	r3, r6
   1181c:	bic.w	r4, r4, r3
   11820:	bne.n	11838 <strncmp+0x5c>
   11822:	subs	r2, #4
   11824:	beq.n	11868 <strncmp+0x8c>
   11826:	tst.w	r4, #2155905152	; 0x80808080
   1182a:	bne.n	11874 <strncmp+0x98>
   1182c:	cmp	r2, #3
   1182e:	mov	r1, r5
   11830:	mov	r0, r7
   11832:	add.w	r5, r5, #4
   11836:	bhi.n	11810 <strncmp+0x34>
   11838:	ldrb	r3, [r0, #0]
   1183a:	ldrb	r4, [r1, #0]
   1183c:	cmp	r4, r3
   1183e:	add.w	r2, r2, #4294967295
   11842:	bne.n	1185e <strncmp+0x82>
   11844:	cbz	r2, 11868 <strncmp+0x8c>
   11846:	cbnz	r4, 1184e <strncmp+0x72>
   11848:	b.n	11878 <strncmp+0x9c>
   1184a:	cbz	r2, 11868 <strncmp+0x8c>
   1184c:	cbz	r3, 1186e <strncmp+0x92>
   1184e:	ldrb.w	r3, [r0, #1]!
   11852:	ldrb.w	r4, [r1, #1]!
   11856:	cmp	r3, r4
   11858:	add.w	r2, r2, #4294967295
   1185c:	beq.n	1184a <strncmp+0x6e>
   1185e:	subs	r0, r3, r4
   11860:	pop	{r4, r5, r6, r7}
   11862:	bx	lr
   11864:	mov	r0, r2
   11866:	bx	lr
   11868:	mov	r0, r2
   1186a:	pop	{r4, r5, r6, r7}
   1186c:	bx	lr
   1186e:	mov	r0, r3
   11870:	pop	{r4, r5, r6, r7}
   11872:	bx	lr
   11874:	movs	r0, #0
   11876:	b.n	11860 <strncmp+0x84>
   11878:	mov	r0, r4
   1187a:	b.n	11860 <strncmp+0x84>
   1187c:			; <UNDEFINED> instruction: 0xffffffff

00011880 <_svfprintf_r>:
   11880:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11884:	sub	sp, #260	; 0x104
   11886:	mov	r4, r1
   11888:	str	r1, [sp, #20]
   1188a:	mov	r5, r2
   1188c:	str	r3, [sp, #40]	; 0x28
   1188e:	str	r0, [sp, #24]
   11890:	bl	143c8 <_localeconv_r>
   11894:	ldr	r3, [r0, #0]
   11896:	str	r3, [sp, #76]	; 0x4c
   11898:	mov	r0, r3
   1189a:	bl	11700 <strlen>
   1189e:	ldrh	r3, [r4, #12]
   118a0:	str	r0, [sp, #72]	; 0x48
   118a2:	lsls	r6, r3, #24
   118a4:	bpl.n	118ae <_svfprintf_r+0x2e>
   118a6:	ldr	r3, [r4, #16]
   118a8:	cmp	r3, #0
   118aa:	beq.w	12b10 <_svfprintf_r+0x1290>
   118ae:	vldr	d7, [pc, #664]	; 11b48 <_svfprintf_r+0x2c8>
   118b2:	movs	r3, #0
   118b4:	vstr	d7, [sp, #64]	; 0x40
   118b8:	str	r3, [sp, #56]	; 0x38
   118ba:	str	r3, [sp, #148]	; 0x94
   118bc:	str	r3, [sp, #144]	; 0x90
   118be:	str	r3, [sp, #84]	; 0x54
   118c0:	str	r3, [sp, #28]
   118c2:	ldr.w	sl, [pc, #656]	; 11b54 <_svfprintf_r+0x2d4>
   118c6:	add	r3, sp, #192	; 0xc0
   118c8:	str	r3, [sp, #140]	; 0x8c
   118ca:	mov	r9, r3
   118cc:	mov	r8, r5
   118ce:	ldrb.w	r3, [r8]
   118d2:	mov	r4, r8
   118d4:	cbz	r3, 11912 <_svfprintf_r+0x92>
   118d6:	cmp	r3, #37	; 0x25
   118d8:	bne.n	118e0 <_svfprintf_r+0x60>
   118da:	b.n	11912 <_svfprintf_r+0x92>
   118dc:	cmp	r3, #37	; 0x25
   118de:	beq.n	118e8 <_svfprintf_r+0x68>
   118e0:	ldrb.w	r3, [r4, #1]!
   118e4:	cmp	r3, #0
   118e6:	bne.n	118dc <_svfprintf_r+0x5c>
   118e8:	rsb	r5, r8, r4
   118ec:	cbz	r5, 11912 <_svfprintf_r+0x92>
   118ee:	ldr	r3, [sp, #144]	; 0x90
   118f0:	ldr	r2, [sp, #148]	; 0x94
   118f2:	str.w	r8, [r9]
   118f6:	adds	r3, #1
   118f8:	add	r2, r5
   118fa:	cmp	r3, #7
   118fc:	str.w	r5, [r9, #4]
   11900:	str	r2, [sp, #148]	; 0x94
   11902:	str	r3, [sp, #144]	; 0x90
   11904:	bgt.w	11a54 <_svfprintf_r+0x1d4>
   11908:	add.w	r9, r9, #8
   1190c:	ldr	r3, [sp, #28]
   1190e:	add	r3, r5
   11910:	str	r3, [sp, #28]
   11912:	ldrb	r3, [r4, #0]
   11914:	cmp	r3, #0
   11916:	beq.w	11a66 <_svfprintf_r+0x1e6>
   1191a:	movs	r3, #0
   1191c:	mov	r2, r3
   1191e:	strb.w	r3, [sp, #111]	; 0x6f
   11922:	mov	r1, r3
   11924:	str	r3, [sp, #32]
   11926:	str	r3, [sp, #12]
   11928:	mov.w	fp, #4294967295
   1192c:	ldrb	r3, [r4, #1]
   1192e:	add.w	r8, r4, #1
   11932:	mov	r5, fp
   11934:	add.w	r8, r8, #1
   11938:	sub.w	r0, r3, #32
   1193c:	cmp	r0, #88	; 0x58
   1193e:	bhi.w	121aa <_svfprintf_r+0x92a>
   11942:	tbh	[pc, r0, lsl #1]
   11946:	.short	0x03a0
   11948:	.word	0x04320432
   1194c:	.word	0x043203a8
   11950:	.word	0x04320432
   11954:	.word	0x04320432
   11958:	.word	0x03af0432
   1195c:	.word	0x043203bd
   11960:	.word	0x00e2005d
   11964:	.word	0x01090432
   11968:	.word	0x01100110
   1196c:	.word	0x01100110
   11970:	.word	0x01100110
   11974:	.word	0x01100110
   11978:	.word	0x04320110
   1197c:	.word	0x04320432
   11980:	.word	0x04320432
   11984:	.word	0x04320432
   11988:	.word	0x04320432
   1198c:	.word	0x01200432
   11990:	.word	0x04320286
   11994:	.word	0x04320286
   11998:	.word	0x04320432
   1199c:	.word	0x02d40432
   119a0:	.word	0x04320432
   119a4:	.word	0x043202e5
   119a8:	.word	0x04320432
   119ac:	.word	0x04320432
   119b0:	.word	0x0432030f
   119b4:	.word	0x033d0432
   119b8:	.word	0x04320432
   119bc:	.word	0x04320432
   119c0:	.word	0x04320432
   119c4:	.word	0x04320432
   119c8:	.word	0x04320432
   119cc:	.word	0x0391037e
   119d0:	.word	0x02860286
   119d4:	.word	0x03990286
   119d8:	.word	0x04320391
   119dc:	.word	0x04070432
   119e0:	.word	0x04120432
   119e4:	.word	0x006400a3
   119e8:	.word	0x043203c2
   119ec:	.word	0x043203c9
   119f0:	.word	0x043203ea
   119f4:	.word	0x03f20432
   119f8:	ldr	r0, [sp, #32]
   119fa:	str	r3, [sp, #40]	; 0x28
   119fc:	negs	r0, r0
   119fe:	str	r0, [sp, #32]
   11a00:	ldr	r3, [sp, #12]
   11a02:	orr.w	r3, r3, #4
   11a06:	str	r3, [sp, #12]
   11a08:	ldrb.w	r3, [r8]
   11a0c:	b.n	11934 <_svfprintf_r+0xb4>
   11a0e:	ldr	r0, [sp, #40]	; 0x28
   11a10:	mov	fp, r5
   11a12:	movs	r1, #0
   11a14:	ldr	r4, [r0, #0]
   11a16:	strb.w	r1, [sp, #111]	; 0x6f
   11a1a:	adds	r7, r0, #4
   11a1c:	ldr	r0, [sp, #12]
   11a1e:	movs	r3, #48	; 0x30
   11a20:	movs	r2, #120	; 0x78
   11a22:	cmp	fp, r1
   11a24:	strb.w	r3, [sp, #112]	; 0x70
   11a28:	mov.w	r5, #0
   11a2c:	strb.w	r2, [sp, #113]	; 0x71
   11a30:	orr.w	r3, r0, #2
   11a34:	blt.w	121e4 <_svfprintf_r+0x964>
   11a38:	bic.w	r3, r0, #128	; 0x80
   11a3c:	orr.w	r3, r3, #2
   11a40:	str	r3, [sp, #12]
   11a42:	orrs.w	r3, r4, r5
   11a46:	str	r7, [sp, #40]	; 0x28
   11a48:	beq.w	12190 <_svfprintf_r+0x910>
   11a4c:	mov	r7, r1
   11a4e:	str	r2, [sp, #52]	; 0x34
   11a50:	ldr	r0, [pc, #252]	; (11b50 <_svfprintf_r+0x2d0>)
   11a52:	b.n	12022 <_svfprintf_r+0x7a2>
   11a54:	add	r2, sp, #140	; 0x8c
   11a56:	ldr	r1, [sp, #20]
   11a58:	ldr	r0, [sp, #24]
   11a5a:	bl	14a08 <__ssprint_r>
   11a5e:	cbnz	r0, 11a74 <_svfprintf_r+0x1f4>
   11a60:	add.w	r9, sp, #192	; 0xc0
   11a64:	b.n	1190c <_svfprintf_r+0x8c>
   11a66:	ldr	r3, [sp, #148]	; 0x94
   11a68:	cbz	r3, 11a74 <_svfprintf_r+0x1f4>
   11a6a:	ldr	r0, [sp, #24]
   11a6c:	ldr	r1, [sp, #20]
   11a6e:	add	r2, sp, #140	; 0x8c
   11a70:	bl	14a08 <__ssprint_r>
   11a74:	ldr	r3, [sp, #20]
   11a76:	ldrh	r3, [r3, #12]
   11a78:	tst.w	r3, #64	; 0x40
   11a7c:	ldr	r3, [sp, #28]
   11a7e:	it	ne
   11a80:	movne.w	r3, #4294967295
   11a84:	mov	r0, r3
   11a86:	add	sp, #260	; 0x104
   11a88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a8c:	str	r3, [sp, #52]	; 0x34
   11a8e:	mov	fp, r5
   11a90:	cmp	r2, #0
   11a92:	bne.w	12efc <_svfprintf_r+0x167c>
   11a96:	ldr	r2, [sp, #12]
   11a98:	ands.w	r3, r2, #32
   11a9c:	beq.w	11f2c <_svfprintf_r+0x6ac>
   11aa0:	ldr	r7, [sp, #40]	; 0x28
   11aa2:	adds	r7, #7
   11aa4:	bic.w	r3, r7, #7
   11aa8:	movs	r7, #0
   11aaa:	add.w	r1, r3, #8
   11aae:	cmp	fp, r7
   11ab0:	str	r1, [sp, #40]	; 0x28
   11ab2:	ldrd	r4, r5, [r3]
   11ab6:	strb.w	r7, [sp, #111]	; 0x6f
   11aba:	blt.w	12982 <_svfprintf_r+0x1102>
   11abe:	bic.w	r3, r2, #128	; 0x80
   11ac2:	str	r3, [sp, #12]
   11ac4:	orrs.w	r3, r4, r5
   11ac8:	beq.w	121d4 <_svfprintf_r+0x954>
   11acc:	add	r6, sp, #192	; 0xc0
   11ace:	lsrs	r2, r4, #3
   11ad0:	orr.w	r2, r2, r5, lsl #29
   11ad4:	lsrs	r1, r5, #3
   11ad6:	and.w	r3, r4, #7
   11ada:	mov	r5, r1
   11adc:	mov	r4, r2
   11ade:	adds	r3, #48	; 0x30
   11ae0:	orrs.w	r2, r4, r5
   11ae4:	strb.w	r3, [r6, #-1]!
   11ae8:	bne.n	11ace <_svfprintf_r+0x24e>
   11aea:	ldr	r2, [sp, #12]
   11aec:	lsls	r1, r2, #31
   11aee:	bpl.w	11c10 <_svfprintf_r+0x390>
   11af2:	cmp	r3, #48	; 0x30
   11af4:	beq.w	11c10 <_svfprintf_r+0x390>
   11af8:	movs	r2, #48	; 0x30
   11afa:	subs	r3, r6, #1
   11afc:	strb.w	r2, [r6, #-1]
   11b00:	add	r2, sp, #192	; 0xc0
   11b02:	subs	r2, r2, r3
   11b04:	str	r2, [sp, #36]	; 0x24
   11b06:	mov	r6, r3
   11b08:	b.n	11c16 <_svfprintf_r+0x396>
   11b0a:	ldrb.w	r3, [r8]
   11b0e:	cmp	r3, #42	; 0x2a
   11b10:	add.w	r4, r8, #1
   11b14:	beq.w	12ee0 <_svfprintf_r+0x1660>
   11b18:	sub.w	r0, r3, #48	; 0x30
   11b1c:	cmp	r0, #9
   11b1e:	it	ls
   11b20:	movls	r5, #0
   11b22:	bhi.w	12e32 <_svfprintf_r+0x15b2>
   11b26:	ldrb.w	r3, [r4], #1
   11b2a:	add.w	r5, r5, r5, lsl #2
   11b2e:	add.w	r5, r0, r5, lsl #1
   11b32:	sub.w	r0, r3, #48	; 0x30
   11b36:	cmp	r0, #9
   11b38:	bls.n	11b26 <_svfprintf_r+0x2a6>
   11b3a:	orr.w	r5, r5, r5, asr #31
   11b3e:	mov	r8, r4
   11b40:	b.n	11938 <_svfprintf_r+0xb8>
   11b42:	nop
   11b44:	nop.w
	...
   11b50:	.word	0x00015594
   11b54:	.word	0x00015560
   11b58:	ldr	r3, [sp, #12]
   11b5a:	orr.w	r3, r3, #128	; 0x80
   11b5e:	str	r3, [sp, #12]
   11b60:	ldrb.w	r3, [r8]
   11b64:	b.n	11934 <_svfprintf_r+0xb4>
   11b66:	sub.w	r0, r3, #48	; 0x30
   11b6a:	movs	r3, #0
   11b6c:	mov	r4, r3
   11b6e:	ldrb.w	r3, [r8], #1
   11b72:	add.w	r4, r4, r4, lsl #2
   11b76:	add.w	r4, r0, r4, lsl #1
   11b7a:	sub.w	r0, r3, #48	; 0x30
   11b7e:	cmp	r0, #9
   11b80:	bls.n	11b6e <_svfprintf_r+0x2ee>
   11b82:	str	r4, [sp, #32]
   11b84:	b.n	11938 <_svfprintf_r+0xb8>
   11b86:	str	r3, [sp, #52]	; 0x34
   11b88:	mov	fp, r5
   11b8a:	cmp	r2, #0
   11b8c:	bne.w	12f18 <_svfprintf_r+0x1698>
   11b90:	ldr	r3, [sp, #12]
   11b92:	orr.w	r3, r3, #16
   11b96:	str	r3, [sp, #12]
   11b98:	ldr	r3, [sp, #12]
   11b9a:	lsls	r4, r3, #26
   11b9c:	bpl.w	1260e <_svfprintf_r+0xd8e>
   11ba0:	ldr	r7, [sp, #40]	; 0x28
   11ba2:	adds	r7, #7
   11ba4:	bic.w	r7, r7, #7
   11ba8:	ldrd	r2, r3, [r7]
   11bac:	add.w	r1, r7, #8
   11bb0:	str	r1, [sp, #40]	; 0x28
   11bb2:	mov	r4, r2
   11bb4:	mov	r5, r3
   11bb6:	cmp	r2, #0
   11bb8:	sbcs.w	r3, r3, #0
   11bbc:	blt.w	12684 <_svfprintf_r+0xe04>
   11bc0:	cmp.w	fp, #0
   11bc4:	ldrb.w	r7, [sp, #111]	; 0x6f
   11bc8:	blt.w	1264a <_svfprintf_r+0xdca>
   11bcc:	ldr	r3, [sp, #12]
   11bce:	bic.w	r3, r3, #128	; 0x80
   11bd2:	str	r3, [sp, #12]
   11bd4:	orrs.w	r3, r4, r5
   11bd8:	beq.w	11fac <_svfprintf_r+0x72c>
   11bdc:	cmp	r5, #0
   11bde:	it	eq
   11be0:	cmpeq	r4, #10
   11be2:	bcc.w	11fb6 <_svfprintf_r+0x736>
   11be6:	add	r6, sp, #192	; 0xc0
   11be8:	mov	r0, r4
   11bea:	mov	r1, r5
   11bec:	movs	r2, #10
   11bee:	movs	r3, #0
   11bf0:	bl	1050c <__aeabi_uldivmod>
   11bf4:	adds	r2, #48	; 0x30
   11bf6:	strb.w	r2, [r6, #-1]!
   11bfa:	mov	r0, r4
   11bfc:	mov	r1, r5
   11bfe:	movs	r3, #0
   11c00:	movs	r2, #10
   11c02:	bl	1050c <__aeabi_uldivmod>
   11c06:	mov	r4, r0
   11c08:	mov	r5, r1
   11c0a:	orrs.w	r3, r4, r5
   11c0e:	bne.n	11be8 <_svfprintf_r+0x368>
   11c10:	add	r3, sp, #192	; 0xc0
   11c12:	subs	r3, r3, r6
   11c14:	str	r3, [sp, #36]	; 0x24
   11c16:	ldr	r3, [sp, #36]	; 0x24
   11c18:	cmp	r3, fp
   11c1a:	it	lt
   11c1c:	movlt	r3, fp
   11c1e:	str	r3, [sp, #16]
   11c20:	movs	r3, #0
   11c22:	str	r3, [sp, #60]	; 0x3c
   11c24:	cbz	r7, 11c2c <_svfprintf_r+0x3ac>
   11c26:	ldr	r3, [sp, #16]
   11c28:	adds	r3, #1
   11c2a:	str	r3, [sp, #16]
   11c2c:	ldr	r3, [sp, #12]
   11c2e:	ands.w	r3, r3, #2
   11c32:	str	r3, [sp, #44]	; 0x2c
   11c34:	beq.n	11c3c <_svfprintf_r+0x3bc>
   11c36:	ldr	r3, [sp, #16]
   11c38:	adds	r3, #2
   11c3a:	str	r3, [sp, #16]
   11c3c:	ldr	r3, [sp, #12]
   11c3e:	ands.w	r3, r3, #132	; 0x84
   11c42:	str	r3, [sp, #48]	; 0x30
   11c44:	bne.w	121fe <_svfprintf_r+0x97e>
   11c48:	ldr	r3, [sp, #32]
   11c4a:	ldr	r2, [sp, #16]
   11c4c:	subs	r5, r3, r2
   11c4e:	cmp	r5, #0
   11c50:	ble.w	121fe <_svfprintf_r+0x97e>
   11c54:	cmp	r5, #16
   11c56:	ldr	r1, [sp, #148]	; 0x94
   11c58:	ldr	r2, [sp, #144]	; 0x90
   11c5a:	ldr	r7, [pc, #672]	; (11efc <_svfprintf_r+0x67c>)
   11c5c:	ble.n	11cae <_svfprintf_r+0x42e>
   11c5e:	str	r6, [sp, #80]	; 0x50
   11c60:	mov	r0, r9
   11c62:	movs	r4, #16
   11c64:	mov	r9, r7
   11c66:	ldr	r6, [sp, #20]
   11c68:	mov	r7, r5
   11c6a:	ldr	r5, [sp, #24]
   11c6c:	b.n	11c78 <_svfprintf_r+0x3f8>
   11c6e:	subs	r7, #16
   11c70:	cmp	r7, #16
   11c72:	add.w	r0, r0, #8
   11c76:	ble.n	11ca6 <_svfprintf_r+0x426>
   11c78:	adds	r2, #1
   11c7a:	ldr	r3, [pc, #640]	; (11efc <_svfprintf_r+0x67c>)
   11c7c:	str	r2, [sp, #144]	; 0x90
   11c7e:	adds	r1, #16
   11c80:	cmp	r2, #7
   11c82:	str	r1, [sp, #148]	; 0x94
   11c84:	stmia.w	r0, {r3, r4}
   11c88:	ble.n	11c6e <_svfprintf_r+0x3ee>
   11c8a:	add	r2, sp, #140	; 0x8c
   11c8c:	mov	r1, r6
   11c8e:	mov	r0, r5
   11c90:	bl	14a08 <__ssprint_r>
   11c94:	cmp	r0, #0
   11c96:	bne.w	11a74 <_svfprintf_r+0x1f4>
   11c9a:	subs	r7, #16
   11c9c:	cmp	r7, #16
   11c9e:	ldr	r1, [sp, #148]	; 0x94
   11ca0:	ldr	r2, [sp, #144]	; 0x90
   11ca2:	add	r0, sp, #192	; 0xc0
   11ca4:	bgt.n	11c78 <_svfprintf_r+0x3f8>
   11ca6:	ldr	r6, [sp, #80]	; 0x50
   11ca8:	mov	r5, r7
   11caa:	mov	r7, r9
   11cac:	mov	r9, r0
   11cae:	adds	r2, #1
   11cb0:	adds	r4, r5, r1
   11cb2:	cmp	r2, #7
   11cb4:	str	r4, [sp, #148]	; 0x94
   11cb6:	str	r2, [sp, #144]	; 0x90
   11cb8:	str.w	r7, [r9]
   11cbc:	str.w	r5, [r9, #4]
   11cc0:	bgt.w	1251e <_svfprintf_r+0xc9e>
   11cc4:	ldrb.w	r7, [sp, #111]	; 0x6f
   11cc8:	add.w	r9, r9, #8
   11ccc:	cbz	r7, 11cec <_svfprintf_r+0x46c>
   11cce:	ldr	r3, [sp, #144]	; 0x90
   11cd0:	adds	r3, #1
   11cd2:	adds	r4, #1
   11cd4:	add.w	r1, sp, #111	; 0x6f
   11cd8:	movs	r2, #1
   11cda:	cmp	r3, #7
   11cdc:	str	r4, [sp, #148]	; 0x94
   11cde:	str	r3, [sp, #144]	; 0x90
   11ce0:	stmia.w	r9, {r1, r2}
   11ce4:	bgt.w	12432 <_svfprintf_r+0xbb2>
   11ce8:	add.w	r9, r9, #8
   11cec:	ldr	r3, [sp, #44]	; 0x2c
   11cee:	cbz	r3, 11d0c <_svfprintf_r+0x48c>
   11cf0:	ldr	r3, [sp, #144]	; 0x90
   11cf2:	adds	r3, #1
   11cf4:	adds	r4, #2
   11cf6:	add	r1, sp, #112	; 0x70
   11cf8:	movs	r2, #2
   11cfa:	cmp	r3, #7
   11cfc:	str	r4, [sp, #148]	; 0x94
   11cfe:	str	r3, [sp, #144]	; 0x90
   11d00:	stmia.w	r9, {r1, r2}
   11d04:	bgt.w	1244a <_svfprintf_r+0xbca>
   11d08:	add.w	r9, r9, #8
   11d0c:	ldr	r3, [sp, #48]	; 0x30
   11d0e:	cmp	r3, #128	; 0x80
   11d10:	beq.w	122d6 <_svfprintf_r+0xa56>
   11d14:	ldr	r3, [sp, #36]	; 0x24
   11d16:	rsb	r7, r3, fp
   11d1a:	cmp	r7, #0
   11d1c:	ble.n	11d86 <_svfprintf_r+0x506>
   11d1e:	ldr	r2, [pc, #480]	; (11f00 <_svfprintf_r+0x680>)
   11d20:	ldr	r3, [sp, #144]	; 0x90
   11d22:	str	r2, [sp, #44]	; 0x2c
   11d24:	cmp	r7, #16
   11d26:	ble.n	11d6e <_svfprintf_r+0x4ee>
   11d28:	mov	r2, r4
   11d2a:	mov.w	fp, #16
   11d2e:	ldr	r5, [sp, #24]
   11d30:	ldr	r4, [sp, #20]
   11d32:	b.n	11d3e <_svfprintf_r+0x4be>
   11d34:	subs	r7, #16
   11d36:	cmp	r7, #16
   11d38:	add.w	r9, r9, #8
   11d3c:	ble.n	11d6c <_svfprintf_r+0x4ec>
   11d3e:	adds	r3, #1
   11d40:	adds	r2, #16
   11d42:	cmp	r3, #7
   11d44:	str	r2, [sp, #148]	; 0x94
   11d46:	str	r3, [sp, #144]	; 0x90
   11d48:	stmia.w	r9, {sl, fp}
   11d4c:	ble.n	11d34 <_svfprintf_r+0x4b4>
   11d4e:	add	r2, sp, #140	; 0x8c
   11d50:	mov	r1, r4
   11d52:	mov	r0, r5
   11d54:	bl	14a08 <__ssprint_r>
   11d58:	cmp	r0, #0
   11d5a:	bne.w	11a74 <_svfprintf_r+0x1f4>
   11d5e:	subs	r7, #16
   11d60:	cmp	r7, #16
   11d62:	ldr	r2, [sp, #148]	; 0x94
   11d64:	ldr	r3, [sp, #144]	; 0x90
   11d66:	add.w	r9, sp, #192	; 0xc0
   11d6a:	bgt.n	11d3e <_svfprintf_r+0x4be>
   11d6c:	mov	r4, r2
   11d6e:	adds	r3, #1
   11d70:	ldr	r2, [sp, #44]	; 0x2c
   11d72:	str	r3, [sp, #144]	; 0x90
   11d74:	add	r4, r7
   11d76:	cmp	r3, #7
   11d78:	str	r4, [sp, #148]	; 0x94
   11d7a:	stmia.w	r9, {r2, r7}
   11d7e:	bgt.w	1241a <_svfprintf_r+0xb9a>
   11d82:	add.w	r9, r9, #8
   11d86:	ldr	r3, [sp, #12]
   11d88:	lsls	r2, r3, #23
   11d8a:	bmi.w	12202 <_svfprintf_r+0x982>
   11d8e:	ldr	r3, [sp, #144]	; 0x90
   11d90:	ldr	r1, [sp, #36]	; 0x24
   11d92:	str.w	r6, [r9]
   11d96:	adds	r3, #1
   11d98:	add	r4, r1
   11d9a:	cmp	r3, #7
   11d9c:	str	r4, [sp, #148]	; 0x94
   11d9e:	str.w	r1, [r9, #4]
   11da2:	str	r3, [sp, #144]	; 0x90
   11da4:	bgt.w	123ee <_svfprintf_r+0xb6e>
   11da8:	add.w	r9, r9, #8
   11dac:	ldr	r3, [sp, #12]
   11dae:	lsls	r1, r3, #29
   11db0:	bpl.n	11e32 <_svfprintf_r+0x5b2>
   11db2:	ldr	r3, [sp, #32]
   11db4:	ldr	r2, [sp, #16]
   11db6:	subs	r5, r3, r2
   11db8:	cmp	r5, #0
   11dba:	ble.n	11e32 <_svfprintf_r+0x5b2>
   11dbc:	cmp	r5, #16
   11dbe:	ldr	r3, [sp, #144]	; 0x90
   11dc0:	ldr	r7, [pc, #312]	; (11efc <_svfprintf_r+0x67c>)
   11dc2:	ble.n	11e0c <_svfprintf_r+0x58c>
   11dc4:	mov	r2, r4
   11dc6:	movs	r6, #16
   11dc8:	ldr.w	fp, [sp, #24]
   11dcc:	ldr	r4, [sp, #20]
   11dce:	b.n	11dda <_svfprintf_r+0x55a>
   11dd0:	subs	r5, #16
   11dd2:	cmp	r5, #16
   11dd4:	add.w	r9, r9, #8
   11dd8:	ble.n	11e0a <_svfprintf_r+0x58a>
   11dda:	adds	r3, #1
   11ddc:	ldr	r1, [pc, #284]	; (11efc <_svfprintf_r+0x67c>)
   11dde:	str	r3, [sp, #144]	; 0x90
   11de0:	adds	r2, #16
   11de2:	cmp	r3, #7
   11de4:	str	r2, [sp, #148]	; 0x94
   11de6:	stmia.w	r9, {r1, r6}
   11dea:	ble.n	11dd0 <_svfprintf_r+0x550>
   11dec:	add	r2, sp, #140	; 0x8c
   11dee:	mov	r1, r4
   11df0:	mov	r0, fp
   11df2:	bl	14a08 <__ssprint_r>
   11df6:	cmp	r0, #0
   11df8:	bne.w	11a74 <_svfprintf_r+0x1f4>
   11dfc:	subs	r5, #16
   11dfe:	cmp	r5, #16
   11e00:	ldr	r2, [sp, #148]	; 0x94
   11e02:	ldr	r3, [sp, #144]	; 0x90
   11e04:	add.w	r9, sp, #192	; 0xc0
   11e08:	bgt.n	11dda <_svfprintf_r+0x55a>
   11e0a:	mov	r4, r2
   11e0c:	adds	r3, #1
   11e0e:	add	r4, r5
   11e10:	cmp	r3, #7
   11e12:	str	r4, [sp, #148]	; 0x94
   11e14:	str	r3, [sp, #144]	; 0x90
   11e16:	str.w	r7, [r9]
   11e1a:	str.w	r5, [r9, #4]
   11e1e:	ble.n	11e32 <_svfprintf_r+0x5b2>
   11e20:	add	r2, sp, #140	; 0x8c
   11e22:	ldr	r1, [sp, #20]
   11e24:	ldr	r0, [sp, #24]
   11e26:	bl	14a08 <__ssprint_r>
   11e2a:	cmp	r0, #0
   11e2c:	bne.w	11a74 <_svfprintf_r+0x1f4>
   11e30:	ldr	r4, [sp, #148]	; 0x94
   11e32:	ldr	r3, [sp, #28]
   11e34:	ldr	r2, [sp, #32]
   11e36:	ldr	r1, [sp, #16]
   11e38:	cmp	r2, r1
   11e3a:	ite	ge
   11e3c:	addge	r3, r3, r2
   11e3e:	addlt	r3, r3, r1
   11e40:	str	r3, [sp, #28]
   11e42:	cmp	r4, #0
   11e44:	bne.w	12406 <_svfprintf_r+0xb86>
   11e48:	movs	r3, #0
   11e4a:	str	r3, [sp, #144]	; 0x90
   11e4c:	add.w	r9, sp, #192	; 0xc0
   11e50:	b.n	118ce <_svfprintf_r+0x4e>
   11e52:	str	r3, [sp, #52]	; 0x34
   11e54:	mov	fp, r5
   11e56:	cmp	r2, #0
   11e58:	bne.w	12f20 <_svfprintf_r+0x16a0>
   11e5c:	ldr	r3, [sp, #12]
   11e5e:	ldr	r7, [sp, #40]	; 0x28
   11e60:	lsls	r2, r3, #28
   11e62:	add.w	r7, r7, #7
   11e66:	bpl.w	12952 <_svfprintf_r+0x10d2>
   11e6a:	bic.w	r3, r7, #7
   11e6e:	vldr	d7, [r3]
   11e72:	vstr	d7, [sp, #64]	; 0x40
   11e76:	add.w	r2, r3, #8
   11e7a:	str	r2, [sp, #40]	; 0x28
   11e7c:	ldrd	r1, r2, [sp, #64]	; 0x40
   11e80:	bic.w	r3, r2, #2147483648	; 0x80000000
   11e84:	str	r1, [sp, #88]	; 0x58
   11e86:	str	r3, [sp, #92]	; 0x5c
   11e88:	ldrd	r4, r5, [sp, #88]	; 0x58
   11e8c:	mov.w	r2, #4294967295
   11e90:	mov	r0, r4
   11e92:	mov	r1, r5
   11e94:	ldr	r3, [pc, #108]	; (11f04 <_svfprintf_r+0x684>)
   11e96:	bl	103f0 <__aeabi_dcmpun>
   11e9a:	cmp	r0, #0
   11e9c:	bne.w	12854 <_svfprintf_r+0xfd4>
   11ea0:	mov.w	r2, #4294967295
   11ea4:	ldr	r3, [pc, #92]	; (11f04 <_svfprintf_r+0x684>)
   11ea6:	mov	r0, r4
   11ea8:	mov	r1, r5
   11eaa:	bl	103b4 <__aeabi_dcmple>
   11eae:	cmp	r0, #0
   11eb0:	bne.w	12854 <_svfprintf_r+0xfd4>
   11eb4:	movs	r2, #0
   11eb6:	movs	r3, #0
   11eb8:	ldrd	r0, r1, [sp, #64]	; 0x40
   11ebc:	bl	103a0 <__aeabi_dcmplt>
   11ec0:	cmp	r0, #0
   11ec2:	bne.w	12d6a <_svfprintf_r+0x14ea>
   11ec6:	ldrb.w	r7, [sp, #111]	; 0x6f
   11eca:	ldr	r6, [pc, #60]	; (11f08 <_svfprintf_r+0x688>)
   11ecc:	ldr	r3, [pc, #60]	; (11f0c <_svfprintf_r+0x68c>)
   11ece:	ldr	r1, [sp, #12]
   11ed0:	bic.w	r1, r1, #128	; 0x80
   11ed4:	str	r1, [sp, #12]
   11ed6:	ldr	r1, [sp, #52]	; 0x34
   11ed8:	movs	r2, #3
   11eda:	mov.w	fp, #0
   11ede:	str	r2, [sp, #16]
   11ee0:	cmp	r1, #71	; 0x47
   11ee2:	it	le
   11ee4:	movle	r6, r3
   11ee6:	str	r2, [sp, #36]	; 0x24
   11ee8:	str.w	fp, [sp, #60]	; 0x3c
   11eec:	b.n	11c24 <_svfprintf_r+0x3a4>
   11eee:	ldr	r3, [sp, #12]
   11ef0:	orr.w	r3, r3, #8
   11ef4:	str	r3, [sp, #12]
   11ef6:	ldrb.w	r3, [r8]
   11efa:	b.n	11934 <_svfprintf_r+0xb4>
   11efc:	.word	0x000155b0
   11f00:	.word	0x00015560
   11f04:	.word	0x7fefffff
   11f08:	.word	0x00015574
   11f0c:	.word	0x00015570
   11f10:	str	r3, [sp, #52]	; 0x34
   11f12:	mov	fp, r5
   11f14:	cmp	r2, #0
   11f16:	bne.w	12f38 <_svfprintf_r+0x16b8>
   11f1a:	ldr	r3, [sp, #12]
   11f1c:	orr.w	r3, r3, #16
   11f20:	str	r3, [sp, #12]
   11f22:	ldr	r2, [sp, #12]
   11f24:	ands.w	r3, r2, #32
   11f28:	bne.w	11aa0 <_svfprintf_r+0x220>
   11f2c:	ldr	r1, [sp, #12]
   11f2e:	ands.w	r2, r1, #16
   11f32:	beq.w	127ec <_svfprintf_r+0xf6c>
   11f36:	ldr	r0, [sp, #40]	; 0x28
   11f38:	strb.w	r3, [sp, #111]	; 0x6f
   11f3c:	cmp.w	fp, #0
   11f40:	ldr	r4, [r0, #0]
   11f42:	add.w	r7, r0, #4
   11f46:	mov.w	r5, #0
   11f4a:	blt.w	12980 <_svfprintf_r+0x1100>
   11f4e:	mov	r2, r1
   11f50:	bic.w	r2, r2, #128	; 0x80
   11f54:	str	r2, [sp, #12]
   11f56:	orrs.w	r2, r4, r5
   11f5a:	str	r7, [sp, #40]	; 0x28
   11f5c:	beq.w	121d4 <_svfprintf_r+0x954>
   11f60:	mov	r7, r3
   11f62:	b.n	11acc <_svfprintf_r+0x24c>
   11f64:	str	r3, [sp, #52]	; 0x34
   11f66:	mov	fp, r5
   11f68:	cmp	r2, #0
   11f6a:	bne.w	12f30 <_svfprintf_r+0x16b0>
   11f6e:	ldr	r3, [sp, #12]
   11f70:	orr.w	r3, r3, #16
   11f74:	str	r3, [sp, #12]
   11f76:	ldr	r2, [sp, #12]
   11f78:	ands.w	r3, r2, #32
   11f7c:	beq.w	125d8 <_svfprintf_r+0xd58>
   11f80:	ldr	r7, [sp, #40]	; 0x28
   11f82:	adds	r7, #7
   11f84:	bic.w	r3, r7, #7
   11f88:	movs	r7, #0
   11f8a:	add.w	r1, r3, #8
   11f8e:	cmp	fp, r7
   11f90:	str	r1, [sp, #40]	; 0x28
   11f92:	ldrd	r4, r5, [r3]
   11f96:	strb.w	r7, [sp, #111]	; 0x6f
   11f9a:	blt.w	1264a <_svfprintf_r+0xdca>
   11f9e:	bic.w	r3, r2, #128	; 0x80
   11fa2:	str	r3, [sp, #12]
   11fa4:	orrs.w	r3, r4, r5
   11fa8:	bne.w	11bdc <_svfprintf_r+0x35c>
   11fac:	cmp.w	fp, #0
   11fb0:	beq.w	1219e <_svfprintf_r+0x91e>
   11fb4:	movs	r4, #0
   11fb6:	add	r6, sp, #256	; 0x100
   11fb8:	adds	r4, #48	; 0x30
   11fba:	strb.w	r4, [r6, #-65]!
   11fbe:	b.n	11c10 <_svfprintf_r+0x390>
   11fc0:	str	r3, [sp, #52]	; 0x34
   11fc2:	mov	fp, r5
   11fc4:	cmp	r2, #0
   11fc6:	bne.w	12f28 <_svfprintf_r+0x16a8>
   11fca:	ldr	r3, [sp, #12]
   11fcc:	ldr	r0, [pc, #700]	; (1228c <_svfprintf_r+0xa0c>)
   11fce:	lsls	r5, r3, #26
   11fd0:	bpl.w	1213e <_svfprintf_r+0x8be>
   11fd4:	ldr	r7, [sp, #40]	; 0x28
   11fd6:	adds	r7, #7
   11fd8:	bic.w	r3, r7, #7
   11fdc:	ldrd	r4, r5, [r3]
   11fe0:	add.w	r2, r3, #8
   11fe4:	str	r2, [sp, #40]	; 0x28
   11fe6:	ldr	r2, [sp, #12]
   11fe8:	ands.w	r7, r2, #1
   11fec:	beq.w	12462 <_svfprintf_r+0xbe2>
   11ff0:	orrs.w	r3, r4, r5
   11ff4:	beq.w	129fc <_svfprintf_r+0x117c>
   11ff8:	ldrb.w	r2, [sp, #52]	; 0x34
   11ffc:	strb.w	r2, [sp, #113]	; 0x71
   12000:	movs	r7, #0
   12002:	ldr	r2, [sp, #12]
   12004:	strb.w	r7, [sp, #111]	; 0x6f
   12008:	movs	r3, #48	; 0x30
   1200a:	cmp	fp, r7
   1200c:	strb.w	r3, [sp, #112]	; 0x70
   12010:	orr.w	r3, r2, #2
   12014:	blt.w	12d74 <_svfprintf_r+0x14f4>
   12018:	bic.w	r3, r2, #128	; 0x80
   1201c:	orr.w	r3, r3, #2
   12020:	str	r3, [sp, #12]
   12022:	add	r6, sp, #192	; 0xc0
   12024:	lsrs	r3, r4, #4
   12026:	and.w	r1, r4, #15
   1202a:	orr.w	r3, r3, r5, lsl #28
   1202e:	lsrs	r2, r5, #4
   12030:	mov	r4, r3
   12032:	mov	r5, r2
   12034:	ldrb	r3, [r0, r1]
   12036:	strb.w	r3, [r6, #-1]!
   1203a:	orrs.w	r3, r4, r5
   1203e:	bne.n	12024 <_svfprintf_r+0x7a4>
   12040:	b.n	11c10 <_svfprintf_r+0x390>
   12042:	ldr	r1, [sp, #40]	; 0x28
   12044:	str	r3, [sp, #52]	; 0x34
   12046:	ldr	r2, [r1, #0]
   12048:	strb.w	r2, [sp, #152]	; 0x98
   1204c:	movs	r3, #0
   1204e:	mov	r2, r1
   12050:	mov	r7, r3
   12052:	strb.w	r3, [sp, #111]	; 0x6f
   12056:	adds	r2, #4
   12058:	movs	r3, #1
   1205a:	str	r3, [sp, #16]
   1205c:	mov	fp, r7
   1205e:	str	r7, [sp, #60]	; 0x3c
   12060:	str	r2, [sp, #40]	; 0x28
   12062:	str	r3, [sp, #36]	; 0x24
   12064:	add	r6, sp, #152	; 0x98
   12066:	b.n	11c2c <_svfprintf_r+0x3ac>
   12068:	str	r3, [sp, #52]	; 0x34
   1206a:	mov	fp, r5
   1206c:	cmp	r2, #0
   1206e:	beq.w	11b98 <_svfprintf_r+0x318>
   12072:	strb.w	r1, [sp, #111]	; 0x6f
   12076:	b.n	11b98 <_svfprintf_r+0x318>
   12078:	ldr	r3, [sp, #12]
   1207a:	orr.w	r3, r3, #64	; 0x40
   1207e:	str	r3, [sp, #12]
   12080:	ldrb.w	r3, [r8]
   12084:	b.n	11934 <_svfprintf_r+0xb4>
   12086:	ldrb.w	r3, [r8]
   1208a:	cmp	r1, #0
   1208c:	bne.w	11934 <_svfprintf_r+0xb4>
   12090:	movs	r2, #1
   12092:	movs	r1, #32
   12094:	b.n	11934 <_svfprintf_r+0xb4>
   12096:	ldr	r3, [sp, #12]
   12098:	orr.w	r3, r3, #1
   1209c:	str	r3, [sp, #12]
   1209e:	ldrb.w	r3, [r8]
   120a2:	b.n	11934 <_svfprintf_r+0xb4>
   120a4:	ldr	r4, [sp, #40]	; 0x28
   120a6:	ldr	r3, [r4, #0]
   120a8:	str	r3, [sp, #32]
   120aa:	mov	r0, r3
   120ac:	cmp	r0, #0
   120ae:	mov	r3, r4
   120b0:	add.w	r3, r3, #4
   120b4:	blt.w	119f8 <_svfprintf_r+0x178>
   120b8:	str	r3, [sp, #40]	; 0x28
   120ba:	ldrb.w	r3, [r8]
   120be:	b.n	11934 <_svfprintf_r+0xb4>
   120c0:	ldrb.w	r3, [r8]
   120c4:	movs	r2, #1
   120c6:	movs	r1, #43	; 0x2b
   120c8:	b.n	11934 <_svfprintf_r+0xb4>
   120ca:	ldr	r3, [sp, #12]
   120cc:	orr.w	r3, r3, #32
   120d0:	str	r3, [sp, #12]
   120d2:	ldrb.w	r3, [r8]
   120d6:	b.n	11934 <_svfprintf_r+0xb4>
   120d8:	ldr	r2, [sp, #40]	; 0x28
   120da:	str	r3, [sp, #52]	; 0x34
   120dc:	ldr	r6, [r2, #0]
   120de:	movs	r4, #0
   120e0:	strb.w	r4, [sp, #111]	; 0x6f
   120e4:	adds	r7, r2, #4
   120e6:	cmp	r6, #0
   120e8:	beq.w	12d24 <_svfprintf_r+0x14a4>
   120ec:	cmp	r5, #0
   120ee:	blt.w	12bb4 <_svfprintf_r+0x1334>
   120f2:	mov	r2, r5
   120f4:	mov	r1, r4
   120f6:	mov	r0, r6
   120f8:	bl	10ed0 <memchr>
   120fc:	cmp	r0, #0
   120fe:	beq.w	12dc8 <_svfprintf_r+0x1548>
   12102:	subs	r3, r0, r6
   12104:	str	r3, [sp, #36]	; 0x24
   12106:	mov	fp, r4
   12108:	bic.w	r3, r3, r3, asr #31
   1210c:	str	r7, [sp, #40]	; 0x28
   1210e:	str	r3, [sp, #16]
   12110:	str.w	fp, [sp, #60]	; 0x3c
   12114:	ldrb.w	r7, [sp, #111]	; 0x6f
   12118:	b.n	11c24 <_svfprintf_r+0x3a4>
   1211a:	str	r3, [sp, #52]	; 0x34
   1211c:	mov	fp, r5
   1211e:	cmp	r2, #0
   12120:	beq.w	11f76 <_svfprintf_r+0x6f6>
   12124:	strb.w	r1, [sp, #111]	; 0x6f
   12128:	b.n	11f76 <_svfprintf_r+0x6f6>
   1212a:	str	r3, [sp, #52]	; 0x34
   1212c:	mov	fp, r5
   1212e:	cmp	r2, #0
   12130:	bne.w	12f50 <_svfprintf_r+0x16d0>
   12134:	ldr	r3, [sp, #12]
   12136:	ldr	r0, [pc, #344]	; (12290 <_svfprintf_r+0xa10>)
   12138:	lsls	r5, r3, #26
   1213a:	bmi.w	11fd4 <_svfprintf_r+0x754>
   1213e:	ldr	r3, [sp, #12]
   12140:	lsls	r4, r3, #27
   12142:	bpl.w	129c2 <_svfprintf_r+0x1142>
   12146:	ldr	r2, [sp, #40]	; 0x28
   12148:	mov	r3, r2
   1214a:	adds	r3, #4
   1214c:	ldr	r4, [r2, #0]
   1214e:	str	r3, [sp, #40]	; 0x28
   12150:	movs	r5, #0
   12152:	b.n	11fe6 <_svfprintf_r+0x766>
   12154:	ldrb.w	r3, [r8]
   12158:	cmp	r3, #108	; 0x6c
   1215a:	beq.w	12ae2 <_svfprintf_r+0x1262>
   1215e:	ldr	r0, [sp, #12]
   12160:	orr.w	r0, r0, #16
   12164:	str	r0, [sp, #12]
   12166:	b.w	11934 <_svfprintf_r+0xb4>
   1216a:	cmp	r2, #0
   1216c:	bne.w	12f48 <_svfprintf_r+0x16c8>
   12170:	ldr	r3, [sp, #12]
   12172:	lsls	r3, r3, #26
   12174:	bpl.w	12826 <_svfprintf_r+0xfa6>
   12178:	ldr	r2, [sp, #40]	; 0x28
   1217a:	ldr	r1, [sp, #28]
   1217c:	ldr	r3, [r2, #0]
   1217e:	asrs	r5, r1, #31
   12180:	mov	r0, r1
   12182:	adds	r2, #4
   12184:	mov	r1, r5
   12186:	str	r2, [sp, #40]	; 0x28
   12188:	strd	r0, r1, [r3]
   1218c:	b.w	118ce <_svfprintf_r+0x4e>
   12190:	ldr	r0, [pc, #252]	; (12290 <_svfprintf_r+0xa10>)
   12192:	str	r2, [sp, #52]	; 0x34
   12194:	cmp.w	fp, #0
   12198:	bne.w	12484 <_svfprintf_r+0xc04>
   1219c:	mov	r7, fp
   1219e:	mov.w	fp, #0
   121a2:	str.w	fp, [sp, #36]	; 0x24
   121a6:	add	r6, sp, #192	; 0xc0
   121a8:	b.n	11c16 <_svfprintf_r+0x396>
   121aa:	str	r3, [sp, #52]	; 0x34
   121ac:	cmp	r2, #0
   121ae:	bne.w	12f40 <_svfprintf_r+0x16c0>
   121b2:	ldr	r2, [sp, #52]	; 0x34
   121b4:	cmp	r2, #0
   121b6:	beq.w	11a66 <_svfprintf_r+0x1e6>
   121ba:	movs	r3, #0
   121bc:	movs	r1, #1
   121be:	mov	r7, r3
   121c0:	str	r1, [sp, #16]
   121c2:	strb.w	r2, [sp, #152]	; 0x98
   121c6:	strb.w	r3, [sp, #111]	; 0x6f
   121ca:	mov	fp, r3
   121cc:	str	r3, [sp, #60]	; 0x3c
   121ce:	str	r1, [sp, #36]	; 0x24
   121d0:	add	r6, sp, #152	; 0x98
   121d2:	b.n	11c2c <_svfprintf_r+0x3ac>
   121d4:	cmp.w	fp, #0
   121d8:	beq.w	12df8 <_svfprintf_r+0x1578>
   121dc:	movs	r7, #0
   121de:	movs	r4, #0
   121e0:	movs	r5, #0
   121e2:	b.n	11acc <_svfprintf_r+0x24c>
   121e4:	ldr	r0, [pc, #168]	; (12290 <_svfprintf_r+0xa10>)
   121e6:	str	r3, [sp, #12]
   121e8:	str	r2, [sp, #52]	; 0x34
   121ea:	orrs.w	r3, r4, r5
   121ee:	str	r7, [sp, #40]	; 0x28
   121f0:	mov.w	r7, #0
   121f4:	bne.w	12022 <_svfprintf_r+0x7a2>
   121f8:	movs	r4, #0
   121fa:	movs	r5, #0
   121fc:	b.n	12022 <_svfprintf_r+0x7a2>
   121fe:	ldr	r4, [sp, #148]	; 0x94
   12200:	b.n	11ccc <_svfprintf_r+0x44c>
   12202:	ldr	r3, [sp, #52]	; 0x34
   12204:	cmp	r3, #101	; 0x65
   12206:	ble.w	1235e <_svfprintf_r+0xade>
   1220a:	movs	r2, #0
   1220c:	movs	r3, #0
   1220e:	ldrd	r0, r1, [sp, #64]	; 0x40
   12212:	bl	1038c <__aeabi_dcmpeq>
   12216:	cmp	r0, #0
   12218:	beq.w	12488 <_svfprintf_r+0xc08>
   1221c:	ldr	r3, [sp, #144]	; 0x90
   1221e:	ldr	r2, [pc, #116]	; (12294 <_svfprintf_r+0xa14>)
   12220:	str.w	r2, [r9]
   12224:	adds	r3, #1
   12226:	adds	r4, #1
   12228:	movs	r2, #1
   1222a:	cmp	r3, #7
   1222c:	str	r4, [sp, #148]	; 0x94
   1222e:	str	r3, [sp, #144]	; 0x90
   12230:	str.w	r2, [r9, #4]
   12234:	bgt.w	12a14 <_svfprintf_r+0x1194>
   12238:	add.w	r9, r9, #8
   1223c:	ldr	r3, [sp, #116]	; 0x74
   1223e:	ldr	r2, [sp, #56]	; 0x38
   12240:	cmp	r3, r2
   12242:	blt.n	1224c <_svfprintf_r+0x9cc>
   12244:	ldr	r3, [sp, #12]
   12246:	lsls	r3, r3, #31
   12248:	bpl.w	11dac <_svfprintf_r+0x52c>
   1224c:	ldr	r3, [sp, #144]	; 0x90
   1224e:	ldr	r1, [sp, #72]	; 0x48
   12250:	ldr	r2, [sp, #76]	; 0x4c
   12252:	str.w	r2, [r9]
   12256:	adds	r3, #1
   12258:	add	r4, r1
   1225a:	cmp	r3, #7
   1225c:	str	r4, [sp, #148]	; 0x94
   1225e:	str.w	r1, [r9, #4]
   12262:	str	r3, [sp, #144]	; 0x90
   12264:	bgt.w	12af6 <_svfprintf_r+0x1276>
   12268:	add.w	r9, r9, #8
   1226c:	ldr	r3, [sp, #56]	; 0x38
   1226e:	subs	r5, r3, #1
   12270:	cmp	r5, #0
   12272:	ble.w	11dac <_svfprintf_r+0x52c>
   12276:	ldr	r2, [pc, #32]	; (12298 <_svfprintf_r+0xa18>)
   12278:	ldr	r3, [sp, #144]	; 0x90
   1227a:	str	r2, [sp, #44]	; 0x2c
   1227c:	cmp	r5, #16
   1227e:	ble.w	12654 <_svfprintf_r+0xdd4>
   12282:	movs	r6, #16
   12284:	ldr	r7, [sp, #24]
   12286:	ldr.w	fp, [sp, #20]
   1228a:	b.n	122a8 <_svfprintf_r+0xa28>
   1228c:	.word	0x00015580
   12290:	.word	0x00015594
   12294:	.word	0x00015308
   12298:	.word	0x00015560
   1229c:	add.w	r9, r9, #8
   122a0:	subs	r5, #16
   122a2:	cmp	r5, #16
   122a4:	ble.w	12654 <_svfprintf_r+0xdd4>
   122a8:	adds	r3, #1
   122aa:	adds	r4, #16
   122ac:	cmp	r3, #7
   122ae:	str	r4, [sp, #148]	; 0x94
   122b0:	str	r3, [sp, #144]	; 0x90
   122b2:	str.w	sl, [r9]
   122b6:	str.w	r6, [r9, #4]
   122ba:	ble.n	1229c <_svfprintf_r+0xa1c>
   122bc:	add	r2, sp, #140	; 0x8c
   122be:	mov	r1, fp
   122c0:	mov	r0, r7
   122c2:	bl	14a08 <__ssprint_r>
   122c6:	cmp	r0, #0
   122c8:	bne.w	11a74 <_svfprintf_r+0x1f4>
   122cc:	ldr	r4, [sp, #148]	; 0x94
   122ce:	ldr	r3, [sp, #144]	; 0x90
   122d0:	add.w	r9, sp, #192	; 0xc0
   122d4:	b.n	122a0 <_svfprintf_r+0xa20>
   122d6:	ldr	r3, [sp, #32]
   122d8:	ldr	r2, [sp, #16]
   122da:	subs	r7, r3, r2
   122dc:	cmp	r7, #0
   122de:	ble.w	11d14 <_svfprintf_r+0x494>
   122e2:	ldr	r2, [pc, #752]	; (125d4 <_svfprintf_r+0xd54>)
   122e4:	ldr	r3, [sp, #144]	; 0x90
   122e6:	str	r2, [sp, #44]	; 0x2c
   122e8:	cmp	r7, #16
   122ea:	ble.n	12344 <_svfprintf_r+0xac4>
   122ec:	mov	r2, r9
   122ee:	mov	r1, r4
   122f0:	mov	r9, r7
   122f2:	movs	r5, #16
   122f4:	mov	r7, r6
   122f6:	ldr	r4, [sp, #24]
   122f8:	ldr	r6, [sp, #20]
   122fa:	b.n	1230a <_svfprintf_r+0xa8a>
   122fc:	sub.w	r9, r9, #16
   12300:	cmp.w	r9, #16
   12304:	add.w	r2, r2, #8
   12308:	ble.n	1233c <_svfprintf_r+0xabc>
   1230a:	adds	r3, #1
   1230c:	adds	r1, #16
   1230e:	cmp	r3, #7
   12310:	str	r1, [sp, #148]	; 0x94
   12312:	str	r3, [sp, #144]	; 0x90
   12314:	str.w	sl, [r2]
   12318:	str	r5, [r2, #4]
   1231a:	ble.n	122fc <_svfprintf_r+0xa7c>
   1231c:	add	r2, sp, #140	; 0x8c
   1231e:	mov	r1, r6
   12320:	mov	r0, r4
   12322:	bl	14a08 <__ssprint_r>
   12326:	cmp	r0, #0
   12328:	bne.w	11a74 <_svfprintf_r+0x1f4>
   1232c:	sub.w	r9, r9, #16
   12330:	cmp.w	r9, #16
   12334:	ldr	r1, [sp, #148]	; 0x94
   12336:	ldr	r3, [sp, #144]	; 0x90
   12338:	add	r2, sp, #192	; 0xc0
   1233a:	bgt.n	1230a <_svfprintf_r+0xa8a>
   1233c:	mov	r6, r7
   1233e:	mov	r4, r1
   12340:	mov	r7, r9
   12342:	mov	r9, r2
   12344:	adds	r3, #1
   12346:	ldr	r2, [sp, #44]	; 0x2c
   12348:	str	r3, [sp, #144]	; 0x90
   1234a:	add	r4, r7
   1234c:	cmp	r3, #7
   1234e:	str	r4, [sp, #148]	; 0x94
   12350:	stmia.w	r9, {r2, r7}
   12354:	bgt.w	127d2 <_svfprintf_r+0xf52>
   12358:	add.w	r9, r9, #8
   1235c:	b.n	11d14 <_svfprintf_r+0x494>
   1235e:	ldr	r3, [sp, #56]	; 0x38
   12360:	ldr	r5, [sp, #144]	; 0x90
   12362:	cmp	r3, #1
   12364:	ble.w	1277c <_svfprintf_r+0xefc>
   12368:	adds	r5, #1
   1236a:	adds	r4, #1
   1236c:	movs	r3, #1
   1236e:	cmp	r5, #7
   12370:	str	r4, [sp, #148]	; 0x94
   12372:	str	r5, [sp, #144]	; 0x90
   12374:	str.w	r6, [r9]
   12378:	str.w	r3, [r9, #4]
   1237c:	bgt.w	1279e <_svfprintf_r+0xf1e>
   12380:	add.w	r9, r9, #8
   12384:	ldr	r2, [sp, #72]	; 0x48
   12386:	ldr	r3, [sp, #76]	; 0x4c
   12388:	str.w	r3, [r9]
   1238c:	adds	r5, #1
   1238e:	add	r4, r2
   12390:	cmp	r5, #7
   12392:	str	r4, [sp, #148]	; 0x94
   12394:	str	r5, [sp, #144]	; 0x90
   12396:	str.w	r2, [r9, #4]
   1239a:	bgt.w	127b8 <_svfprintf_r+0xf38>
   1239e:	add.w	r9, r9, #8
   123a2:	movs	r3, #0
   123a4:	movs	r2, #0
   123a6:	ldrd	r0, r1, [sp, #64]	; 0x40
   123aa:	bl	1038c <__aeabi_dcmpeq>
   123ae:	ldr	r3, [sp, #56]	; 0x38
   123b0:	cmp	r0, #0
   123b2:	bne.w	1253c <_svfprintf_r+0xcbc>
   123b6:	subs	r3, #1
   123b8:	adds	r5, #1
   123ba:	adds	r6, #1
   123bc:	add	r4, r3
   123be:	cmp	r5, #7
   123c0:	str	r5, [sp, #144]	; 0x90
   123c2:	str	r4, [sp, #148]	; 0x94
   123c4:	str.w	r6, [r9]
   123c8:	str.w	r3, [r9, #4]
   123cc:	bgt.w	125ba <_svfprintf_r+0xd3a>
   123d0:	add.w	r9, r9, #8
   123d4:	ldr	r2, [sp, #84]	; 0x54
   123d6:	str.w	r2, [r9, #4]
   123da:	adds	r5, #1
   123dc:	add	r4, r2
   123de:	add	r3, sp, #124	; 0x7c
   123e0:	cmp	r5, #7
   123e2:	str	r4, [sp, #148]	; 0x94
   123e4:	str	r5, [sp, #144]	; 0x90
   123e6:	str.w	r3, [r9]
   123ea:	ble.w	11da8 <_svfprintf_r+0x528>
   123ee:	add	r2, sp, #140	; 0x8c
   123f0:	ldr	r1, [sp, #20]
   123f2:	ldr	r0, [sp, #24]
   123f4:	bl	14a08 <__ssprint_r>
   123f8:	cmp	r0, #0
   123fa:	bne.w	11a74 <_svfprintf_r+0x1f4>
   123fe:	ldr	r4, [sp, #148]	; 0x94
   12400:	add.w	r9, sp, #192	; 0xc0
   12404:	b.n	11dac <_svfprintf_r+0x52c>
   12406:	add	r2, sp, #140	; 0x8c
   12408:	ldr	r1, [sp, #20]
   1240a:	ldr	r0, [sp, #24]
   1240c:	bl	14a08 <__ssprint_r>
   12410:	cmp	r0, #0
   12412:	beq.w	11e48 <_svfprintf_r+0x5c8>
   12416:	b.w	11a74 <_svfprintf_r+0x1f4>
   1241a:	add	r2, sp, #140	; 0x8c
   1241c:	ldr	r1, [sp, #20]
   1241e:	ldr	r0, [sp, #24]
   12420:	bl	14a08 <__ssprint_r>
   12424:	cmp	r0, #0
   12426:	bne.w	11a74 <_svfprintf_r+0x1f4>
   1242a:	ldr	r4, [sp, #148]	; 0x94
   1242c:	add.w	r9, sp, #192	; 0xc0
   12430:	b.n	11d86 <_svfprintf_r+0x506>
   12432:	add	r2, sp, #140	; 0x8c
   12434:	ldr	r1, [sp, #20]
   12436:	ldr	r0, [sp, #24]
   12438:	bl	14a08 <__ssprint_r>
   1243c:	cmp	r0, #0
   1243e:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12442:	ldr	r4, [sp, #148]	; 0x94
   12444:	add.w	r9, sp, #192	; 0xc0
   12448:	b.n	11cec <_svfprintf_r+0x46c>
   1244a:	add	r2, sp, #140	; 0x8c
   1244c:	ldr	r1, [sp, #20]
   1244e:	ldr	r0, [sp, #24]
   12450:	bl	14a08 <__ssprint_r>
   12454:	cmp	r0, #0
   12456:	bne.w	11a74 <_svfprintf_r+0x1f4>
   1245a:	ldr	r4, [sp, #148]	; 0x94
   1245c:	add.w	r9, sp, #192	; 0xc0
   12460:	b.n	11d0c <_svfprintf_r+0x48c>
   12462:	cmp.w	fp, #0
   12466:	strb.w	r7, [sp, #111]	; 0x6f
   1246a:	blt.w	12a2c <_svfprintf_r+0x11ac>
   1246e:	bic.w	r3, r2, #128	; 0x80
   12472:	str	r3, [sp, #12]
   12474:	orrs.w	r3, r4, r5
   12478:	bne.w	12022 <_svfprintf_r+0x7a2>
   1247c:	cmp.w	fp, #0
   12480:	beq.w	1219c <_svfprintf_r+0x91c>
   12484:	movs	r7, #0
   12486:	b.n	121f8 <_svfprintf_r+0x978>
   12488:	ldr	r5, [sp, #116]	; 0x74
   1248a:	cmp	r5, #0
   1248c:	ble.w	12a32 <_svfprintf_r+0x11b2>
   12490:	ldr	r3, [sp, #60]	; 0x3c
   12492:	ldr	r2, [sp, #56]	; 0x38
   12494:	cmp	r3, r2
   12496:	it	ge
   12498:	movge	r3, r2
   1249a:	cmp	r3, #0
   1249c:	mov	r5, r3
   1249e:	ble.n	124bc <_svfprintf_r+0xc3c>
   124a0:	ldr	r3, [sp, #144]	; 0x90
   124a2:	str.w	r6, [r9]
   124a6:	adds	r3, #1
   124a8:	add	r4, r5
   124aa:	cmp	r3, #7
   124ac:	str	r4, [sp, #148]	; 0x94
   124ae:	str.w	r5, [r9, #4]
   124b2:	str	r3, [sp, #144]	; 0x90
   124b4:	bgt.w	12c0a <_svfprintf_r+0x138a>
   124b8:	add.w	r9, r9, #8
   124bc:	ldr	r3, [sp, #60]	; 0x3c
   124be:	cmp	r5, #0
   124c0:	it	ge
   124c2:	subge	r3, r3, r5
   124c4:	cmp	r3, #0
   124c6:	mov	r5, r3
   124c8:	ble.w	126bc <_svfprintf_r+0xe3c>
   124cc:	ldr	r2, [pc, #260]	; (125d4 <_svfprintf_r+0xd54>)
   124ce:	ldr	r3, [sp, #144]	; 0x90
   124d0:	str	r2, [sp, #44]	; 0x2c
   124d2:	cmp	r5, #16
   124d4:	ble.w	129de <_svfprintf_r+0x115e>
   124d8:	mov	r2, r4
   124da:	movs	r7, #16
   124dc:	ldr.w	fp, [sp, #24]
   124e0:	ldr	r4, [sp, #20]
   124e2:	b.n	124f0 <_svfprintf_r+0xc70>
   124e4:	add.w	r9, r9, #8
   124e8:	subs	r5, #16
   124ea:	cmp	r5, #16
   124ec:	ble.w	129dc <_svfprintf_r+0x115c>
   124f0:	adds	r3, #1
   124f2:	adds	r2, #16
   124f4:	cmp	r3, #7
   124f6:	str	r2, [sp, #148]	; 0x94
   124f8:	str	r3, [sp, #144]	; 0x90
   124fa:	str.w	sl, [r9]
   124fe:	str.w	r7, [r9, #4]
   12502:	ble.n	124e4 <_svfprintf_r+0xc64>
   12504:	add	r2, sp, #140	; 0x8c
   12506:	mov	r1, r4
   12508:	mov	r0, fp
   1250a:	bl	14a08 <__ssprint_r>
   1250e:	cmp	r0, #0
   12510:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12514:	ldr	r2, [sp, #148]	; 0x94
   12516:	ldr	r3, [sp, #144]	; 0x90
   12518:	add.w	r9, sp, #192	; 0xc0
   1251c:	b.n	124e8 <_svfprintf_r+0xc68>
   1251e:	add	r2, sp, #140	; 0x8c
   12520:	ldr	r1, [sp, #20]
   12522:	ldr	r0, [sp, #24]
   12524:	bl	14a08 <__ssprint_r>
   12528:	cmp	r0, #0
   1252a:	bne.w	11a74 <_svfprintf_r+0x1f4>
   1252e:	ldrb.w	r7, [sp, #111]	; 0x6f
   12532:	ldr	r4, [sp, #148]	; 0x94
   12534:	add.w	r9, sp, #192	; 0xc0
   12538:	b.w	11ccc <_svfprintf_r+0x44c>
   1253c:	subs	r6, r3, #1
   1253e:	cmp	r6, #0
   12540:	ble.w	123d4 <_svfprintf_r+0xb54>
   12544:	ldr	r3, [pc, #140]	; (125d4 <_svfprintf_r+0xd54>)
   12546:	str	r3, [sp, #44]	; 0x2c
   12548:	cmp	r6, #16
   1254a:	ble.n	125a6 <_svfprintf_r+0xd26>
   1254c:	str.w	r8, [sp, #36]	; 0x24
   12550:	movs	r7, #16
   12552:	mov	r8, r6
   12554:	ldr.w	fp, [sp, #24]
   12558:	ldr	r6, [sp, #20]
   1255a:	b.n	1256a <_svfprintf_r+0xcea>
   1255c:	sub.w	r8, r8, #16
   12560:	cmp.w	r8, #16
   12564:	add.w	r9, r9, #8
   12568:	ble.n	125a0 <_svfprintf_r+0xd20>
   1256a:	adds	r5, #1
   1256c:	adds	r4, #16
   1256e:	cmp	r5, #7
   12570:	str	r4, [sp, #148]	; 0x94
   12572:	str	r5, [sp, #144]	; 0x90
   12574:	str.w	sl, [r9]
   12578:	str.w	r7, [r9, #4]
   1257c:	ble.n	1255c <_svfprintf_r+0xcdc>
   1257e:	add	r2, sp, #140	; 0x8c
   12580:	mov	r1, r6
   12582:	mov	r0, fp
   12584:	bl	14a08 <__ssprint_r>
   12588:	cmp	r0, #0
   1258a:	bne.w	11a74 <_svfprintf_r+0x1f4>
   1258e:	sub.w	r8, r8, #16
   12592:	cmp.w	r8, #16
   12596:	ldr	r4, [sp, #148]	; 0x94
   12598:	ldr	r5, [sp, #144]	; 0x90
   1259a:	add.w	r9, sp, #192	; 0xc0
   1259e:	bgt.n	1256a <_svfprintf_r+0xcea>
   125a0:	mov	r6, r8
   125a2:	ldr.w	r8, [sp, #36]	; 0x24
   125a6:	ldr	r3, [sp, #44]	; 0x2c
   125a8:	adds	r5, #1
   125aa:	add	r4, r6
   125ac:	cmp	r5, #7
   125ae:	str	r4, [sp, #148]	; 0x94
   125b0:	str	r5, [sp, #144]	; 0x90
   125b2:	stmia.w	r9, {r3, r6}
   125b6:	ble.w	123d0 <_svfprintf_r+0xb50>
   125ba:	add	r2, sp, #140	; 0x8c
   125bc:	ldr	r1, [sp, #20]
   125be:	ldr	r0, [sp, #24]
   125c0:	bl	14a08 <__ssprint_r>
   125c4:	cmp	r0, #0
   125c6:	bne.w	11a74 <_svfprintf_r+0x1f4>
   125ca:	ldr	r4, [sp, #148]	; 0x94
   125cc:	ldr	r5, [sp, #144]	; 0x90
   125ce:	add.w	r9, sp, #192	; 0xc0
   125d2:	b.n	123d4 <_svfprintf_r+0xb54>
   125d4:	.word	0x00015560
   125d8:	ldr	r1, [sp, #12]
   125da:	ands.w	r2, r1, #16
   125de:	beq.w	12988 <_svfprintf_r+0x1108>
   125e2:	ldr	r0, [sp, #40]	; 0x28
   125e4:	strb.w	r3, [sp, #111]	; 0x6f
   125e8:	cmp.w	fp, #0
   125ec:	ldr	r4, [r0, #0]
   125ee:	add.w	r7, r0, #4
   125f2:	mov.w	r5, #0
   125f6:	blt.n	12646 <_svfprintf_r+0xdc6>
   125f8:	mov	r2, r1
   125fa:	bic.w	r2, r2, #128	; 0x80
   125fe:	str	r2, [sp, #12]
   12600:	orrs.w	r2, r4, r5
   12604:	str	r7, [sp, #40]	; 0x28
   12606:	mov	r7, r3
   12608:	bne.w	11bdc <_svfprintf_r+0x35c>
   1260c:	b.n	11fac <_svfprintf_r+0x72c>
   1260e:	ldr	r3, [sp, #12]
   12610:	lsls	r0, r3, #27
   12612:	bmi.n	1266a <_svfprintf_r+0xdea>
   12614:	ldr	r3, [sp, #12]
   12616:	lsls	r1, r3, #25
   12618:	bpl.n	1266a <_svfprintf_r+0xdea>
   1261a:	ldr	r1, [sp, #40]	; 0x28
   1261c:	ldrsh.w	r4, [r1]
   12620:	adds	r1, #4
   12622:	asrs	r5, r4, #31
   12624:	mov	r2, r4
   12626:	mov	r3, r5
   12628:	str	r1, [sp, #40]	; 0x28
   1262a:	b.w	11bb6 <_svfprintf_r+0x336>
   1262e:	ldr	r1, [sp, #40]	; 0x28
   12630:	strb.w	r3, [sp, #111]	; 0x6f
   12634:	cmp.w	fp, #0
   12638:	ldr	r4, [r1, #0]
   1263a:	add.w	r7, r1, #4
   1263e:	mov.w	r5, #0
   12642:	bge.w	12ade <_svfprintf_r+0x125e>
   12646:	str	r7, [sp, #40]	; 0x28
   12648:	mov	r7, r3
   1264a:	orrs.w	r3, r4, r5
   1264e:	bne.w	11bdc <_svfprintf_r+0x35c>
   12652:	b.n	11fb6 <_svfprintf_r+0x736>
   12654:	adds	r3, #1
   12656:	ldr	r2, [sp, #44]	; 0x2c
   12658:	str	r3, [sp, #144]	; 0x90
   1265a:	add	r4, r5
   1265c:	cmp	r3, #7
   1265e:	str	r4, [sp, #148]	; 0x94
   12660:	stmia.w	r9, {r2, r5}
   12664:	ble.w	11da8 <_svfprintf_r+0x528>
   12668:	b.n	123ee <_svfprintf_r+0xb6e>
   1266a:	ldr	r2, [sp, #40]	; 0x28
   1266c:	ldr	r4, [r2, #0]
   1266e:	mov	r3, r2
   12670:	adds	r3, #4
   12672:	asrs	r5, r4, #31
   12674:	mov	r2, r4
   12676:	str	r3, [sp, #40]	; 0x28
   12678:	cmp	r2, #0
   1267a:	mov	r3, r5
   1267c:	sbcs.w	r3, r3, #0
   12680:	bge.w	11bc0 <_svfprintf_r+0x340>
   12684:	negs	r4, r4
   12686:	mov.w	r7, #45	; 0x2d
   1268a:	sbc.w	r5, r5, r5, lsl #1
   1268e:	cmp.w	fp, #0
   12692:	strb.w	r7, [sp, #111]	; 0x6f
   12696:	blt.w	11bdc <_svfprintf_r+0x35c>
   1269a:	ldr	r3, [sp, #12]
   1269c:	bic.w	r3, r3, #128	; 0x80
   126a0:	str	r3, [sp, #12]
   126a2:	b.w	11bdc <_svfprintf_r+0x35c>
   126a6:	add	r2, sp, #140	; 0x8c
   126a8:	ldr	r1, [sp, #20]
   126aa:	ldr	r0, [sp, #24]
   126ac:	bl	14a08 <__ssprint_r>
   126b0:	cmp	r0, #0
   126b2:	bne.w	11a74 <_svfprintf_r+0x1f4>
   126b6:	ldr	r4, [sp, #148]	; 0x94
   126b8:	add.w	r9, sp, #192	; 0xc0
   126bc:	ldr	r2, [sp, #60]	; 0x3c
   126be:	ldr	r3, [sp, #116]	; 0x74
   126c0:	add	r2, r6
   126c2:	mov	r7, r2
   126c4:	ldr	r2, [sp, #56]	; 0x38
   126c6:	cmp	r3, r2
   126c8:	blt.n	1275a <_svfprintf_r+0xeda>
   126ca:	ldr	r2, [sp, #12]
   126cc:	lsls	r5, r2, #31
   126ce:	bmi.n	1275a <_svfprintf_r+0xeda>
   126d0:	ldr	r1, [sp, #56]	; 0x38
   126d2:	add	r6, r1
   126d4:	subs	r5, r6, r7
   126d6:	subs	r3, r1, r3
   126d8:	cmp	r5, r3
   126da:	it	ge
   126dc:	movge	r5, r3
   126de:	cmp	r5, #0
   126e0:	mov	r6, r5
   126e2:	ble.n	12700 <_svfprintf_r+0xe80>
   126e4:	ldr	r2, [sp, #144]	; 0x90
   126e6:	str.w	r7, [r9]
   126ea:	adds	r2, #1
   126ec:	add	r4, r5
   126ee:	cmp	r2, #7
   126f0:	str	r4, [sp, #148]	; 0x94
   126f2:	str.w	r5, [r9, #4]
   126f6:	str	r2, [sp, #144]	; 0x90
   126f8:	bgt.w	12cf8 <_svfprintf_r+0x1478>
   126fc:	add.w	r9, r9, #8
   12700:	cmp	r6, #0
   12702:	ite	ge
   12704:	subge	r5, r3, r6
   12706:	movlt	r5, r3
   12708:	cmp	r5, #0
   1270a:	ble.w	11dac <_svfprintf_r+0x52c>
   1270e:	ldr	r2, [pc, #744]	; (129f8 <_svfprintf_r+0x1178>)
   12710:	ldr	r3, [sp, #144]	; 0x90
   12712:	str	r2, [sp, #44]	; 0x2c
   12714:	cmp	r5, #16
   12716:	ble.n	12654 <_svfprintf_r+0xdd4>
   12718:	movs	r6, #16
   1271a:	ldr	r7, [sp, #24]
   1271c:	ldr.w	fp, [sp, #20]
   12720:	b.n	1272c <_svfprintf_r+0xeac>
   12722:	add.w	r9, r9, #8
   12726:	subs	r5, #16
   12728:	cmp	r5, #16
   1272a:	ble.n	12654 <_svfprintf_r+0xdd4>
   1272c:	adds	r3, #1
   1272e:	adds	r4, #16
   12730:	cmp	r3, #7
   12732:	str	r4, [sp, #148]	; 0x94
   12734:	str	r3, [sp, #144]	; 0x90
   12736:	str.w	sl, [r9]
   1273a:	str.w	r6, [r9, #4]
   1273e:	ble.n	12722 <_svfprintf_r+0xea2>
   12740:	add	r2, sp, #140	; 0x8c
   12742:	mov	r1, fp
   12744:	mov	r0, r7
   12746:	bl	14a08 <__ssprint_r>
   1274a:	cmp	r0, #0
   1274c:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12750:	ldr	r4, [sp, #148]	; 0x94
   12752:	ldr	r3, [sp, #144]	; 0x90
   12754:	add.w	r9, sp, #192	; 0xc0
   12758:	b.n	12726 <_svfprintf_r+0xea6>
   1275a:	ldr	r2, [sp, #144]	; 0x90
   1275c:	ldr	r0, [sp, #72]	; 0x48
   1275e:	ldr	r1, [sp, #76]	; 0x4c
   12760:	str.w	r1, [r9]
   12764:	adds	r2, #1
   12766:	add	r4, r0
   12768:	cmp	r2, #7
   1276a:	str	r4, [sp, #148]	; 0x94
   1276c:	str.w	r0, [r9, #4]
   12770:	str	r2, [sp, #144]	; 0x90
   12772:	bgt.w	12cde <_svfprintf_r+0x145e>
   12776:	add.w	r9, r9, #8
   1277a:	b.n	126d0 <_svfprintf_r+0xe50>
   1277c:	ldr	r3, [sp, #12]
   1277e:	lsls	r0, r3, #31
   12780:	bmi.w	12368 <_svfprintf_r+0xae8>
   12784:	adds	r5, #1
   12786:	adds	r4, #1
   12788:	movs	r3, #1
   1278a:	cmp	r5, #7
   1278c:	str	r4, [sp, #148]	; 0x94
   1278e:	str	r5, [sp, #144]	; 0x90
   12790:	str.w	r6, [r9]
   12794:	str.w	r3, [r9, #4]
   12798:	ble.w	123d0 <_svfprintf_r+0xb50>
   1279c:	b.n	125ba <_svfprintf_r+0xd3a>
   1279e:	add	r2, sp, #140	; 0x8c
   127a0:	ldr	r1, [sp, #20]
   127a2:	ldr	r0, [sp, #24]
   127a4:	bl	14a08 <__ssprint_r>
   127a8:	cmp	r0, #0
   127aa:	bne.w	11a74 <_svfprintf_r+0x1f4>
   127ae:	ldr	r4, [sp, #148]	; 0x94
   127b0:	ldr	r5, [sp, #144]	; 0x90
   127b2:	add.w	r9, sp, #192	; 0xc0
   127b6:	b.n	12384 <_svfprintf_r+0xb04>
   127b8:	add	r2, sp, #140	; 0x8c
   127ba:	ldr	r1, [sp, #20]
   127bc:	ldr	r0, [sp, #24]
   127be:	bl	14a08 <__ssprint_r>
   127c2:	cmp	r0, #0
   127c4:	bne.w	11a74 <_svfprintf_r+0x1f4>
   127c8:	ldr	r4, [sp, #148]	; 0x94
   127ca:	ldr	r5, [sp, #144]	; 0x90
   127cc:	add.w	r9, sp, #192	; 0xc0
   127d0:	b.n	123a2 <_svfprintf_r+0xb22>
   127d2:	add	r2, sp, #140	; 0x8c
   127d4:	ldr	r1, [sp, #20]
   127d6:	ldr	r0, [sp, #24]
   127d8:	bl	14a08 <__ssprint_r>
   127dc:	cmp	r0, #0
   127de:	bne.w	11a74 <_svfprintf_r+0x1f4>
   127e2:	ldr	r4, [sp, #148]	; 0x94
   127e4:	add.w	r9, sp, #192	; 0xc0
   127e8:	b.w	11d14 <_svfprintf_r+0x494>
   127ec:	ldr	r1, [sp, #12]
   127ee:	ands.w	r3, r1, #64	; 0x40
   127f2:	beq.w	12968 <_svfprintf_r+0x10e8>
   127f6:	ldr	r0, [sp, #40]	; 0x28
   127f8:	strb.w	r2, [sp, #111]	; 0x6f
   127fc:	mov	r3, r0
   127fe:	cmp.w	fp, #0
   12802:	add.w	r3, r3, #4
   12806:	ldrh	r4, [r0, #0]
   12808:	mov.w	r5, #0
   1280c:	blt.w	12b90 <_svfprintf_r+0x1310>
   12810:	bic.w	r1, r1, #128	; 0x80
   12814:	str	r1, [sp, #12]
   12816:	orrs.w	r1, r4, r5
   1281a:	str	r3, [sp, #40]	; 0x28
   1281c:	beq.w	121d4 <_svfprintf_r+0x954>
   12820:	mov	r7, r2
   12822:	b.w	11acc <_svfprintf_r+0x24c>
   12826:	ldr	r3, [sp, #12]
   12828:	lsls	r7, r3, #27
   1282a:	bmi.n	12844 <_svfprintf_r+0xfc4>
   1282c:	ldr	r3, [sp, #12]
   1282e:	lsls	r6, r3, #25
   12830:	bpl.n	12844 <_svfprintf_r+0xfc4>
   12832:	ldr	r2, [sp, #40]	; 0x28
   12834:	ldr	r3, [r2, #0]
   12836:	adds	r2, #4
   12838:	str	r2, [sp, #40]	; 0x28
   1283a:	ldrh.w	r2, [sp, #28]
   1283e:	strh	r2, [r3, #0]
   12840:	b.w	118ce <_svfprintf_r+0x4e>
   12844:	ldr	r2, [sp, #40]	; 0x28
   12846:	ldr	r3, [r2, #0]
   12848:	adds	r2, #4
   1284a:	str	r2, [sp, #40]	; 0x28
   1284c:	ldr	r2, [sp, #28]
   1284e:	str	r2, [r3, #0]
   12850:	b.w	118ce <_svfprintf_r+0x4e>
   12854:	ldrd	r0, r1, [sp, #64]	; 0x40
   12858:	mov	r2, r0
   1285a:	mov	r3, r1
   1285c:	bl	103f0 <__aeabi_dcmpun>
   12860:	cmp	r0, #0
   12862:	bne.w	12e60 <_svfprintf_r+0x15e0>
   12866:	ldr	r3, [sp, #52]	; 0x34
   12868:	cmp.w	fp, #4294967295
   1286c:	bic.w	r7, r3, #32
   12870:	beq.w	12d42 <_svfprintf_r+0x14c2>
   12874:	cmp	r7, #71	; 0x47
   12876:	beq.w	12b7e <_svfprintf_r+0x12fe>
   1287a:	ldr	r3, [sp, #68]	; 0x44
   1287c:	ldr	r2, [sp, #12]
   1287e:	cmp	r3, #0
   12880:	orr.w	r2, r2, #256	; 0x100
   12884:	str	r2, [sp, #44]	; 0x2c
   12886:	blt.w	12d7a <_svfprintf_r+0x14fa>
   1288a:	vldr	d7, [sp, #64]	; 0x40
   1288e:	vstr	d7, [sp, #96]	; 0x60
   12892:	movs	r3, #0
   12894:	str	r3, [sp, #16]
   12896:	ldr	r3, [sp, #52]	; 0x34
   12898:	cmp	r3, #102	; 0x66
   1289a:	beq.w	12d48 <_svfprintf_r+0x14c8>
   1289e:	cmp	r3, #70	; 0x46
   128a0:	beq.w	12b2e <_svfprintf_r+0x12ae>
   128a4:	cmp	r7, #69	; 0x45
   128a6:	ite	eq
   128a8:	addeq.w	r5, fp, #1
   128ac:	movne	r5, fp
   128ae:	add	r2, sp, #132	; 0x84
   128b0:	add	r3, sp, #120	; 0x78
   128b2:	str	r2, [sp, #4]
   128b4:	str	r3, [sp, #0]
   128b6:	mov	r2, r5
   128b8:	add	r3, sp, #116	; 0x74
   128ba:	movs	r1, #2
   128bc:	vldr	d0, [sp, #96]	; 0x60
   128c0:	ldr	r0, [sp, #24]
   128c2:	bl	13200 <_dtoa_r>
   128c6:	ldr	r3, [sp, #52]	; 0x34
   128c8:	cmp	r3, #103	; 0x67
   128ca:	mov	r6, r0
   128cc:	bne.w	12da6 <_svfprintf_r+0x1526>
   128d0:	ldr	r3, [sp, #12]
   128d2:	lsls	r2, r3, #31
   128d4:	bpl.w	12e4a <_svfprintf_r+0x15ca>
   128d8:	adds	r4, r6, r5
   128da:	movs	r2, #0
   128dc:	movs	r3, #0
   128de:	ldrd	r0, r1, [sp, #96]	; 0x60
   128e2:	bl	1038c <__aeabi_dcmpeq>
   128e6:	cmp	r0, #0
   128e8:	bne.w	12c06 <_svfprintf_r+0x1386>
   128ec:	ldr	r3, [sp, #132]	; 0x84
   128ee:	cmp	r4, r3
   128f0:	bls.n	12900 <_svfprintf_r+0x1080>
   128f2:	movs	r1, #48	; 0x30
   128f4:	adds	r2, r3, #1
   128f6:	str	r2, [sp, #132]	; 0x84
   128f8:	strb	r1, [r3, #0]
   128fa:	ldr	r3, [sp, #132]	; 0x84
   128fc:	cmp	r4, r3
   128fe:	bhi.n	128f4 <_svfprintf_r+0x1074>
   12900:	subs	r3, r3, r6
   12902:	cmp	r7, #71	; 0x47
   12904:	str	r3, [sp, #56]	; 0x38
   12906:	beq.w	12bf8 <_svfprintf_r+0x1378>
   1290a:	ldr	r3, [sp, #52]	; 0x34
   1290c:	cmp	r3, #101	; 0x65
   1290e:	ble.w	12dc4 <_svfprintf_r+0x1544>
   12912:	ldr	r3, [sp, #52]	; 0x34
   12914:	cmp	r3, #102	; 0x66
   12916:	ldr	r3, [sp, #116]	; 0x74
   12918:	str	r3, [sp, #60]	; 0x3c
   1291a:	beq.w	12dde <_svfprintf_r+0x155e>
   1291e:	ldr	r2, [sp, #60]	; 0x3c
   12920:	ldr	r1, [sp, #56]	; 0x38
   12922:	cmp	r2, r1
   12924:	blt.w	12d8c <_svfprintf_r+0x150c>
   12928:	ldr	r3, [sp, #12]
   1292a:	lsls	r1, r3, #31
   1292c:	bmi.w	12e4e <_svfprintf_r+0x15ce>
   12930:	bic.w	r3, r2, r2, asr #31
   12934:	str	r2, [sp, #36]	; 0x24
   12936:	movs	r2, #103	; 0x67
   12938:	str	r2, [sp, #52]	; 0x34
   1293a:	ldr	r2, [sp, #16]
   1293c:	cmp	r2, #0
   1293e:	bne.w	12ba0 <_svfprintf_r+0x1320>
   12942:	str	r3, [sp, #16]
   12944:	ldr	r3, [sp, #44]	; 0x2c
   12946:	str	r3, [sp, #12]
   12948:	mov	fp, r2
   1294a:	ldrb.w	r7, [sp, #111]	; 0x6f
   1294e:	b.w	11c24 <_svfprintf_r+0x3a4>
   12952:	bic.w	r7, r7, #7
   12956:	vldr	d7, [r7]
   1295a:	add.w	r3, r7, #8
   1295e:	vstr	d7, [sp, #64]	; 0x40
   12962:	str	r3, [sp, #40]	; 0x28
   12964:	b.w	11e7c <_svfprintf_r+0x5fc>
   12968:	ldr	r1, [sp, #40]	; 0x28
   1296a:	strb.w	r3, [sp, #111]	; 0x6f
   1296e:	cmp.w	fp, #0
   12972:	ldr	r4, [r1, #0]
   12974:	add.w	r7, r1, #4
   12978:	mov.w	r5, #0
   1297c:	bge.w	12ad8 <_svfprintf_r+0x1258>
   12980:	str	r7, [sp, #40]	; 0x28
   12982:	movs	r7, #0
   12984:	b.w	11acc <_svfprintf_r+0x24c>
   12988:	ldr	r1, [sp, #12]
   1298a:	ands.w	r3, r1, #64	; 0x40
   1298e:	beq.w	1262e <_svfprintf_r+0xdae>
   12992:	ldr	r0, [sp, #40]	; 0x28
   12994:	strb.w	r2, [sp, #111]	; 0x6f
   12998:	mov	r3, r0
   1299a:	cmp.w	fp, #0
   1299e:	add.w	r3, r3, #4
   129a2:	ldrh	r4, [r0, #0]
   129a4:	mov.w	r5, #0
   129a8:	blt.w	12b8a <_svfprintf_r+0x130a>
   129ac:	bic.w	r1, r1, #128	; 0x80
   129b0:	str	r1, [sp, #12]
   129b2:	orrs.w	r1, r4, r5
   129b6:	str	r3, [sp, #40]	; 0x28
   129b8:	mov	r7, r2
   129ba:	bne.w	11bdc <_svfprintf_r+0x35c>
   129be:	b.w	11fac <_svfprintf_r+0x72c>
   129c2:	ldr	r3, [sp, #12]
   129c4:	ldr	r2, [sp, #40]	; 0x28
   129c6:	tst.w	r3, #64	; 0x40
   129ca:	mov	r3, r2
   129cc:	beq.w	12b94 <_svfprintf_r+0x1314>
   129d0:	adds	r3, #4
   129d2:	ldrh	r4, [r2, #0]
   129d4:	str	r3, [sp, #40]	; 0x28
   129d6:	movs	r5, #0
   129d8:	b.w	11fe6 <_svfprintf_r+0x766>
   129dc:	mov	r4, r2
   129de:	adds	r3, #1
   129e0:	ldr	r2, [sp, #44]	; 0x2c
   129e2:	str	r3, [sp, #144]	; 0x90
   129e4:	add	r4, r5
   129e6:	cmp	r3, #7
   129e8:	str	r4, [sp, #148]	; 0x94
   129ea:	stmia.w	r9, {r2, r5}
   129ee:	bgt.w	126a6 <_svfprintf_r+0xe26>
   129f2:	add.w	r9, r9, #8
   129f6:	b.n	126bc <_svfprintf_r+0xe3c>
   129f8:	.word	0x00015560
   129fc:	movs	r7, #0
   129fe:	cmp	fp, r7
   12a00:	strb.w	r7, [sp, #111]	; 0x6f
   12a04:	blt.w	121f8 <_svfprintf_r+0x978>
   12a08:	ldr	r3, [sp, #12]
   12a0a:	bic.w	r3, r3, #128	; 0x80
   12a0e:	str	r3, [sp, #12]
   12a10:	b.w	12194 <_svfprintf_r+0x914>
   12a14:	add	r2, sp, #140	; 0x8c
   12a16:	ldr	r1, [sp, #20]
   12a18:	ldr	r0, [sp, #24]
   12a1a:	bl	14a08 <__ssprint_r>
   12a1e:	cmp	r0, #0
   12a20:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12a24:	ldr	r4, [sp, #148]	; 0x94
   12a26:	add.w	r9, sp, #192	; 0xc0
   12a2a:	b.n	1223c <_svfprintf_r+0x9bc>
   12a2c:	ldr	r7, [sp, #40]	; 0x28
   12a2e:	b.w	121ea <_svfprintf_r+0x96a>
   12a32:	ldr	r3, [sp, #144]	; 0x90
   12a34:	ldr	r2, [pc, #736]	; (12d18 <_svfprintf_r+0x1498>)
   12a36:	str.w	r2, [r9]
   12a3a:	adds	r3, #1
   12a3c:	adds	r4, #1
   12a3e:	movs	r2, #1
   12a40:	cmp	r3, #7
   12a42:	str	r4, [sp, #148]	; 0x94
   12a44:	str	r3, [sp, #144]	; 0x90
   12a46:	str.w	r2, [r9, #4]
   12a4a:	bgt.w	12b64 <_svfprintf_r+0x12e4>
   12a4e:	add.w	r9, r9, #8
   12a52:	cbnz	r5, 12a60 <_svfprintf_r+0x11e0>
   12a54:	ldr	r3, [sp, #56]	; 0x38
   12a56:	cbnz	r3, 12a60 <_svfprintf_r+0x11e0>
   12a58:	ldr	r3, [sp, #12]
   12a5a:	lsls	r7, r3, #31
   12a5c:	bpl.w	11dac <_svfprintf_r+0x52c>
   12a60:	ldr	r3, [sp, #144]	; 0x90
   12a62:	ldr	r1, [sp, #72]	; 0x48
   12a64:	ldr	r2, [sp, #76]	; 0x4c
   12a66:	str.w	r2, [r9]
   12a6a:	adds	r3, #1
   12a6c:	add	r4, r1
   12a6e:	cmp	r3, #7
   12a70:	str	r4, [sp, #148]	; 0x94
   12a72:	str.w	r1, [r9, #4]
   12a76:	str	r3, [sp, #144]	; 0x90
   12a78:	bgt.w	12e16 <_svfprintf_r+0x1596>
   12a7c:	add.w	r9, r9, #8
   12a80:	negs	r5, r5
   12a82:	cmp	r5, #0
   12a84:	ble.w	12bdc <_svfprintf_r+0x135c>
   12a88:	ldr	r2, [pc, #656]	; (12d1c <_svfprintf_r+0x149c>)
   12a8a:	str	r2, [sp, #44]	; 0x2c
   12a8c:	cmp	r5, #16
   12a8e:	ble.w	12c24 <_svfprintf_r+0x13a4>
   12a92:	mov	r2, r4
   12a94:	movs	r7, #16
   12a96:	ldr.w	fp, [sp, #24]
   12a9a:	ldr	r4, [sp, #20]
   12a9c:	b.n	12aaa <_svfprintf_r+0x122a>
   12a9e:	add.w	r9, r9, #8
   12aa2:	subs	r5, #16
   12aa4:	cmp	r5, #16
   12aa6:	ble.w	12c22 <_svfprintf_r+0x13a2>
   12aaa:	adds	r3, #1
   12aac:	adds	r2, #16
   12aae:	cmp	r3, #7
   12ab0:	str	r2, [sp, #148]	; 0x94
   12ab2:	str	r3, [sp, #144]	; 0x90
   12ab4:	str.w	sl, [r9]
   12ab8:	str.w	r7, [r9, #4]
   12abc:	ble.n	12a9e <_svfprintf_r+0x121e>
   12abe:	add	r2, sp, #140	; 0x8c
   12ac0:	mov	r1, r4
   12ac2:	mov	r0, fp
   12ac4:	bl	14a08 <__ssprint_r>
   12ac8:	cmp	r0, #0
   12aca:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12ace:	ldr	r2, [sp, #148]	; 0x94
   12ad0:	ldr	r3, [sp, #144]	; 0x90
   12ad2:	add.w	r9, sp, #192	; 0xc0
   12ad6:	b.n	12aa2 <_svfprintf_r+0x1222>
   12ad8:	ldr	r2, [sp, #12]
   12ada:	b.w	11f50 <_svfprintf_r+0x6d0>
   12ade:	ldr	r2, [sp, #12]
   12ae0:	b.n	125fa <_svfprintf_r+0xd7a>
   12ae2:	ldr	r3, [sp, #12]
   12ae4:	orr.w	r3, r3, #32
   12ae8:	str	r3, [sp, #12]
   12aea:	add.w	r8, r8, #1
   12aee:	ldrb.w	r3, [r8]
   12af2:	b.w	11934 <_svfprintf_r+0xb4>
   12af6:	add	r2, sp, #140	; 0x8c
   12af8:	ldr	r1, [sp, #20]
   12afa:	ldr	r0, [sp, #24]
   12afc:	bl	14a08 <__ssprint_r>
   12b00:	cmp	r0, #0
   12b02:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12b06:	ldr	r4, [sp, #148]	; 0x94
   12b08:	add.w	r9, sp, #192	; 0xc0
   12b0c:	b.w	1226c <_svfprintf_r+0x9ec>
   12b10:	movs	r1, #64	; 0x40
   12b12:	ldr	r0, [sp, #24]
   12b14:	bl	10930 <_malloc_r>
   12b18:	ldr	r2, [sp, #20]
   12b1a:	str	r0, [r2, #0]
   12b1c:	str	r0, [r2, #16]
   12b1e:	cmp	r0, #0
   12b20:	beq.w	12f0a <_svfprintf_r+0x168a>
   12b24:	ldr	r2, [sp, #20]
   12b26:	movs	r3, #64	; 0x40
   12b28:	str	r3, [r2, #20]
   12b2a:	b.w	118ae <_svfprintf_r+0x2e>
   12b2e:	add	r2, sp, #132	; 0x84
   12b30:	add	r3, sp, #120	; 0x78
   12b32:	str	r2, [sp, #4]
   12b34:	str	r3, [sp, #0]
   12b36:	mov	r2, fp
   12b38:	add	r3, sp, #116	; 0x74
   12b3a:	movs	r1, #3
   12b3c:	vldr	d0, [sp, #96]	; 0x60
   12b40:	ldr	r0, [sp, #24]
   12b42:	bl	13200 <_dtoa_r>
   12b46:	mov	r5, fp
   12b48:	mov	r6, r0
   12b4a:	ldr	r3, [sp, #52]	; 0x34
   12b4c:	cmp	r3, #70	; 0x46
   12b4e:	add.w	r4, r6, r5
   12b52:	bne.w	128da <_svfprintf_r+0x105a>
   12b56:	ldrb	r3, [r6, #0]
   12b58:	cmp	r3, #48	; 0x30
   12b5a:	beq.w	12e6c <_svfprintf_r+0x15ec>
   12b5e:	ldr	r5, [sp, #116]	; 0x74
   12b60:	add	r4, r5
   12b62:	b.n	128da <_svfprintf_r+0x105a>
   12b64:	add	r2, sp, #140	; 0x8c
   12b66:	ldr	r1, [sp, #20]
   12b68:	ldr	r0, [sp, #24]
   12b6a:	bl	14a08 <__ssprint_r>
   12b6e:	cmp	r0, #0
   12b70:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12b74:	ldr	r5, [sp, #116]	; 0x74
   12b76:	ldr	r4, [sp, #148]	; 0x94
   12b78:	add.w	r9, sp, #192	; 0xc0
   12b7c:	b.n	12a52 <_svfprintf_r+0x11d2>
   12b7e:	cmp.w	fp, #0
   12b82:	it	eq
   12b84:	moveq.w	fp, #1
   12b88:	b.n	1287a <_svfprintf_r+0xffa>
   12b8a:	str	r3, [sp, #40]	; 0x28
   12b8c:	mov	r7, r2
   12b8e:	b.n	1264a <_svfprintf_r+0xdca>
   12b90:	str	r3, [sp, #40]	; 0x28
   12b92:	b.n	12982 <_svfprintf_r+0x1102>
   12b94:	adds	r3, #4
   12b96:	ldr	r4, [r2, #0]
   12b98:	str	r3, [sp, #40]	; 0x28
   12b9a:	movs	r5, #0
   12b9c:	b.w	11fe6 <_svfprintf_r+0x766>
   12ba0:	movs	r7, #45	; 0x2d
   12ba2:	str	r3, [sp, #16]
   12ba4:	ldr	r3, [sp, #44]	; 0x2c
   12ba6:	str	r3, [sp, #12]
   12ba8:	strb.w	r7, [sp, #111]	; 0x6f
   12bac:	mov.w	fp, #0
   12bb0:	b.w	11c26 <_svfprintf_r+0x3a6>
   12bb4:	mov	r0, r6
   12bb6:	bl	11700 <strlen>
   12bba:	mov	fp, r4
   12bbc:	mov	r3, r0
   12bbe:	str	r0, [sp, #36]	; 0x24
   12bc0:	b.w	12108 <_svfprintf_r+0x888>
   12bc4:	add	r2, sp, #140	; 0x8c
   12bc6:	ldr	r1, [sp, #20]
   12bc8:	ldr	r0, [sp, #24]
   12bca:	bl	14a08 <__ssprint_r>
   12bce:	cmp	r0, #0
   12bd0:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12bd4:	ldr	r4, [sp, #148]	; 0x94
   12bd6:	ldr	r3, [sp, #144]	; 0x90
   12bd8:	add.w	r9, sp, #192	; 0xc0
   12bdc:	ldr	r1, [sp, #56]	; 0x38
   12bde:	str.w	r6, [r9]
   12be2:	adds	r3, #1
   12be4:	add	r4, r1
   12be6:	cmp	r3, #7
   12be8:	str	r4, [sp, #148]	; 0x94
   12bea:	str	r3, [sp, #144]	; 0x90
   12bec:	str.w	r1, [r9, #4]
   12bf0:	ble.w	11da8 <_svfprintf_r+0x528>
   12bf4:	b.w	123ee <_svfprintf_r+0xb6e>
   12bf8:	ldr	r3, [sp, #116]	; 0x74
   12bfa:	adds	r5, r3, #3
   12bfc:	blt.n	12c3c <_svfprintf_r+0x13bc>
   12bfe:	cmp	fp, r3
   12c00:	blt.n	12c3c <_svfprintf_r+0x13bc>
   12c02:	str	r3, [sp, #60]	; 0x3c
   12c04:	b.n	1291e <_svfprintf_r+0x109e>
   12c06:	mov	r3, r4
   12c08:	b.n	12900 <_svfprintf_r+0x1080>
   12c0a:	add	r2, sp, #140	; 0x8c
   12c0c:	ldr	r1, [sp, #20]
   12c0e:	ldr	r0, [sp, #24]
   12c10:	bl	14a08 <__ssprint_r>
   12c14:	cmp	r0, #0
   12c16:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12c1a:	ldr	r4, [sp, #148]	; 0x94
   12c1c:	add.w	r9, sp, #192	; 0xc0
   12c20:	b.n	124bc <_svfprintf_r+0xc3c>
   12c22:	mov	r4, r2
   12c24:	adds	r3, #1
   12c26:	ldr	r2, [sp, #44]	; 0x2c
   12c28:	str	r3, [sp, #144]	; 0x90
   12c2a:	add	r4, r5
   12c2c:	cmp	r3, #7
   12c2e:	str	r4, [sp, #148]	; 0x94
   12c30:	stmia.w	r9, {r2, r5}
   12c34:	bgt.n	12bc4 <_svfprintf_r+0x1344>
   12c36:	add.w	r9, r9, #8
   12c3a:	b.n	12bdc <_svfprintf_r+0x135c>
   12c3c:	ldr	r2, [sp, #52]	; 0x34
   12c3e:	subs	r2, #2
   12c40:	str	r2, [sp, #52]	; 0x34
   12c42:	subs	r3, #1
   12c44:	cmp	r3, #0
   12c46:	ldrb.w	r2, [sp, #52]	; 0x34
   12c4a:	str	r3, [sp, #116]	; 0x74
   12c4c:	it	lt
   12c4e:	neglt	r3, r3
   12c50:	strb.w	r2, [sp, #124]	; 0x7c
   12c54:	ite	lt
   12c56:	movlt	r2, #45	; 0x2d
   12c58:	movge	r2, #43	; 0x2b
   12c5a:	cmp	r3, #9
   12c5c:	strb.w	r2, [sp, #125]	; 0x7d
   12c60:	ble.w	12e3a <_svfprintf_r+0x15ba>
   12c64:	add.w	r0, sp, #139	; 0x8b
   12c68:	mov	r4, r0
   12c6a:	ldr	r2, [pc, #180]	; (12d20 <_svfprintf_r+0x14a0>)
   12c6c:	smull	r2, r1, r2, r3
   12c70:	asrs	r2, r3, #31
   12c72:	rsb	r2, r2, r1, asr #2
   12c76:	add.w	r1, r2, r2, lsl #2
   12c7a:	sub.w	r3, r3, r1, lsl #1
   12c7e:	add.w	r1, r3, #48	; 0x30
   12c82:	cmp	r2, #9
   12c84:	mov	r3, r2
   12c86:	strb.w	r1, [r4, #-1]!
   12c8a:	bgt.n	12c6a <_svfprintf_r+0x13ea>
   12c8c:	mov	r1, r4
   12c8e:	adds	r3, #48	; 0x30
   12c90:	uxtb	r2, r3
   12c92:	strb.w	r2, [r1, #-1]!
   12c96:	cmp	r0, r1
   12c98:	bls.w	12f04 <_svfprintf_r+0x1684>
   12c9c:	add.w	r1, sp, #126	; 0x7e
   12ca0:	mov	r3, r4
   12ca2:	b.n	12ca8 <_svfprintf_r+0x1428>
   12ca4:	ldrb.w	r2, [r3], #1
   12ca8:	strb.w	r2, [r1], #1
   12cac:	cmp	r0, r3
   12cae:	bne.n	12ca4 <_svfprintf_r+0x1424>
   12cb0:	adds	r3, r0, #1
   12cb2:	subs	r3, r3, r4
   12cb4:	add.w	r2, sp, #126	; 0x7e
   12cb8:	add	r3, r2
   12cba:	add	r2, sp, #124	; 0x7c
   12cbc:	subs	r3, r3, r2
   12cbe:	ldr	r2, [sp, #56]	; 0x38
   12cc0:	str	r3, [sp, #84]	; 0x54
   12cc2:	cmp	r2, #1
   12cc4:	add	r3, r2
   12cc6:	str	r3, [sp, #36]	; 0x24
   12cc8:	ble.w	12e9a <_svfprintf_r+0x161a>
   12ccc:	ldr	r3, [sp, #36]	; 0x24
   12cce:	ldr	r2, [sp, #72]	; 0x48
   12cd0:	add	r3, r2
   12cd2:	movs	r2, #0
   12cd4:	str	r3, [sp, #36]	; 0x24
   12cd6:	str	r2, [sp, #60]	; 0x3c
   12cd8:	bic.w	r3, r3, r3, asr #31
   12cdc:	b.n	1293a <_svfprintf_r+0x10ba>
   12cde:	add	r2, sp, #140	; 0x8c
   12ce0:	ldr	r1, [sp, #20]
   12ce2:	ldr	r0, [sp, #24]
   12ce4:	bl	14a08 <__ssprint_r>
   12ce8:	cmp	r0, #0
   12cea:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12cee:	ldr	r3, [sp, #116]	; 0x74
   12cf0:	ldr	r4, [sp, #148]	; 0x94
   12cf2:	add.w	r9, sp, #192	; 0xc0
   12cf6:	b.n	126d0 <_svfprintf_r+0xe50>
   12cf8:	add	r2, sp, #140	; 0x8c
   12cfa:	ldr	r1, [sp, #20]
   12cfc:	ldr	r0, [sp, #24]
   12cfe:	bl	14a08 <__ssprint_r>
   12d02:	cmp	r0, #0
   12d04:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12d08:	ldr	r3, [sp, #116]	; 0x74
   12d0a:	ldr	r2, [sp, #56]	; 0x38
   12d0c:	ldr	r4, [sp, #148]	; 0x94
   12d0e:	subs	r3, r2, r3
   12d10:	add.w	r9, sp, #192	; 0xc0
   12d14:	b.n	12700 <_svfprintf_r+0xe80>
   12d16:	nop
   12d18:	.word	0x00015308
   12d1c:	.word	0x00015560
   12d20:	.word	0x66666667
   12d24:	cmp	r5, #6
   12d26:	mov	r3, r5
   12d28:	it	cs
   12d2a:	movcs	r3, #6
   12d2c:	str	r3, [sp, #36]	; 0x24
   12d2e:	bic.w	r3, r3, r3, asr #31
   12d32:	mov	fp, r6
   12d34:	str	r7, [sp, #40]	; 0x28
   12d36:	str	r6, [sp, #60]	; 0x3c
   12d38:	mov	r7, r6
   12d3a:	str	r3, [sp, #16]
   12d3c:	ldr	r6, [pc, #536]	; (12f58 <_svfprintf_r+0x16d8>)
   12d3e:	b.w	11c24 <_svfprintf_r+0x3a4>
   12d42:	mov.w	fp, #6
   12d46:	b.n	1287a <_svfprintf_r+0xffa>
   12d48:	add	r2, sp, #132	; 0x84
   12d4a:	add	r3, sp, #120	; 0x78
   12d4c:	str	r2, [sp, #4]
   12d4e:	str	r3, [sp, #0]
   12d50:	mov	r2, fp
   12d52:	add	r3, sp, #116	; 0x74
   12d54:	movs	r1, #3
   12d56:	vldr	d0, [sp, #96]	; 0x60
   12d5a:	ldr	r0, [sp, #24]
   12d5c:	bl	13200 <_dtoa_r>
   12d60:	mov	r5, fp
   12d62:	mov	r6, r0
   12d64:	add.w	r4, r0, fp
   12d68:	b.n	12b56 <_svfprintf_r+0x12d6>
   12d6a:	movs	r7, #45	; 0x2d
   12d6c:	strb.w	r7, [sp, #111]	; 0x6f
   12d70:	b.w	11eca <_svfprintf_r+0x64a>
   12d74:	str	r3, [sp, #12]
   12d76:	b.w	12022 <_svfprintf_r+0x7a2>
   12d7a:	ldrd	r1, r2, [sp, #64]	; 0x40
   12d7e:	add.w	r3, r2, #2147483648	; 0x80000000
   12d82:	str	r3, [sp, #100]	; 0x64
   12d84:	movs	r3, #45	; 0x2d
   12d86:	str	r1, [sp, #96]	; 0x60
   12d88:	str	r3, [sp, #16]
   12d8a:	b.n	12896 <_svfprintf_r+0x1016>
   12d8c:	ldr	r2, [sp, #72]	; 0x48
   12d8e:	ldr	r3, [sp, #56]	; 0x38
   12d90:	add	r3, r2
   12d92:	ldr	r2, [sp, #60]	; 0x3c
   12d94:	str	r3, [sp, #36]	; 0x24
   12d96:	cmp	r2, #0
   12d98:	ble.w	12eae <_svfprintf_r+0x162e>
   12d9c:	movs	r2, #103	; 0x67
   12d9e:	bic.w	r3, r3, r3, asr #31
   12da2:	str	r2, [sp, #52]	; 0x34
   12da4:	b.n	1293a <_svfprintf_r+0x10ba>
   12da6:	ldr	r3, [sp, #52]	; 0x34
   12da8:	cmp	r3, #71	; 0x47
   12daa:	bne.w	128d8 <_svfprintf_r+0x1058>
   12dae:	ldr	r3, [sp, #12]
   12db0:	lsls	r3, r3, #31
   12db2:	bmi.w	12b4a <_svfprintf_r+0x12ca>
   12db6:	ldr	r3, [sp, #132]	; 0x84
   12db8:	cmp	r7, #71	; 0x47
   12dba:	sub.w	r3, r3, r6
   12dbe:	str	r3, [sp, #56]	; 0x38
   12dc0:	beq.w	12bf8 <_svfprintf_r+0x1378>
   12dc4:	ldr	r3, [sp, #116]	; 0x74
   12dc6:	b.n	12c42 <_svfprintf_r+0x13c2>
   12dc8:	bic.w	r3, r5, r5, asr #31
   12dcc:	str	r7, [sp, #40]	; 0x28
   12dce:	str	r3, [sp, #16]
   12dd0:	str	r5, [sp, #36]	; 0x24
   12dd2:	mov	fp, r0
   12dd4:	str	r0, [sp, #60]	; 0x3c
   12dd6:	ldrb.w	r7, [sp, #111]	; 0x6f
   12dda:	b.w	11c24 <_svfprintf_r+0x3a4>
   12dde:	cmp	r3, #0
   12de0:	ble.n	12ebe <_svfprintf_r+0x163e>
   12de2:	cmp.w	fp, #0
   12de6:	bne.n	12e88 <_svfprintf_r+0x1608>
   12de8:	ldr	r2, [sp, #12]
   12dea:	lsls	r4, r2, #31
   12dec:	bmi.n	12e88 <_svfprintf_r+0x1608>
   12dee:	mov	r2, r3
   12df0:	str	r2, [sp, #36]	; 0x24
   12df2:	bic.w	r3, r3, r3, asr #31
   12df6:	b.n	1293a <_svfprintf_r+0x10ba>
   12df8:	ldr	r3, [sp, #12]
   12dfa:	lsls	r3, r3, #31
   12dfc:	mov	r7, fp
   12dfe:	bpl.n	12e0c <_svfprintf_r+0x158c>
   12e00:	add	r6, sp, #256	; 0x100
   12e02:	movs	r3, #48	; 0x30
   12e04:	strb.w	r3, [r6, #-65]!
   12e08:	b.w	11c10 <_svfprintf_r+0x390>
   12e0c:	str.w	fp, [sp, #36]	; 0x24
   12e10:	add	r6, sp, #192	; 0xc0
   12e12:	b.w	11c16 <_svfprintf_r+0x396>
   12e16:	add	r2, sp, #140	; 0x8c
   12e18:	ldr	r1, [sp, #20]
   12e1a:	ldr	r0, [sp, #24]
   12e1c:	bl	14a08 <__ssprint_r>
   12e20:	cmp	r0, #0
   12e22:	bne.w	11a74 <_svfprintf_r+0x1f4>
   12e26:	ldr	r5, [sp, #116]	; 0x74
   12e28:	ldr	r4, [sp, #148]	; 0x94
   12e2a:	ldr	r3, [sp, #144]	; 0x90
   12e2c:	add.w	r9, sp, #192	; 0xc0
   12e30:	b.n	12a80 <_svfprintf_r+0x1200>
   12e32:	mov	r8, r4
   12e34:	movs	r5, #0
   12e36:	b.w	11938 <_svfprintf_r+0xb8>
   12e3a:	adds	r3, #48	; 0x30
   12e3c:	movs	r2, #48	; 0x30
   12e3e:	strb.w	r3, [sp, #127]	; 0x7f
   12e42:	strb.w	r2, [sp, #126]	; 0x7e
   12e46:	add	r3, sp, #128	; 0x80
   12e48:	b.n	12cba <_svfprintf_r+0x143a>
   12e4a:	ldr	r3, [sp, #132]	; 0x84
   12e4c:	b.n	12900 <_svfprintf_r+0x1080>
   12e4e:	ldr	r2, [sp, #72]	; 0x48
   12e50:	ldr	r3, [sp, #60]	; 0x3c
   12e52:	add	r3, r2
   12e54:	movs	r2, #103	; 0x67
   12e56:	str	r3, [sp, #36]	; 0x24
   12e58:	str	r2, [sp, #52]	; 0x34
   12e5a:	bic.w	r3, r3, r3, asr #31
   12e5e:	b.n	1293a <_svfprintf_r+0x10ba>
   12e60:	ldr	r6, [pc, #248]	; (12f5c <_svfprintf_r+0x16dc>)
   12e62:	ldr	r3, [pc, #252]	; (12f60 <_svfprintf_r+0x16e0>)
   12e64:	ldrb.w	r7, [sp, #111]	; 0x6f
   12e68:	b.w	11ece <_svfprintf_r+0x64e>
   12e6c:	movs	r2, #0
   12e6e:	movs	r3, #0
   12e70:	ldrd	r0, r1, [sp, #96]	; 0x60
   12e74:	bl	1038c <__aeabi_dcmpeq>
   12e78:	cmp	r0, #0
   12e7a:	bne.w	12b5e <_svfprintf_r+0x12de>
   12e7e:	rsb	r5, r5, #1
   12e82:	str	r5, [sp, #116]	; 0x74
   12e84:	add	r4, r5
   12e86:	b.n	128da <_svfprintf_r+0x105a>
   12e88:	ldr	r3, [sp, #60]	; 0x3c
   12e8a:	ldr	r2, [sp, #72]	; 0x48
   12e8c:	adds	r5, r3, r2
   12e8e:	add.w	r3, r5, fp
   12e92:	str	r3, [sp, #36]	; 0x24
   12e94:	bic.w	r3, r3, r3, asr #31
   12e98:	b.n	1293a <_svfprintf_r+0x10ba>
   12e9a:	ldr	r3, [sp, #12]
   12e9c:	ands.w	r3, r3, #1
   12ea0:	bne.w	12ccc <_svfprintf_r+0x144c>
   12ea4:	str	r3, [sp, #60]	; 0x3c
   12ea6:	ldr	r3, [sp, #36]	; 0x24
   12ea8:	bic.w	r3, r3, r3, asr #31
   12eac:	b.n	1293a <_svfprintf_r+0x10ba>
   12eae:	ldr	r3, [sp, #60]	; 0x3c
   12eb0:	ldr	r2, [sp, #36]	; 0x24
   12eb2:	rsb	r3, r3, #1
   12eb6:	add	r2, r3
   12eb8:	mov	r3, r2
   12eba:	str	r2, [sp, #36]	; 0x24
   12ebc:	b.n	12d9c <_svfprintf_r+0x151c>
   12ebe:	cmp.w	fp, #0
   12ec2:	bne.n	12eca <_svfprintf_r+0x164a>
   12ec4:	ldr	r3, [sp, #12]
   12ec6:	lsls	r0, r3, #31
   12ec8:	bpl.n	12eda <_svfprintf_r+0x165a>
   12eca:	ldr	r3, [sp, #72]	; 0x48
   12ecc:	adds	r5, r3, #1
   12ece:	add.w	r3, r5, fp
   12ed2:	str	r3, [sp, #36]	; 0x24
   12ed4:	bic.w	r3, r3, r3, asr #31
   12ed8:	b.n	1293a <_svfprintf_r+0x10ba>
   12eda:	movs	r3, #1
   12edc:	str	r3, [sp, #36]	; 0x24
   12ede:	b.n	1293a <_svfprintf_r+0x10ba>
   12ee0:	ldr	r0, [sp, #40]	; 0x28
   12ee2:	ldrb.w	r3, [r8, #1]
   12ee6:	ldr	r5, [r0, #0]
   12ee8:	adds	r0, #4
   12eea:	cmp	r5, #0
   12eec:	str	r0, [sp, #40]	; 0x28
   12eee:	mov	r8, r4
   12ef0:	bge.w	11934 <_svfprintf_r+0xb4>
   12ef4:	mov.w	r5, #4294967295
   12ef8:	b.w	11934 <_svfprintf_r+0xb4>
   12efc:	strb.w	r1, [sp, #111]	; 0x6f
   12f00:	b.w	11a96 <_svfprintf_r+0x216>
   12f04:	add.w	r3, sp, #126	; 0x7e
   12f08:	b.n	12cba <_svfprintf_r+0x143a>
   12f0a:	ldr	r2, [sp, #24]
   12f0c:	movs	r3, #12
   12f0e:	str	r3, [r2, #0]
   12f10:	mov.w	r0, #4294967295
   12f14:	b.w	11a86 <_svfprintf_r+0x206>
   12f18:	strb.w	r1, [sp, #111]	; 0x6f
   12f1c:	b.w	11b90 <_svfprintf_r+0x310>
   12f20:	strb.w	r1, [sp, #111]	; 0x6f
   12f24:	b.w	11e5c <_svfprintf_r+0x5dc>
   12f28:	strb.w	r1, [sp, #111]	; 0x6f
   12f2c:	b.w	11fca <_svfprintf_r+0x74a>
   12f30:	strb.w	r1, [sp, #111]	; 0x6f
   12f34:	b.w	11f6e <_svfprintf_r+0x6ee>
   12f38:	strb.w	r1, [sp, #111]	; 0x6f
   12f3c:	b.w	11f1a <_svfprintf_r+0x69a>
   12f40:	strb.w	r1, [sp, #111]	; 0x6f
   12f44:	b.w	121b2 <_svfprintf_r+0x932>
   12f48:	strb.w	r1, [sp, #111]	; 0x6f
   12f4c:	b.w	12170 <_svfprintf_r+0x8f0>
   12f50:	strb.w	r1, [sp, #111]	; 0x6f
   12f54:	b.w	12134 <_svfprintf_r+0x8b4>
   12f58:	.word	0x000155a8
   12f5c:	.word	0x0001557c
   12f60:	.word	0x00015578

00012f64 <_vdprintf_r>:
   12f64:	push	{r4, r5, r6, r7, lr}
   12f66:	sub.w	sp, sp, #532	; 0x214
   12f6a:	add	r5, sp, #16
   12f6c:	str	r3, [sp, #0]
   12f6e:	mov	r7, r1
   12f70:	mov	r3, r2
   12f72:	mov.w	r4, #512	; 0x200
   12f76:	add	r2, sp, #12
   12f78:	mov	r1, r5
   12f7a:	str	r4, [sp, #12]
   12f7c:	mov	r6, r0
   12f7e:	bl	14b08 <_vasnprintf_r>
   12f82:	cbz	r0, 12fa8 <_vdprintf_r+0x44>
   12f84:	mov	r4, r0
   12f86:	mov	r2, r0
   12f88:	mov	r1, r7
   12f8a:	ldr	r3, [sp, #12]
   12f8c:	mov	r0, r6
   12f8e:	bl	12fe4 <_write_r>
   12f92:	cmp	r4, r5
   12f94:	str	r0, [sp, #12]
   12f96:	beq.n	12fa2 <_vdprintf_r+0x3e>
   12f98:	mov	r0, r6
   12f9a:	mov	r1, r4
   12f9c:	bl	141f8 <_free_r>
   12fa0:	ldr	r0, [sp, #12]
   12fa2:	add.w	sp, sp, #532	; 0x214
   12fa6:	pop	{r4, r5, r6, r7, pc}
   12fa8:	mov.w	r0, #4294967295
   12fac:	b.n	12fa2 <_vdprintf_r+0x3e>
   12fae:	nop

00012fb0 <vdprintf>:
   12fb0:	push	{r4}
   12fb2:	ldr	r4, [pc, #16]	; (12fc4 <vdprintf+0x14>)
   12fb4:	mov	r3, r2
   12fb6:	mov	r2, r1
   12fb8:	mov	r1, r0
   12fba:	ldr	r0, [r4, #0]
   12fbc:	ldr.w	r4, [sp], #4
   12fc0:	b.w	12f64 <_vdprintf_r>
   12fc4:	.word	0x1fff1098

00012fc8 <__ascii_wctomb>:
   12fc8:	cbz	r1, 12fd4 <__ascii_wctomb+0xc>
   12fca:	cmp	r2, #255	; 0xff
   12fcc:	bhi.n	12fd8 <__ascii_wctomb+0x10>
   12fce:	strb	r2, [r1, #0]
   12fd0:	movs	r0, #1
   12fd2:	bx	lr
   12fd4:	mov	r0, r1
   12fd6:	bx	lr
   12fd8:	movs	r3, #138	; 0x8a
   12fda:	str	r3, [r0, #0]
   12fdc:	mov.w	r0, #4294967295
   12fe0:	bx	lr
   12fe2:	nop

00012fe4 <_write_r>:
   12fe4:	push	{r4, r5, r6, lr}
   12fe6:	mov	r5, r1
   12fe8:	ldr	r4, [pc, #32]	; (1300c <_write_r+0x28>)
   12fea:	mov	r1, r2
   12fec:	mov	r6, r0
   12fee:	mov	r2, r3
   12ff0:	mov	r0, r5
   12ff2:	movs	r3, #0
   12ff4:	str	r3, [r4, #0]
   12ff6:	bl	f7d8 <_write>
   12ffa:	adds	r3, r0, #1
   12ffc:	beq.n	13000 <_write_r+0x1c>
   12ffe:	pop	{r4, r5, r6, pc}
   13000:	ldr	r3, [r4, #0]
   13002:	cmp	r3, #0
   13004:	beq.n	12ffe <_write_r+0x1a>
   13006:	str	r3, [r6, #0]
   13008:	pop	{r4, r5, r6, pc}
   1300a:	nop
   1300c:	.word	0x200071b4

00013010 <__register_exitproc>:
   13010:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13014:	ldr	r4, [pc, #148]	; (130ac <__register_exitproc+0x9c>)
   13016:	ldr	r5, [r4, #0]
   13018:	ldr.w	r4, [r5, #328]	; 0x148
   1301c:	mov	r6, r0
   1301e:	mov	r8, r1
   13020:	mov	sl, r2
   13022:	mov	r9, r3
   13024:	cbz	r4, 13098 <__register_exitproc+0x88>
   13026:	ldr	r0, [r4, #4]
   13028:	cmp	r0, #31
   1302a:	bgt.n	1305c <__register_exitproc+0x4c>
   1302c:	adds	r3, r0, #1
   1302e:	cbz	r6, 1304e <__register_exitproc+0x3e>
   13030:	add.w	r5, r4, r0, lsl #2
   13034:	movs	r2, #1
   13036:	str.w	sl, [r5, #136]	; 0x88
   1303a:	ldr.w	r1, [r4, #392]	; 0x188
   1303e:	lsls	r2, r0
   13040:	orrs	r1, r2
   13042:	cmp	r6, #2
   13044:	str.w	r1, [r4, #392]	; 0x188
   13048:	str.w	r9, [r5, #264]	; 0x108
   1304c:	beq.n	1308c <__register_exitproc+0x7c>
   1304e:	adds	r0, #2
   13050:	str	r3, [r4, #4]
   13052:	str.w	r8, [r4, r0, lsl #2]
   13056:	movs	r0, #0
   13058:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1305c:	ldr	r3, [pc, #80]	; (130b0 <__register_exitproc+0xa0>)
   1305e:	cbz	r3, 130a2 <__register_exitproc+0x92>
   13060:	mov.w	r0, #400	; 0x190
   13064:	bl	10910 <malloc>
   13068:	mov	r4, r0
   1306a:	cbz	r0, 130a2 <__register_exitproc+0x92>
   1306c:	ldr.w	r3, [r5, #328]	; 0x148
   13070:	movs	r7, #0
   13072:	stmia.w	r0, {r3, r7}
   13076:	str.w	r4, [r5, #328]	; 0x148
   1307a:	mov	r0, r7
   1307c:	movs	r3, #1
   1307e:	str.w	r7, [r4, #392]	; 0x188
   13082:	str.w	r7, [r4, #396]	; 0x18c
   13086:	cmp	r6, #0
   13088:	beq.n	1304e <__register_exitproc+0x3e>
   1308a:	b.n	13030 <__register_exitproc+0x20>
   1308c:	ldr.w	r1, [r4, #396]	; 0x18c
   13090:	orrs	r2, r1
   13092:	str.w	r2, [r4, #396]	; 0x18c
   13096:	b.n	1304e <__register_exitproc+0x3e>
   13098:	add.w	r4, r5, #332	; 0x14c
   1309c:	str.w	r4, [r5, #328]	; 0x148
   130a0:	b.n	13026 <__register_exitproc+0x16>
   130a2:	mov.w	r0, #4294967295
   130a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   130aa:	nop
   130ac:	.word	0x0001554c
   130b0:	.word	0x00010911

000130b4 <register_fini>:
   130b4:	ldr	r3, [pc, #8]	; (130c0 <register_fini+0xc>)
   130b6:	cbz	r3, 130be <register_fini+0xa>
   130b8:	ldr	r0, [pc, #8]	; (130c4 <register_fini+0x10>)
   130ba:	b.w	130c8 <atexit>
   130be:	bx	lr
   130c0:	.word	0x00000000
   130c4:	.word	0x00014135

000130c8 <atexit>:
   130c8:	movs	r3, #0
   130ca:	mov	r1, r0
   130cc:	mov	r2, r3
   130ce:	mov	r0, r3
   130d0:	b.w	13010 <__register_exitproc>

000130d4 <quorem>:
   130d4:	ldr	r2, [r0, #16]
   130d6:	ldr	r3, [r1, #16]
   130d8:	cmp	r3, r2
   130da:	bgt.w	131f8 <quorem+0x124>
   130de:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e2:	add.w	r8, r3, #4294967295
   130e6:	add.w	r7, r1, #20
   130ea:	add.w	fp, r0, #20
   130ee:	ldr.w	r2, [r7, r8, lsl #2]
   130f2:	ldr.w	r3, [fp, r8, lsl #2]
   130f6:	mov.w	r4, r8, lsl #2
   130fa:	sub	sp, #12
   130fc:	adds	r2, #1
   130fe:	udiv	r9, r3, r2
   13102:	add.w	r3, fp, r4
   13106:	str	r4, [sp, #0]
   13108:	add.w	sl, r7, r4
   1310c:	str	r3, [sp, #4]
   1310e:	cmp.w	r9, #0
   13112:	beq.n	13188 <quorem+0xb4>
   13114:	movs	r5, #0
   13116:	mov	ip, r7
   13118:	mov	lr, fp
   1311a:	mov	r3, r5
   1311c:	ldr.w	r6, [ip], #4
   13120:	ldr.w	r2, [lr]
   13124:	uxth	r4, r6
   13126:	mla	r5, r9, r4, r5
   1312a:	lsrs	r6, r6, #16
   1312c:	lsrs	r4, r5, #16
   1312e:	mla	r4, r9, r6, r4
   13132:	uxth	r5, r5
   13134:	subs	r3, r3, r5
   13136:	uxth	r6, r4
   13138:	uxtah	r3, r3, r2
   1313c:	rsb	r6, r6, r2, lsr #16
   13140:	add.w	r6, r6, r3, asr #16
   13144:	uxth	r3, r3
   13146:	orr.w	r3, r3, r6, lsl #16
   1314a:	cmp	sl, ip
   1314c:	str.w	r3, [lr], #4
   13150:	mov.w	r5, r4, lsr #16
   13154:	mov.w	r3, r6, asr #16
   13158:	bcs.n	1311c <quorem+0x48>
   1315a:	ldr	r3, [sp, #0]
   1315c:	ldr.w	r3, [fp, r3]
   13160:	cbnz	r3, 13188 <quorem+0xb4>
   13162:	ldr	r4, [sp, #4]
   13164:	subs	r3, r4, #4
   13166:	cmp	fp, r3
   13168:	bcs.n	13184 <quorem+0xb0>
   1316a:	ldr.w	r3, [r4, #-4]
   1316e:	cbnz	r3, 13184 <quorem+0xb0>
   13170:	sub.w	r3, r4, #8
   13174:	b.n	1317c <quorem+0xa8>
   13176:	ldr	r2, [r3, #0]
   13178:	subs	r3, #4
   1317a:	cbnz	r2, 13184 <quorem+0xb0>
   1317c:	cmp	fp, r3
   1317e:	add.w	r8, r8, #4294967295
   13182:	bcc.n	13176 <quorem+0xa2>
   13184:	str.w	r8, [r0, #16]
   13188:	mov	r4, r0
   1318a:	bl	147f4 <__mcmp>
   1318e:	cmp	r0, #0
   13190:	blt.n	131f0 <quorem+0x11c>
   13192:	add.w	r9, r9, #1
   13196:	mov	r5, fp
   13198:	movs	r3, #0
   1319a:	ldr.w	r1, [r7], #4
   1319e:	ldr	r0, [r5, #0]
   131a0:	uxth	r2, r1
   131a2:	subs	r2, r3, r2
   131a4:	lsrs	r1, r1, #16
   131a6:	uxtah	r2, r2, r0
   131aa:	rsb	r3, r1, r0, lsr #16
   131ae:	add.w	r3, r3, r2, asr #16
   131b2:	uxth	r1, r2
   131b4:	orr.w	r1, r1, r3, lsl #16
   131b8:	cmp	sl, r7
   131ba:	str.w	r1, [r5], #4
   131be:	mov.w	r3, r3, asr #16
   131c2:	bcs.n	1319a <quorem+0xc6>
   131c4:	ldr.w	r2, [fp, r8, lsl #2]
   131c8:	add.w	r3, fp, r8, lsl #2
   131cc:	cbnz	r2, 131f0 <quorem+0x11c>
   131ce:	subs	r2, r3, #4
   131d0:	cmp	fp, r2
   131d2:	bcs.n	131ec <quorem+0x118>
   131d4:	ldr.w	r2, [r3, #-4]
   131d8:	cbnz	r2, 131ec <quorem+0x118>
   131da:	subs	r3, #8
   131dc:	b.n	131e4 <quorem+0x110>
   131de:	ldr	r2, [r3, #0]
   131e0:	subs	r3, #4
   131e2:	cbnz	r2, 131ec <quorem+0x118>
   131e4:	cmp	fp, r3
   131e6:	add.w	r8, r8, #4294967295
   131ea:	bcc.n	131de <quorem+0x10a>
   131ec:	str.w	r8, [r4, #16]
   131f0:	mov	r0, r9
   131f2:	add	sp, #12
   131f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131f8:	movs	r0, #0
   131fa:	bx	lr
   131fc:			; <UNDEFINED> instruction: 0xffffffff

00013200 <_dtoa_r>:
   13200:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13204:	vmov	r6, r7, d0
   13208:	sub	sp, #108	; 0x6c
   1320a:	ldr	r4, [r0, #64]	; 0x40
   1320c:	ldr	r5, [sp, #144]	; 0x90
   1320e:	str	r1, [sp, #0]
   13210:	mov	r9, r0
   13212:	str	r2, [sp, #20]
   13214:	str	r3, [sp, #12]
   13216:	vmov	sl, s0
   1321a:	mov	fp, r7
   1321c:	cbz	r4, 13234 <_dtoa_r+0x34>
   1321e:	ldr	r2, [r0, #68]	; 0x44
   13220:	str	r2, [r4, #4]
   13222:	movs	r3, #1
   13224:	lsls	r3, r2
   13226:	str	r3, [r4, #8]
   13228:	mov	r1, r4
   1322a:	bl	14430 <_Bfree>
   1322e:	movs	r3, #0
   13230:	str.w	r3, [r9, #64]	; 0x40
   13234:	cmp.w	fp, #0
   13238:	mov	r4, fp
   1323a:	blt.n	132a6 <_dtoa_r+0xa6>
   1323c:	movs	r3, #0
   1323e:	str	r3, [r5, #0]
   13240:	ldr	r3, [pc, #644]	; (134c8 <_dtoa_r+0x2c8>)
   13242:	mov	r2, r3
   13244:	ands	r3, r4
   13246:	cmp	r3, r2
   13248:	beq.n	13278 <_dtoa_r+0x78>
   1324a:	movs	r2, #0
   1324c:	movs	r3, #0
   1324e:	mov	r0, sl
   13250:	mov	r1, fp
   13252:	bl	1038c <__aeabi_dcmpeq>
   13256:	mov	r6, sl
   13258:	mov	r7, fp
   1325a:	mov	r8, r0
   1325c:	cbz	r0, 132b2 <_dtoa_r+0xb2>
   1325e:	ldr	r2, [sp, #12]
   13260:	movs	r3, #1
   13262:	str	r3, [r2, #0]
   13264:	ldr	r3, [sp, #148]	; 0x94
   13266:	cmp	r3, #0
   13268:	beq.w	133e8 <_dtoa_r+0x1e8>
   1326c:	ldr	r0, [pc, #604]	; (134cc <_dtoa_r+0x2cc>)
   1326e:	str	r0, [r3, #0]
   13270:	subs	r0, #1
   13272:	add	sp, #108	; 0x6c
   13274:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13278:	ldr	r2, [sp, #12]
   1327a:	movw	r3, #9999	; 0x270f
   1327e:	str	r3, [r2, #0]
   13280:	cmp.w	sl, #0
   13284:	beq.w	133bc <_dtoa_r+0x1bc>
   13288:	ldr	r0, [pc, #580]	; (134d0 <_dtoa_r+0x2d0>)
   1328a:	ldr	r3, [sp, #148]	; 0x94
   1328c:	cmp	r3, #0
   1328e:	beq.n	13272 <_dtoa_r+0x72>
   13290:	ldrb	r3, [r0, #3]
   13292:	cmp	r3, #0
   13294:	beq.w	133ec <_dtoa_r+0x1ec>
   13298:	add.w	r3, r0, #8
   1329c:	ldr	r2, [sp, #148]	; 0x94
   1329e:	str	r3, [r2, #0]
   132a0:	add	sp, #108	; 0x6c
   132a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132a6:	movs	r3, #1
   132a8:	bic.w	r4, fp, #2147483648	; 0x80000000
   132ac:	str	r3, [r5, #0]
   132ae:	mov	fp, r4
   132b0:	b.n	13240 <_dtoa_r+0x40>
   132b2:	add	r2, sp, #96	; 0x60
   132b4:	add	r1, sp, #100	; 0x64
   132b6:	vmov	d0, r6, r7
   132ba:	mov	r0, r9
   132bc:	bl	1494c <__d2b>
   132c0:	lsrs	r5, r4, #20
   132c2:	str	r0, [sp, #40]	; 0x28
   132c4:	bne.w	133ce <_dtoa_r+0x1ce>
   132c8:	ldr	r5, [sp, #96]	; 0x60
   132ca:	ldr	r6, [sp, #100]	; 0x64
   132cc:	add	r6, r5
   132ce:	addw	r3, r6, #1074	; 0x432
   132d2:	cmp	r3, #32
   132d4:	ble.w	137e8 <_dtoa_r+0x5e8>
   132d8:	rsb	r3, r3, #64	; 0x40
   132dc:	addw	r0, r6, #1042	; 0x412
   132e0:	lsls	r4, r3
   132e2:	lsr.w	r0, sl, r0
   132e6:	orrs	r0, r4
   132e8:	bl	fdd0 <__aeabi_ui2d>
   132ec:	movs	r3, #1
   132ee:	subs	r4, r6, #1
   132f0:	sub.w	r1, r1, #32505856	; 0x1f00000
   132f4:	str	r3, [sp, #60]	; 0x3c
   132f6:	movs	r2, #0
   132f8:	ldr	r3, [pc, #472]	; (134d4 <_dtoa_r+0x2d4>)
   132fa:	bl	fb54 <__aeabi_dsub>
   132fe:	add	r3, pc, #432	; (adr r3, 134b0 <_dtoa_r+0x2b0>)
   13300:	ldrd	r2, r3, [r3]
   13304:	bl	febc <__aeabi_dmul>
   13308:	add	r3, pc, #428	; (adr r3, 134b8 <_dtoa_r+0x2b8>)
   1330a:	ldrd	r2, r3, [r3]
   1330e:	bl	fb58 <__adddf3>
   13312:	mov	r6, r0
   13314:	mov	r0, r4
   13316:	mov	r7, r1
   13318:	bl	fdf0 <__aeabi_i2d>
   1331c:	add	r3, pc, #416	; (adr r3, 134c0 <_dtoa_r+0x2c0>)
   1331e:	ldrd	r2, r3, [r3]
   13322:	bl	febc <__aeabi_dmul>
   13326:	mov	r2, r0
   13328:	mov	r3, r1
   1332a:	mov	r0, r6
   1332c:	mov	r1, r7
   1332e:	bl	fb58 <__adddf3>
   13332:	mov	r6, r0
   13334:	mov	r7, r1
   13336:	bl	1041c <__aeabi_d2iz>
   1333a:	movs	r2, #0
   1333c:	str	r0, [sp, #16]
   1333e:	movs	r3, #0
   13340:	mov	r0, r6
   13342:	mov	r1, r7
   13344:	bl	103a0 <__aeabi_dcmplt>
   13348:	cmp	r0, #0
   1334a:	bne.w	1379e <_dtoa_r+0x59e>
   1334e:	ldr	r6, [sp, #16]
   13350:	cmp	r6, #22
   13352:	bhi.w	13798 <_dtoa_r+0x598>
   13356:	ldr	r3, [pc, #384]	; (134d8 <_dtoa_r+0x2d8>)
   13358:	add.w	r3, r3, r6, lsl #3
   1335c:	ldrd	r0, r1, [r3]
   13360:	mov	r2, sl
   13362:	mov	r3, fp
   13364:	bl	103dc <__aeabi_dcmpgt>
   13368:	cmp	r0, #0
   1336a:	beq.w	137f2 <_dtoa_r+0x5f2>
   1336e:	subs	r3, r6, #1
   13370:	str	r3, [sp, #16]
   13372:	movs	r3, #0
   13374:	str	r3, [sp, #52]	; 0x34
   13376:	subs	r5, r5, r4
   13378:	subs.w	r8, r5, #1
   1337c:	bmi.w	137d4 <_dtoa_r+0x5d4>
   13380:	movs	r3, #0
   13382:	str	r3, [sp, #28]
   13384:	ldr	r3, [sp, #16]
   13386:	cmp	r3, #0
   13388:	blt.w	137c2 <_dtoa_r+0x5c2>
   1338c:	add	r8, r3
   1338e:	str	r3, [sp, #48]	; 0x30
   13390:	movs	r3, #0
   13392:	str	r3, [sp, #24]
   13394:	ldr	r3, [sp, #0]
   13396:	cmp	r3, #9
   13398:	bhi.n	133f0 <_dtoa_r+0x1f0>
   1339a:	cmp	r3, #5
   1339c:	ble.w	14028 <_dtoa_r+0xe28>
   133a0:	subs	r3, #4
   133a2:	str	r3, [sp, #0]
   133a4:	movs	r6, #0
   133a6:	ldr	r3, [sp, #0]
   133a8:	subs	r3, #2
   133aa:	cmp	r3, #3
   133ac:	bhi.w	13ff6 <_dtoa_r+0xdf6>
   133b0:	tbh	[pc, r3, lsl #1]
   133b4:	.word	0x0224032b
   133b8:	.word	0x04500336
   133bc:	ldr	r3, [pc, #272]	; (134d0 <_dtoa_r+0x2d0>)
   133be:	ldr	r2, [pc, #284]	; (134dc <_dtoa_r+0x2dc>)
   133c0:	ubfx	r0, r4, #0, #20
   133c4:	cmp	r0, #0
   133c6:	ite	ne
   133c8:	movne	r0, r3
   133ca:	moveq	r0, r2
   133cc:	b.n	1328a <_dtoa_r+0x8a>
   133ce:	ubfx	r3, fp, #0, #20
   133d2:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   133d6:	subw	r4, r5, #1023	; 0x3ff
   133da:	mov	r0, sl
   133dc:	str.w	r8, [sp, #60]	; 0x3c
   133e0:	orr.w	r1, r1, #3145728	; 0x300000
   133e4:	ldr	r5, [sp, #96]	; 0x60
   133e6:	b.n	132f6 <_dtoa_r+0xf6>
   133e8:	ldr	r0, [pc, #244]	; (134e0 <_dtoa_r+0x2e0>)
   133ea:	b.n	13272 <_dtoa_r+0x72>
   133ec:	adds	r3, r0, #3
   133ee:	b.n	1329c <_dtoa_r+0x9c>
   133f0:	movs	r1, #0
   133f2:	str.w	r1, [r9, #68]	; 0x44
   133f6:	mov	r0, r9
   133f8:	mov	r4, r1
   133fa:	str	r1, [sp, #0]
   133fc:	bl	143e4 <_Balloc>
   13400:	mov.w	r3, #4294967295
   13404:	str	r3, [sp, #32]
   13406:	str	r3, [sp, #56]	; 0x38
   13408:	movs	r3, #1
   1340a:	str	r0, [sp, #36]	; 0x24
   1340c:	str.w	r0, [r9, #64]	; 0x40
   13410:	str	r4, [sp, #20]
   13412:	str	r3, [sp, #44]	; 0x2c
   13414:	ldr	r3, [sp, #100]	; 0x64
   13416:	cmp	r3, #0
   13418:	blt.w	135bc <_dtoa_r+0x3bc>
   1341c:	ldr	r2, [sp, #16]
   1341e:	cmp	r2, #14
   13420:	bgt.w	135bc <_dtoa_r+0x3bc>
   13424:	ldr	r3, [pc, #176]	; (134d8 <_dtoa_r+0x2d8>)
   13426:	add.w	r3, r3, r2, lsl #3
   1342a:	vldr	d7, [r3]
   1342e:	ldr	r3, [sp, #20]
   13430:	cmp	r3, #0
   13432:	vstr	d7, [sp]
   13436:	blt.w	13a36 <_dtoa_r+0x836>
   1343a:	mov	r6, sl
   1343c:	mov	r7, fp
   1343e:	ldrd	sl, fp, [sp]
   13442:	mov	r0, r6
   13444:	mov	r2, sl
   13446:	mov	r3, fp
   13448:	mov	r1, r7
   1344a:	bl	10110 <__aeabi_ddiv>
   1344e:	bl	1041c <__aeabi_d2iz>
   13452:	mov	r4, r0
   13454:	bl	fdf0 <__aeabi_i2d>
   13458:	mov	r2, sl
   1345a:	mov	r3, fp
   1345c:	bl	febc <__aeabi_dmul>
   13460:	mov	r3, r1
   13462:	mov	r2, r0
   13464:	mov	r1, r7
   13466:	mov	r0, r6
   13468:	bl	fb54 <__aeabi_dsub>
   1346c:	ldr	r5, [sp, #36]	; 0x24
   1346e:	add.w	r3, r4, #48	; 0x30
   13472:	strb	r3, [r5, #0]
   13474:	ldr	r3, [sp, #32]
   13476:	cmp	r3, #1
   13478:	mov	r6, r0
   1347a:	mov	r7, r1
   1347c:	add.w	r5, r5, #1
   13480:	beq.n	13546 <_dtoa_r+0x346>
   13482:	movs	r2, #0
   13484:	ldr	r3, [pc, #92]	; (134e4 <_dtoa_r+0x2e4>)
   13486:	bl	febc <__aeabi_dmul>
   1348a:	movs	r2, #0
   1348c:	movs	r3, #0
   1348e:	mov	r6, r0
   13490:	mov	r7, r1
   13492:	bl	1038c <__aeabi_dcmpeq>
   13496:	cmp	r0, #0
   13498:	bne.n	13596 <_dtoa_r+0x396>
   1349a:	str.w	r9, [sp, #20]
   1349e:	ldr.w	sl, [sp, #32]
   134a2:	ldr.w	fp, [sp, #36]	; 0x24
   134a6:	ldrd	r8, r9, [sp]
   134aa:	b.n	134fe <_dtoa_r+0x2fe>
   134ac:	nop.w
   134b0:	.word	0x636f4361
   134b4:	.word	0x3fd287a7
   134b8:	.word	0x8b60c8b3
   134bc:	.word	0x3fc68a28
   134c0:	.word	0x509f79fb
   134c4:	.word	0x3fd34413
   134c8:	.word	0x7ff00000
   134cc:	.word	0x00015309
   134d0:	.word	0x000156d0
   134d4:	.word	0x3ff80000
   134d8:	.word	0x000156d8
   134dc:	.word	0x000156c4
   134e0:	.word	0x00015308
   134e4:	.word	0x40240000
   134e8:	bl	febc <__aeabi_dmul>
   134ec:	movs	r2, #0
   134ee:	movs	r3, #0
   134f0:	mov	r6, r0
   134f2:	mov	r7, r1
   134f4:	bl	1038c <__aeabi_dcmpeq>
   134f8:	cmp	r0, #0
   134fa:	bne.w	13c5a <_dtoa_r+0xa5a>
   134fe:	mov	r2, r8
   13500:	mov	r3, r9
   13502:	mov	r0, r6
   13504:	mov	r1, r7
   13506:	bl	10110 <__aeabi_ddiv>
   1350a:	bl	1041c <__aeabi_d2iz>
   1350e:	mov	r4, r0
   13510:	bl	fdf0 <__aeabi_i2d>
   13514:	mov	r2, r8
   13516:	mov	r3, r9
   13518:	bl	febc <__aeabi_dmul>
   1351c:	mov	r2, r0
   1351e:	mov	r3, r1
   13520:	mov	r0, r6
   13522:	mov	r1, r7
   13524:	bl	fb54 <__aeabi_dsub>
   13528:	add.w	lr, r4, #48	; 0x30
   1352c:	strb.w	lr, [r5], #1
   13530:	rsb	lr, fp, r5
   13534:	cmp	lr, sl
   13536:	mov	r6, r0
   13538:	mov	r7, r1
   1353a:	mov.w	r2, #0
   1353e:	ldr	r3, [pc, #696]	; (137f8 <_dtoa_r+0x5f8>)
   13540:	bne.n	134e8 <_dtoa_r+0x2e8>
   13542:	ldr.w	r9, [sp, #20]
   13546:	mov	r2, r6
   13548:	mov	r3, r7
   1354a:	mov	r0, r6
   1354c:	mov	r1, r7
   1354e:	bl	fb58 <__adddf3>
   13552:	mov	r6, r0
   13554:	mov	r7, r1
   13556:	mov	r2, r0
   13558:	mov	r3, r1
   1355a:	ldrd	r0, r1, [sp]
   1355e:	bl	103a0 <__aeabi_dcmplt>
   13562:	cbnz	r0, 13576 <_dtoa_r+0x376>
   13564:	mov	r2, r6
   13566:	mov	r3, r7
   13568:	ldrd	r0, r1, [sp]
   1356c:	bl	1038c <__aeabi_dcmpeq>
   13570:	cbz	r0, 13596 <_dtoa_r+0x396>
   13572:	lsls	r3, r4, #31
   13574:	bpl.n	13596 <_dtoa_r+0x396>
   13576:	ldrb.w	r4, [r5, #-1]
   1357a:	ldr	r2, [sp, #36]	; 0x24
   1357c:	subs	r3, r5, #1
   1357e:	b.n	1358a <_dtoa_r+0x38a>
   13580:	cmp	r2, r3
   13582:	beq.w	13d7e <_dtoa_r+0xb7e>
   13586:	ldrb.w	r4, [r3, #-1]!
   1358a:	cmp	r4, #57	; 0x39
   1358c:	add.w	r5, r3, #1
   13590:	beq.n	13580 <_dtoa_r+0x380>
   13592:	adds	r4, #1
   13594:	strb	r4, [r3, #0]
   13596:	ldr	r1, [sp, #40]	; 0x28
   13598:	mov	r0, r9
   1359a:	bl	14430 <_Bfree>
   1359e:	movs	r2, #0
   135a0:	ldr	r3, [sp, #16]
   135a2:	strb	r2, [r5, #0]
   135a4:	ldr	r2, [sp, #12]
   135a6:	adds	r3, #1
   135a8:	str	r3, [r2, #0]
   135aa:	ldr	r3, [sp, #148]	; 0x94
   135ac:	cmp	r3, #0
   135ae:	beq.w	13ce8 <_dtoa_r+0xae8>
   135b2:	ldr	r0, [sp, #36]	; 0x24
   135b4:	str	r5, [r3, #0]
   135b6:	add	sp, #108	; 0x6c
   135b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135bc:	ldr	r2, [sp, #44]	; 0x2c
   135be:	cmp	r2, #0
   135c0:	beq.w	137e0 <_dtoa_r+0x5e0>
   135c4:	ldr	r2, [sp, #0]
   135c6:	cmp	r2, #1
   135c8:	ble.w	13a7a <_dtoa_r+0x87a>
   135cc:	ldr	r3, [sp, #32]
   135ce:	ldr	r2, [sp, #24]
   135d0:	subs	r7, r3, #1
   135d2:	cmp	r2, r7
   135d4:	blt.w	13cee <_dtoa_r+0xaee>
   135d8:	subs	r7, r2, r7
   135da:	ldr	r3, [sp, #32]
   135dc:	cmp	r3, #0
   135de:	blt.w	13ee2 <_dtoa_r+0xce2>
   135e2:	ldr	r5, [sp, #28]
   135e4:	ldr	r3, [sp, #32]
   135e6:	ldr	r2, [sp, #28]
   135e8:	movs	r1, #1
   135ea:	add	r2, r3
   135ec:	mov	r0, r9
   135ee:	str	r2, [sp, #28]
   135f0:	add	r8, r3
   135f2:	bl	14560 <__i2b>
   135f6:	mov	r6, r0
   135f8:	cbz	r5, 13614 <_dtoa_r+0x414>
   135fa:	cmp.w	r8, #0
   135fe:	ble.n	13614 <_dtoa_r+0x414>
   13600:	cmp	r5, r8
   13602:	ldr	r2, [sp, #28]
   13604:	mov	r3, r5
   13606:	it	ge
   13608:	movge	r3, r8
   1360a:	subs	r2, r2, r3
   1360c:	str	r2, [sp, #28]
   1360e:	subs	r5, r5, r3
   13610:	rsb	r8, r3, r8
   13614:	ldr	r3, [sp, #24]
   13616:	cmp	r3, #0
   13618:	ble.w	13c06 <_dtoa_r+0xa06>
   1361c:	ldr	r2, [sp, #44]	; 0x2c
   1361e:	cmp	r2, #0
   13620:	beq.w	13a28 <_dtoa_r+0x828>
   13624:	cmp	r7, #0
   13626:	beq.w	13a28 <_dtoa_r+0x828>
   1362a:	mov	r1, r6
   1362c:	mov	r2, r7
   1362e:	mov	r0, r9
   13630:	bl	146a4 <__pow5mult>
   13634:	ldr	r2, [sp, #40]	; 0x28
   13636:	mov	r1, r0
   13638:	mov	r6, r0
   1363a:	mov	r0, r9
   1363c:	bl	14574 <__multiply>
   13640:	ldr	r1, [sp, #40]	; 0x28
   13642:	mov	r4, r0
   13644:	mov	r0, r9
   13646:	bl	14430 <_Bfree>
   1364a:	ldr	r3, [sp, #24]
   1364c:	subs	r3, r3, r7
   1364e:	str	r3, [sp, #24]
   13650:	bne.w	13a26 <_dtoa_r+0x826>
   13654:	movs	r1, #1
   13656:	mov	r0, r9
   13658:	bl	14560 <__i2b>
   1365c:	ldr	r3, [sp, #48]	; 0x30
   1365e:	str	r0, [sp, #24]
   13660:	cmp	r3, #0
   13662:	beq.w	13a90 <_dtoa_r+0x890>
   13666:	mov	r1, r0
   13668:	mov	r2, r3
   1366a:	mov	r0, r9
   1366c:	bl	146a4 <__pow5mult>
   13670:	ldr	r3, [sp, #0]
   13672:	str	r0, [sp, #24]
   13674:	cmp	r3, #1
   13676:	ble.w	13c60 <_dtoa_r+0xa60>
   1367a:	movs	r7, #0
   1367c:	ldr	r2, [sp, #24]
   1367e:	ldr	r3, [r2, #16]
   13680:	add.w	r3, r2, r3, lsl #2
   13684:	ldr	r0, [r3, #16]
   13686:	bl	144c4 <__hi0bits>
   1368a:	rsb	r0, r0, #32
   1368e:	add	r0, r8
   13690:	ands.w	r0, r0, #31
   13694:	beq.w	13a8c <_dtoa_r+0x88c>
   13698:	rsb	r3, r0, #32
   1369c:	cmp	r3, #4
   1369e:	ble.w	1401c <_dtoa_r+0xe1c>
   136a2:	rsb	r0, r0, #28
   136a6:	ldr	r3, [sp, #28]
   136a8:	add	r3, r0
   136aa:	str	r3, [sp, #28]
   136ac:	add	r5, r0
   136ae:	add	r8, r0
   136b0:	ldr	r3, [sp, #28]
   136b2:	cmp	r3, #0
   136b4:	ble.n	136c2 <_dtoa_r+0x4c2>
   136b6:	mov	r1, r4
   136b8:	mov	r2, r3
   136ba:	mov	r0, r9
   136bc:	bl	14744 <__lshift>
   136c0:	mov	r4, r0
   136c2:	cmp.w	r8, #0
   136c6:	ble.n	136d4 <_dtoa_r+0x4d4>
   136c8:	mov	r2, r8
   136ca:	ldr	r1, [sp, #24]
   136cc:	mov	r0, r9
   136ce:	bl	14744 <__lshift>
   136d2:	str	r0, [sp, #24]
   136d4:	ldr	r3, [sp, #52]	; 0x34
   136d6:	cmp	r3, #0
   136d8:	bne.w	13bd0 <_dtoa_r+0x9d0>
   136dc:	ldr	r3, [sp, #32]
   136de:	cmp	r3, #0
   136e0:	ble.w	13c0a <_dtoa_r+0xa0a>
   136e4:	ldr	r3, [sp, #44]	; 0x2c
   136e6:	cmp	r3, #0
   136e8:	bne.w	13ad4 <_dtoa_r+0x8d4>
   136ec:	ldr.w	fp, [sp, #36]	; 0x24
   136f0:	ldr	r7, [sp, #32]
   136f2:	ldr.w	r8, [sp, #24]
   136f6:	mov	r5, fp
   136f8:	b.n	13700 <_dtoa_r+0x500>
   136fa:	bl	14444 <__multadd>
   136fe:	mov	r4, r0
   13700:	mov	r1, r8
   13702:	mov	r0, r4
   13704:	bl	130d4 <quorem>
   13708:	add.w	sl, r0, #48	; 0x30
   1370c:	strb.w	sl, [r5], #1
   13710:	rsb	r3, fp, r5
   13714:	cmp	r3, r7
   13716:	mov.w	r2, #10
   1371a:	mov.w	r3, #0
   1371e:	mov	r1, r4
   13720:	mov	r0, r9
   13722:	blt.n	136fa <_dtoa_r+0x4fa>
   13724:	ldr	r3, [sp, #36]	; 0x24
   13726:	ldr	r2, [sp, #32]
   13728:	cmp	r2, #1
   1372a:	ite	ge
   1372c:	addge	r3, r3, r2
   1372e:	addlt	r3, #1
   13730:	mov	r5, r3
   13732:	mov.w	fp, #0
   13736:	mov	r1, r4
   13738:	movs	r2, #1
   1373a:	mov	r0, r9
   1373c:	bl	14744 <__lshift>
   13740:	ldr	r1, [sp, #24]
   13742:	str	r0, [sp, #40]	; 0x28
   13744:	bl	147f4 <__mcmp>
   13748:	cmp	r0, #0
   1374a:	ble.w	13d58 <_dtoa_r+0xb58>
   1374e:	ldrb.w	r2, [r5, #-1]
   13752:	ldr	r1, [sp, #36]	; 0x24
   13754:	subs	r3, r5, #1
   13756:	b.n	13762 <_dtoa_r+0x562>
   13758:	cmp	r3, r1
   1375a:	beq.w	13c46 <_dtoa_r+0xa46>
   1375e:	ldrb.w	r2, [r3, #-1]!
   13762:	cmp	r2, #57	; 0x39
   13764:	add.w	r5, r3, #1
   13768:	beq.n	13758 <_dtoa_r+0x558>
   1376a:	adds	r2, #1
   1376c:	strb	r2, [r3, #0]
   1376e:	ldr	r1, [sp, #24]
   13770:	mov	r0, r9
   13772:	bl	14430 <_Bfree>
   13776:	cmp	r6, #0
   13778:	beq.w	13596 <_dtoa_r+0x396>
   1377c:	cmp.w	fp, #0
   13780:	beq.n	1378e <_dtoa_r+0x58e>
   13782:	cmp	fp, r6
   13784:	beq.n	1378e <_dtoa_r+0x58e>
   13786:	mov	r1, fp
   13788:	mov	r0, r9
   1378a:	bl	14430 <_Bfree>
   1378e:	mov	r1, r6
   13790:	mov	r0, r9
   13792:	bl	14430 <_Bfree>
   13796:	b.n	13596 <_dtoa_r+0x396>
   13798:	movs	r3, #1
   1379a:	str	r3, [sp, #52]	; 0x34
   1379c:	b.n	13376 <_dtoa_r+0x176>
   1379e:	ldr.w	r8, [sp, #16]
   137a2:	mov	r0, r8
   137a4:	bl	fdf0 <__aeabi_i2d>
   137a8:	mov	r2, r0
   137aa:	mov	r3, r1
   137ac:	mov	r0, r6
   137ae:	mov	r1, r7
   137b0:	bl	1038c <__aeabi_dcmpeq>
   137b4:	cmp	r0, #0
   137b6:	bne.w	1334e <_dtoa_r+0x14e>
   137ba:	add.w	r3, r8, #4294967295
   137be:	str	r3, [sp, #16]
   137c0:	b.n	1334e <_dtoa_r+0x14e>
   137c2:	ldr	r2, [sp, #28]
   137c4:	ldr	r3, [sp, #16]
   137c6:	subs	r2, r2, r3
   137c8:	negs	r3, r3
   137ca:	str	r3, [sp, #24]
   137cc:	movs	r3, #0
   137ce:	str	r2, [sp, #28]
   137d0:	str	r3, [sp, #48]	; 0x30
   137d2:	b.n	13394 <_dtoa_r+0x194>
   137d4:	rsb	r3, r8, #0
   137d8:	str	r3, [sp, #28]
   137da:	mov.w	r8, #0
   137de:	b.n	13384 <_dtoa_r+0x184>
   137e0:	ldr	r7, [sp, #24]
   137e2:	ldr	r5, [sp, #28]
   137e4:	ldr	r6, [sp, #44]	; 0x2c
   137e6:	b.n	135f8 <_dtoa_r+0x3f8>
   137e8:	rsb	r4, r3, #32
   137ec:	lsl.w	r0, sl, r4
   137f0:	b.n	132e8 <_dtoa_r+0xe8>
   137f2:	str	r0, [sp, #52]	; 0x34
   137f4:	b.n	13376 <_dtoa_r+0x176>
   137f6:	nop
   137f8:	.word	0x40240000
   137fc:	movs	r3, #0
   137fe:	str	r3, [sp, #44]	; 0x2c
   13800:	ldr	r3, [sp, #16]
   13802:	ldr	r2, [sp, #20]
   13804:	add	r3, r2
   13806:	str	r3, [sp, #56]	; 0x38
   13808:	adds	r3, #1
   1380a:	cmp	r3, #0
   1380c:	str	r3, [sp, #32]
   1380e:	ble.w	13d0c <_dtoa_r+0xb0c>
   13812:	ldr	r4, [sp, #32]
   13814:	mov	r5, r4
   13816:	movs	r1, #0
   13818:	cmp	r5, #23
   1381a:	str.w	r1, [r9, #68]	; 0x44
   1381e:	bls.n	13838 <_dtoa_r+0x638>
   13820:	movs	r2, #1
   13822:	movs	r3, #4
   13824:	lsls	r3, r3, #1
   13826:	add.w	r0, r3, #20
   1382a:	cmp	r0, r5
   1382c:	mov	r1, r2
   1382e:	add.w	r2, r2, #1
   13832:	bls.n	13824 <_dtoa_r+0x624>
   13834:	str.w	r1, [r9, #68]	; 0x44
   13838:	mov	r0, r9
   1383a:	bl	143e4 <_Balloc>
   1383e:	cmp	r4, #14
   13840:	str	r0, [sp, #36]	; 0x24
   13842:	str.w	r0, [r9, #64]	; 0x40
   13846:	bhi.w	13414 <_dtoa_r+0x214>
   1384a:	cmp	r6, #0
   1384c:	beq.w	13414 <_dtoa_r+0x214>
   13850:	ldr	r1, [sp, #16]
   13852:	cmp	r1, #0
   13854:	strd	sl, fp, [sp, #64]	; 0x40
   13858:	ble.w	13d90 <_dtoa_r+0xb90>
   1385c:	ldr	r3, [pc, #576]	; (13aa0 <_dtoa_r+0x8a0>)
   1385e:	and.w	r2, r1, #15
   13862:	asrs	r6, r1, #4
   13864:	add.w	r3, r3, r2, lsl #3
   13868:	lsls	r0, r6, #27
   1386a:	ldrd	r4, r5, [r3]
   1386e:	bpl.w	13cfe <_dtoa_r+0xafe>
   13872:	ldr	r3, [pc, #560]	; (13aa4 <_dtoa_r+0x8a4>)
   13874:	mov	r0, sl
   13876:	mov	r1, fp
   13878:	ldrd	r2, r3, [r3, #32]
   1387c:	bl	10110 <__aeabi_ddiv>
   13880:	strd	r0, r1, [sp, #72]	; 0x48
   13884:	and.w	r6, r6, #15
   13888:	mov.w	sl, #3
   1388c:	cbz	r6, 138b0 <_dtoa_r+0x6b0>
   1388e:	ldr	r7, [pc, #532]	; (13aa4 <_dtoa_r+0x8a4>)
   13890:	lsls	r1, r6, #31
   13892:	bpl.n	138a8 <_dtoa_r+0x6a8>
   13894:	mov	r0, r4
   13896:	mov	r1, r5
   13898:	ldrd	r2, r3, [r7]
   1389c:	bl	febc <__aeabi_dmul>
   138a0:	add.w	sl, sl, #1
   138a4:	mov	r4, r0
   138a6:	mov	r5, r1
   138a8:	asrs	r6, r6, #1
   138aa:	add.w	r7, r7, #8
   138ae:	bne.n	13890 <_dtoa_r+0x690>
   138b0:	mov	r2, r4
   138b2:	mov	r3, r5
   138b4:	ldrd	r0, r1, [sp, #72]	; 0x48
   138b8:	bl	10110 <__aeabi_ddiv>
   138bc:	mov	r6, r0
   138be:	mov	r7, r1
   138c0:	ldr	r3, [sp, #52]	; 0x34
   138c2:	cbz	r3, 138d6 <_dtoa_r+0x6d6>
   138c4:	movs	r2, #0
   138c6:	ldr	r3, [pc, #480]	; (13aa8 <_dtoa_r+0x8a8>)
   138c8:	mov	r0, r6
   138ca:	mov	r1, r7
   138cc:	bl	103a0 <__aeabi_dcmplt>
   138d0:	cmp	r0, #0
   138d2:	bne.w	13f0a <_dtoa_r+0xd0a>
   138d6:	mov	r0, sl
   138d8:	bl	fdf0 <__aeabi_i2d>
   138dc:	mov	r2, r6
   138de:	mov	r3, r7
   138e0:	bl	febc <__aeabi_dmul>
   138e4:	ldr	r3, [pc, #452]	; (13aac <_dtoa_r+0x8ac>)
   138e6:	movs	r2, #0
   138e8:	bl	fb58 <__adddf3>
   138ec:	ldr	r3, [sp, #32]
   138ee:	mov	r4, r0
   138f0:	sub.w	r5, r1, #54525952	; 0x3400000
   138f4:	cmp	r3, #0
   138f6:	beq.w	13cb0 <_dtoa_r+0xab0>
   138fa:	ldr	r3, [sp, #16]
   138fc:	str	r3, [sp, #88]	; 0x58
   138fe:	ldr	r3, [sp, #32]
   13900:	str	r3, [sp, #72]	; 0x48
   13902:	ldr	r3, [sp, #44]	; 0x2c
   13904:	cmp	r3, #0
   13906:	beq.w	13e32 <_dtoa_r+0xc32>
   1390a:	ldr	r2, [sp, #72]	; 0x48
   1390c:	ldr	r3, [pc, #400]	; (13aa0 <_dtoa_r+0x8a0>)
   1390e:	ldr	r1, [pc, #416]	; (13ab0 <_dtoa_r+0x8b0>)
   13910:	add.w	r3, r3, r2, lsl #3
   13914:	ldrd	r2, r3, [r3, #-8]
   13918:	movs	r0, #0
   1391a:	bl	10110 <__aeabi_ddiv>
   1391e:	mov	r2, r4
   13920:	mov	r3, r5
   13922:	bl	fb54 <__aeabi_dsub>
   13926:	mov	sl, r0
   13928:	mov	fp, r1
   1392a:	mov	r0, r6
   1392c:	mov	r1, r7
   1392e:	bl	1041c <__aeabi_d2iz>
   13932:	mov	r4, r0
   13934:	bl	fdf0 <__aeabi_i2d>
   13938:	mov	r2, r0
   1393a:	mov	r3, r1
   1393c:	mov	r0, r6
   1393e:	mov	r1, r7
   13940:	bl	fb54 <__aeabi_dsub>
   13944:	adds	r4, #48	; 0x30
   13946:	ldr	r5, [sp, #36]	; 0x24
   13948:	uxtb	r4, r4
   1394a:	mov	r6, r0
   1394c:	mov	r7, r1
   1394e:	strb	r4, [r5, #0]
   13950:	mov	r2, r0
   13952:	mov	r3, r1
   13954:	mov	r0, sl
   13956:	mov	r1, fp
   13958:	adds	r5, #1
   1395a:	bl	103dc <__aeabi_dcmpgt>
   1395e:	cmp	r0, #0
   13960:	bne.n	13a04 <_dtoa_r+0x804>
   13962:	mov	r2, r6
   13964:	mov	r3, r7
   13966:	movs	r0, #0
   13968:	ldr	r1, [pc, #316]	; (13aa8 <_dtoa_r+0x8a8>)
   1396a:	bl	fb54 <__aeabi_dsub>
   1396e:	mov	r2, r0
   13970:	mov	r3, r1
   13972:	mov	r0, sl
   13974:	mov	r1, fp
   13976:	bl	103dc <__aeabi_dcmpgt>
   1397a:	cmp	r0, #0
   1397c:	bne.w	13f90 <_dtoa_r+0xd90>
   13980:	ldr	r2, [sp, #72]	; 0x48
   13982:	cmp	r2, #1
   13984:	ble.w	13d76 <_dtoa_r+0xb76>
   13988:	ldr	r3, [sp, #72]	; 0x48
   1398a:	ldr	r2, [sp, #36]	; 0x24
   1398c:	str.w	r8, [sp, #72]	; 0x48
   13990:	add	r3, r2
   13992:	mov	r8, r3
   13994:	b.n	139b2 <_dtoa_r+0x7b2>
   13996:	movs	r0, #0
   13998:	ldr	r1, [pc, #268]	; (13aa8 <_dtoa_r+0x8a8>)
   1399a:	bl	fb54 <__aeabi_dsub>
   1399e:	mov	r2, sl
   139a0:	mov	r3, fp
   139a2:	bl	103a0 <__aeabi_dcmplt>
   139a6:	cmp	r0, #0
   139a8:	bne.w	13f90 <_dtoa_r+0xd90>
   139ac:	cmp	r5, r8
   139ae:	beq.w	13d72 <_dtoa_r+0xb72>
   139b2:	mov	r0, sl
   139b4:	mov	r1, fp
   139b6:	movs	r2, #0
   139b8:	ldr	r3, [pc, #248]	; (13ab4 <_dtoa_r+0x8b4>)
   139ba:	bl	febc <__aeabi_dmul>
   139be:	movs	r2, #0
   139c0:	ldr	r3, [pc, #240]	; (13ab4 <_dtoa_r+0x8b4>)
   139c2:	mov	sl, r0
   139c4:	mov	fp, r1
   139c6:	mov	r0, r6
   139c8:	mov	r1, r7
   139ca:	bl	febc <__aeabi_dmul>
   139ce:	mov	r7, r1
   139d0:	mov	r6, r0
   139d2:	bl	1041c <__aeabi_d2iz>
   139d6:	mov	r4, r0
   139d8:	bl	fdf0 <__aeabi_i2d>
   139dc:	mov	r2, r0
   139de:	mov	r3, r1
   139e0:	mov	r0, r6
   139e2:	mov	r1, r7
   139e4:	bl	fb54 <__aeabi_dsub>
   139e8:	adds	r4, #48	; 0x30
   139ea:	uxtb	r4, r4
   139ec:	mov	r2, sl
   139ee:	mov	r3, fp
   139f0:	strb.w	r4, [r5], #1
   139f4:	mov	r6, r0
   139f6:	mov	r7, r1
   139f8:	bl	103a0 <__aeabi_dcmplt>
   139fc:	mov	r2, r6
   139fe:	mov	r3, r7
   13a00:	cmp	r0, #0
   13a02:	beq.n	13996 <_dtoa_r+0x796>
   13a04:	ldr	r3, [sp, #88]	; 0x58
   13a06:	str	r3, [sp, #16]
   13a08:	b.n	13596 <_dtoa_r+0x396>
   13a0a:	movs	r3, #0
   13a0c:	str	r3, [sp, #44]	; 0x2c
   13a0e:	ldr	r3, [sp, #20]
   13a10:	cmp	r3, #0
   13a12:	ble.w	13d16 <_dtoa_r+0xb16>
   13a16:	mov	r5, r3
   13a18:	mov	r4, r3
   13a1a:	str	r3, [sp, #56]	; 0x38
   13a1c:	str	r3, [sp, #32]
   13a1e:	b.n	13816 <_dtoa_r+0x616>
   13a20:	movs	r3, #1
   13a22:	str	r3, [sp, #44]	; 0x2c
   13a24:	b.n	13a0e <_dtoa_r+0x80e>
   13a26:	str	r4, [sp, #40]	; 0x28
   13a28:	ldr	r2, [sp, #24]
   13a2a:	ldr	r1, [sp, #40]	; 0x28
   13a2c:	mov	r0, r9
   13a2e:	bl	146a4 <__pow5mult>
   13a32:	mov	r4, r0
   13a34:	b.n	13654 <_dtoa_r+0x454>
   13a36:	ldr	r3, [sp, #32]
   13a38:	cmp	r3, #0
   13a3a:	bgt.w	1343a <_dtoa_r+0x23a>
   13a3e:	bne.w	13ce0 <_dtoa_r+0xae0>
   13a42:	movs	r2, #0
   13a44:	ldr	r3, [pc, #112]	; (13ab8 <_dtoa_r+0x8b8>)
   13a46:	ldrd	r0, r1, [sp]
   13a4a:	bl	febc <__aeabi_dmul>
   13a4e:	mov	r3, fp
   13a50:	mov	r2, sl
   13a52:	bl	103c8 <__aeabi_dcmpge>
   13a56:	ldr	r3, [sp, #32]
   13a58:	str	r3, [sp, #24]
   13a5a:	mov	r6, r3
   13a5c:	cmp	r0, #0
   13a5e:	beq.w	13c36 <_dtoa_r+0xa36>
   13a62:	ldr	r3, [sp, #20]
   13a64:	ldr	r5, [sp, #36]	; 0x24
   13a66:	mvns	r3, r3
   13a68:	str	r3, [sp, #16]
   13a6a:	ldr	r1, [sp, #24]
   13a6c:	mov	r0, r9
   13a6e:	bl	14430 <_Bfree>
   13a72:	cmp	r6, #0
   13a74:	beq.w	13596 <_dtoa_r+0x396>
   13a78:	b.n	1378e <_dtoa_r+0x58e>
   13a7a:	ldr	r2, [sp, #60]	; 0x3c
   13a7c:	cmp	r2, #0
   13a7e:	beq.w	13ef2 <_dtoa_r+0xcf2>
   13a82:	addw	r3, r3, #1075	; 0x433
   13a86:	ldr	r7, [sp, #24]
   13a88:	ldr	r5, [sp, #28]
   13a8a:	b.n	135e6 <_dtoa_r+0x3e6>
   13a8c:	movs	r0, #28
   13a8e:	b.n	136a6 <_dtoa_r+0x4a6>
   13a90:	ldr	r3, [sp, #0]
   13a92:	cmp	r3, #1
   13a94:	ble.w	13f98 <_dtoa_r+0xd98>
   13a98:	ldr	r7, [sp, #48]	; 0x30
   13a9a:	movs	r0, #1
   13a9c:	b.n	1368e <_dtoa_r+0x48e>
   13a9e:	nop
   13aa0:	.word	0x000156d8
   13aa4:	.word	0x000157a0
   13aa8:	.word	0x3ff00000
   13aac:	.word	0x401c0000
   13ab0:	.word	0x3fe00000
   13ab4:	.word	0x40240000
   13ab8:	.word	0x40140000
   13abc:	mov	r1, r6
   13abe:	movs	r3, #0
   13ac0:	movs	r2, #10
   13ac2:	mov	r0, r9
   13ac4:	bl	14444 <__multadd>
   13ac8:	ldr	r3, [sp, #56]	; 0x38
   13aca:	cmp	r3, #0
   13acc:	mov	r6, r0
   13ace:	ble.w	13fec <_dtoa_r+0xdec>
   13ad2:	str	r3, [sp, #32]
   13ad4:	cmp	r5, #0
   13ad6:	ble.n	13ae4 <_dtoa_r+0x8e4>
   13ad8:	mov	r1, r6
   13ada:	mov	r2, r5
   13adc:	mov	r0, r9
   13ade:	bl	14744 <__lshift>
   13ae2:	mov	r6, r0
   13ae4:	cmp	r7, #0
   13ae6:	bne.w	13de2 <_dtoa_r+0xbe2>
   13aea:	mov	r8, r6
   13aec:	ldr	r3, [sp, #32]
   13aee:	ldr	r2, [sp, #36]	; 0x24
   13af0:	subs	r3, #1
   13af2:	adds	r3, r2, r3
   13af4:	str	r3, [sp, #32]
   13af6:	and.w	r3, sl, #1
   13afa:	str	r3, [sp, #40]	; 0x28
   13afc:	mov	r7, r2
   13afe:	ldr.w	fp, [sp, #24]
   13b02:	mov	r0, r4
   13b04:	mov	r1, fp
   13b06:	bl	130d4 <quorem>
   13b0a:	mov	r1, r6
   13b0c:	mov	r5, r0
   13b0e:	mov	r0, r4
   13b10:	bl	147f4 <__mcmp>
   13b14:	mov	r2, r8
   13b16:	mov	r1, fp
   13b18:	mov	sl, r0
   13b1a:	mov	r0, r9
   13b1c:	bl	14838 <__mdiff>
   13b20:	ldr	r2, [r0, #12]
   13b22:	mov	fp, r0
   13b24:	add.w	r3, r5, #48	; 0x30
   13b28:	cmp	r2, #0
   13b2a:	bne.n	13bc0 <_dtoa_r+0x9c0>
   13b2c:	mov	r1, r0
   13b2e:	mov	r0, r4
   13b30:	str	r3, [sp, #28]
   13b32:	bl	147f4 <__mcmp>
   13b36:	mov	r1, fp
   13b38:	str	r0, [sp, #20]
   13b3a:	mov	r0, r9
   13b3c:	bl	14430 <_Bfree>
   13b40:	ldr	r2, [sp, #20]
   13b42:	ldr	r3, [sp, #28]
   13b44:	cbnz	r2, 13b52 <_dtoa_r+0x952>
   13b46:	ldr	r1, [sp, #0]
   13b48:	cbnz	r1, 13b52 <_dtoa_r+0x952>
   13b4a:	ldr	r1, [sp, #40]	; 0x28
   13b4c:	cmp	r1, #0
   13b4e:	beq.w	13fbc <_dtoa_r+0xdbc>
   13b52:	cmp.w	sl, #0
   13b56:	blt.w	13d20 <_dtoa_r+0xb20>
   13b5a:	bne.n	13b68 <_dtoa_r+0x968>
   13b5c:	ldr	r1, [sp, #0]
   13b5e:	cbnz	r1, 13b68 <_dtoa_r+0x968>
   13b60:	ldr	r1, [sp, #40]	; 0x28
   13b62:	cmp	r1, #0
   13b64:	beq.w	13d20 <_dtoa_r+0xb20>
   13b68:	cmp	r2, #0
   13b6a:	bgt.w	13e0a <_dtoa_r+0xc0a>
   13b6e:	ldr	r2, [sp, #32]
   13b70:	strb	r3, [r7, #0]
   13b72:	add.w	sl, r7, #1
   13b76:	cmp	r7, r2
   13b78:	mov	r5, sl
   13b7a:	beq.w	13e22 <_dtoa_r+0xc22>
   13b7e:	mov	r1, r4
   13b80:	movs	r3, #0
   13b82:	movs	r2, #10
   13b84:	mov	r0, r9
   13b86:	bl	14444 <__multadd>
   13b8a:	cmp	r6, r8
   13b8c:	mov	r4, r0
   13b8e:	mov	r1, r6
   13b90:	mov.w	r3, #0
   13b94:	mov.w	r2, #10
   13b98:	mov	r0, r9
   13b9a:	beq.n	13bb4 <_dtoa_r+0x9b4>
   13b9c:	bl	14444 <__multadd>
   13ba0:	mov	r1, r8
   13ba2:	mov	r6, r0
   13ba4:	movs	r3, #0
   13ba6:	movs	r2, #10
   13ba8:	mov	r0, r9
   13baa:	bl	14444 <__multadd>
   13bae:	mov	r7, sl
   13bb0:	mov	r8, r0
   13bb2:	b.n	13afe <_dtoa_r+0x8fe>
   13bb4:	bl	14444 <__multadd>
   13bb8:	mov	r7, sl
   13bba:	mov	r6, r0
   13bbc:	mov	r8, r0
   13bbe:	b.n	13afe <_dtoa_r+0x8fe>
   13bc0:	mov	r1, r0
   13bc2:	mov	r0, r9
   13bc4:	str	r3, [sp, #20]
   13bc6:	bl	14430 <_Bfree>
   13bca:	movs	r2, #1
   13bcc:	ldr	r3, [sp, #20]
   13bce:	b.n	13b52 <_dtoa_r+0x952>
   13bd0:	ldr	r1, [sp, #24]
   13bd2:	mov	r0, r4
   13bd4:	bl	147f4 <__mcmp>
   13bd8:	cmp	r0, #0
   13bda:	bge.w	136dc <_dtoa_r+0x4dc>
   13bde:	mov	r1, r4
   13be0:	ldr	r4, [sp, #16]
   13be2:	movs	r3, #0
   13be4:	subs	r4, #1
   13be6:	movs	r2, #10
   13be8:	mov	r0, r9
   13bea:	str	r4, [sp, #16]
   13bec:	bl	14444 <__multadd>
   13bf0:	ldr	r3, [sp, #44]	; 0x2c
   13bf2:	mov	r4, r0
   13bf4:	cmp	r3, #0
   13bf6:	bne.w	13abc <_dtoa_r+0x8bc>
   13bfa:	ldr	r3, [sp, #56]	; 0x38
   13bfc:	cmp	r3, #0
   13bfe:	ble.w	13fdc <_dtoa_r+0xddc>
   13c02:	str	r3, [sp, #32]
   13c04:	b.n	136ec <_dtoa_r+0x4ec>
   13c06:	ldr	r4, [sp, #40]	; 0x28
   13c08:	b.n	13654 <_dtoa_r+0x454>
   13c0a:	ldr	r3, [sp, #0]
   13c0c:	cmp	r3, #2
   13c0e:	ble.w	136e4 <_dtoa_r+0x4e4>
   13c12:	ldr	r3, [sp, #32]
   13c14:	cmp	r3, #0
   13c16:	bne.w	13f54 <_dtoa_r+0xd54>
   13c1a:	ldr	r1, [sp, #24]
   13c1c:	movs	r2, #5
   13c1e:	mov	r0, r9
   13c20:	bl	14444 <__multadd>
   13c24:	mov	r1, r0
   13c26:	str	r0, [sp, #24]
   13c28:	mov	r0, r4
   13c2a:	bl	147f4 <__mcmp>
   13c2e:	cmp	r0, #0
   13c30:	str	r4, [sp, #40]	; 0x28
   13c32:	ble.w	13a62 <_dtoa_r+0x862>
   13c36:	ldr	r2, [sp, #16]
   13c38:	ldr	r1, [sp, #36]	; 0x24
   13c3a:	movs	r3, #49	; 0x31
   13c3c:	adds	r2, #1
   13c3e:	str	r2, [sp, #16]
   13c40:	strb	r3, [r1, #0]
   13c42:	adds	r5, r1, #1
   13c44:	b.n	13a6a <_dtoa_r+0x86a>
   13c46:	ldr	r2, [sp, #16]
   13c48:	adds	r2, #1
   13c4a:	str	r2, [sp, #16]
   13c4c:	ldr	r2, [sp, #36]	; 0x24
   13c4e:	movs	r3, #49	; 0x31
   13c50:	strb	r3, [r2, #0]
   13c52:	b.n	1376e <_dtoa_r+0x56e>
   13c54:	movs	r3, #1
   13c56:	str	r3, [sp, #44]	; 0x2c
   13c58:	b.n	13800 <_dtoa_r+0x600>
   13c5a:	ldr.w	r9, [sp, #20]
   13c5e:	b.n	13596 <_dtoa_r+0x396>
   13c60:	cmp.w	sl, #0
   13c64:	bne.w	1367a <_dtoa_r+0x47a>
   13c68:	ubfx	r3, fp, #0, #20
   13c6c:	cmp	r3, #0
   13c6e:	bne.w	13eee <_dtoa_r+0xcee>
   13c72:	bic.w	r7, fp, #2147483648	; 0x80000000
   13c76:	lsrs	r7, r7, #20
   13c78:	lsls	r7, r7, #20
   13c7a:	cbz	r7, 13c88 <_dtoa_r+0xa88>
   13c7c:	ldr	r3, [sp, #28]
   13c7e:	adds	r3, #1
   13c80:	str	r3, [sp, #28]
   13c82:	add.w	r8, r8, #1
   13c86:	movs	r7, #1
   13c88:	ldr	r3, [sp, #48]	; 0x30
   13c8a:	movs	r0, #1
   13c8c:	cmp	r3, #0
   13c8e:	beq.w	1368e <_dtoa_r+0x48e>
   13c92:	b.n	1367c <_dtoa_r+0x47c>
   13c94:	mov	r0, sl
   13c96:	bl	fdf0 <__aeabi_i2d>
   13c9a:	mov	r2, r6
   13c9c:	mov	r3, r7
   13c9e:	bl	febc <__aeabi_dmul>
   13ca2:	movs	r2, #0
   13ca4:	ldr	r3, [pc, #764]	; (13fa4 <_dtoa_r+0xda4>)
   13ca6:	bl	fb58 <__adddf3>
   13caa:	mov	r4, r0
   13cac:	sub.w	r5, r1, #54525952	; 0x3400000
   13cb0:	mov	r0, r6
   13cb2:	mov	r1, r7
   13cb4:	movs	r2, #0
   13cb6:	ldr	r3, [pc, #752]	; (13fa8 <_dtoa_r+0xda8>)
   13cb8:	bl	fb54 <__aeabi_dsub>
   13cbc:	mov	r2, r4
   13cbe:	mov	r3, r5
   13cc0:	mov	r6, r0
   13cc2:	mov	r7, r1
   13cc4:	bl	103dc <__aeabi_dcmpgt>
   13cc8:	cmp	r0, #0
   13cca:	bne.w	13e2a <_dtoa_r+0xc2a>
   13cce:	mov	r2, r4
   13cd0:	add.w	r3, r5, #2147483648	; 0x80000000
   13cd4:	mov	r0, r6
   13cd6:	mov	r1, r7
   13cd8:	bl	103a0 <__aeabi_dcmplt>
   13cdc:	cmp	r0, #0
   13cde:	beq.n	13d76 <_dtoa_r+0xb76>
   13ce0:	movs	r3, #0
   13ce2:	str	r3, [sp, #24]
   13ce4:	mov	r6, r3
   13ce6:	b.n	13a62 <_dtoa_r+0x862>
   13ce8:	ldr	r0, [sp, #36]	; 0x24
   13cea:	b.w	13272 <_dtoa_r+0x72>
   13cee:	ldr	r3, [sp, #24]
   13cf0:	ldr	r2, [sp, #48]	; 0x30
   13cf2:	str	r7, [sp, #24]
   13cf4:	subs	r3, r7, r3
   13cf6:	add	r2, r3
   13cf8:	str	r2, [sp, #48]	; 0x30
   13cfa:	movs	r7, #0
   13cfc:	b.n	135da <_dtoa_r+0x3da>
   13cfe:	vldr	d7, [sp, #64]	; 0x40
   13d02:	mov.w	sl, #2
   13d06:	vstr	d7, [sp, #72]	; 0x48
   13d0a:	b.n	1388c <_dtoa_r+0x68c>
   13d0c:	mov	r4, r3
   13d0e:	movs	r1, #0
   13d10:	str.w	r1, [r9, #68]	; 0x44
   13d14:	b.n	13838 <_dtoa_r+0x638>
   13d16:	movs	r4, #1
   13d18:	str	r4, [sp, #56]	; 0x38
   13d1a:	str	r4, [sp, #32]
   13d1c:	str	r4, [sp, #20]
   13d1e:	b.n	13d0e <_dtoa_r+0xb0e>
   13d20:	cmp	r2, #0
   13d22:	mov	sl, r3
   13d24:	ble.n	13d4a <_dtoa_r+0xb4a>
   13d26:	mov	r1, r4
   13d28:	movs	r2, #1
   13d2a:	mov	r0, r9
   13d2c:	bl	14744 <__lshift>
   13d30:	ldr	r1, [sp, #24]
   13d32:	mov	r4, r0
   13d34:	bl	147f4 <__mcmp>
   13d38:	cmp	r0, #0
   13d3a:	ble.w	13fce <_dtoa_r+0xdce>
   13d3e:	cmp.w	sl, #57	; 0x39
   13d42:	beq.w	13f58 <_dtoa_r+0xd58>
   13d46:	add.w	sl, r5, #49	; 0x31
   13d4a:	mov	fp, r6
   13d4c:	strb.w	sl, [r7]
   13d50:	adds	r5, r7, #1
   13d52:	mov	r6, r8
   13d54:	str	r4, [sp, #40]	; 0x28
   13d56:	b.n	1376e <_dtoa_r+0x56e>
   13d58:	bne.n	13d64 <_dtoa_r+0xb64>
   13d5a:	tst.w	sl, #1
   13d5e:	beq.n	13d64 <_dtoa_r+0xb64>
   13d60:	b.n	1374e <_dtoa_r+0x54e>
   13d62:	mov	r5, r2
   13d64:	ldrb.w	r3, [r5, #-1]
   13d68:	cmp	r3, #48	; 0x30
   13d6a:	add.w	r2, r5, #4294967295
   13d6e:	beq.n	13d62 <_dtoa_r+0xb62>
   13d70:	b.n	1376e <_dtoa_r+0x56e>
   13d72:	ldr.w	r8, [sp, #72]	; 0x48
   13d76:	ldrd	sl, fp, [sp, #64]	; 0x40
   13d7a:	b.w	13414 <_dtoa_r+0x214>
   13d7e:	ldr	r1, [sp, #36]	; 0x24
   13d80:	movs	r2, #48	; 0x30
   13d82:	strb	r2, [r1, #0]
   13d84:	ldr	r2, [sp, #16]
   13d86:	ldrb.w	r4, [r5, #-1]
   13d8a:	adds	r2, #1
   13d8c:	str	r2, [sp, #16]
   13d8e:	b.n	13592 <_dtoa_r+0x392>
   13d90:	ldr	r3, [sp, #16]
   13d92:	negs	r4, r3
   13d94:	cmp	r4, #0
   13d96:	beq.w	13f00 <_dtoa_r+0xd00>
   13d9a:	ldr	r3, [pc, #528]	; (13fac <_dtoa_r+0xdac>)
   13d9c:	and.w	r2, r4, #15
   13da0:	add.w	r3, r3, r2, lsl #3
   13da4:	ldrd	r2, r3, [r3]
   13da8:	ldrd	r0, r1, [sp, #64]	; 0x40
   13dac:	bl	febc <__aeabi_dmul>
   13db0:	asrs	r4, r4, #4
   13db2:	mov	r6, r0
   13db4:	mov	r7, r1
   13db6:	beq.w	13fe6 <_dtoa_r+0xde6>
   13dba:	ldr	r5, [pc, #500]	; (13fb0 <_dtoa_r+0xdb0>)
   13dbc:	mov.w	sl, #2
   13dc0:	lsls	r2, r4, #31
   13dc2:	bpl.n	13dd8 <_dtoa_r+0xbd8>
   13dc4:	mov	r0, r6
   13dc6:	mov	r1, r7
   13dc8:	ldrd	r2, r3, [r5]
   13dcc:	bl	febc <__aeabi_dmul>
   13dd0:	add.w	sl, sl, #1
   13dd4:	mov	r6, r0
   13dd6:	mov	r7, r1
   13dd8:	asrs	r4, r4, #1
   13dda:	add.w	r5, r5, #8
   13dde:	bne.n	13dc0 <_dtoa_r+0xbc0>
   13de0:	b.n	138c0 <_dtoa_r+0x6c0>
   13de2:	ldr	r1, [r6, #4]
   13de4:	mov	r0, r9
   13de6:	bl	143e4 <_Balloc>
   13dea:	ldr	r3, [r6, #16]
   13dec:	adds	r2, r3, #2
   13dee:	mov	r5, r0
   13df0:	lsls	r2, r2, #2
   13df2:	add.w	r1, r6, #12
   13df6:	adds	r0, #12
   13df8:	bl	db90 <memcpy>
   13dfc:	mov	r1, r5
   13dfe:	movs	r2, #1
   13e00:	mov	r0, r9
   13e02:	bl	14744 <__lshift>
   13e06:	mov	r8, r0
   13e08:	b.n	13aec <_dtoa_r+0x8ec>
   13e0a:	cmp	r3, #57	; 0x39
   13e0c:	beq.w	13f58 <_dtoa_r+0xd58>
   13e10:	add.w	sl, r3, #1
   13e14:	mov	fp, r6
   13e16:	strb.w	sl, [r7]
   13e1a:	adds	r5, r7, #1
   13e1c:	mov	r6, r8
   13e1e:	str	r4, [sp, #40]	; 0x28
   13e20:	b.n	1376e <_dtoa_r+0x56e>
   13e22:	mov	fp, r6
   13e24:	mov	sl, r3
   13e26:	mov	r6, r8
   13e28:	b.n	13736 <_dtoa_r+0x536>
   13e2a:	movs	r3, #0
   13e2c:	str	r3, [sp, #24]
   13e2e:	mov	r6, r3
   13e30:	b.n	13c36 <_dtoa_r+0xa36>
   13e32:	ldr	r3, [sp, #72]	; 0x48
   13e34:	ldr	r1, [pc, #372]	; (13fac <_dtoa_r+0xdac>)
   13e36:	subs	r2, r3, #1
   13e38:	add.w	r1, r1, r2, lsl #3
   13e3c:	mov	r3, r5
   13e3e:	str	r2, [sp, #92]	; 0x5c
   13e40:	ldrd	r0, r1, [r1]
   13e44:	mov	r2, r4
   13e46:	bl	febc <__aeabi_dmul>
   13e4a:	strd	r0, r1, [sp, #80]	; 0x50
   13e4e:	mov	r1, r7
   13e50:	mov	r0, r6
   13e52:	bl	1041c <__aeabi_d2iz>
   13e56:	mov	r4, r0
   13e58:	bl	fdf0 <__aeabi_i2d>
   13e5c:	mov	r3, r1
   13e5e:	mov	r2, r0
   13e60:	mov	r1, r7
   13e62:	mov	r0, r6
   13e64:	bl	fb54 <__aeabi_dsub>
   13e68:	ldr	r3, [sp, #72]	; 0x48
   13e6a:	mov	r7, r1
   13e6c:	ldr	r1, [sp, #36]	; 0x24
   13e6e:	adds	r4, #48	; 0x30
   13e70:	cmp	r3, #1
   13e72:	mov	r6, r0
   13e74:	strb	r4, [r1, #0]
   13e76:	add.w	r5, r1, #1
   13e7a:	beq.n	13ebe <_dtoa_r+0xcbe>
   13e7c:	ldr	r3, [sp, #72]	; 0x48
   13e7e:	ldr	r2, [sp, #36]	; 0x24
   13e80:	add	r3, r2
   13e82:	mov	sl, r3
   13e84:	mov	fp, r5
   13e86:	movs	r2, #0
   13e88:	ldr	r3, [pc, #296]	; (13fb4 <_dtoa_r+0xdb4>)
   13e8a:	mov	r0, r6
   13e8c:	mov	r1, r7
   13e8e:	bl	febc <__aeabi_dmul>
   13e92:	mov	r7, r1
   13e94:	mov	r6, r0
   13e96:	bl	1041c <__aeabi_d2iz>
   13e9a:	mov	r4, r0
   13e9c:	bl	fdf0 <__aeabi_i2d>
   13ea0:	adds	r4, #48	; 0x30
   13ea2:	mov	r2, r0
   13ea4:	mov	r3, r1
   13ea6:	mov	r0, r6
   13ea8:	mov	r1, r7
   13eaa:	bl	fb54 <__aeabi_dsub>
   13eae:	strb.w	r4, [fp], #1
   13eb2:	cmp	sl, fp
   13eb4:	mov	r6, r0
   13eb6:	mov	r7, r1
   13eb8:	bne.n	13e86 <_dtoa_r+0xc86>
   13eba:	ldr	r3, [sp, #92]	; 0x5c
   13ebc:	add	r5, r3
   13ebe:	movs	r2, #0
   13ec0:	ldr	r3, [pc, #244]	; (13fb8 <_dtoa_r+0xdb8>)
   13ec2:	ldrd	r0, r1, [sp, #80]	; 0x50
   13ec6:	bl	fb58 <__adddf3>
   13eca:	mov	r2, r6
   13ecc:	mov	r3, r7
   13ece:	bl	103a0 <__aeabi_dcmplt>
   13ed2:	cmp	r0, #0
   13ed4:	beq.n	13f68 <_dtoa_r+0xd68>
   13ed6:	ldr	r3, [sp, #88]	; 0x58
   13ed8:	str	r3, [sp, #16]
   13eda:	ldrb.w	r4, [r5, #-1]
   13ede:	b.w	1357a <_dtoa_r+0x37a>
   13ee2:	ldr	r3, [sp, #28]
   13ee4:	ldr	r2, [sp, #32]
   13ee6:	subs	r5, r3, r2
   13ee8:	movs	r3, #0
   13eea:	b.w	135e6 <_dtoa_r+0x3e6>
   13eee:	movs	r7, #0
   13ef0:	b.n	13c88 <_dtoa_r+0xa88>
   13ef2:	ldr	r3, [sp, #96]	; 0x60
   13ef4:	ldr	r7, [sp, #24]
   13ef6:	ldr	r5, [sp, #28]
   13ef8:	rsb	r3, r3, #54	; 0x36
   13efc:	b.w	135e6 <_dtoa_r+0x3e6>
   13f00:	ldrd	r6, r7, [sp, #64]	; 0x40
   13f04:	mov.w	sl, #2
   13f08:	b.n	138c0 <_dtoa_r+0x6c0>
   13f0a:	ldr	r3, [sp, #32]
   13f0c:	cmp	r3, #0
   13f0e:	beq.w	13c94 <_dtoa_r+0xa94>
   13f12:	ldr	r3, [sp, #56]	; 0x38
   13f14:	cmp	r3, #0
   13f16:	ble.w	13d76 <_dtoa_r+0xb76>
   13f1a:	movs	r2, #0
   13f1c:	ldr	r3, [pc, #148]	; (13fb4 <_dtoa_r+0xdb4>)
   13f1e:	mov	r0, r6
   13f20:	mov	r1, r7
   13f22:	bl	febc <__aeabi_dmul>
   13f26:	mov	r6, r0
   13f28:	mov	r7, r1
   13f2a:	add.w	r0, sl, #1
   13f2e:	bl	fdf0 <__aeabi_i2d>
   13f32:	mov	r2, r6
   13f34:	mov	r3, r7
   13f36:	bl	febc <__aeabi_dmul>
   13f3a:	movs	r2, #0
   13f3c:	ldr	r3, [pc, #100]	; (13fa4 <_dtoa_r+0xda4>)
   13f3e:	bl	fb58 <__adddf3>
   13f42:	ldr	r2, [sp, #16]
   13f44:	ldr	r3, [sp, #56]	; 0x38
   13f46:	str	r3, [sp, #72]	; 0x48
   13f48:	subs	r2, #1
   13f4a:	mov	r4, r0
   13f4c:	sub.w	r5, r1, #54525952	; 0x3400000
   13f50:	str	r2, [sp, #88]	; 0x58
   13f52:	b.n	13902 <_dtoa_r+0x702>
   13f54:	str	r4, [sp, #40]	; 0x28
   13f56:	b.n	13a62 <_dtoa_r+0x862>
   13f58:	movs	r2, #57	; 0x39
   13f5a:	mov	fp, r6
   13f5c:	str	r4, [sp, #40]	; 0x28
   13f5e:	mov	r6, r8
   13f60:	strb	r2, [r7, #0]
   13f62:	adds	r5, r7, #1
   13f64:	b.w	13752 <_dtoa_r+0x552>
   13f68:	ldrd	r2, r3, [sp, #80]	; 0x50
   13f6c:	movs	r0, #0
   13f6e:	ldr	r1, [pc, #72]	; (13fb8 <_dtoa_r+0xdb8>)
   13f70:	bl	fb54 <__aeabi_dsub>
   13f74:	mov	r2, r6
   13f76:	mov	r3, r7
   13f78:	bl	103dc <__aeabi_dcmpgt>
   13f7c:	cbnz	r0, 13f82 <_dtoa_r+0xd82>
   13f7e:	b.n	13d76 <_dtoa_r+0xb76>
   13f80:	mov	r5, r2
   13f82:	ldrb.w	r3, [r5, #-1]
   13f86:	cmp	r3, #48	; 0x30
   13f88:	add.w	r2, r5, #4294967295
   13f8c:	beq.n	13f80 <_dtoa_r+0xd80>
   13f8e:	b.n	13a04 <_dtoa_r+0x804>
   13f90:	ldr	r3, [sp, #88]	; 0x58
   13f92:	str	r3, [sp, #16]
   13f94:	b.w	1357a <_dtoa_r+0x37a>
   13f98:	cmp.w	sl, #0
   13f9c:	bne.w	13a98 <_dtoa_r+0x898>
   13fa0:	b.n	13c68 <_dtoa_r+0xa68>
   13fa2:	nop
   13fa4:	.word	0x401c0000
   13fa8:	.word	0x40140000
   13fac:	.word	0x000156d8
   13fb0:	.word	0x000157a0
   13fb4:	.word	0x40240000
   13fb8:	.word	0x3fe00000
   13fbc:	cmp	r3, #57	; 0x39
   13fbe:	mov	fp, sl
   13fc0:	mov	sl, r3
   13fc2:	beq.n	13f58 <_dtoa_r+0xd58>
   13fc4:	cmp.w	fp, #0
   13fc8:	bgt.w	13d46 <_dtoa_r+0xb46>
   13fcc:	b.n	13d4a <_dtoa_r+0xb4a>
   13fce:	bne.w	13d4a <_dtoa_r+0xb4a>
   13fd2:	tst.w	sl, #1
   13fd6:	beq.w	13d4a <_dtoa_r+0xb4a>
   13fda:	b.n	13d3e <_dtoa_r+0xb3e>
   13fdc:	ldr	r3, [sp, #0]
   13fde:	cmp	r3, #2
   13fe0:	bgt.n	1402e <_dtoa_r+0xe2e>
   13fe2:	ldr	r3, [sp, #56]	; 0x38
   13fe4:	b.n	13c02 <_dtoa_r+0xa02>
   13fe6:	mov.w	sl, #2
   13fea:	b.n	138c0 <_dtoa_r+0x6c0>
   13fec:	ldr	r3, [sp, #0]
   13fee:	cmp	r3, #2
   13ff0:	bgt.n	1402e <_dtoa_r+0xe2e>
   13ff2:	ldr	r3, [sp, #56]	; 0x38
   13ff4:	b.n	13ad2 <_dtoa_r+0x8d2>
   13ff6:	movs	r4, #0
   13ff8:	str.w	r4, [r9, #68]	; 0x44
   13ffc:	mov	r1, r4
   13ffe:	mov	r0, r9
   14000:	bl	143e4 <_Balloc>
   14004:	mov.w	r3, #4294967295
   14008:	str	r3, [sp, #32]
   1400a:	str	r3, [sp, #56]	; 0x38
   1400c:	movs	r3, #1
   1400e:	str	r0, [sp, #36]	; 0x24
   14010:	str	r4, [sp, #20]
   14012:	str.w	r0, [r9, #64]	; 0x40
   14016:	str	r3, [sp, #44]	; 0x2c
   14018:	b.w	13414 <_dtoa_r+0x214>
   1401c:	beq.w	136b0 <_dtoa_r+0x4b0>
   14020:	rsb	r0, r0, #60	; 0x3c
   14024:	b.w	136a6 <_dtoa_r+0x4a6>
   14028:	movs	r6, #1
   1402a:	b.w	133a6 <_dtoa_r+0x1a6>
   1402e:	ldr	r3, [sp, #56]	; 0x38
   14030:	str	r3, [sp, #32]
   14032:	b.n	13c12 <_dtoa_r+0xa12>

00014034 <fcvtbuf>:
   14034:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14038:	vpush	{d8}
   1403c:	vmov.f32	s16, s0
   14040:	vmov.f32	s17, s1
   14044:	ldr	r5, [pc, #224]	; (14128 <fcvtbuf+0xf4>)
   14046:	sub	sp, #20
   14048:	ldr	r7, [r5, #0]
   1404a:	mov	r4, r0
   1404c:	mov	r6, r1
   1404e:	mov	r8, r2
   14050:	mov	r5, r3
   14052:	cmp	r3, #0
   14054:	beq.n	140f2 <fcvtbuf+0xbe>
   14056:	movs	r2, #0
   14058:	ldr	r3, [pc, #208]	; (1412c <fcvtbuf+0xf8>)
   1405a:	vmov	r0, r1, d8
   1405e:	bl	103a0 <__aeabi_dcmplt>
   14062:	cbnz	r0, 140c4 <fcvtbuf+0x90>
   14064:	vmov.f32	s0, s16
   14068:	vmov.f32	s1, s17
   1406c:	add	r3, sp, #12
   1406e:	str	r3, [sp, #4]
   14070:	str.w	r8, [sp]
   14074:	mov	r0, r7
   14076:	mov	r3, r6
   14078:	mov	r2, r4
   1407a:	movs	r1, #3
   1407c:	bl	13200 <_dtoa_r>
   14080:	ldr	r3, [sp, #12]
   14082:	ldr	r1, [r6, #0]
   14084:	cmp	r0, r3
   14086:	rsb	r1, r1, #0
   1408a:	bcs.n	14100 <fcvtbuf+0xcc>
   1408c:	subs	r1, r1, r5
   1408e:	mov	r3, r5
   14090:	ldrb.w	r2, [r0], #1
   14094:	strb.w	r2, [r3], #1
   14098:	ldr	r2, [sp, #12]
   1409a:	cmp	r2, r0
   1409c:	add.w	r6, r3, r1
   140a0:	bhi.n	14090 <fcvtbuf+0x5c>
   140a2:	cmp	r4, r6
   140a4:	ble.n	14106 <fcvtbuf+0xd2>
   140a6:	subs	r2, r4, r6
   140a8:	add	r2, r3
   140aa:	movs	r1, #48	; 0x30
   140ac:	strb.w	r1, [r3], #1
   140b0:	cmp	r2, r3
   140b2:	bne.n	140ac <fcvtbuf+0x78>
   140b4:	movs	r3, #0
   140b6:	strb	r3, [r2, #0]
   140b8:	mov	r0, r5
   140ba:	add	sp, #20
   140bc:	vpop	{d8}
   140c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   140c4:	movs	r2, #0
   140c6:	ldr	r3, [pc, #104]	; (14130 <fcvtbuf+0xfc>)
   140c8:	vmov	r0, r1, d8
   140cc:	bl	103dc <__aeabi_dcmpgt>
   140d0:	cmp	r0, #0
   140d2:	beq.n	14064 <fcvtbuf+0x30>
   140d4:	vmov.f32	s0, s16
   140d8:	vmov.f32	s1, s17
   140dc:	add	r3, sp, #12
   140de:	str	r3, [sp, #4]
   140e0:	str.w	r8, [sp]
   140e4:	mov	r0, r7
   140e6:	mov	r3, r6
   140e8:	mov	r2, r4
   140ea:	movs	r1, #2
   140ec:	bl	13200 <_dtoa_r>
   140f0:	b.n	14080 <fcvtbuf+0x4c>
   140f2:	ldr	r2, [r7, #80]	; 0x50
   140f4:	add.w	r3, r0, #35	; 0x23
   140f8:	cmp	r2, r3
   140fa:	ble.n	1410a <fcvtbuf+0xd6>
   140fc:	ldr	r5, [r7, #84]	; 0x54
   140fe:	b.n	14056 <fcvtbuf+0x22>
   14100:	mov	r6, r1
   14102:	mov	r3, r5
   14104:	b.n	140a2 <fcvtbuf+0x6e>
   14106:	mov	r2, r3
   14108:	b.n	140b4 <fcvtbuf+0x80>
   1410a:	add.w	r9, r0, #36	; 0x24
   1410e:	mov	r2, r9
   14110:	ldr	r1, [r7, #84]	; 0x54
   14112:	mov	r0, r7
   14114:	bl	11140 <_realloc_r>
   14118:	mov	r5, r0
   1411a:	cmp	r0, #0
   1411c:	beq.n	140b8 <fcvtbuf+0x84>
   1411e:	str.w	r9, [r7, #80]	; 0x50
   14122:	str	r0, [r7, #84]	; 0x54
   14124:	b.n	14056 <fcvtbuf+0x22>
   14126:	nop
   14128:	.word	0x1fff1098
   1412c:	.word	0x3ff00000
   14130:	.word	0xbff00000

00014134 <__libc_fini_array>:
   14134:	push	{r3, r4, r5, lr}
   14136:	ldr	r5, [pc, #28]	; (14154 <__libc_fini_array+0x20>)
   14138:	ldr	r4, [pc, #28]	; (14158 <__libc_fini_array+0x24>)
   1413a:	subs	r4, r5, r4
   1413c:	asrs	r4, r4, #2
   1413e:	beq.n	1414c <__libc_fini_array+0x18>
   14140:	subs	r4, #1
   14142:	ldr.w	r3, [r5, #-4]!
   14146:	blx	r3
   14148:	cmp	r4, #0
   1414a:	bne.n	14140 <__libc_fini_array+0xc>
   1414c:	ldmia.w	sp!, {r3, r4, r5, lr}
   14150:	b.w	15834 <__init_array_end>
	...

0001415c <_malloc_trim_r>:
   1415c:	push	{r3, r4, r5, r6, r7, lr}
   1415e:	ldr	r7, [pc, #140]	; (141ec <_malloc_trim_r+0x90>)
   14160:	mov	r4, r1
   14162:	mov	r6, r0
   14164:	bl	11138 <__malloc_lock>
   14168:	ldr	r3, [r7, #8]
   1416a:	ldr	r5, [r3, #4]
   1416c:	bic.w	r5, r5, #3
   14170:	subs	r1, r5, r4
   14172:	addw	r1, r1, #4079	; 0xfef
   14176:	bic.w	r1, r1, #4080	; 0xff0
   1417a:	bic.w	r1, r1, #15
   1417e:	sub.w	r4, r1, #4096	; 0x1000
   14182:	cmp.w	r4, #4096	; 0x1000
   14186:	blt.n	14198 <_malloc_trim_r+0x3c>
   14188:	movs	r1, #0
   1418a:	mov	r0, r6
   1418c:	bl	11520 <_sbrk_r>
   14190:	ldr	r3, [r7, #8]
   14192:	add	r3, r5
   14194:	cmp	r0, r3
   14196:	beq.n	141a2 <_malloc_trim_r+0x46>
   14198:	mov	r0, r6
   1419a:	bl	1113c <__malloc_unlock>
   1419e:	movs	r0, #0
   141a0:	pop	{r3, r4, r5, r6, r7, pc}
   141a2:	negs	r1, r4
   141a4:	mov	r0, r6
   141a6:	bl	11520 <_sbrk_r>
   141aa:	adds	r0, #1
   141ac:	beq.n	141ca <_malloc_trim_r+0x6e>
   141ae:	ldr	r3, [pc, #64]	; (141f0 <_malloc_trim_r+0x94>)
   141b0:	ldr	r2, [r7, #8]
   141b2:	ldr	r1, [r3, #0]
   141b4:	subs	r5, r5, r4
   141b6:	orr.w	r5, r5, #1
   141ba:	mov	r0, r6
   141bc:	subs	r1, r1, r4
   141be:	str	r5, [r2, #4]
   141c0:	str	r1, [r3, #0]
   141c2:	bl	1113c <__malloc_unlock>
   141c6:	movs	r0, #1
   141c8:	pop	{r3, r4, r5, r6, r7, pc}
   141ca:	movs	r1, #0
   141cc:	mov	r0, r6
   141ce:	bl	11520 <_sbrk_r>
   141d2:	ldr	r2, [r7, #8]
   141d4:	subs	r3, r0, r2
   141d6:	cmp	r3, #15
   141d8:	ble.n	14198 <_malloc_trim_r+0x3c>
   141da:	ldr	r4, [pc, #24]	; (141f4 <_malloc_trim_r+0x98>)
   141dc:	ldr	r1, [pc, #16]	; (141f0 <_malloc_trim_r+0x94>)
   141de:	ldr	r4, [r4, #0]
   141e0:	orr.w	r3, r3, #1
   141e4:	subs	r0, r0, r4
   141e6:	str	r3, [r2, #4]
   141e8:	str	r0, [r1, #0]
   141ea:	b.n	14198 <_malloc_trim_r+0x3c>
   141ec:	.word	0x1fff1208
   141f0:	.word	0x20007174
   141f4:	.word	0x1fff1614

000141f8 <_free_r>:
   141f8:	cmp	r1, #0
   141fa:	beq.n	14288 <_free_r+0x90>
   141fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14200:	mov	r5, r1
   14202:	mov	r8, r0
   14204:	bl	11138 <__malloc_lock>
   14208:	ldr.w	r7, [r5, #-4]
   1420c:	ldr	r1, [pc, #424]	; (143b8 <_free_r+0x1c0>)
   1420e:	bic.w	r3, r7, #1
   14212:	sub.w	r4, r5, #8
   14216:	adds	r2, r4, r3
   14218:	ldr	r6, [r1, #8]
   1421a:	ldr	r0, [r2, #4]
   1421c:	cmp	r2, r6
   1421e:	bic.w	r0, r0, #3
   14222:	beq.n	142ea <_free_r+0xf2>
   14224:	lsls	r6, r7, #31
   14226:	str	r0, [r2, #4]
   14228:	bmi.n	14242 <_free_r+0x4a>
   1422a:	ldr.w	r7, [r5, #-8]
   1422e:	subs	r4, r4, r7
   14230:	add.w	lr, r1, #8
   14234:	ldr	r5, [r4, #8]
   14236:	cmp	r5, lr
   14238:	add	r3, r7
   1423a:	beq.n	1431c <_free_r+0x124>
   1423c:	ldr	r7, [r4, #12]
   1423e:	str	r7, [r5, #12]
   14240:	str	r5, [r7, #8]
   14242:	adds	r5, r2, r0
   14244:	ldr	r5, [r5, #4]
   14246:	lsls	r5, r5, #31
   14248:	bpl.n	142d0 <_free_r+0xd8>
   1424a:	orr.w	r2, r3, #1
   1424e:	str	r2, [r4, #4]
   14250:	str	r3, [r4, r3]
   14252:	cmp.w	r3, #512	; 0x200
   14256:	bcs.n	1428a <_free_r+0x92>
   14258:	lsrs	r3, r3, #3
   1425a:	adds	r2, r3, #1
   1425c:	ldr	r5, [r1, #4]
   1425e:	ldr.w	r7, [r1, r2, lsl #3]
   14262:	str	r7, [r4, #8]
   14264:	movs	r0, #1
   14266:	asrs	r3, r3, #2
   14268:	lsl.w	r3, r0, r3
   1426c:	add.w	r0, r1, r2, lsl #3
   14270:	orrs	r5, r3
   14272:	subs	r0, #8
   14274:	str	r0, [r4, #12]
   14276:	str	r5, [r1, #4]
   14278:	str.w	r4, [r1, r2, lsl #3]
   1427c:	str	r4, [r7, #12]
   1427e:	mov	r0, r8
   14280:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14284:	b.w	1113c <__malloc_unlock>
   14288:	bx	lr
   1428a:	lsrs	r2, r3, #9
   1428c:	cmp	r2, #4
   1428e:	bhi.n	14338 <_free_r+0x140>
   14290:	lsrs	r2, r3, #6
   14292:	add.w	r7, r2, #57	; 0x39
   14296:	lsls	r7, r7, #1
   14298:	add.w	r5, r2, #56	; 0x38
   1429c:	add.w	r0, r1, r7, lsl #2
   142a0:	ldr.w	r2, [r1, r7, lsl #2]
   142a4:	ldr	r1, [pc, #272]	; (143b8 <_free_r+0x1c0>)
   142a6:	subs	r0, #8
   142a8:	cmp	r0, r2
   142aa:	beq.n	14348 <_free_r+0x150>
   142ac:	ldr	r1, [r2, #4]
   142ae:	bic.w	r1, r1, #3
   142b2:	cmp	r3, r1
   142b4:	bcs.n	142bc <_free_r+0xc4>
   142b6:	ldr	r2, [r2, #8]
   142b8:	cmp	r0, r2
   142ba:	bne.n	142ac <_free_r+0xb4>
   142bc:	ldr	r0, [r2, #12]
   142be:	str	r0, [r4, #12]
   142c0:	str	r2, [r4, #8]
   142c2:	str	r4, [r0, #8]
   142c4:	str	r4, [r2, #12]
   142c6:	mov	r0, r8
   142c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   142cc:	b.w	1113c <__malloc_unlock>
   142d0:	ldr	r5, [r2, #8]
   142d2:	ldr	r7, [pc, #232]	; (143bc <_free_r+0x1c4>)
   142d4:	cmp	r5, r7
   142d6:	add	r3, r0
   142d8:	beq.n	1435a <_free_r+0x162>
   142da:	ldr	r0, [r2, #12]
   142dc:	str	r0, [r5, #12]
   142de:	orr.w	r2, r3, #1
   142e2:	str	r5, [r0, #8]
   142e4:	str	r2, [r4, #4]
   142e6:	str	r3, [r4, r3]
   142e8:	b.n	14252 <_free_r+0x5a>
   142ea:	lsls	r7, r7, #31
   142ec:	add	r3, r0
   142ee:	bmi.n	14300 <_free_r+0x108>
   142f0:	ldr.w	r2, [r5, #-8]
   142f4:	subs	r4, r4, r2
   142f6:	add	r3, r2
   142f8:	ldr	r0, [r4, #8]
   142fa:	ldr	r2, [r4, #12]
   142fc:	str	r2, [r0, #12]
   142fe:	str	r0, [r2, #8]
   14300:	ldr	r2, [pc, #188]	; (143c0 <_free_r+0x1c8>)
   14302:	ldr	r2, [r2, #0]
   14304:	orr.w	r0, r3, #1
   14308:	cmp	r3, r2
   1430a:	str	r0, [r4, #4]
   1430c:	str	r4, [r1, #8]
   1430e:	bcc.n	1427e <_free_r+0x86>
   14310:	ldr	r3, [pc, #176]	; (143c4 <_free_r+0x1cc>)
   14312:	mov	r0, r8
   14314:	ldr	r1, [r3, #0]
   14316:	bl	1415c <_malloc_trim_r>
   1431a:	b.n	1427e <_free_r+0x86>
   1431c:	adds	r1, r2, r0
   1431e:	ldr	r1, [r1, #4]
   14320:	lsls	r1, r1, #31
   14322:	bmi.n	143ae <_free_r+0x1b6>
   14324:	ldr	r1, [r2, #8]
   14326:	ldr	r2, [r2, #12]
   14328:	str	r2, [r1, #12]
   1432a:	add	r3, r0
   1432c:	orr.w	r0, r3, #1
   14330:	str	r1, [r2, #8]
   14332:	str	r0, [r4, #4]
   14334:	str	r3, [r4, r3]
   14336:	b.n	1427e <_free_r+0x86>
   14338:	cmp	r2, #20
   1433a:	bhi.n	1436c <_free_r+0x174>
   1433c:	add.w	r7, r2, #92	; 0x5c
   14340:	lsls	r7, r7, #1
   14342:	add.w	r5, r2, #91	; 0x5b
   14346:	b.n	1429c <_free_r+0xa4>
   14348:	asrs	r2, r5, #2
   1434a:	ldr	r3, [r1, #4]
   1434c:	movs	r5, #1
   1434e:	lsl.w	r2, r5, r2
   14352:	orrs	r3, r2
   14354:	str	r3, [r1, #4]
   14356:	mov	r2, r0
   14358:	b.n	142be <_free_r+0xc6>
   1435a:	orr.w	r2, r3, #1
   1435e:	str	r4, [r1, #20]
   14360:	str	r4, [r1, #16]
   14362:	str	r5, [r4, #12]
   14364:	str	r5, [r4, #8]
   14366:	str	r2, [r4, #4]
   14368:	str	r3, [r4, r3]
   1436a:	b.n	1427e <_free_r+0x86>
   1436c:	cmp	r2, #84	; 0x54
   1436e:	bhi.n	1437e <_free_r+0x186>
   14370:	lsrs	r2, r3, #12
   14372:	add.w	r7, r2, #111	; 0x6f
   14376:	lsls	r7, r7, #1
   14378:	add.w	r5, r2, #110	; 0x6e
   1437c:	b.n	1429c <_free_r+0xa4>
   1437e:	cmp.w	r2, #340	; 0x154
   14382:	bhi.n	14392 <_free_r+0x19a>
   14384:	lsrs	r2, r3, #15
   14386:	add.w	r7, r2, #120	; 0x78
   1438a:	lsls	r7, r7, #1
   1438c:	add.w	r5, r2, #119	; 0x77
   14390:	b.n	1429c <_free_r+0xa4>
   14392:	movw	r0, #1364	; 0x554
   14396:	cmp	r2, r0
   14398:	bhi.n	143a8 <_free_r+0x1b0>
   1439a:	lsrs	r2, r3, #18
   1439c:	add.w	r7, r2, #125	; 0x7d
   143a0:	lsls	r7, r7, #1
   143a2:	add.w	r5, r2, #124	; 0x7c
   143a6:	b.n	1429c <_free_r+0xa4>
   143a8:	movs	r7, #254	; 0xfe
   143aa:	movs	r5, #126	; 0x7e
   143ac:	b.n	1429c <_free_r+0xa4>
   143ae:	orr.w	r2, r3, #1
   143b2:	str	r2, [r4, #4]
   143b4:	str	r3, [r4, r3]
   143b6:	b.n	1427e <_free_r+0x86>
   143b8:	.word	0x1fff1208
   143bc:	.word	0x1fff1210
   143c0:	.word	0x1fff1610
   143c4:	.word	0x20007170

000143c8 <_localeconv_r>:
   143c8:	ldr	r2, [pc, #16]	; (143dc <_localeconv_r+0x14>)
   143ca:	ldr	r3, [pc, #20]	; (143e0 <_localeconv_r+0x18>)
   143cc:	ldr	r2, [r2, #0]
   143ce:	ldr	r0, [r2, #52]	; 0x34
   143d0:	cmp	r0, #0
   143d2:	it	eq
   143d4:	moveq	r0, r3
   143d6:	adds	r0, #240	; 0xf0
   143d8:	bx	lr
   143da:	nop
   143dc:	.word	0x1fff1098
   143e0:	.word	0x1fff109c

000143e4 <_Balloc>:
   143e4:	ldr	r3, [r0, #76]	; 0x4c
   143e6:	push	{r4, r5, r6, lr}
   143e8:	mov	r5, r0
   143ea:	mov	r4, r1
   143ec:	cbz	r3, 14402 <_Balloc+0x1e>
   143ee:	ldr.w	r0, [r3, r4, lsl #2]
   143f2:	cbz	r0, 14416 <_Balloc+0x32>
   143f4:	ldr	r2, [r0, #0]
   143f6:	str.w	r2, [r3, r4, lsl #2]
   143fa:	movs	r3, #0
   143fc:	str	r3, [r0, #16]
   143fe:	str	r3, [r0, #12]
   14400:	pop	{r4, r5, r6, pc}
   14402:	movs	r2, #33	; 0x21
   14404:	movs	r1, #4
   14406:	bl	10824 <_calloc_r>
   1440a:	str	r0, [r5, #76]	; 0x4c
   1440c:	mov	r3, r0
   1440e:	cmp	r0, #0
   14410:	bne.n	143ee <_Balloc+0xa>
   14412:	movs	r0, #0
   14414:	pop	{r4, r5, r6, pc}
   14416:	movs	r1, #1
   14418:	lsl.w	r6, r1, r4
   1441c:	adds	r2, r6, #5
   1441e:	mov	r0, r5
   14420:	lsls	r2, r2, #2
   14422:	bl	10824 <_calloc_r>
   14426:	cmp	r0, #0
   14428:	beq.n	14412 <_Balloc+0x2e>
   1442a:	str	r4, [r0, #4]
   1442c:	str	r6, [r0, #8]
   1442e:	b.n	143fa <_Balloc+0x16>

00014430 <_Bfree>:
   14430:	cbz	r1, 14440 <_Bfree+0x10>
   14432:	ldr	r3, [r0, #76]	; 0x4c
   14434:	ldr	r2, [r1, #4]
   14436:	ldr.w	r0, [r3, r2, lsl #2]
   1443a:	str	r0, [r1, #0]
   1443c:	str.w	r1, [r3, r2, lsl #2]
   14440:	bx	lr
   14442:	nop

00014444 <__multadd>:
   14444:	push	{r4, r5, r6, r7, lr}
   14446:	ldr	r4, [r1, #16]
   14448:	sub	sp, #12
   1444a:	mov	r5, r1
   1444c:	mov	r6, r0
   1444e:	add.w	lr, r1, #20
   14452:	movs	r7, #0
   14454:	ldr.w	r0, [lr]
   14458:	uxth	r1, r0
   1445a:	mla	r1, r2, r1, r3
   1445e:	lsrs	r3, r1, #16
   14460:	lsrs	r0, r0, #16
   14462:	mla	r3, r2, r0, r3
   14466:	uxth	r1, r1
   14468:	adds	r7, #1
   1446a:	add.w	r1, r1, r3, lsl #16
   1446e:	cmp	r4, r7
   14470:	str.w	r1, [lr], #4
   14474:	mov.w	r3, r3, lsr #16
   14478:	bgt.n	14454 <__multadd+0x10>
   1447a:	cbz	r3, 1448c <__multadd+0x48>
   1447c:	ldr	r2, [r5, #8]
   1447e:	cmp	r4, r2
   14480:	bge.n	14492 <__multadd+0x4e>
   14482:	add.w	r2, r5, r4, lsl #2
   14486:	adds	r4, #1
   14488:	str	r3, [r2, #20]
   1448a:	str	r4, [r5, #16]
   1448c:	mov	r0, r5
   1448e:	add	sp, #12
   14490:	pop	{r4, r5, r6, r7, pc}
   14492:	ldr	r1, [r5, #4]
   14494:	str	r3, [sp, #4]
   14496:	adds	r1, #1
   14498:	mov	r0, r6
   1449a:	bl	143e4 <_Balloc>
   1449e:	ldr	r2, [r5, #16]
   144a0:	adds	r2, #2
   144a2:	add.w	r1, r5, #12
   144a6:	mov	r7, r0
   144a8:	lsls	r2, r2, #2
   144aa:	adds	r0, #12
   144ac:	bl	db90 <memcpy>
   144b0:	ldr	r2, [r6, #76]	; 0x4c
   144b2:	ldr	r1, [r5, #4]
   144b4:	ldr	r3, [sp, #4]
   144b6:	ldr.w	r0, [r2, r1, lsl #2]
   144ba:	str	r0, [r5, #0]
   144bc:	str.w	r5, [r2, r1, lsl #2]
   144c0:	mov	r5, r7
   144c2:	b.n	14482 <__multadd+0x3e>

000144c4 <__hi0bits>:
   144c4:	lsrs	r3, r0, #16
   144c6:	lsls	r3, r3, #16
   144c8:	cbnz	r3, 144f8 <__hi0bits+0x34>
   144ca:	lsls	r0, r0, #16
   144cc:	movs	r3, #16
   144ce:	tst.w	r0, #4278190080	; 0xff000000
   144d2:	itt	eq
   144d4:	lsleq	r0, r0, #8
   144d6:	addeq	r3, #8
   144d8:	tst.w	r0, #4026531840	; 0xf0000000
   144dc:	itt	eq
   144de:	lsleq	r0, r0, #4
   144e0:	addeq	r3, #4
   144e2:	tst.w	r0, #3221225472	; 0xc0000000
   144e6:	itt	eq
   144e8:	lsleq	r0, r0, #2
   144ea:	addeq	r3, #2
   144ec:	cmp	r0, #0
   144ee:	blt.n	14500 <__hi0bits+0x3c>
   144f0:	lsls	r2, r0, #1
   144f2:	bmi.n	144fc <__hi0bits+0x38>
   144f4:	movs	r0, #32
   144f6:	bx	lr
   144f8:	movs	r3, #0
   144fa:	b.n	144ce <__hi0bits+0xa>
   144fc:	adds	r0, r3, #1
   144fe:	bx	lr
   14500:	mov	r0, r3
   14502:	bx	lr

00014504 <__lo0bits>:
   14504:	ldr	r3, [r0, #0]
   14506:	ands.w	r2, r3, #7
   1450a:	beq.n	1451c <__lo0bits+0x18>
   1450c:	lsls	r1, r3, #31
   1450e:	bmi.n	14552 <__lo0bits+0x4e>
   14510:	lsls	r2, r3, #30
   14512:	bmi.n	14556 <__lo0bits+0x52>
   14514:	lsrs	r3, r3, #2
   14516:	str	r3, [r0, #0]
   14518:	movs	r0, #2
   1451a:	bx	lr
   1451c:	uxth	r1, r3
   1451e:	cbnz	r1, 14524 <__lo0bits+0x20>
   14520:	lsrs	r3, r3, #16
   14522:	movs	r2, #16
   14524:	tst.w	r3, #255	; 0xff
   14528:	itt	eq
   1452a:	lsreq	r3, r3, #8
   1452c:	addeq	r2, #8
   1452e:	lsls	r1, r3, #28
   14530:	itt	eq
   14532:	lsreq	r3, r3, #4
   14534:	addeq	r2, #4
   14536:	lsls	r1, r3, #30
   14538:	itt	eq
   1453a:	lsreq	r3, r3, #2
   1453c:	addeq	r2, #2
   1453e:	lsls	r1, r3, #31
   14540:	bmi.n	1454c <__lo0bits+0x48>
   14542:	lsrs	r3, r3, #1
   14544:	bne.n	1454a <__lo0bits+0x46>
   14546:	movs	r0, #32
   14548:	bx	lr
   1454a:	adds	r2, #1
   1454c:	str	r3, [r0, #0]
   1454e:	mov	r0, r2
   14550:	bx	lr
   14552:	movs	r0, #0
   14554:	bx	lr
   14556:	lsrs	r3, r3, #1
   14558:	str	r3, [r0, #0]
   1455a:	movs	r0, #1
   1455c:	bx	lr
   1455e:	nop

00014560 <__i2b>:
   14560:	push	{r4, lr}
   14562:	mov	r4, r1
   14564:	movs	r1, #1
   14566:	bl	143e4 <_Balloc>
   1456a:	movs	r2, #1
   1456c:	str	r4, [r0, #20]
   1456e:	str	r2, [r0, #16]
   14570:	pop	{r4, pc}
   14572:	nop

00014574 <__multiply>:
   14574:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14578:	ldr	r5, [r1, #16]
   1457a:	ldr	r7, [r2, #16]
   1457c:	cmp	r5, r7
   1457e:	sub	sp, #12
   14580:	mov	r4, r1
   14582:	mov	r6, r2
   14584:	bge.n	14590 <__multiply+0x1c>
   14586:	mov	r2, r5
   14588:	mov	r4, r6
   1458a:	mov	r5, r7
   1458c:	mov	r6, r1
   1458e:	mov	r7, r2
   14590:	ldr	r3, [r4, #8]
   14592:	ldr	r1, [r4, #4]
   14594:	add.w	r8, r5, r7
   14598:	cmp	r8, r3
   1459a:	it	gt
   1459c:	addgt	r1, #1
   1459e:	bl	143e4 <_Balloc>
   145a2:	add.w	ip, r0, #20
   145a6:	add.w	r9, ip, r8, lsl #2
   145aa:	cmp	ip, r9
   145ac:	str	r0, [sp, #0]
   145ae:	bcs.n	145bc <__multiply+0x48>
   145b0:	mov	r3, ip
   145b2:	movs	r1, #0
   145b4:	str.w	r1, [r3], #4
   145b8:	cmp	r9, r3
   145ba:	bhi.n	145b4 <__multiply+0x40>
   145bc:	add.w	r2, r6, #20
   145c0:	add.w	sl, r2, r7, lsl #2
   145c4:	add.w	r3, r4, #20
   145c8:	cmp	r2, sl
   145ca:	add.w	lr, r3, r5, lsl #2
   145ce:	bcs.n	1467a <__multiply+0x106>
   145d0:	str.w	r9, [sp, #4]
   145d4:	mov	r9, r3
   145d6:	ldr.w	r3, [r2], #4
   145da:	uxth.w	fp, r3
   145de:	cmp.w	fp, #0
   145e2:	beq.n	14626 <__multiply+0xb2>
   145e4:	movs	r0, #0
   145e6:	mov	r7, r9
   145e8:	mov	r6, ip
   145ea:	mov	r5, r0
   145ec:	b.n	145f0 <__multiply+0x7c>
   145ee:	mov	r6, r3
   145f0:	ldr.w	r4, [r7], #4
   145f4:	ldr	r0, [r6, #0]
   145f6:	uxth	r1, r4
   145f8:	uxth	r3, r0
   145fa:	mla	r1, fp, r1, r3
   145fe:	lsrs	r4, r4, #16
   14600:	lsrs	r0, r0, #16
   14602:	adds	r3, r1, r5
   14604:	mla	r0, fp, r4, r0
   14608:	add.w	r0, r0, r3, lsr #16
   1460c:	uxth	r1, r3
   1460e:	mov	r3, r6
   14610:	orr.w	r1, r1, r0, lsl #16
   14614:	cmp	lr, r7
   14616:	mov.w	r5, r0, lsr #16
   1461a:	str.w	r1, [r3], #4
   1461e:	bhi.n	145ee <__multiply+0x7a>
   14620:	str	r5, [r6, #4]
   14622:	ldr.w	r3, [r2, #-4]
   14626:	movs.w	fp, r3, lsr #16
   1462a:	beq.n	1466e <__multiply+0xfa>
   1462c:	ldr.w	r3, [ip]
   14630:	mov	r7, ip
   14632:	mov	r0, r3
   14634:	mov	r5, r9
   14636:	movs	r1, #0
   14638:	b.n	1463c <__multiply+0xc8>
   1463a:	mov	r7, r6
   1463c:	ldrh	r4, [r5, #0]
   1463e:	lsrs	r0, r0, #16
   14640:	mla	r0, fp, r4, r0
   14644:	add	r1, r0
   14646:	uxth	r4, r3
   14648:	mov	r6, r7
   1464a:	orr.w	r3, r4, r1, lsl #16
   1464e:	str.w	r3, [r6], #4
   14652:	ldr	r0, [r7, #4]
   14654:	ldr.w	r4, [r5], #4
   14658:	uxth	r3, r0
   1465a:	lsrs	r4, r4, #16
   1465c:	mla	r4, fp, r4, r3
   14660:	add.w	r3, r4, r1, lsr #16
   14664:	cmp	lr, r5
   14666:	mov.w	r1, r3, lsr #16
   1466a:	bhi.n	1463a <__multiply+0xc6>
   1466c:	str	r3, [r7, #4]
   1466e:	cmp	sl, r2
   14670:	add.w	ip, ip, #4
   14674:	bhi.n	145d6 <__multiply+0x62>
   14676:	ldr.w	r9, [sp, #4]
   1467a:	cmp.w	r8, #0
   1467e:	ble.n	14698 <__multiply+0x124>
   14680:	ldr.w	r3, [r9, #-4]
   14684:	sub.w	r9, r9, #4
   14688:	cbz	r3, 14692 <__multiply+0x11e>
   1468a:	b.n	14698 <__multiply+0x124>
   1468c:	ldr.w	r3, [r9, #-4]!
   14690:	cbnz	r3, 14698 <__multiply+0x124>
   14692:	subs.w	r8, r8, #1
   14696:	bne.n	1468c <__multiply+0x118>
   14698:	ldr	r0, [sp, #0]
   1469a:	str.w	r8, [r0, #16]
   1469e:	add	sp, #12
   146a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000146a4 <__pow5mult>:
   146a4:	ands.w	r3, r2, #3
   146a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146ac:	mov	r4, r2
   146ae:	mov	r7, r0
   146b0:	bne.n	14710 <__pow5mult+0x6c>
   146b2:	mov	r6, r1
   146b4:	asrs	r4, r4, #2
   146b6:	beq.n	146f2 <__pow5mult+0x4e>
   146b8:	ldr	r5, [r7, #72]	; 0x48
   146ba:	cbz	r5, 14722 <__pow5mult+0x7e>
   146bc:	lsls	r3, r4, #31
   146be:	mov.w	r8, #0
   146c2:	bmi.n	146d2 <__pow5mult+0x2e>
   146c4:	asrs	r4, r4, #1
   146c6:	beq.n	146f2 <__pow5mult+0x4e>
   146c8:	ldr	r0, [r5, #0]
   146ca:	cbz	r0, 146f8 <__pow5mult+0x54>
   146cc:	mov	r5, r0
   146ce:	lsls	r3, r4, #31
   146d0:	bpl.n	146c4 <__pow5mult+0x20>
   146d2:	mov	r2, r5
   146d4:	mov	r1, r6
   146d6:	mov	r0, r7
   146d8:	bl	14574 <__multiply>
   146dc:	cbz	r6, 1470c <__pow5mult+0x68>
   146de:	ldr	r2, [r6, #4]
   146e0:	ldr	r3, [r7, #76]	; 0x4c
   146e2:	asrs	r4, r4, #1
   146e4:	ldr.w	r1, [r3, r2, lsl #2]
   146e8:	str	r1, [r6, #0]
   146ea:	str.w	r6, [r3, r2, lsl #2]
   146ee:	mov	r6, r0
   146f0:	bne.n	146c8 <__pow5mult+0x24>
   146f2:	mov	r0, r6
   146f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146f8:	mov	r2, r5
   146fa:	mov	r1, r5
   146fc:	mov	r0, r7
   146fe:	bl	14574 <__multiply>
   14702:	str	r0, [r5, #0]
   14704:	str.w	r8, [r0]
   14708:	mov	r5, r0
   1470a:	b.n	146ce <__pow5mult+0x2a>
   1470c:	mov	r6, r0
   1470e:	b.n	146c4 <__pow5mult+0x20>
   14710:	subs	r2, r3, #1
   14712:	ldr	r5, [pc, #44]	; (14740 <__pow5mult+0x9c>)
   14714:	movs	r3, #0
   14716:	ldr.w	r2, [r5, r2, lsl #2]
   1471a:	bl	14444 <__multadd>
   1471e:	mov	r6, r0
   14720:	b.n	146b4 <__pow5mult+0x10>
   14722:	movs	r1, #1
   14724:	mov	r0, r7
   14726:	bl	143e4 <_Balloc>
   1472a:	movw	r1, #625	; 0x271
   1472e:	movs	r2, #1
   14730:	movs	r3, #0
   14732:	str	r1, [r0, #20]
   14734:	str	r2, [r0, #16]
   14736:	mov	r5, r0
   14738:	str	r0, [r7, #72]	; 0x48
   1473a:	str	r3, [r0, #0]
   1473c:	b.n	146bc <__pow5mult+0x18>
   1473e:	nop
   14740:	.word	0x000157c8

00014744 <__lshift>:
   14744:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14748:	mov	r9, r2
   1474a:	ldr	r2, [r1, #16]
   1474c:	ldr	r3, [r1, #8]
   1474e:	mov.w	r4, r9, asr #5
   14752:	add.w	r8, r4, r2
   14756:	add.w	r5, r8, #1
   1475a:	cmp	r5, r3
   1475c:	mov	r6, r1
   1475e:	mov	sl, r0
   14760:	ldr	r1, [r1, #4]
   14762:	ble.n	1476e <__lshift+0x2a>
   14764:	lsls	r3, r3, #1
   14766:	cmp	r5, r3
   14768:	add.w	r1, r1, #1
   1476c:	bgt.n	14764 <__lshift+0x20>
   1476e:	mov	r0, sl
   14770:	bl	143e4 <_Balloc>
   14774:	cmp	r4, #0
   14776:	add.w	r2, r0, #20
   1477a:	ble.n	147ee <__lshift+0xaa>
   1477c:	add.w	r3, r2, r4, lsl #2
   14780:	movs	r1, #0
   14782:	str.w	r1, [r2], #4
   14786:	cmp	r3, r2
   14788:	bne.n	14782 <__lshift+0x3e>
   1478a:	ldr	r4, [r6, #16]
   1478c:	add.w	r1, r6, #20
   14790:	ands.w	r9, r9, #31
   14794:	add.w	lr, r1, r4, lsl #2
   14798:	beq.n	147de <__lshift+0x9a>
   1479a:	rsb	r2, r9, #32
   1479e:	movs	r4, #0
   147a0:	ldr	r7, [r1, #0]
   147a2:	lsl.w	ip, r7, r9
   147a6:	orr.w	r4, ip, r4
   147aa:	mov	ip, r3
   147ac:	str.w	r4, [r3], #4
   147b0:	ldr.w	r4, [r1], #4
   147b4:	cmp	lr, r1
   147b6:	lsr.w	r4, r4, r2
   147ba:	bhi.n	147a0 <__lshift+0x5c>
   147bc:	str.w	r4, [ip, #4]
   147c0:	cbz	r4, 147c6 <__lshift+0x82>
   147c2:	add.w	r5, r8, #2
   147c6:	ldr.w	r3, [sl, #76]	; 0x4c
   147ca:	ldr	r2, [r6, #4]
   147cc:	subs	r5, #1
   147ce:	ldr.w	r1, [r3, r2, lsl #2]
   147d2:	str	r5, [r0, #16]
   147d4:	str	r1, [r6, #0]
   147d6:	str.w	r6, [r3, r2, lsl #2]
   147da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   147de:	subs	r3, #4
   147e0:	ldr.w	r2, [r1], #4
   147e4:	str.w	r2, [r3, #4]!
   147e8:	cmp	lr, r1
   147ea:	bhi.n	147e0 <__lshift+0x9c>
   147ec:	b.n	147c6 <__lshift+0x82>
   147ee:	mov	r3, r2
   147f0:	b.n	1478a <__lshift+0x46>
   147f2:	nop

000147f4 <__mcmp>:
   147f4:	ldr	r2, [r0, #16]
   147f6:	ldr	r3, [r1, #16]
   147f8:	subs	r2, r2, r3
   147fa:	bne.n	14824 <__mcmp+0x30>
   147fc:	lsls	r3, r3, #2
   147fe:	adds	r0, #20
   14800:	adds	r1, #20
   14802:	add	r1, r3
   14804:	push	{r4}
   14806:	add	r3, r0
   14808:	b.n	1480e <__mcmp+0x1a>
   1480a:	cmp	r0, r3
   1480c:	bcs.n	14828 <__mcmp+0x34>
   1480e:	ldr.w	r4, [r3, #-4]!
   14812:	ldr.w	r2, [r1, #-4]!
   14816:	cmp	r4, r2
   14818:	beq.n	1480a <__mcmp+0x16>
   1481a:	bcc.n	14830 <__mcmp+0x3c>
   1481c:	movs	r0, #1
   1481e:	ldr.w	r4, [sp], #4
   14822:	bx	lr
   14824:	mov	r0, r2
   14826:	bx	lr
   14828:	movs	r0, #0
   1482a:	ldr.w	r4, [sp], #4
   1482e:	bx	lr
   14830:	mov.w	r0, #4294967295
   14834:	b.n	1481e <__mcmp+0x2a>
   14836:	nop

00014838 <__mdiff>:
   14838:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1483c:	ldr	r3, [r1, #16]
   1483e:	mov	r7, r1
   14840:	ldr	r1, [r2, #16]
   14842:	subs	r3, r3, r1
   14844:	cmp	r3, #0
   14846:	mov	r8, r2
   14848:	bne.n	1487a <__mdiff+0x42>
   1484a:	lsls	r1, r1, #2
   1484c:	add.w	r2, r7, #20
   14850:	add.w	r5, r8, #20
   14854:	adds	r3, r2, r1
   14856:	add	r1, r5
   14858:	b.n	1485e <__mdiff+0x26>
   1485a:	cmp	r2, r3
   1485c:	bcs.n	1491c <__mdiff+0xe4>
   1485e:	ldr.w	r6, [r3, #-4]!
   14862:	ldr.w	r4, [r1, #-4]!
   14866:	cmp	r6, r4
   14868:	beq.n	1485a <__mdiff+0x22>
   1486a:	bcs.n	1492e <__mdiff+0xf6>
   1486c:	mov	r3, r7
   1486e:	mov	r4, r2
   14870:	mov	r7, r8
   14872:	mov.w	r9, #1
   14876:	mov	r8, r3
   14878:	b.n	14888 <__mdiff+0x50>
   1487a:	blt.n	14938 <__mdiff+0x100>
   1487c:	add.w	r5, r7, #20
   14880:	add.w	r4, r2, #20
   14884:	mov.w	r9, #0
   14888:	ldr	r1, [r7, #4]
   1488a:	bl	143e4 <_Balloc>
   1488e:	ldr.w	r3, [r8, #16]
   14892:	ldr	r6, [r7, #16]
   14894:	str.w	r9, [r0, #12]
   14898:	add.w	ip, r4, r3, lsl #2
   1489c:	mov	lr, r4
   1489e:	add.w	r7, r5, r6, lsl #2
   148a2:	add.w	r4, r0, #20
   148a6:	movs	r3, #0
   148a8:	ldr.w	r1, [lr], #4
   148ac:	ldr.w	r8, [r5], #4
   148b0:	uxth	r2, r1
   148b2:	uxtah	r3, r3, r8
   148b6:	lsrs	r1, r1, #16
   148b8:	subs	r2, r3, r2
   148ba:	rsb	r3, r1, r8, lsr #16
   148be:	add.w	r3, r3, r2, asr #16
   148c2:	uxth	r2, r2
   148c4:	orr.w	r2, r2, r3, lsl #16
   148c8:	cmp	ip, lr
   148ca:	str.w	r2, [r4], #4
   148ce:	mov.w	r3, r3, asr #16
   148d2:	bhi.n	148a8 <__mdiff+0x70>
   148d4:	cmp	r7, r5
   148d6:	bls.n	14908 <__mdiff+0xd0>
   148d8:	mov	ip, r4
   148da:	mov	r1, r5
   148dc:	ldr.w	lr, [r1], #4
   148e0:	uxtah	r2, r3, lr
   148e4:	asrs	r3, r2, #16
   148e6:	add.w	r3, r3, lr, lsr #16
   148ea:	uxth	r2, r2
   148ec:	orr.w	r2, r2, r3, lsl #16
   148f0:	cmp	r7, r1
   148f2:	str.w	r2, [ip], #4
   148f6:	mov.w	r3, r3, asr #16
   148fa:	bhi.n	148dc <__mdiff+0xa4>
   148fc:	mvns	r5, r5
   148fe:	add	r5, r7
   14900:	bic.w	r5, r5, #3
   14904:	adds	r5, #4
   14906:	add	r4, r5
   14908:	subs	r4, #4
   1490a:	cbnz	r2, 14916 <__mdiff+0xde>
   1490c:	ldr.w	r3, [r4, #-4]!
   14910:	subs	r6, #1
   14912:	cmp	r3, #0
   14914:	beq.n	1490c <__mdiff+0xd4>
   14916:	str	r6, [r0, #16]
   14918:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1491c:	movs	r1, #0
   1491e:	bl	143e4 <_Balloc>
   14922:	movs	r2, #1
   14924:	movs	r3, #0
   14926:	str	r2, [r0, #16]
   14928:	str	r3, [r0, #20]
   1492a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1492e:	mov	r4, r5
   14930:	mov.w	r9, #0
   14934:	mov	r5, r2
   14936:	b.n	14888 <__mdiff+0x50>
   14938:	mov	r3, r7
   1493a:	add.w	r4, r7, #20
   1493e:	add.w	r5, r8, #20
   14942:	mov	r7, r8
   14944:	mov.w	r9, #1
   14948:	mov	r8, r3
   1494a:	b.n	14888 <__mdiff+0x50>

0001494c <__d2b>:
   1494c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14950:	vmov	r6, r7, d0
   14954:	sub	sp, #12
   14956:	mov	r8, r1
   14958:	movs	r1, #1
   1495a:	mov	r4, r7
   1495c:	ubfx	r5, r7, #20, #11
   14960:	mov	r7, r2
   14962:	bl	143e4 <_Balloc>
   14966:	ubfx	r4, r4, #0, #20
   1496a:	mov	r9, r0
   1496c:	cbz	r5, 14972 <__d2b+0x26>
   1496e:	orr.w	r4, r4, #1048576	; 0x100000
   14972:	str	r4, [sp, #4]
   14974:	cbz	r6, 149be <__d2b+0x72>
   14976:	add	r0, sp, #8
   14978:	str.w	r6, [r0, #-8]!
   1497c:	bl	14504 <__lo0bits>
   14980:	cmp	r0, #0
   14982:	bne.n	149ee <__d2b+0xa2>
   14984:	ldmia.w	sp, {r2, r3}
   14988:	str.w	r2, [r9, #20]
   1498c:	cmp	r3, #0
   1498e:	ite	eq
   14990:	moveq	r1, #1
   14992:	movne	r1, #2
   14994:	str.w	r3, [r9, #24]
   14998:	str.w	r1, [r9, #16]
   1499c:	cbnz	r5, 149d6 <__d2b+0x8a>
   1499e:	add.w	r3, r9, r1, lsl #2
   149a2:	subw	r0, r0, #1074	; 0x432
   149a6:	str.w	r0, [r8]
   149aa:	ldr	r0, [r3, #16]
   149ac:	bl	144c4 <__hi0bits>
   149b0:	rsb	r0, r0, r1, lsl #5
   149b4:	str	r0, [r7, #0]
   149b6:	mov	r0, r9
   149b8:	add	sp, #12
   149ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   149be:	add	r0, sp, #4
   149c0:	bl	14504 <__lo0bits>
   149c4:	ldr	r3, [sp, #4]
   149c6:	str.w	r3, [r9, #20]
   149ca:	movs	r1, #1
   149cc:	adds	r0, #32
   149ce:	str.w	r1, [r9, #16]
   149d2:	cmp	r5, #0
   149d4:	beq.n	1499e <__d2b+0x52>
   149d6:	subw	r5, r5, #1075	; 0x433
   149da:	add	r5, r0
   149dc:	rsb	r0, r0, #53	; 0x35
   149e0:	str.w	r5, [r8]
   149e4:	str	r0, [r7, #0]
   149e6:	mov	r0, r9
   149e8:	add	sp, #12
   149ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   149ee:	ldmia.w	sp, {r2, r3}
   149f2:	rsb	r1, r0, #32
   149f6:	lsl.w	r1, r3, r1
   149fa:	orrs	r2, r1
   149fc:	lsrs	r3, r0
   149fe:	str	r3, [sp, #4]
   14a00:	str.w	r2, [r9, #20]
   14a04:	b.n	1498c <__d2b+0x40>
   14a06:	nop

00014a08 <__ssprint_r>:
   14a08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a0c:	ldr	r3, [r2, #8]
   14a0e:	sub	sp, #12
   14a10:	mov	r8, r2
   14a12:	cmp	r3, #0
   14a14:	beq.n	14afc <__ssprint_r+0xf4>
   14a16:	mov	fp, r0
   14a18:	mov.w	r9, #0
   14a1c:	ldr	r6, [r2, #0]
   14a1e:	ldr	r0, [r1, #0]
   14a20:	ldr	r3, [r1, #8]
   14a22:	mov	r5, r1
   14a24:	mov	r4, r9
   14a26:	cmp	r4, #0
   14a28:	beq.n	14ab6 <__ssprint_r+0xae>
   14a2a:	cmp	r4, r3
   14a2c:	mov	r7, r3
   14a2e:	mov	sl, r3
   14a30:	bcc.n	14ac0 <__ssprint_r+0xb8>
   14a32:	ldrh	r3, [r5, #12]
   14a34:	tst.w	r3, #1152	; 0x480
   14a38:	beq.n	14a96 <__ssprint_r+0x8e>
   14a3a:	ldr	r7, [r5, #20]
   14a3c:	ldr	r1, [r5, #16]
   14a3e:	add.w	r7, r7, r7, lsl #1
   14a42:	rsb	sl, r1, r0
   14a46:	add.w	r7, r7, r7, lsr #31
   14a4a:	adds	r0, r4, #1
   14a4c:	asrs	r7, r7, #1
   14a4e:	add	r0, sl
   14a50:	cmp	r0, r7
   14a52:	mov	r2, r7
   14a54:	itt	hi
   14a56:	movhi	r7, r0
   14a58:	movhi	r2, r7
   14a5a:	lsls	r3, r3, #21
   14a5c:	bpl.n	14ac6 <__ssprint_r+0xbe>
   14a5e:	mov	r1, r2
   14a60:	mov	r0, fp
   14a62:	bl	10930 <_malloc_r>
   14a66:	cmp	r0, #0
   14a68:	beq.n	14ada <__ssprint_r+0xd2>
   14a6a:	mov	r2, sl
   14a6c:	ldr	r1, [r5, #16]
   14a6e:	str	r0, [sp, #4]
   14a70:	bl	db90 <memcpy>
   14a74:	ldrh	r2, [r5, #12]
   14a76:	ldr	r3, [sp, #4]
   14a78:	bic.w	r2, r2, #1152	; 0x480
   14a7c:	orr.w	r2, r2, #128	; 0x80
   14a80:	strh	r2, [r5, #12]
   14a82:	rsb	r2, sl, r7
   14a86:	add.w	r0, r3, sl
   14a8a:	str	r7, [r5, #20]
   14a8c:	str	r3, [r5, #16]
   14a8e:	str	r0, [r5, #0]
   14a90:	str	r2, [r5, #8]
   14a92:	mov	r7, r4
   14a94:	mov	sl, r4
   14a96:	mov	r2, sl
   14a98:	mov	r1, r9
   14a9a:	bl	10fd4 <memmove>
   14a9e:	ldr.w	r2, [r8, #8]
   14aa2:	ldr	r3, [r5, #8]
   14aa4:	ldr	r0, [r5, #0]
   14aa6:	subs	r3, r3, r7
   14aa8:	add	r0, sl
   14aaa:	subs	r4, r2, r4
   14aac:	str	r3, [r5, #8]
   14aae:	str	r0, [r5, #0]
   14ab0:	str.w	r4, [r8, #8]
   14ab4:	cbz	r4, 14afc <__ssprint_r+0xf4>
   14ab6:	ldr.w	r9, [r6]
   14aba:	ldr	r4, [r6, #4]
   14abc:	adds	r6, #8
   14abe:	b.n	14a26 <__ssprint_r+0x1e>
   14ac0:	mov	r7, r4
   14ac2:	mov	sl, r4
   14ac4:	b.n	14a96 <__ssprint_r+0x8e>
   14ac6:	mov	r0, fp
   14ac8:	bl	11140 <_realloc_r>
   14acc:	mov	r3, r0
   14ace:	cmp	r0, #0
   14ad0:	bne.n	14a82 <__ssprint_r+0x7a>
   14ad2:	ldr	r1, [r5, #16]
   14ad4:	mov	r0, fp
   14ad6:	bl	141f8 <_free_r>
   14ada:	movs	r3, #12
   14adc:	str.w	r3, [fp]
   14ae0:	ldrh	r3, [r5, #12]
   14ae2:	movs	r2, #0
   14ae4:	orr.w	r3, r3, #64	; 0x40
   14ae8:	mov.w	r0, #4294967295
   14aec:	strh	r3, [r5, #12]
   14aee:	str.w	r2, [r8, #8]
   14af2:	str.w	r2, [r8, #4]
   14af6:	add	sp, #12
   14af8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14afc:	movs	r0, #0
   14afe:	str.w	r0, [r8, #4]
   14b02:	add	sp, #12
   14b04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014b08 <_vasnprintf_r>:
   14b08:	push	{r4, r5, r6, lr}
   14b0a:	mov	r5, r2
   14b0c:	sub	sp, #104	; 0x68
   14b0e:	ldr	r4, [r2, #0]
   14b10:	cbz	r1, 14b16 <_vasnprintf_r+0xe>
   14b12:	cmp	r4, #0
   14b14:	bne.n	14b4c <_vasnprintf_r+0x44>
   14b16:	movs	r4, #0
   14b18:	mov.w	r2, #648	; 0x288
   14b1c:	strh.w	r2, [sp, #12]
   14b20:	str	r4, [sp, #0]
   14b22:	str	r4, [sp, #16]
   14b24:	mov	r2, r3
   14b26:	movw	r6, #65535	; 0xffff
   14b2a:	ldr	r3, [sp, #120]	; 0x78
   14b2c:	str	r4, [sp, #8]
   14b2e:	mov	r1, sp
   14b30:	str	r4, [sp, #20]
   14b32:	strh.w	r6, [sp, #14]
   14b36:	bl	11880 <_svfprintf_r>
   14b3a:	cmp	r0, #0
   14b3c:	blt.n	14b62 <_vasnprintf_r+0x5a>
   14b3e:	ldr	r3, [sp, #0]
   14b40:	str	r0, [r5, #0]
   14b42:	movs	r2, #0
   14b44:	strb	r2, [r3, #0]
   14b46:	ldr	r0, [sp, #16]
   14b48:	add	sp, #104	; 0x68
   14b4a:	pop	{r4, r5, r6, pc}
   14b4c:	mov.w	r2, #1544	; 0x608
   14b50:	str	r1, [sp, #0]
   14b52:	str	r1, [sp, #16]
   14b54:	strh.w	r2, [sp, #12]
   14b58:	bge.n	14b24 <_vasnprintf_r+0x1c>
   14b5a:	movs	r3, #139	; 0x8b
   14b5c:	str	r3, [r0, #0]
   14b5e:	movs	r0, #0
   14b60:	b.n	14b48 <_vasnprintf_r+0x40>
   14b62:	movs	r0, #0
   14b64:	b.n	14b48 <_vasnprintf_r+0x40>
   14b66:	nop

00014b68 <vtable for Stream>:
	...
   14b70:	y.......m...q...
   14b80:	y...y...y...

00014b8c <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   14b94:	Q.......m.......
   14ba4:	............

00014bb0 <vtable for FsFile>:
	...
   14bb8:	Q.......m.......
   14bc8:	............

00014bd4 <vtable for File>:
	...
   14bdc:	........m.......
   14bec:	....}...........
   14bfc:	1.......}.......
   14c0c:	................
   14c1c:	............-...
   14c2c:	9...q...

00014c34 <vtable for SDFile>:
	...
   14c3c:	........m...=...
   14c4c:	....}...I.......
   14c5c:	........1.......
   14c6c:	....!...........
   14c7c:	........].......
   14c8c:	1.......

00014c94 <vtable for SDClass>:
	...
   14c9c:	....=.......1...
   14cac:	............a...

00014cbc <SGTL_ADDR>:
   14cbc:	....*...  File  
   14ccc:	  this=%x, f=%x.
   14cdc:	....   SDFile th
   14cec:	is=%x, refcount=
   14cfc:	%u..%s: %6d %4d;
   14d0c:	 %4d %4d; %4d...
   14d1c:	SD Storage %d %d
   14d2c:	 %s failed or mi
   14d3c:	ssing...SD Stora
   14d4c:	ge %d %d %s ....
   14d5c:	.Start...Stop...
   14d6c:	Reset...Now: %04
   14d7c:	d-%02d-%02d_%02d
   14d8c:	:%02d:%02d......
   14d9c:	WMXZ..../%d/%02d
   14dac:	_%02d_%02d.raw..
   14dbc:	%d %d %d %d %d %
   14dcc:	d %d....loop....
   14ddc:	MTP logger..Setu
   14dec:	p done.. Enter '
   14dfc:	s' to start, 'q'
   14e0c:	 to stop acquisi
   14e1c:	tion and 'r' to 
   14e2c:	restart MTP.sd1.

00014e3c <vtable for MTPStorage_SD>:
	...
   14e44:	q...............
   14e54:	............Q;..
   14e64:	.(..U)...)..%2..
   14e74:	.0.......)...D..
   14e84:	....9....+..IY..
   14e94:	.L...M../mtpinde
   14ea4:	x.dat...cannot o
   14eb4:	pen Index file..
   14ec4:	/...%s/%s...%d: 
   14ed4:	%d %d %d %d %d %
   14ee4:	s...%d: %d %d %d
   14ef4:	 %d %d..

00014efc <supported_op>:
   14efc:	................
   14f0c:	................
   14f1c:	........

00014f24 <propertyList>:
   14f24:	............A.D.
   14f34:	Teensy..microsof
   14f44:	t.com: 1.0;.PJRC
   14f54:	.... / MTP 1.0..
   14f64:	%x %d %d %d: ...
   14f74:	 %x.Event: .

00014f80 <supported_events>:
   14f80:	.@.@.@.@

00014f88 <SPIClass::spi1_hardware>:
   14f88:	<..@. ..........
   14f98:	.....y....=;....
   14fa8:	..............=;
   14fb8:	................
   14fc8:	 .<.............
   14fd8:	..:>?...........
   14fe8:	................
	...
   15010:	............

0001501c <SPISettings::ctar_div_table>:
   1501c:	................
   1502c:	...... .(.8.@.`.
   1503c:	................

0001504c <SPIClass::spi0_hardware>:
   1504c:	<..@............
   1505c:	.....z....'.....
   1506c:	................
   1507c:	................
   1508c:	................
   1509c:	..........-.....
   150ac:	................
   150bc:	................
   150cc:	................
   150dc:	.. .

000150e0 <SPISettings::ctar_clock_table>:
   150e0:	................
   150f0:	................
   15100:	. ....... ...0..
   15110:	. ... ...@...@..
   15120:	.P...P...`...`..
   15130:	.p...`...p..

0001513c <monthDays>:
   1513c:	............

00015148 <vtable for AudioControlSGTL5000>:
	...
   15150:	....5...U...9...
   15160:	....

00015164 <TwoWire::i2c0_hardware>:
   15164:	4..@@.....".0...
   15174:	....!./.........

00015184 <TwoWire::i2c1_hardware>:
   15184:	4..@....&:......
   15194:	..%;............

000151a4 <TwoWire::i2c2_hardware>:
   151a4:	(..@@...........
   151b4:	............J...

000151c4 <vtable for TwoWire>:
	...
   151cc:	1.......m.......
   151dc:	............EXFA
   151ec:	T...

000151f0 <vtable for SdSpiCard>:
	...
   151f8:	................
   15208:	........a.......
   15218:	................
   15228:	........9...u...
   15238:	........}.......

00015248 <vtable for SdioCard>:
	...
   15250:	....1.......I...
   15260:	........!.......
   15270:	)...I...Y...e...
   15280:	q...............
   15290:	A...............

000152a0 <usb_endpoint_config_table>:
   152a0:	........

000152a8 <usb_descriptor_list>:
   152a8:	....d...........
   152b8:	....i...........
   152c8:	........4.......
   152d8:	....x...........
   152e8:	............8...
	...
   15308:	0...1...

00015310 <digital_pin_to_info_PGM>:
   15310:	@..C@..@D..CD..@
   15320:	...C...@0..C0..@
   15330:	4..C4..@...C...@
   15340:	...C...@...C...@
   15350:	...C...@...C...@
   15360:	...C...@...C...@
   15370:	...C...@...C...@
   15380:	...C...@...C...@
   15390:	...C...@...C...@
   153a0:	...C...@...C...@
   153b0:	...C...@...C...@
   153c0:	...C...@...C...@
   153d0:	h .Ch..@...C...@
   153e0:	8..C8..@<..C<..@
   153f0:	@..C@..@H..CH..@
   15400:	L..CL..@(..C(..@
   15410:	,..C,..@` .C`..@
   15420:	d .Cd..@ ..C ..@
   15430:	$..C$..@(..C(..@
   15440:	,..C,..@D..CD..@
   15450:	p..Cp..@t..Ct..@
   15460:	h..Ch..@P..CP..@
   15470:	X..CX..@\..C\..@
   15480:	T..CT..@ ..C ..@
   15490:	$..C$..@...C...@
   154a0:	...C...@8..C8..@
   154b0:	4..C4..@0..C0..@
   154c0:	<..C<..@,..C,..@
   154d0:	( .C(..@, .C,..@
   154e0:	. .C...@. .C...@
   154f0:	. .C...@. .C...@
   15500:	. .C...@. .C...@

00015510 <vtable for usb_serial_class>:
	...
   15518:	....}...y...u...
   15528:	q...m...i...e...
   15538:	....fmodf...

00015544 <Zero>:
   15544:	........

0001554c <_global_impure_ptr>:
   1554c:	p...C...POSIX...
   1555c:	....

00015560 <zeroes.7258>:
   15560:	0000000000000000
   15570:	INF.inf.NAN.nan.
   15580:	0123456789ABCDEF
   15590:	....0123456789ab
   155a0:	cdef....(null)..

000155b0 <blanks.7257>:
   155b0:	                

000155c0 <_ctype_>:
   155c0:	.         ((((( 
   155d0:	                
   155e0:	 ...............
   155f0:	................
   15600:	..AAAAAA........
   15610:	................
   15620:	..BBBBBB........
   15630:	................
   15640:	 ...............
	...
   156c0:	....Infinity....
   156d0:	NaN.....

000156d8 <__mprec_tens>:
   156d8:	.......?......$@
   156e8:	......Y@.....@.@
   156f8:	.......@.....j.@
   15708:	.......A......cA
   15718:	.......A....e..A
   15728:	... _..B....vH7B
   15738:	......mB..@..0.B
   15748:	.......B..4&.k.C
   15758:	...7y.AC....W4vC
   15768:	..Ngm..C.=.`.X.C
   15778:	@..x...DP.....KD
   15788:	..M....D.J...-.D
   15798:	...yCx.D

000157a0 <__mprec_bigtens>:
   157a0:	...7y.AC.n.....F
   157b0:	..?..O8M2.0.Hw.Z
   157c0:	<.s..O.u

000157c8 <p05.6087>:
   157c8:	........}...

000157d4 <_init>:
   157d4:	push	{r3, r4, r5, r6, r7, lr}
   157d6:	nop
   157d8:	pop	{r3, r4, r5, r6, r7}
   157da:	pop	{r3}
   157dc:	mov	lr, r3
   157de:	bx	lr

000157e0 <__init_array_start>:
   157e0:	.word	0x000130b5

000157e4 <__frame_dummy_init_array_entry>:
   157e4:	5...............
   157f4:	............u...
   15804:	................
   15814:	........5...M...
   15824:	e...}.......-...

Disassembly of section .fini:

00015834 <_fini>:
   15834:	push	{r3, r4, r5, r6, r7, lr}
   15836:	nop
